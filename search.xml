<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot微服务框架(四)</title>
    <url>/2020/01/08/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-%E5%9B%9B/</url>
    <content><![CDATA[<h3 id="如何修改SpringBoot的默认配置"><a href="#如何修改SpringBoot的默认配置" class="headerlink" title="如何修改SpringBoot的默认配置"></a>如何修改SpringBoot的默认配置</h3><ul>
<li><p>模式：</p>
<ul>
<li>1.SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean ， @Component），如果有就用用户配置的，如果没有，才自动配置；<br>如果有些组件偶多个(viewResolver)将用户配置的和默认的组合起来；</li>
<li>2.SpringBoot中会有非常多的XXXConfigurer帮助我们进行扩展配置;</li>
<li>3.在SpringBoot中会有很多的XXXCustomizer帮助我们进行定制配置;<h3 id="SpringBoot默认使用（Tomcat）作为嵌入式的Servlet容器："><a href="#SpringBoot默认使用（Tomcat）作为嵌入式的Servlet容器：" class="headerlink" title="SpringBoot默认使用（Tomcat）作为嵌入式的Servlet容器："></a>SpringBoot默认使用（Tomcat）作为嵌入式的Servlet容器：</h3></li>
</ul>
</li>
<li><p>1.如何定制和修改Tomcat容器的相关配置</p>
<ul>
<li>a.第一种方式：修改和server有关的配置(ServerProperties)<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">server<span class="selector-class">.servlet</span>.context-path=/crud</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用的Servlet容器设置</span></span><br><span class="line">server.xxx</span><br><span class="line"><span class="comment">//Tomcat的设置</span></span><br><span class="line">server<span class="selector-class">.tomcat</span>.xxx</span><br><span class="line">server<span class="selector-class">.tomcat</span>.uri-encoding=UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure></li>
<li>b.第二种方式：编写一个 WebServerFactoryCustomizer<TomcatServletWebServerFactory>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编写一个 WebServerFactoryCustomizer：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</span></span><br><span class="line">  <span class="comment">// 向IoC容器中添加servlet容器工厂定制器 WebServerFactoryCustomizer</span></span><br><span class="line">  <span class="comment">//向IoC容器中添加servlet容器工厂定制器</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer&lt;TomcatServletWebServerFactory&gt; <span class="title">myWebServerFactoryCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> WebServerFactoryCustomizer&lt;TomcatServletWebServerFactory&gt;() &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//定制嵌入式的Sevlet容器相关规则</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(TomcatServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//设置相关配置</span></span><br><span class="line">              factory.setPort(<span class="number">8082</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>c.第三种方式：向IoC容器中添加可配置的servlet容器工厂 ConfigurableServletWebServerFactory<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyServerConfigurer</span> </span>&#123;</span><br><span class="line">  <span class="comment">//向IoC容器中添加servlet容器工厂</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  public ConfigurableServletWebServerFactory  myConfigurableServletWebServerFactory() &#123;</span><br><span class="line">    TomcatServletWebServerFactory <span class="keyword">factory</span> = <span class="keyword">new</span> TomcatServletWebServerFactory(); </span><br><span class="line">    <span class="keyword">factory</span>.setPort(<span class="number">8083</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">factory</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Web开发-注册Servlert三大组件"><a href="#Web开发-注册Servlert三大组件" class="headerlink" title="Web开发 注册Servlert三大组件"></a>Web开发 注册Servlert三大组件</h3></li>
</ul>
</li>
<li><p>注册Servlet，Filter，Listener</p>
</li>
<li><p>ServletRegisterationBear</p>
<ol>
<li>创建Servlet<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理Get请求</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">      doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理Post请求</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"Hello MyServlet!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建配置类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyservletConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注册三大组件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">"/myservletr"</span>);</span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>FilterRegisterationBean</p>
<ol>
<li>创建Filter过滤器实现javax.servlet.*;包下Filter接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyFilter process......"</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建配置类将其加载到容器中<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">  public FilterRegistrationBean my<span class="constructor">Filter()</span>&#123;</span><br><span class="line">      FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> <span class="constructor">FilterRegistrationBean()</span>;</span><br><span class="line">      filterRegistrationBean.set<span class="constructor">Filter(<span class="params">new</span> MyFilter()</span>);</span><br><span class="line">      filterRegistrationBean.set<span class="constructor">UrlPatterns(Arrays.<span class="params">asList</span>(<span class="string">"/hello"</span>,<span class="string">"/myservlet"</span>)</span>);</span><br><span class="line">      return filterRegistrationBean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>ServletListenerRegisterationBean</p>
<ol>
<li>创建监听器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//监听器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Servlet启动</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" contextInitialized web应用启动了"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Servlet销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"contextDestroyed web应用销毁了"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在配置类中将其添加到容器中<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean listenerRegistrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean(<span class="keyword">new</span> MyListener());</span><br><span class="line">        <span class="keyword">return</span> listenerRegistrationBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot帮我们在自动配置SpringMvc的时候，自动的注册了SpringMvc的前端控制器；DispatcherServlet；-自动配置类DispatcherServletAutoConfiguration"><a href="#SpringBoot帮我们在自动配置SpringMvc的时候，自动的注册了SpringMvc的前端控制器；DispatcherServlet；-自动配置类DispatcherServletAutoConfiguration" class="headerlink" title="SpringBoot帮我们在自动配置SpringMvc的时候，自动的注册了SpringMvc的前端控制器；DispatcherServlet；(自动配置类DispatcherServletAutoConfiguration)"></a>SpringBoot帮我们在自动配置SpringMvc的时候，自动的注册了SpringMvc的前端控制器；DispatcherServlet；(自动配置类DispatcherServletAutoConfiguration)</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">        proxyBeanMethods = <span class="literal">false</span></span><br><span class="line">    )</span><br><span class="line">    <span class="meta">@Conditional</span>(&#123;<span class="type">DispatcherServletAutoConfiguration</span>.<span class="type">DispatcherServletRegistrationCondition</span><span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">@ConditionalOnClass</span>(<span class="params">&#123;<span class="type">ServletRegistration</span>.class&#125;</span>)</span></span><br><span class="line"><span class="class">    <span class="title">@EnableConfigurationProperties</span>(<span class="params">&#123;<span class="type">WebMvcProperties</span>.class&#125;</span>)</span></span><br><span class="line"><span class="class">    <span class="title">@Import</span>(<span class="params">&#123;<span class="type">DispatcherServletAutoConfiguration</span>.<span class="type">DispatcherServletConfiguration</span>.class&#125;</span>)</span></span><br><span class="line"><span class="class">    <span class="title">protected</span> <span class="title">static</span> <span class="title">class</span> <span class="title">DispatcherServletRegistrationConfiguration</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="type">DispatcherServletRegistrationConfiguration</span>() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span>(</span><br><span class="line">            name = &#123;<span class="string">"dispatcherServletRegistration"</span>&#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="meta">@ConditionalOnBean</span>(</span><br><span class="line">            value = &#123;<span class="type">DispatcherServlet</span><span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">            <span class="title">name</span> </span>= &#123;<span class="string">"dispatcherServlet"</span>&#125;</span><br><span class="line">        )</span><br><span class="line">        public <span class="type">DispatcherServletRegistrationBean</span> dispatcherServletRegistration(<span class="type">DispatcherServlet</span> dispatcherServlet, <span class="type">WebMvcProperties</span> webMvcProperties, <span class="type">ObjectProvider</span>&lt;<span class="type">MultipartConfigElement</span>&gt; multipartConfig) &#123;</span><br><span class="line">            <span class="type">DispatcherServletRegistrationBean</span> registration = <span class="keyword">new</span> <span class="type">DispatcherServletRegistrationBean</span>(dispatcherServlet, webMvcProperties.getServlet().getPath());</span><br><span class="line">            <span class="comment">//确认拦截：/ 所有请求：包括静态资源文件，但不拦截jsp请求，以前/*拦截所有包括jsp请求</span></span><br><span class="line">            <span class="comment">//可通过server.servletPath来修改SpringMvc前端控制器默认拦截的请求</span></span><br><span class="line">            registration.setName(<span class="string">"dispatcherServlet"</span>);</span><br><span class="line">            registration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">            multipartConfig.ifAvailable(registration::setMultipartConfig);</span><br><span class="line">            <span class="keyword">return</span> registration;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot切换其他Servlet容器"><a href="#SpringBoot切换其他Servlet容器" class="headerlink" title="SpringBoot切换其他Servlet容器"></a>SpringBoot切换其他Servlet容器</h3></li>
</ol>
</li>
<li><p>2.SpringBoot能不能支持其他的Servlet容器；</p>
</li>
<li><p>SpringBoot默认支持：</p>
<ul>
<li>Tomcat（默认使用）<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--引入web模块--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     //引入web模块默认使用嵌入式的Tomcat做为Servlet容器；</span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>Jetty（长连接）</li>
<li>Undertow(不支持JSP)特点：高性能非阻塞,并发性能高<br>案例切换Jetty（Undertow一样的方式）<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入web模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除Tomcat容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--引入其他Servlet容器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="快捷键-ctrl-h-打开继承树"><a href="#快捷键-ctrl-h-打开继承树" class="headerlink" title="快捷键 ctrl+h 打开继承树"></a>快捷键 ctrl+h 打开继承树</h3><h3 id="嵌入式Servlet容器自动配置原理"><a href="#嵌入式Servlet容器自动配置原理" class="headerlink" title="嵌入式Servlet容器自动配置原理;"></a>嵌入式Servlet容器自动配置原理;</h3></li>
</ul>
</li>
<li><p>在Spring Boot的自动配置包下，找到web模块中的servlet文件夹下的ServletWebServerFactoryConfiguration类* </p>
</li>
<li><p>ServletWebServerFactoryConfiguration:嵌入式的servlet容器自动配置</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">@<span class="type">Configuration</span>(</span><br><span class="line">    proxyBeanMethods = false</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">ServletWebServerFactoryConfiguration</span> &#123;</span></span><br><span class="line"><span class="class">    <span class="type">ServletWebServerFactoryConfiguration</span>() &#123;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    @<span class="type">Configuration</span>(</span></span><br><span class="line"><span class="class">        <span class="title">proxyBeanMethods</span> = <span class="title">false</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    @<span class="type">ConditionalOnClass</span>(&#123;<span class="type">Servlet</span>.<span class="title">class</span>, <span class="type">Undertow</span>.<span class="title">class</span>, <span class="type">SslClientAuthMode</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">    @<span class="type">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">        <span class="title">value</span> = &#123;<span class="type">ServletWebServerFactory</span>.<span class="title">class</span>&#125;,</span></span><br><span class="line"><span class="class">        <span class="title">search</span> = <span class="type">SearchStrategy</span>.<span class="type">CURRENT</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    public static <span class="keyword">class</span> <span class="type">EmbeddedUndertow</span> &#123;</span></span><br><span class="line"><span class="class">        public <span class="type">EmbeddedUndertow</span>() &#123;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        @<span class="type">Bean</span></span></span><br><span class="line"><span class="class">        public <span class="type">UndertowServletWebServerFactory</span> undertowServletWebServerFactory(<span class="type">ObjectProvider</span>&lt;<span class="type">UndertowDeploymentInfoCustomizer</span>&gt; <span class="title">deploymentInfoCustomizers</span>, <span class="type">ObjectProvider</span>&lt;<span class="type">UndertowBuilderCustomizer</span>&gt; <span class="title">builderCustomizers</span>) &#123;</span></span><br><span class="line"><span class="class">            <span class="type">UndertowServletWebServerFactory</span> factory = new <span class="type">UndertowServletWebServerFactory</span>();</span></span><br><span class="line"><span class="class">            factory.getDeploymentInfoCustomizers().addAll((<span class="type">Collection</span>)deploymentInfoCustomizers.orderedStream().collect(<span class="type">Collectors</span>.<span class="title">toList</span>()));</span></span><br><span class="line"><span class="class">            factory.getBuilderCustomizers().addAll((<span class="type">Collection</span>)builderCustomizers.orderedStream().collect(<span class="type">Collectors</span>.<span class="title">toList</span>()));</span></span><br><span class="line"><span class="class">            return factory;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    @<span class="type">Configuration</span>(</span></span><br><span class="line"><span class="class">        <span class="title">proxyBeanMethods</span> = <span class="title">false</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    @<span class="type">ConditionalOnClass</span>(&#123;<span class="type">Servlet</span>.<span class="title">class</span>, <span class="type">Server</span>.<span class="title">class</span>, <span class="type">Loader</span>.<span class="title">class</span>, <span class="type">WebAppContext</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">    @<span class="type">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">        <span class="title">value</span> = &#123;<span class="type">ServletWebServerFactory</span>.<span class="title">class</span>&#125;,</span></span><br><span class="line"><span class="class">        <span class="title">search</span> = <span class="type">SearchStrategy</span>.<span class="type">CURRENT</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    public static <span class="keyword">class</span> <span class="type">EmbeddedJetty</span> &#123;</span></span><br><span class="line"><span class="class">        public <span class="type">EmbeddedJetty</span>() &#123;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        @<span class="type">Bean</span></span></span><br><span class="line"><span class="class">        public <span class="type">JettyServletWebServerFactory</span> <span class="type">JettyServletWebServerFactory</span>(<span class="type">ObjectProvider</span>&lt;<span class="type">JettyServerCustomizer</span>&gt; <span class="title">serverCustomizers</span>) &#123;</span></span><br><span class="line"><span class="class">            <span class="type">JettyServletWebServerFactory</span> factory = new <span class="type">JettyServletWebServerFactory</span>();</span></span><br><span class="line"><span class="class">            factory.getServerCustomizers().addAll((<span class="type">Collection</span>)serverCustomizers.orderedStream().collect(<span class="type">Collectors</span>.<span class="title">toList</span>()));</span></span><br><span class="line"><span class="class">            return factory;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    @<span class="type">Configuration</span>(</span></span><br><span class="line"><span class="class">        <span class="title">proxyBeanMethods</span> = <span class="title">false</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    @<span class="type">ConditionalOnClass</span>(&#123;<span class="type">Servlet</span>.<span class="title">class</span>, <span class="type">Tomcat</span>.<span class="title">class</span>, <span class="type">UpgradeProtocol</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">    //判断当前是否引入了<span class="type">Tomcat</span>依赖</span></span><br><span class="line"><span class="class">    @<span class="type">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">        <span class="title">value</span> = &#123;<span class="type">ServletWebServerFactory</span>.<span class="title">class</span>&#125;,</span></span><br><span class="line"><span class="class">        <span class="title">search</span> = <span class="type">SearchStrategy</span>.<span class="type">CURRENT</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    //判断当前容器没有用户自己定义<span class="type">ServletWebServerFactory</span>：嵌入式servlet容器工厂 作用：创建嵌入式的<span class="type">Servlet</span>容器</span></span><br><span class="line"><span class="class">    public static <span class="keyword">class</span> <span class="type">EmbeddedTomcat</span> &#123;</span></span><br><span class="line"><span class="class">        public <span class="type">EmbeddedTomcat</span>() &#123;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        //<span class="type">TomcatServletWebServerFactory</span> <span class="type">Tomcat</span>容器工厂</span></span><br><span class="line"><span class="class">        @<span class="type">Bean</span></span></span><br><span class="line"><span class="class">        public <span class="type">TomcatServletWebServerFactory</span> tomcatServletWebServerFactory(<span class="type">ObjectProvider</span>&lt;<span class="type">TomcatConnectorCustomizer</span>&gt; <span class="title">connectorCustomizers</span>, <span class="type">ObjectProvider</span>&lt;<span class="type">TomcatContextCustomizer</span>&gt; <span class="title">contextCustomizers</span>, <span class="type">ObjectProvider</span>&lt;<span class="type">TomcatProtocolHandlerCustomizer</span>&lt;?&gt;&gt; <span class="title">protocolHandlerCustomizers</span>) &#123;</span></span><br><span class="line"><span class="class">            <span class="type">TomcatServletWebServerFactory</span> factory = new <span class="type">TomcatServletWebServerFactory</span>();</span></span><br><span class="line"><span class="class">            factory.getTomcatConnectorCustomizers().addAll((<span class="type">Collection</span>)connectorCustomizers.orderedStream().collect(<span class="type">Collectors</span>.<span class="title">toList</span>()));</span></span><br><span class="line"><span class="class">            factory.getTomcatContextCustomizers().addAll((<span class="type">Collection</span>)contextCustomizers.orderedStream().collect(<span class="type">Collectors</span>.<span class="title">toList</span>()));</span></span><br><span class="line"><span class="class">            factory.getTomcatProtocolHandlerCustomizers().addAll((<span class="type">Collection</span>)protocolHandlerCustomizers.orderedStream().collect(<span class="type">Collectors</span>.<span class="title">toList</span>()));</span></span><br><span class="line"><span class="class">            return factory;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>一、嵌入式Servlet容器默认的配置原理<br>1、该类中有三个静态内部类（都是配置类）：<br>EmbeddedUndertow、EmbeddedJetty、EmbeddedTomcat<br>这里拿EmbeddedTomcat来举例说明<br>@ConditionalOnClass({Servlet.class, Tomcat.class, UpgradeProtocol.class})<br>判断classpath下有没有Servlet, Tomcat, UpgradeProtocol这三个类，也就是看maven有没有引入对应的依赖，如果引入了对应的依赖，下面的配置就生效。<br>2、@ConditionalOnMissingBean(<br>value = {ServletWebServerFactory.class},<br>search = SearchStrategy.CURRENT<br>)<br>如果容器中没有ServletWebServerFactory这个组件下面的配置就生效<br>点进ServletWebServerFactory看，该接口只有一个方法，前面只判断这个类型的组件有没有在容器中，而该类型又只有一个方法，说明最终Spring Boot会调用该接口实现类中的getWebServer方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取嵌入式Servlet工厂</span></span><br><span class="line">  <span class="meta">@FunctionalInterface</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletWebServerFactory</span> </span>&#123;</span><br><span class="line">      <span class="function">WebServer <span class="title">getWebServer</span><span class="params">(ServletContextInitializer... initializers)</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>tomcat</li>
<li>Jetty（长连接）</li>
<li>Undertow(不支持JSP)特点：高性能非阻塞,并发性能高 </li>
</ul>
<p>3、查看ServletWebServerFactory接口的实现，有三个很面熟的实现类，就是上面ServletWebServerFactoryConfiguration类中要往容器中添加的组件<br>4、进入TomcatServletWebServerFactory类中查看getWebServer方法。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public WebServer get<span class="constructor">WebServer(ServletContextInitializer<span class="operator">...</span> <span class="params">initializers</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (this.disableMBeanRegistry) &#123;</span><br><span class="line">          <span class="module-access"><span class="module"><span class="identifier">Registry</span>.</span></span>disable<span class="constructor">Registry()</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//创建一个Tomcat</span></span><br><span class="line">      Tomcat tomcat = <span class="keyword">new</span> <span class="constructor">Tomcat()</span>;</span><br><span class="line">      File baseDir = this.baseDirectory != null ? this.baseDirectory : this.create<span class="constructor">TempDir(<span class="string">"tomcat"</span>)</span>;</span><br><span class="line">      <span class="comment">//配置Tomcat环节</span></span><br><span class="line">      tomcat.set<span class="constructor">BaseDir(<span class="params">baseDir</span>.<span class="params">getAbsolutePath</span>()</span>);</span><br><span class="line">      Connector connector = <span class="keyword">new</span> <span class="constructor">Connector(<span class="params">this</span>.<span class="params">protocol</span>)</span>;</span><br><span class="line">      connector.set<span class="constructor">ThrowOnFailure(<span class="params">true</span>)</span>;</span><br><span class="line">      tomcat.get<span class="constructor">Service()</span>.add<span class="constructor">Connector(<span class="params">connector</span>)</span>;</span><br><span class="line">      this.customize<span class="constructor">Connector(<span class="params">connector</span>)</span>;</span><br><span class="line">      tomcat.set<span class="constructor">Connector(<span class="params">connector</span>)</span>;</span><br><span class="line">      tomcat.get<span class="constructor">Host()</span>.set<span class="constructor">AutoDeploy(<span class="params">false</span>)</span>;</span><br><span class="line">      this.configure<span class="constructor">Engine(<span class="params">tomcat</span>.<span class="params">getEngine</span>()</span>);</span><br><span class="line">      Iterator var5 = this.additionalTomcatConnectors.iterator<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(var5.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">          Connector additionalConnector = (Connector)var5.next<span class="literal">()</span>;</span><br><span class="line">          tomcat.get<span class="constructor">Service()</span>.add<span class="constructor">Connector(<span class="params">additionalConnector</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      this.prepare<span class="constructor">Context(<span class="params">tomcat</span>.<span class="params">getHost</span>()</span>, initializers);</span><br><span class="line">      <span class="comment">//将配置好的Tomcat传入进来,并且启动Tomcat服务器 返回TomcatWebServer</span></span><br><span class="line">      return this.get<span class="constructor">TomcatWebServer(<span class="params">tomcat</span>)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>首先会创建一个Tomcat对象，给其设置连接器等一些配置<br>最终还会调用getTomcatWebServer方法<br>this.getTomcatWebServer(tomcat);<br>–&gt;return new TomcatWebServer(tomcat, this.getPort() &gt;= 0);<br>端口号默认是8080所以上面传过去的是true，进入TomcatWebServer的构造方法TomcatWebServer中，在构造方法中又调用了this.initialize();进入initialize方法，该方法就会启动tomcat。(所以这一切都是建立在创建好嵌入式Servlet容器之后)</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">  protected TomcatWebServer get<span class="constructor">TomcatWebServer(Tomcat <span class="params">tomcat</span>)</span> &#123;</span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">TomcatWebServer(<span class="params">tomcat</span>, <span class="params">this</span>.<span class="params">getPort</span>()</span> &gt;= <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>对嵌入式容器的修改</p>
<ul>
<li><p>方法1：修改application配置<br>从官方文档可以看出支持的配置有如下所示，所以要修改servlet容器配置，直接在application配置文件修改即可：</p>
<p>网络设置: 监听端口(server.port)、服务器地址(server.address)等等<br>Session设置: 会话是否持久 (server.servlet.session.persistent),会话超时(server.servlet.session.timeout), 会话数据的位置 (server.servlet.session.store-dir), 会话对应的cookie配置 (server.servlet.session.cookie.*) 等等<br>错误管理: 错误页面位置 (server.error.path)等等<br>SSL设置：具体参考Configure SSL<br>HTTP compression：具体参考Enable HTTP Response Compression<br>application文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ServerProperties</span> ， TomcatWebServer</span><br></pre></td></tr></table></figure></li>
<li><p>方法2：自定义WebServerFactoryCustomizer定制器类<br>从文档里还找到了通过新建自定义的WebServerFactoryCustomizer类来实现属性配置修改，WebServerFactoryCustomizer也就是一种定制器类：</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>ServerProperties也是定制器</li>
<li>注册后置处理器webServerFactoryCustomizerBeanPostProcessor<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ServletRequest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span>(<span class="title">type</span> </span>= Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties<span class="class">.<span class="keyword">class</span>)//使<span class="title">ServerProperties</span>配置类起效</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedTomcat</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedJetty</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedUndertow</span>.<span class="title">class</span> &#125;)//@<span class="title">Import</span>是<span class="title">Spring</span>框架的注解，作用是将对应组件加载到容器，这里关键的是<span class="title">BeanPostProcessorsRegistrar</span>，一个后置处理类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletWebServerFactoryCustomizer <span class="title">servletWebServerFactoryCustomizer</span><span class="params">(ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServletWebServerFactoryCustomizer(serverProperties);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tomcat的定制器类，起作用的条件是有Tomcat对应jar有引入项目的情况，默认是引入的，所以会执行Tomcat的servletWeb工厂定制类</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(name = <span class="string">"org.apache.catalina.startup.Tomcat"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TomcatServletWebServerFactoryCustomizer <span class="title">tomcatServletWebServerFactoryCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TomcatServletWebServerFactoryCustomizer(serverProperties);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ....</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//注册重要的后置处理器类WebServerFactoryCustomizerBeanPostProcessor，在ioc容器启动的时候会调用后置处理器</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorsRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置ConfigurableListableBeanFactory</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = (ConfigurableListableBeanFactory) beanFactory;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">        BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      registerSyntheticBeanIfMissing(registry, <span class="string">"webServerFactoryCustomizerBeanPostProcessor"</span>,</span><br><span class="line">          WebServerFactoryCustomizerBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      registerSyntheticBeanIfMissing(registry, <span class="string">"errorPageRegistrarBeanPostProcessor"</span>,</span><br><span class="line">          ErrorPageRegistrarBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerSyntheticBeanIfMissing</span><span class="params">(BeanDefinitionRegistry registry, String name, Class&lt;?&gt; beanClass)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (ObjectUtils.isEmpty(<span class="keyword">this</span>.beanFactory.getBeanNamesForType(beanClass, <span class="keyword">true</span>, <span class="keyword">false</span>))) &#123;</span><br><span class="line">        RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(beanClass);</span><br><span class="line">        beanDefinition.setSynthetic(<span class="keyword">true</span>);</span><br><span class="line">        registry.registerBeanDefinition(name, beanDefinition);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Springboot的ServletWebServerFactoryAutoConfiguration是嵌入式Servlet容器的自动配置类，这个类的主要作用是创建TomcatServletWebServerFactory工厂类，创建定制器类TomcatServletWebServerFactoryCustomizer，创建FilterRegistrationBean类，同时很关键的一步是注册后置处理器webServerFactoryCustomizerBeanPostProcessor，然后Springboot的Application类一启动，就会执行run方法，run经过一系列调用会通过ServletWebServerApplicationContext的onRefresh方法创建ioc容器，然后通过createWebServer方法，createWebServer方法会去ioc容器里扫描是否有对应的ServletWebServerFactory工厂类(TomcatServletWebServerFactory是其中一种)，扫描得到，就会触发webServerFactoryCustomizerBeanPostProcessor后置处理器类，这个处理器类会获取TomcatServletWebServerFactoryCustomizer定制器，并调用customize方法进行定制，这时候工厂类起作用，调用getWebServer方法进行Tomcat属性配置和引擎设置等等，再创建TomcatWebServer启动Tomcat容器</li>
</ul>
<ul>
<li>步骤：<ul>
<li>SpringBoot根据导入的后依赖情况该容器中添加相应的组件<br>ServletWebServerFactoryConfiguration【TomcatServletWebServerFactory】</li>
<li>容器中某个组件要创建对象就会惊动后处理器；(ServletWebServerFactoryAutoConfiguration类中)<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static <span class="keyword">class</span> BeanPostProcessorsRegistrar implements ImportBeanDefinitionRegistrar, BeanFactoryAware &#123;</span><br><span class="line">    <span class="keyword">private</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">BeanPostProcessorsRegistrar()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void set<span class="constructor">BeanFactory(BeanFactory <span class="params">beanFactory</span>)</span> throws BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanFactory instanceof ConfigurableListableBeanFactory) &#123;</span><br><span class="line">            this.beanFactory = (ConfigurableListableBeanFactory)beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void register<span class="constructor">BeanDefinitions(AnnotationMetadata <span class="params">importingClassMetadata</span>, BeanDefinitionRegistry <span class="params">registry</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.beanFactory != null) &#123;</span><br><span class="line">            this.register<span class="constructor">SyntheticBeanIfMissing(<span class="params">registry</span>, <span class="string">"webServerFactoryCustomizerBeanPostProcessor"</span>, WebServerFactoryCustomizerBeanPostProcessor.<span class="params">class</span>)</span>;</span><br><span class="line">            this.register<span class="constructor">SyntheticBeanIfMissing(<span class="params">registry</span>, <span class="string">"errorPageRegistrarBeanPostProcessor"</span>, ErrorPageRegistrarBeanPostProcessor.<span class="params">class</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> void register<span class="constructor">SyntheticBeanIfMissing(BeanDefinitionRegistry <span class="params">registry</span>, String <span class="params">name</span>, Class&lt;?&gt; <span class="params">beanClass</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">ObjectUtils</span>.</span></span>is<span class="constructor">Empty(<span class="params">this</span>.<span class="params">beanFactory</span>.<span class="params">getBeanNamesForType</span>(<span class="params">beanClass</span>, <span class="params">true</span>, <span class="params">false</span>)</span>)) &#123;</span><br><span class="line">            RootBeanDefinition beanDefinition = <span class="keyword">new</span> <span class="constructor">RootBeanDefinition(<span class="params">beanClass</span>)</span>;</span><br><span class="line">            beanDefinition.set<span class="constructor">Synthetic(<span class="params">true</span>)</span>;</span><br><span class="line">            registry.register<span class="constructor">BeanDefinition(<span class="params">name</span>, <span class="params">beanDefinition</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>只要是嵌入式的Servlet容器工厂，后置处理器就工作</li>
<li>后置处理器，从容器中获取所有的定制器</li>
</ul>
</li>
</ul>
<h3 id="嵌入式Servlet启动原理；"><a href="#嵌入式Servlet启动原理；" class="headerlink" title="嵌入式Servlet启动原理；"></a>嵌入式Servlet启动原理；</h3><ul>
<li>什么时候创建嵌入式的servlet容器工厂？什么时候获取嵌入式的servlet容器并启动Tomcat;</li>
<li>获取嵌入式的Servlet容器工厂</li>
</ul>
<ol>
<li>SpringBoot应用启动运行run方法</li>
<li>refreshContext(context);SpringBoot刷新Ioc容器【创建IOC容器，并初始化容器，创建容器中的每一个组件】；如果是web应用创建  AnnotaionConfigEmbeddedWebApplicationContext;否则创建AnnotationConfigApplicationContext</li>
<li>refresh(context);刷新刚才创建好的IOC容器；</li>
<li>onRefresh();webIOC容器重写onRefresh()方法</li>
<li>webioc容器会创建嵌入式的Servlet容器；createServletContainer(); </li>
<li>获取嵌入式容器工厂    TomcatServletContainerFactory 创建对象，后置处理器一看是这个对象，就获取所有的的定制器来先定制servlet容器的相关配置</li>
<li>使用容器工厂获取嵌入式的Servlet容器 触发后处理器BeanPostProcessorsRegistrar</li>
<li>嵌入式的Servlet容器创建对象并启动Servlet容器<br>先启动嵌入式的Servlet容器，再将IOC容器中剩下没有创建出的对象获取出来；<br>Ioc容器启动创建嵌入式的Servlet容器<h3 id="使用外置的Servlet容器"><a href="#使用外置的Servlet容器" class="headerlink" title="使用外置的Servlet容器"></a>使用外置的Servlet容器</h3></li>
</ol>
<ul>
<li>外置的Servlet容器：外面安装的Tomcat–应用war包方式打包<ul>
<li>创建步骤：<ol>
<li>必须创建一个war项目(利用idea创建好目录结构)</li>
<li>在pom文件中将嵌入式的Tomcat指定为provided；<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>必须编写一个SpringBootServletInitializer的子类，并调用configure()方法<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="type">SpringApplicationBuilder</span> configure(<span class="type">SpringApplicationBuilder</span> application) &#123;</span><br><span class="line">    <span class="comment">//传入SpringBoot应用的主程序</span></span><br><span class="line">    <span class="keyword">return</span> application.sources(<span class="type">DemoWarApplication</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务器就可以使用<h4 id="使用SpringBoot创建向导快速创建（外置的Servlet容器）"><a href="#使用SpringBoot创建向导快速创建（外置的Servlet容器）" class="headerlink" title="使用SpringBoot创建向导快速创建（外置的Servlet容器）"></a>使用SpringBoot创建向导快速创建（外置的Servlet容器）</h4></li>
</ol>
</li>
</ul>
</li>
</ul>
<ol>
<li>File –》project–》Spring initializr</li>
<li>在packing中选择war包方式（默认jar）下一步创建项目</li>
<li>在Project structure下选择Models–》选中此项目–》web–》<ol start="4">
<li>在web Resource Directories下添加路径如“G:\IDEA\Maven-SpringBoot\demo-war\src\main\webapp” 自动创建此文件夹</li>
<li>创建web.xml文件 在Demployment Descriptors 下添加web.xml文件 路径“G:\IDEA\Maven-SpringBoot\demo-war\src\main\webapp\WEB-INF\web.xml”即可；</li>
</ol>
</li>
</ol>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>jar包:执行SpringBoot主类的main方法，启动IOC容器，创建嵌入式的Servlet容器；<br>war包；启动服务器，服务器启动SpringBoot应用【SpringBootServletinitializer】，启动IOC容器；</p>
<ul>
<li><p>规则</p>
<ul>
<li><p>1.服务器启动(web应用启动)会创建当前web应用里面每一个jar包里面ServletContainerIntialiservlet.Servletzer实例；</p>
</li>
<li><p>2.ServletContainitializer的实现类放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainitializer的文件，内容是ServletContainitializer的实现类全类名</p>
</li>
<li><p>3.还可以使用@HandlesTypes，在应用启动类的时候加载我们感兴趣的类；</p>
</li>
<li><p>流程：</p>
<ul>
<li>1.启动Tomcat</li>
<li>2.org\springframework\spring-web\5.2.2.RELEASE\spring-web-5.2.2.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer<br>Spring的web模块里面有这个文件，其内容就是“org.springframework.web.SpringServletContainerInitializer”</li>
<li>3.SpringServletContainerInitializer将@HandlesTypes({WebApplicationInitializer.class})标注的所有这个类型的类都是传入到onStarup方法 Set&lt;Class&lt;?&gt;&gt;集合里面（不是接口类，不是抽象类），为WebApplicationInitializer这个类型的类创建实例<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">HandlesTypes(&#123;WebApplicationInitializer.<span class="params">class</span>&#125;)</span></span><br><span class="line">public <span class="keyword">class</span> SpringServletContainerInitializer implements ServletContainerInitializer &#123;</span><br><span class="line">    public <span class="constructor">SpringServletContainerInitializer()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void on<span class="constructor">Startup(@Nullable Set&lt;Class&lt;?&gt;&gt; <span class="params">webAppInitializerClasses</span>, ServletContext <span class="params">servletContext</span>)</span> throws ServletException &#123;</span><br><span class="line">        List&lt;WebApplicationInitializer&gt; initializers = <span class="keyword">new</span> <span class="constructor">LinkedList()</span>;</span><br><span class="line">        Iterator var4;</span><br><span class="line">        <span class="keyword">if</span> (webAppInitializerClasses != null) &#123;</span><br><span class="line">            var4 = webAppInitializerClasses.iterator<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var4.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">                Class&lt;?&gt; waiClass = (Class)var4.next<span class="literal">()</span>;</span><br><span class="line">                <span class="keyword">if</span> (!waiClass.is<span class="constructor">Interface()</span><span class="operator"> &amp;&amp; </span>!<span class="module-access"><span class="module"><span class="identifier">Modifier</span>.</span></span>is<span class="constructor">Abstract(<span class="params">waiClass</span>.<span class="params">getModifiers</span>()</span>)<span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">WebApplicationInitializer</span>.</span></span><span class="keyword">class</span>.is<span class="constructor">AssignableFrom(<span class="params">waiClass</span>)</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        initializers.add((WebApplicationInitializer)<span class="module-access"><span class="module"><span class="identifier">ReflectionUtils</span>.</span></span>accessible<span class="constructor">Constructor(<span class="params">waiClass</span>, <span class="params">new</span> Class[0])</span>.<span class="keyword">new</span><span class="constructor">Instance()</span>);</span><br><span class="line">                    &#125; catch (Throwable var7) &#123;</span><br><span class="line">                        throw <span class="keyword">new</span> <span class="constructor">ServletException(<span class="string">"Failed to instantiate WebApplicationInitializer class"</span>, <span class="params">var7</span>)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (initializers.is<span class="constructor">Empty()</span>) &#123;</span><br><span class="line">            servletContext.log(<span class="string">"No Spring WebApplicationInitializer types detected on classpath"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            servletContext.log(initializers.size<span class="literal">()</span> + <span class="string">" Spring WebApplicationInitializers detected on classpath"</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">AnnotationAwareOrderComparator</span>.</span></span>sort(initializers);</span><br><span class="line">            var4 = initializers.iterator<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var4.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">                WebApplicationInitializer initializer = (WebApplicationInitializer)var4.next<span class="literal">()</span>;</span><br><span class="line">                initializer.on<span class="constructor">Startup(<span class="params">servletContext</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>4.每一个 WebApplicationInitializer都调用自己的onStartup()方法<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>WebApplicationInitializer &#123;</span><br><span class="line">    void onStartup(ServletContext var1) throws ServletException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>5.相当于我们的SpringBootServletInitializer(WebApplicationInitializer的实现类)的类会被创建对象，并执行onStartup方法 .</li>
<li>6.SpringBootServletInitializer实例 执行onStartup的时候会createRootApplicationContext；创建容器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootServletInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.logger = LogFactory.getLog(<span class="keyword">this</span>.getClass());</span><br><span class="line">    WebApplicationContext rootAppContext = <span class="keyword">this</span>.createRootApplicationContext(servletContext);</span><br><span class="line">    <span class="keyword">if</span> (rootAppContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        servletContext.addListener(<span class="keyword">new</span> ContextLoaderListener(rootAppContext) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.debug(<span class="string">"No ContextLoaderListener registered, as createRootApplicationContext() did not return an application context"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>7.创建容器方法<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public abstract <span class="keyword">class</span> SpringBootServletInitializer implements WebApplicationInitializer &#123;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> protected WebApplicationContext create<span class="constructor">RootApplicationContext(ServletContext <span class="params">servletContext</span>)</span> &#123;</span><br><span class="line">   <span class="comment">//创建SpringApplicationBuilder(Spring应用的构建器)</span></span><br><span class="line">     SpringApplicationBuilder builder = this.create<span class="constructor">SpringApplicationBuilder()</span>;</span><br><span class="line">     builder.main(this.get<span class="constructor">Class()</span>);</span><br><span class="line">     ApplicationContext parent = this.get<span class="constructor">ExistingRootWebApplicationContext(<span class="params">servletContext</span>)</span>;</span><br><span class="line">     <span class="keyword">if</span> (parent != null) &#123;</span><br><span class="line">         this.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</span><br><span class="line">         servletContext.set<span class="constructor">Attribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)</span>null);</span><br><span class="line">         builder.initializers(<span class="keyword">new</span> ApplicationContextInitializer<span class="literal">[]</span>&#123;<span class="keyword">new</span> <span class="constructor">ParentContextApplicationContextInitializer(<span class="params">parent</span>)</span>&#125;);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     builder.initializers(<span class="keyword">new</span> ApplicationContextInitializer<span class="literal">[]</span>&#123;<span class="keyword">new</span> <span class="constructor">ServletContextApplicationContextInitializer(<span class="params">servletContext</span>)</span>&#125;);</span><br><span class="line">     builder.context<span class="constructor">Class(AnnotationConfigServletWebServerApplicationContext.<span class="params">class</span>)</span>;</span><br><span class="line">     <span class="comment">//调用configure方法，子类重写了这个方法，将springBoot的主程序类传了进来</span></span><br><span class="line">     builder = this.configure(builder);</span><br><span class="line">     builder.listeners(<span class="keyword">new</span> ApplicationListener<span class="literal">[]</span>&#123;<span class="keyword">new</span> SpringBootServletInitializer.<span class="constructor">WebEnvironmentPropertySourceInitializer(<span class="params">servletContext</span>)</span>&#125;);</span><br><span class="line">     <span class="comment">//使用builder创建一个Spring应用</span></span><br><span class="line">     SpringApplication application = builder.build<span class="literal">()</span>;</span><br><span class="line">     <span class="keyword">if</span> (application.get<span class="constructor">AllSources()</span>.is<span class="constructor">Empty()</span><span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">MergedAnnotations</span>.</span></span>from(this.get<span class="constructor">Class()</span>, SearchStrategy.TYPE_HIERARCHY).is<span class="constructor">Present(Configuration.<span class="params">class</span>)</span>) &#123;</span><br><span class="line">         application.add<span class="constructor">PrimarySources(Collections.<span class="params">singleton</span>(<span class="params">this</span>.<span class="params">getClass</span>()</span>));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">Assert</span>.</span></span>state(!application.get<span class="constructor">AllSources()</span>.is<span class="constructor">Empty()</span>, <span class="string">"No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation"</span>);</span><br><span class="line">     <span class="keyword">if</span> (this.registerErrorPageFilter) &#123;</span><br><span class="line">         application.add<span class="constructor">PrimarySources(Collections.<span class="params">singleton</span>(ErrorPageFilterConfiguration.<span class="params">class</span>)</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//启动Spring应用</span></span><br><span class="line">     return this.run(application);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class="line">   return builder;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.<span class="type">SpringApplicationBuilder</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.support.<span class="type">SpringBootServletInitializer</span>;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//重写了Configure方法，把SpringBoot的主程序类加了进去</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="type">SpringApplicationBuilder</span> configure(<span class="type">SpringApplicationBuilder</span> application) &#123;</span><br><span class="line">    <span class="keyword">return</span> application.sources(<span class="type">DemoWarApplication</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>8.Spring的应用就启动并创建IOC容器<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public ConfigurableApplicationContext run(String... args) &#123;</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> <span class="constructor">StopWatch()</span>;</span><br><span class="line">    stopWatch.start<span class="literal">()</span>;</span><br><span class="line">    ConfigurableApplicationContext context = null;</span><br><span class="line">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> <span class="constructor">ArrayList()</span>;</span><br><span class="line">    this.configure<span class="constructor">HeadlessProperty()</span>;</span><br><span class="line">    SpringApplicationRunListeners listeners = this.get<span class="constructor">RunListeners(<span class="params">args</span>)</span>;</span><br><span class="line">    listeners.starting<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">    Collection exceptionReporters;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ApplicationArguments applicationArguments = <span class="keyword">new</span> <span class="constructor">DefaultApplicationArguments(<span class="params">args</span>)</span>;</span><br><span class="line">        ConfigurableEnvironment environment = this.prepare<span class="constructor">Environment(<span class="params">listeners</span>, <span class="params">applicationArguments</span>)</span>;</span><br><span class="line">        this.configure<span class="constructor">IgnoreBeanInfo(<span class="params">environment</span>)</span>;</span><br><span class="line">        Banner printedBanner = this.print<span class="constructor">Banner(<span class="params">environment</span>)</span>;</span><br><span class="line">        context = this.create<span class="constructor">ApplicationContext()</span>;</span><br><span class="line">        exceptionReporters = this.get<span class="constructor">SpringFactoriesInstances(SpringBootExceptionReporter.<span class="params">class</span>, <span class="params">new</span> Class[]&#123;ConfigurableApplicationContext.<span class="params">class</span>&#125;, <span class="params">context</span>)</span>;</span><br><span class="line">        this.prepare<span class="constructor">Context(<span class="params">context</span>, <span class="params">environment</span>, <span class="params">listeners</span>, <span class="params">applicationArguments</span>, <span class="params">printedBanner</span>)</span>;</span><br><span class="line">        <span class="comment">//刷新IOC容器</span></span><br><span class="line">        this.refresh<span class="constructor">Context(<span class="params">context</span>)</span>;</span><br><span class="line">        this.after<span class="constructor">Refresh(<span class="params">context</span>, <span class="params">applicationArguments</span>)</span>;</span><br><span class="line">        stopWatch.stop<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">if</span> (this.logStartupInfo) &#123;</span><br><span class="line">            (<span class="keyword">new</span> <span class="constructor">StartupInfoLogger(<span class="params">this</span>.<span class="params">mainApplicationClass</span>)</span>).log<span class="constructor">Started(<span class="params">this</span>.<span class="params">getApplicationLog</span>()</span>, stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        listeners.started(context);</span><br><span class="line">        this.call<span class="constructor">Runners(<span class="params">context</span>, <span class="params">applicationArguments</span>)</span>;</span><br><span class="line">    &#125; catch (Throwable var10) &#123;</span><br><span class="line">        this.handle<span class="constructor">RunFailure(<span class="params">context</span>, <span class="params">var10</span>, <span class="params">exceptionReporters</span>, <span class="params">listeners</span>)</span>;</span><br><span class="line">        throw <span class="keyword">new</span> <span class="constructor">IllegalStateException(<span class="params">var10</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        listeners.running(context);</span><br><span class="line">        return context;</span><br><span class="line">    &#125; catch (Throwable var9) &#123;</span><br><span class="line">        this.handle<span class="constructor">RunFailure(<span class="params">context</span>, <span class="params">var9</span>, <span class="params">exceptionReporters</span>, (SpringApplicationRunListeners)</span>null);</span><br><span class="line">        throw <span class="keyword">new</span> <span class="constructor">IllegalStateException(<span class="params">var9</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>先启动Sevlet容器，在启动SpringBoot应用(与之相反)</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot微服务框架(三)</title>
    <url>/2020/01/04/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-%E4%B8%89/</url>
    <content><![CDATA[<h3 id="配置debug-true，控制台打印自动配置报告"><a href="#配置debug-true，控制台打印自动配置报告" class="headerlink" title="配置debug=true，控制台打印自动配置报告"></a>配置debug=true，控制台打印自动配置报告</h3><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h4><table>
<thead>
<tr>
<th>日志门面(日志的抽象层)</th>
<th align="center">日志实现</th>
</tr>
</thead>
<tbody><tr>
<td>slf4j</td>
<td align="center">Log4j jul(java.util.logging) log4j2 logback</td>
</tr>
</tbody></table>
<ul>
<li>springBoot底层是Spring框架，Spring默认的是JCL(commons-loggin.jar );</li>
<li>springBoot选用slf4j和logback</li>
</ul>
<h3 id="slf4j的使用"><a href="#slf4j的使用" class="headerlink" title="slf4j的使用"></a>slf4j的使用</h3><ul>
<li>开发的时候，日志方法的调用，不应该直接调用日志的实现类，<br>而是调用日志抽象层里面的方法;</li>
</ul>
<ol>
<li>导包slf4j的jar包和logback实现的jar包；<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Main &#123;</span><br><span class="line">   final Logger logger = <span class="module-access"><span class="module"><span class="identifier">LoggerFactory</span>.</span></span>get<span class="constructor">Logger(<span class="params">getClass</span>()</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 日志操作对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Logger logger = <span class="module-access"><span class="module"><span class="identifier">LoggerFactory</span>.</span></span>get<span class="constructor">Logger(CommonController.<span class="params">class</span>)</span>;</span><br></pre></td></tr></table></figure>
图示:<br><img src="http://www.slf4j.org/images/concrete-bindings.png" alt="slf4j"></li>
</ol>
<ul>
<li>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件；</li>
<li>遗留问题<ul>
<li>SpringBoot(slf4j+logback)</li>
<li>Spring(commons-logging)</li>
<li>Hibernate(jboss-logging).等</li>
</ul>
</li>
</ul>
<ul>
<li>统一日志记录，即使是别的框架和我一起使用slf4j+logback进行输出<br>图示:<br><img src="http://www.slf4j.org/images/legacy.png" alt="统一日志记录"><h5 id="如何在系统中所有的日志都统一到slf4j；"><a href="#如何在系统中所有的日志都统一到slf4j；" class="headerlink" title="如何在系统中所有的日志都统一到slf4j；"></a>如何在系统中所有的日志都统一到slf4j；</h5><ul>
<li>1.将系统中其他的日志框架先排除；</li>
<li>2.用中间包类替换原有的日志框架；</li>
<li>3.我们导入slf4j其他的实现<h3 id="springBoot日志关系"><a href="#springBoot日志关系" class="headerlink" title="springBoot日志关系"></a>springBoot日志关系</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li>springBoot使用他来做日志功能：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>总结：<ul>
<li>1.SpringBoot底层也是使用slf4j+logback的方式记录日志</li>
<li>2.SpringBoot也把替他的日志都替换成了slf4j</li>
<li>3.中间替换包？<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jul-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>如果我们要引入其他框架？一定要把这个框架的默认依赖移除掉<br>Spring框架日志文件（commons-logging）<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>注意：SpringBoot能自动适配所有的日志，而且底层使用slfj+logback的方式记录日志，引入其他框架的时候，只需要把这个框架的依赖日志排除</li>
<li>加上Log4j2日志框架依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.zhao;</span><br><span class="line"> <span class="keyword">import</span> org.junit.jupiter.api.<span class="type">Test</span>;</span><br><span class="line"> <span class="keyword">import</span> org.junit.runner.<span class="type">RunWith</span>;</span><br><span class="line"> <span class="keyword">import</span> org.slf4j.<span class="type">Logger</span>;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.boot.test.context.<span class="type">SpringBootTest</span>;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.test.context.junit4.<span class="type">SpringRunner</span>;</span><br><span class="line"> <span class="keyword">import</span> org.slf4j.<span class="type">LoggerFactory</span>;</span><br><span class="line"> &lt;!-- 注意：</span><br><span class="line"> 添加注解：<span class="meta">@RunWith</span>(<span class="type">SpringRunner</span><span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"> <span class="title">导入的包：org</span>.<span class="title">springframework</span>.<span class="title">test</span>.<span class="title">context</span>.<span class="title">junit4</span>.<span class="title">SpringRunner</span></span>;</span><br><span class="line"> 添加记录器工厂  <span class="type">LoggerFactory</span> </span><br><span class="line"> 导入的包：org.slf4j.<span class="type">LoggerFactory</span>;--&gt;</span><br><span class="line"> <span class="meta">@RunWith</span>(<span class="type">SpringRunner</span><span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"> <span class="title">@SpringBootTest</span></span></span><br><span class="line"><span class="class"> <span class="title">class</span> <span class="title">DemoTest03ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//记录器</span></span><br><span class="line">	<span class="keyword">final</span> <span class="type">Logger</span> logger = <span class="type">LoggerFactory</span>.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	void contextLoads() &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//日志级别</span></span><br><span class="line">		<span class="comment">//由高到底 trace&lt;debug&lt;info&lt;wran&lt;error</span></span><br><span class="line"></span><br><span class="line">		logger.trace(<span class="string">"这是trace日志。。。。"</span>);</span><br><span class="line">		logger.debug(<span class="string">"这是debug调试日志。。。。"</span>);</span><br><span class="line">		logger.info(<span class="string">"这是info日志。。。。。"</span>);</span><br><span class="line">		logger.warn(<span class="string">"这是警告wran日志。。。。"</span>);</span><br><span class="line">		<span class="comment">//SpringBoot默认Info级别</span></span><br><span class="line">		<span class="comment">//可以调正输出的日志级别：日志就只会在这个级别以后的级别高级别生效</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 *trace：追踪，就是程序推进一下，可以写个trace输出</span></span><br><span class="line"><span class="comment">		 *debug：调试，一般作为最低级别，trace基本不用。</span></span><br><span class="line"><span class="comment">		 *info：输出重要的信息，使用较多</span></span><br><span class="line"><span class="comment">		 *warn：警告，有些信息不是错误信息，但也要给程序员一些提示。</span></span><br><span class="line"><span class="comment">		 *error：错误信息。用的也很多。</span></span><br><span class="line"><span class="comment">		 *fatal：致命错误。</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="指定日志的输出位置"><a href="#指定日志的输出位置" class="headerlink" title="指定日志的输出位置"></a>指定日志的输出位置</h3><ul>
<li>properties文件中配置<br>logging.level.com.atguigu=trace<br>第一种方式：<br>//在当前磁盘的根路径下创建spring文件夹和里面的log文件夹，默认生成spring.log日志文件<br>logging.path=/spring/log<br>第二种方式：<br>//当前项目下生成springboot.log日志文件<br>loging.file=springboot.log<br>第三种方式：<br>//指定路径下生成springboot.log日志文件<br>loging.file=G:/springboot.log<br>第四种方式：<br>//在控制台输出日志的格式<br>logging.pattern.console=%d{yyyy-MM-dd HH-mm-ss.SSS} [%thread] %-5level %logger{50} - %msg%n<br>// 指定文件中日志的输出格式<br>logging.pattern.file=<h3 id="日志的输出格式："><a href="#日志的输出格式：" class="headerlink" title="日志的输出格式："></a>日志的输出格式：</h3><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">d</span></span>表示日期时间</span><br><span class="line"><span class="tag">%<span class="selector-tag">thread</span></span>表示当前线程</span><br><span class="line"><span class="tag">%</span>-5level：级别从左显示5个字符宽度</span><br><span class="line"><span class="tag">%<span class="selector-tag">logger</span>&#123;50&#125;</span>：表示logger&#123;50&#125;名字最长50个字符，否则按照据点分割；</span><br><span class="line"><span class="tag">%<span class="selector-tag">msg</span></span>：日志消息</span><br><span class="line"><span class="tag">%<span class="selector-tag">n</span></span>：换行符</span><br><span class="line"><span class="tag">%<span class="selector-tag">d</span>&#123;yyyy-MM-dd HH-mm-ss.SSS&#125;</span> [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure></li>
<li>自定义日志</li>
</ul>
<table>
<thead>
<tr>
<th>logging System（日志框架)</th>
<th align="center">Customization</th>
</tr>
</thead>
<tbody><tr>
<td>logback</td>
<td align="center">logback-spring.xml , logback-spring.groovy , logback.xml or logback.groovy</td>
</tr>
<tr>
<td>Logf4j</td>
<td align="center">log4j-spring.xml or logf4j.xml</td>
</tr>
<tr>
<td>JDK(java util Logging)</td>
<td align="center">logging.properties</td>
</tr>
</tbody></table>
<ul>
<li>logback.xml:直接被日志框架识别了</li>
<li>ligback-spring.xml：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用高级Profile功能，否则会报错</li>
<li>高级功能<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">  可以直接指定某段配置只有某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下报错<br>  no applicable action for [springProfile 888]</li>
</ul>
<h3 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a>切换日志框架</h3><ul>
<li><p>可以按照slf4j的日志适配图，进行相关的切换</p>
<h3 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h3></li>
<li><p>SpringBoot对静态资源的映射规则（WebMvcAutoConfiguration）</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//访问路径配置</span></span><br><span class="line"> public void add<span class="constructor">ResourceHandlers(ResourceHandlerRegistry <span class="params">registry</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!this.resourceProperties.is<span class="constructor">AddMappings()</span>) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Duration cachePeriod = this.resourceProperties.get<span class="constructor">Cache()</span>.get<span class="constructor">Period()</span>;</span><br><span class="line">                CacheControl cacheControl = this.resourceProperties.get<span class="constructor">Cache()</span>.get<span class="constructor">Cachecontrol()</span>.<span class="keyword">to</span><span class="constructor">HttpCacheControl()</span>;</span><br><span class="line">                <span class="keyword">if</span> (!registry.has<span class="constructor">MappingForPattern(<span class="string">"/webjars/**"</span>)</span>) &#123;</span><br><span class="line">                    this.customize<span class="constructor">ResourceHandlerRegistration(<span class="params">registry</span>.<span class="params">addResourceHandler</span>(<span class="params">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;)</span>.add<span class="constructor">ResourceLocations(<span class="params">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;)</span>.set<span class="constructor">CachePeriod(<span class="params">this</span>.<span class="params">getSeconds</span>(<span class="params">cachePeriod</span>)</span>).set<span class="constructor">CacheControl(<span class="params">cacheControl</span>)</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String staticPathPattern = this.mvcProperties.get<span class="constructor">StaticPathPattern()</span>;</span><br><span class="line">                <span class="keyword">if</span> (!registry.has<span class="constructor">MappingForPattern(<span class="params">staticPathPattern</span>)</span>) &#123;</span><br><span class="line">                    this.customize<span class="constructor">ResourceHandlerRegistration(<span class="params">registry</span>.<span class="params">addResourceHandler</span>(<span class="params">new</span> String[]&#123;<span class="params">staticPathPattern</span>&#125;)</span>.add<span class="constructor">ResourceLocations(WebMvcAutoConfiguration.<span class="params">getResourceLocations</span>(<span class="params">this</span>.<span class="params">resourceProperties</span>.<span class="params">getStaticLocations</span>()</span>)).set<span class="constructor">CachePeriod(<span class="params">this</span>.<span class="params">getSeconds</span>(<span class="params">cachePeriod</span>)</span>).set<span class="constructor">CacheControl(<span class="params">cacheControl</span>)</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首页配置</span></span><br><span class="line">         @Bean</span><br><span class="line">        public WelcomePageHandlerMapping welcome<span class="constructor">PageHandlerMapping(ApplicationContext <span class="params">applicationContext</span>, FormattingConversionService <span class="params">mvcConversionService</span>, ResourceUrlProvider <span class="params">mvcResourceUrlProvider</span>)</span> &#123;</span><br><span class="line">            WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> <span class="constructor">WelcomePageHandlerMapping(<span class="params">new</span> TemplateAvailabilityProviders(<span class="params">applicationContext</span>)</span>, applicationContext, this.get<span class="constructor">WelcomePage()</span>, this.mvcProperties.get<span class="constructor">StaticPathPattern()</span>);</span><br><span class="line">            welcomePageHandlerMapping.set<span class="constructor">Interceptors(<span class="params">this</span>.<span class="params">getInterceptors</span>(<span class="params">mvcConversionService</span>, <span class="params">mvcResourceUrlProvider</span>)</span>);</span><br><span class="line">            return welcomePageHandlerMapping;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>1.所有/webjars/**，都去classpath:/META-INF/resources/webjars/这里找资源<br>webjars：以jar包的方式引入静态资源；<br>网站<a href="http://www.webjars.org" target="_blank" rel="noopener">www.webjars.org</a><br>在pom.xml文件中引入webjars依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="comment">&lt;!--引入Jquery的Webjar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问的时候只需要写webjars下面的资源名称即可<br>下面在<a href="http://localhost:8080/webjars/jquery/3.3.1/jquery.js就可访问的到" target="_blank" rel="noopener">http://localhost:8080/webjars/jquery/3.3.1/jquery.js就可访问的到</a></p>
</li>
<li><p>2.”/**”访问当前项目的任何资源(静态资源的文件夹)</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span></span><br><span class="line"> <span class="keyword">String</span>[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;</span><br><span class="line">   <span class="string">"classpath:/META-INF/resources/"</span>, </span><br><span class="line">   <span class="string">"classpath:/resources/"</span>, </span><br><span class="line">   <span class="string">"classpath:/static/"</span>, </span><br><span class="line">   <span class="string">"classpath:/public/"</span>&#125;;</span><br></pre></td></tr></table></figure></li>
<li><ol start="3">
<li>首页：静态资源文件夹下的所有index.html页面，被”/**”映射<br>localhost:8080/   找到index页面</li>
</ol>
</li>
<li><p>4.图标：所有**/favicon.ico都在静态资源文件夹下找；</p>
<h3 id="静态文件夹配置"><a href="#静态文件夹配置" class="headerlink" title="静态文件夹配置"></a>静态文件夹配置</h3></li>
<li><p>定义静态文件夹SpringBoot默认的静态文件夹不生效</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">#数组</span><br><span class="line">spring.resources.<span class="keyword">static</span>-locations=<span class="keyword">classpath</span>:<span class="regexp">/webapp/</span>,<span class="keyword">classpath</span>:<span class="regexp">/page/</span></span><br></pre></td></tr></table></figure>
<h3 id="模板引擎Thymeleaf"><a href="#模板引擎Thymeleaf" class="headerlink" title="模板引擎Thymeleaf"></a>模板引擎Thymeleaf</h3></li>
<li><p>1.引入模板引擎thymeleaf：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入Thymeleaf模块引擎--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>2.Thymeleaf使用和语法</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">@ConfigurationProperties(</span><br><span class="line">   prefix = <span class="string">"spring.thymeleaf"</span></span><br><span class="line">)</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> prefix = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">   <span class="comment">//只要我们把Html页面放在classparh：/templates/下就可以自动渲染渲染</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> suffix = <span class="string">".html"</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> mode = <span class="string">"HTML"</span>;</span><br><span class="line">   <span class="keyword">private</span> Charset encoding;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">boolean</span> cache;</span><br><span class="line">   <span class="keyword">private</span> Integer templateResolverOrder;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span>[] viewNames;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span>[] excludedViewNames;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">boolean</span> enableSpringElCompiler;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">boolean</span> renderHiddenMarkersBeforeCheckboxes;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">boolean</span> enabled;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ThymeleafProperties.Servlet servlet;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ThymeleafProperties.Reactive reactive;</span><br></pre></td></tr></table></figure>
<h3 id="Html文件位置在templates文件夹下"><a href="#Html文件位置在templates文件夹下" class="headerlink" title="Html文件位置在templates文件夹下"></a>Html文件位置在templates文件夹下</h3></li>
<li><p>1.导入Thymeleaf名称空间xmlns:th=”<a href="http://www.thymeleaf.org&quot;" target="_blank" rel="noopener">http://www.thymeleaf.org&quot;</a></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;html <span class="attribute">lang</span>=<span class="string">"en"</span> xmlns:<span class="attribute">th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>2.不经过控制层controller不显示数据，只显示前台页面有的数据</p>
</li>
<li><p>3.语法规则</p>
<ul>
<li>3.1 th:text;改变当前元素的文本内容<pre><code>th:任意html属性，来替换原生属性的值</code></pre></li>
</ul>
</li>
<li><p>4.表达式</p>
<ul>
<li>4.1 语法<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line"><span class="type">Simple</span> expressions:(表达式语法)</span><br><span class="line">      <span class="type">Variable</span> <span class="type">Expressions</span>: $<span class="meta">&#123;...&#125;</span> 获取变量值：<span class="type">OGNL</span></span><br><span class="line">               <span class="number">1</span>. 获取对象的属性，调用方法</span><br><span class="line">               <span class="number">2</span>. 使用内置的基本对象</span><br><span class="line">                  <span class="comment">#ctx : the context object. 当前上下文文对象</span></span><br><span class="line">                  <span class="comment">#vars: the context variables.  当前上下文变量值</span></span><br><span class="line">                  <span class="comment">#locale : the context locale.  当前上下文区域信息</span></span><br><span class="line">                  <span class="comment">#request : (only in Web Contexts) the HttpServletRequest object. </span></span><br><span class="line">                  <span class="comment">#response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class="line">                  <span class="comment">#session : (only in Web Contexts) the HttpSession object.</span></span><br><span class="line">                  <span class="comment">#servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class="line">                <span class="number">3</span>. 内置工具对象</span><br><span class="line">                    <span class="comment">#execInfo : information about the template  being processed.</span></span><br><span class="line">                    <span class="comment">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they</span></span><br><span class="line">                    would be obtained <span class="keyword">using</span> <span class="comment">#&#123;…&#125; syntax.</span></span><br><span class="line">                    <span class="comment">#uris : methods for escaping parts of URLs/URIs</span></span><br><span class="line">                    <span class="type">Page</span> <span class="number">20</span> <span class="keyword">of</span> <span class="number">106</span></span><br><span class="line">                    <span class="comment">#conversions : methods for executing the configured conversion service (if any).</span></span><br><span class="line">                    <span class="comment">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class="line">                    <span class="comment">#calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class="line">                    <span class="comment">#numbers : methods for formatting numeric objects.</span></span><br><span class="line">                    <span class="comment">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class="line">                    <span class="comment">#objects : methods for objects in general.</span></span><br><span class="line">                    <span class="comment">#bools : methods for boolean evaluation.</span></span><br><span class="line">                    <span class="comment">#arrays : methods for arrays.</span></span><br><span class="line">                    <span class="comment">#lists : methods for lists.</span></span><br><span class="line">                    <span class="comment">#sets : methods for sets.</span></span><br><span class="line">                    <span class="comment">#maps : methods for maps.</span></span><br><span class="line">                    <span class="comment">#aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class="line">                    <span class="comment">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class="line"></span><br><span class="line">      <span class="type">Selection</span> <span class="type">Variable</span> <span class="type">Expressions</span>: *<span class="meta">&#123;...&#125;</span> 变量选择表达式</span><br><span class="line">      和$&#123;&#125;在功能上是一样的</span><br><span class="line">      补充：配合th:<span class="keyword">object</span>=<span class="string">"$&#123;session.user&#125;"</span> 使用 th:text=<span class="string">"*&#123;name&#125;"</span>  *相当于$&#123;session.user&#125;</span><br><span class="line">      &lt;<span class="keyword">div</span> th:<span class="keyword">object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span><br><span class="line">          &lt;p&gt;<span class="type">Name</span>: &lt;span th:text=<span class="string">"*&#123;firstName&#125;"</span>&gt;<span class="type">Sebastian</span>&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;<span class="type">Surname</span>: &lt;span th:text=<span class="string">"*&#123;lastName&#125;"</span>&gt;<span class="type">Pepper</span>&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">      <span class="type">Message</span> <span class="type">Expressions</span>: <span class="comment">#&#123;...&#125; 获取国际化内容</span></span><br><span class="line">      <span class="type">Link</span> <span class="type">URL</span> <span class="type">Expressions</span>: @<span class="meta">&#123;...&#125;</span> 定义url链接</span><br><span class="line">      <span class="type">Fragment</span> <span class="type">Expressions</span>: ~<span class="meta">&#123;...&#125;</span> 片段引用表达式</span><br><span class="line"><span class="type">Literals</span>：(字面量)</span><br><span class="line">    <span class="type">Text</span> literals: 'one text' , '<span class="type">Another</span> one!' ,…</span><br><span class="line">    <span class="type">Number</span> literals: <span class="number">0</span> , <span class="number">34</span> , <span class="number">3</span>.<span class="number">0</span> , <span class="number">12</span>.<span class="number">3</span> ,…</span><br><span class="line">    <span class="type">Boolean</span> literals: <span class="literal">true</span> , <span class="literal">false</span></span><br><span class="line">    <span class="type">Null</span> literal: null</span><br><span class="line">    <span class="type">Literal</span> tokens: one , sometext , main ,…</span><br><span class="line"><span class="type">Text</span> operations:(文本操作)</span><br><span class="line">    <span class="type">String</span> concatenation: +</span><br><span class="line">    <span class="type">Literal</span> substitutions: |<span class="type">The</span> name <span class="keyword">is</span> $&#123;name&#125;|</span><br><span class="line"><span class="type">Arithmetic</span> operations:</span><br><span class="line">    <span class="type">Binary</span> operators: + , - , * , / , %</span><br><span class="line">    <span class="type">Minus</span> sign (unary operator): -</span><br><span class="line"><span class="type">Boolean</span> operations:（布尔运算）</span><br><span class="line">    <span class="type">Binary</span> operators: <span class="keyword">and</span> , <span class="keyword">or</span></span><br><span class="line">    <span class="type">Boolean</span> negation (unary operator): ! , <span class="keyword">not</span></span><br><span class="line"><span class="type">Comparisons</span> <span class="keyword">and</span> equality:（比较运算）</span><br><span class="line">    <span class="type">Comparators</span>: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    <span class="type">Equality</span> operators: == , != ( eq , ne )</span><br><span class="line"><span class="type">Conditional</span> operators:(条件运算)</span><br><span class="line">    <span class="type">If</span>-then: (<span class="keyword">if</span>) ? (then)</span><br><span class="line">    <span class="type">If</span>-then-<span class="keyword">else</span>: (<span class="keyword">if</span>) ? (then) : (<span class="keyword">else</span>)</span><br><span class="line">    <span class="type">Default</span>: (value) ?: (defaultvalue)</span><br><span class="line"><span class="type">Special</span> tokens:</span><br><span class="line">    <span class="type">Page</span> <span class="number">17</span> <span class="keyword">of</span> <span class="number">106</span></span><br><span class="line">    <span class="type">No</span>-<span class="type">Operation</span>: _</span><br></pre></td></tr></table></figure>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3></li>
<li>1.html代码<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--导入thymelesf名称空间作用语法提示</span></span></span><br><span class="line"><span class="xml">  xmlns:th="http://www.thymeleaf.org"--&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>成佛那个！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- th:text="$</span></span><span class="template-variable">&#123;&#125;</span><span class="xml"><span class="comment">" 件div里面的文件内容设置为指定的内容--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;hello&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;hello&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> //utext不会转移</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--th:each=""每次遍历都会生成当前这个标签 3个h4--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">th:each</span>=<span class="string">"user:$</span></span></span><span class="template-variable">&#123;users&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!----&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:each</span>=<span class="string">"user:$</span></span></span><span class="template-variable">&#123;users&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>[[$</span><span class="template-variable">&#123;user&#125;</span><span class="xml">]]<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>2.Controllor控制层<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*    @RequestMapping(&#123;"/","/login.html"&#125;)</span></span><br><span class="line"><span class="comment">    public String index()&#123;</span></span><br><span class="line"><span class="comment">        return "login";</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    @ResponseBody</span><br><span class="line">    @RequestMapping(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查出一些数据在页面显示</span></span><br><span class="line">    @RequestMapping(<span class="string">"/success"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">success</span><span class="params">(Map&lt;<span class="keyword">String</span>,Object&gt; <span class="built_in">map</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"hello"</span>,<span class="string">"&lt;h1&gt;你好！&lt;/h1&gt;"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"users"</span>,Arrays.asList(<span class="string">"沐沐"</span>,<span class="string">"离奇"</span>,<span class="string">"哈克"</span>));</span><br><span class="line">        <span class="comment">//classpath:/templates/success.html</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="如何修改SpringBoot的默认配置"><a href="#如何修改SpringBoot的默认配置" class="headerlink" title="如何修改SpringBoot的默认配置"></a>如何修改SpringBoot的默认配置</h3></li>
<li>模式：<ol>
<li>SpringBoot在容器中自动配置很多组件的时候，先看容器中有没有用户自己配（@bean，@Component），如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver，视图解析器）将用户配置的和SpringBoot默认配置的组合起来</li>
<li><h3 id="扩展SprinMVC"><a href="#扩展SprinMVC" class="headerlink" title="扩展SprinMVC"></a>扩展SprinMVC</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hean</span>&gt;</span><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>编写一个配置类（@Configuration），是WebMvcConfigurer类型，不能标注@EnableWebMvc</li>
<li>如果标注了@EnableWebMvc表示SpringBoot所有的配置类都不要了，所有的都是我们自己的配置，全面接管SpringMvc</li>
<li>特点：既保留了所有的自动配置，也能用我们的扩展</li>
<li>在SpringBoot中会有很多xxxConfigurer(如webMvcConfigurer)</li>
<li>注意：快捷键ctrl+o 弹出父类的所有方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurer扩展SpringMvc的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span>   </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浏览器发送/zhao请求 也来到success页面</span></span><br><span class="line">    registry.addViewController(<span class="string">"/zhao"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>原理：<ul>
<li>WebMvcAutoConfiguration是SpringMvc的自动配置类</li>
<li>在做其他配置时会导入：@import(EnablewebMvcConfiguration.class)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Configuration</span>(</span><br><span class="line">  proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">   )</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span>    <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">EnableWebMvcConfiguration</span><span class="params">(ResourceProperties resourceProperties, ObjectProvider&lt;WebMvcProperties&gt; mvcPropertiesProvider, ObjectProvider&lt;WebMvcRegistrations&gt; mvcRegistrationsProvider, ListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">      <span class="keyword">this</span>.mvcProperties = (WebMvcProperties)mvcPropertiesProvider.getIfAvailable();</span><br><span class="line">      <span class="keyword">this</span>.mvcRegistrations = (WebMvcRegistrations)mvcRegistrationsProvider.getIfUnique();</span><br><span class="line">      <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//从容器中获取所有的WebMvcConfigurer</span></span><br><span class="line"> <span class="meta">@Autowired</span>(</span><br><span class="line">  required = <span class="keyword">false</span></span><br><span class="line">   )</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>容器中所有的WebmvcConfigurer都会自己其作用用</li>
<li>我们配置也会起作用</li>
<li>效果：SpringMVC的自己起作用和我们的配置也会起作用</li>
<li>@EnableWebMvcConfigurationSupport组件导入进来；</li>
<li>导入的WebMvcConfigurationSupport只是SpringMvc最基本的功能；<h3 id="加载首页方法"><a href="#加载首页方法" class="headerlink" title="加载首页方法"></a>加载首页方法</h3></li>
</ul>
</li>
</ul>
</li>
<li><p>1.Controller写的方法</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&#123;<span class="meta-string">"/"</span>,<span class="meta-string">"/login.html"</span>&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String index()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>2.自己写配置类继承WebMvcConfigurer类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有的WebMvcConfigurer组件都会起作用</span></span><br><span class="line">   <span class="meta">@Bean</span> <span class="comment">//把组件加入到容器中</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function">WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       WebMvcConfigurer config = <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">               registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">               registry.addViewController(<span class="string">"/login.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="keyword">return</span> config;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h4 id="通过Webjars方式加入boootstrap"><a href="#通过Webjars方式加入boootstrap" class="headerlink" title="通过Webjars方式加入boootstrap"></a>通过Webjars方式加入boootstrap</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">通过webjars官网找到bootstrap添加到Maven依赖</span><br><span class="line"><span class="comment">&lt;!--引入Bootstrop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="通过模板引擎引入外部文件"><a href="#通过模板引擎引入外部文件" class="headerlink" title="通过模板引擎引入外部文件"></a>通过模板引擎引入外部文件</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!--Webjars方式引入bootstaap.css文件</span></span></span><br><span class="line"><span class="xml">	第一部导入Maven依赖--&gt;</span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!--引入CSS等外部文件 th:href="@</span></span><span class="template-tag">&#123;/<span class="name">webjars</span>/bootstrap/4.0.0/css/bootstrap.css&#125;</span><span class="xml"><span class="comment">"--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">webjars</span>/bootstrap/4.0.0/css/bootstrap.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span>  <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-variable">&#123;asserts/css/signin.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">th:src</span>=<span class="string">"@</span></span></span><span class="template-variable">&#123;asserts/img/bootstrap-solid.svg&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4></li>
<li><p>SpringMvc使用过程</p>
<ul>
<li>1.编写国际化配置文件</li>
<li>2.使用ResourceBundleMessageSource管理国际化资源</li>
<li>3.在页面使用fmt:message去除国际化内容</li>
</ul>
</li>
<li><p>SpringBoot配置</p>
<ul>
<li><p>步骤：</p>
<ul>
<li>1.编写国际化配置文件，抽取页面需要显示的内容(创建i18n文件夹，创建默认显示文件login.properties,中文状态显示文件login_zh_CN.properties,英文状态下显示文件login_en_US.properties)在创建中文状态显示的文件，可以快捷方式创建(New –&gt;Add Property File)</li>
<li>2.显示内容通过页面Resource Bulid进行创建 属性=值的方式</li>
<li>3.SpringBoot已经自动配置好了管理国际化资源文件的组件</li>
<li>4.application.properties文件中配置spring.messages.basename=i18n.login<br>源码：<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">   prefix = <span class="string">"spring.messages"</span></span><br><span class="line">)</span><br><span class="line"> <span class="comment">//我们的配置文件可以直接放在类路径下加message.properties;</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">   ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">     <span class="comment">//设置国际化资源文件的基础名（去掉语言国家的代码）</span></span><br><span class="line">       messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">       messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>去页面获取国际化的值th:text=”#{login.tip}”<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> &gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--Webjars方式引入bootstaap.css文件</span></span></span><br><span class="line"><span class="xml">    第一部导入Maven依赖--&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--引入CSS等外部文件 th:href="@</span></span><span class="template-tag">&#123;/<span class="name">webjars</span>/bootstrap/4.0.0/css/bootstrap.css&#125;</span><span class="xml"><span class="comment">"--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">webjars</span>/bootstrap/4.0.0/css/bootstrap.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span>  <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-variable">&#123;asserts/css/signin.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">th:src</span>=<span class="string">"@</span></span></span><span class="template-variable">&#123;asserts/img/bootstrap-solid.svg&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.tip&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">th:placeholder</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">th:placeholder</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="comment">&lt;!-- 注意此处单选框 --&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>&gt;</span> [[#</span><span class="template-variable">&#123;login.Remember&#125;</span><span class="xml">]]</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.btn&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>效果：根据浏览器语言设置信息切换国际化</li>
</ul>
<ul>
<li>国际化Locale(区域信息对象)；LocaleResolver</li>
<li>源码<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//区域信息解析器</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">  <span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">      prefix = <span class="meta-string">"spring.mvc"</span>,</span></span><br><span class="line"><span class="meta">      name = &#123;<span class="meta-string">"locale"</span>&#125;</span></span><br><span class="line"><span class="meta">  )</span></span><br><span class="line">  <span class="keyword">public</span> LocaleResolver localeResolver() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">          <span class="keyword">return</span> new FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();</span><br><span class="line">          localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">          <span class="keyword">return</span> localeResolver;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  默认的就是根据请求头带来的区域性息获取Locale进行国际化</span><br></pre></td></tr></table></figure></li>
<li>自定义区域信息解析器</li>
</ul>
<ul>
<li>1.html添加访问路径<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"> 	<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">login.html</span>(L='zh_CN')&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">login.html</span>(L='en_US')&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>2.创建MyLocaleResolver继承LocaleResolver  //区域信息解析器<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">  import org.springframework.util.StringUtils;</span><br><span class="line">  import org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"></span><br><span class="line">  import javax.servlet.http.HttpServletRequest;</span><br><span class="line">  import javax.servlet.http.HttpServletResponse;</span><br><span class="line">  import java.util.Locale;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 可以在链接上携带上区域信息</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line"> public <span class="keyword">class</span> MyLocaleResolver implements LocaleResolver &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*解析区域性息*/</span></span><br><span class="line">    @Override</span><br><span class="line">    public Locale resolve<span class="constructor">Locale(HttpServletRequest <span class="params">httpServletRequest</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String L = httpServletRequest.get<span class="constructor">Parameter(<span class="string">"L"</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(L);</span><br><span class="line"></span><br><span class="line">        Locale locale = <span class="module-access"><span class="module"><span class="identifier">Locale</span>.</span></span>get<span class="constructor">Default()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(locale);</span><br><span class="line">        <span class="comment">//注意此处判断条件！StringUtils.isEmplaty(L) 不为空</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">Empty(L)</span>)&#123;</span><br><span class="line">          String<span class="literal">[]</span> split = <span class="module-access"><span class="module"><span class="identifier">L</span>.</span></span>split(<span class="string">"_"</span>);</span><br><span class="line">          <span class="comment">//注意此处为变量，不是字符串</span></span><br><span class="line">          locale = <span class="keyword">new</span> <span class="constructor">Locale(<span class="params">split</span>[0],<span class="params">split</span>[1])</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(locale);</span><br><span class="line">        return locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void set<span class="constructor">Locale(HttpServletRequest <span class="params">httpServletRequest</span>, HttpServletResponse <span class="params">httpServletResponse</span>, Locale <span class="params">locale</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>3.在配置类中将自定义的MyLocaleResolver加入Springboot容器中<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>5.效果：可根据页面链接转换语言信息，此时浏览器的语言选择 对其不起作用<h3 id="开发技巧ctrl-F9重新编译"><a href="#开发技巧ctrl-F9重新编译" class="headerlink" title="开发技巧ctrl+F9重新编译"></a>开发技巧ctrl+F9重新编译</h3></li>
</ul>
</li>
</ul>
</li>
<li><p>开发期间模板引擎页面修改之后，要实时生效</p>
<ul>
<li>1.application.properties禁用模板引擎的缓存<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#禁用模板引擎的缓存</span></span><br><span class="line"><span class="attr">pring.thymeleaf.cache</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
<li>2.页面修改后ctrl+F9重新编译<h4 id="错误消息显示及判断"><a href="#错误消息显示及判断" class="headerlink" title="错误消息显示及判断"></a>错误消息显示及判断</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--判断msg是否为空，后执行text标签内容 此处if标签优先级高于text标签优先级  --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;msg&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">th:if</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;not #strings.isEmpty(msg)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="拦截器机制进行登陆检查"><a href="#拦截器机制进行登陆检查" class="headerlink" title="拦截器机制进行登陆检查"></a>拦截器机制进行登陆检查</h3></li>
</ul>
</li>
<li><p>1.创建拦截器对象实现HandlerInterceptor接口</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 登陆检查,拦截器</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*目标方法执行之前*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//未登录，返回登陆界面</span></span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限请先登录"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/login.html"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//已登录，放行请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>2.将拦截器对象加载到配置类容器中</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册拦截器</span></span><br><span class="line">          @Override</span><br><span class="line">          public void add<span class="constructor">Interceptors(InterceptorRegistry <span class="params">registry</span>)</span> &#123;</span><br><span class="line">              <span class="comment">//静态资源；*.css , *.js</span></span><br><span class="line">              <span class="comment">//SpringBoot已经做好了静态资源映射</span></span><br><span class="line">              registry.add<span class="constructor">Interceptor(<span class="params">new</span> LoginHandlerInterceptor()</span>).add<span class="constructor">PathPatterns(<span class="string">"/**"</span>)</span>.</span><br><span class="line">                      exclude<span class="constructor">PathPatterns(<span class="string">"/login.html"</span>,<span class="string">"/"</span>,<span class="string">"/user/login"</span>)</span>;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure>
<h3 id="CRUD操作——员工列表"><a href="#CRUD操作——员工列表" class="headerlink" title="CRUD操作——员工列表"></a>CRUD操作——员工列表</h3></li>
</ul>
<h3 id="模板引擎Thymeleaf公共页面元素抽取"><a href="#模板引擎Thymeleaf公共页面元素抽取" class="headerlink" title="模板引擎Thymeleaf公共页面元素抽取"></a>模板引擎Thymeleaf公共页面元素抽取</h3><ul>
<li>1.抽取公共片段 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>     </span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span>     </span><br><span class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>2.引入公共模块<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~</span></span></span><span class="template-variable">&#123;footer :: copy&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">~</span><span class="template-variable">&#123;templatename::selector&#125;</span><span class="xml">:模块名：：片段名</span></span><br><span class="line"><span class="xml">~</span><span class="template-variable">&#123;templatename：：fragmentname&#125;</span><span class="xml">：模块名：：片段名</span></span><br></pre></td></tr></table></figure></li>
<li>3.默认效果 insert的功能片段在div标签里</li>
<li>4.注意：如果使用th:insert等属性进行引入，可以不用写<del>{};<br>行内写法必须写</del>{}方式 [[~{}]];<h3 id="三种引入功能片段的th-属性"><a href="#三种引入功能片段的th-属性" class="headerlink" title="三种引入功能片段的th:属性"></a>三种引入功能片段的th:属性</h3></li>
<li>1.th:insert   :将公共的片段整个插入到声明引入的元素里面</li>
<li>2.th:replace  ：将声明引入的元素替换为公共片段</li>
<li>3.th:include  ：将被引入的片段的内容包含进这个标签中<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">  &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>     </span><br><span class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>   </span><br><span class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>   </span><br><span class="line">   &amp;copy; 2011 The Good Thymes Virtual Grocery  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="模板引擎使用的一些小技巧"><a href="#模板引擎使用的一些小技巧" class="headerlink" title="模板引擎使用的一些小技巧"></a>模板引擎使用的一些小技巧</h3></li>
<li>1.th:if=”” 通过三目运算的判断改变其样式<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--引入侧边栏--&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::#sidebar(activeUri='emps')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  th:class="$</span><span class="template-variable">&#123;activeUri=='emps'?'nav-link active':'nav-link'&#125;</span><span class="xml">"</span></span><br></pre></td></tr></table></figure></li>
<li>2.Thymeleaf日期格式的转换<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&lt;td&gt;<span class="string">[[$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;]]</span>&lt;/td&gt;</span><br></pre></td></tr></table></figure></li>
<li>3.bootstrap前端框架button按钮样式小技巧<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">通过添加class选择器 <span class="keyword">btn </span><span class="keyword">btn-sm </span><span class="keyword">btn-颜色 </span> </span><br><span class="line"> eg： &lt;<span class="keyword">button </span>class=<span class="string">"btn btb-sm btn-danger"</span>&gt;删除&lt;/<span class="keyword">button&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>4.行内Teymeleaf表达式的写法[()]表示转义 [[]]不转义<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&lt;td&gt;<span class="string">[[$&#123;emp.department.departmentName&#125;]]</span>&lt;/td&gt;</span><br><span class="line">&lt;td&gt;<span class="string">[[$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;]]</span>&lt;/td&gt;</span><br></pre></td></tr></table></figure></li>
<li>5.Teymeleaf表达式做三目运算最好将其写在{}大括号外面<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;emp.gender&#125;</span><span class="xml"><span class="tag"><span class="string">==0?'女':'男'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>6.遍历集合只需在标签内部加入th:each=””即可<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">tr</span> th:<span class="keyword">each</span>=<span class="string">"emp:<span class="subst">$&#123;emps&#125;</span>"</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>7.controller层操作<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeDao employeeDao;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//查询所偶员工列表页面</span></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/emps"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String list(Model model)&#123;</span><br><span class="line"></span><br><span class="line">        Collection&lt;Employee&gt; employees = employeeDao.getAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放在请求域中进行共享</span></span><br><span class="line">        model.addAttribute(<span class="string">"emps"</span>,employees);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//thymeleaf（模板引擎）默认就会拼串到类路径下classpath:/templates/...html</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"emp/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Controller层增删改查"><a href="#Controller层增删改查" class="headerlink" title="Controller层增删改查"></a>Controller层增删改查</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   EmployeeDao employeeDao;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   DepartmentDao departmentDao;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//查询所偶员工列表页面</span></span><br><span class="line">   <span class="meta">@GetMapping(<span class="meta-string">"/emps"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String list(Model model)&#123;</span><br><span class="line"></span><br><span class="line">       Collection&lt;Employee&gt; employees = employeeDao.getAll();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//放在请求域中进行共享</span></span><br><span class="line">       model.addAttribute(<span class="string">"emps"</span>,employees);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//thymeleaf（模板引擎）默认就会拼串到类路径下classpath:/templates/...html</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"emp/list"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//来到与员工添加页面</span></span><br><span class="line">   <span class="meta">@GetMapping(<span class="meta-string">"/emp"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String toAddPage(Model model)&#123;</span><br><span class="line">       <span class="comment">//来到所有页面,查出所有的部门，在页面显示</span></span><br><span class="line">       Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class="line">       model.addAttribute(<span class="string">"depts"</span>,departments);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"emp/add"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//员工添加功能</span></span><br><span class="line">   <span class="comment">//SpringMvc自动将请求参数和入参的对象的属性进一一绑定；要求请求参数的名字和参数的名字和JavaBean入参的对象里面的属性名</span></span><br><span class="line">   <span class="meta">@PostMapping(<span class="meta-string">"/emp"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String addEmp(Employee employee01)&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//来到员工列表页面</span></span><br><span class="line">       System.<span class="keyword">out</span>.println(<span class="string">"保存员工信息："</span>+employee01);</span><br><span class="line">       <span class="comment">//保存员工</span></span><br><span class="line">       employeeDao.save(employee01);</span><br><span class="line">       <span class="comment">//redirect:表示重定向，到一个地址</span></span><br><span class="line">       <span class="comment">//forword：表示转发到一个地址</span></span><br><span class="line">       <span class="comment">//  /表示当前项目路径你</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//@PathVariable("id") 获取路径变量</span></span><br><span class="line">   <span class="comment">//来到修改页面，查出当前员工，在页面回显</span></span><br><span class="line">   <span class="meta">@GetMapping(<span class="meta-string">"/emp/&#123;id&#125;"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String toEditPage(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> Integer id,Model model)&#123;</span><br><span class="line"></span><br><span class="line">       Employee employee = employeeDao.<span class="keyword">get</span>(id);</span><br><span class="line">       model.addAttribute(<span class="string">"emp"</span>,employee);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//来到所有页面,查出所有的部门，在页面显示</span></span><br><span class="line">       Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class="line">       model.addAttribute(<span class="string">"depts"</span>,departments);</span><br><span class="line">       <span class="comment">//回到修改页面</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"emp/add"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//员工修改,需要提交员工id</span></span><br><span class="line">   <span class="meta">@PutMapping(<span class="meta-string">"/emp"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String updateEmp(Employee employee)&#123;</span><br><span class="line">       System.<span class="keyword">out</span>.println(<span class="string">"修改数据:"</span>+employee);</span><br><span class="line">       employeeDao.save(employee);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//员工删除</span></span><br><span class="line">   <span class="meta">@DeleteMapping(<span class="meta-string">"/emp/&#123;id&#125;"</span>)</span> <span class="comment">//@PathVariable("id") 获取路径变量</span></span><br><span class="line">   <span class="keyword">public</span> String deleteEmp(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> Integer id)&#123;</span><br><span class="line">       employeeDao.delete(id);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">package com.zhao.democrud.config;</span><br><span class="line"></span><br><span class="line">import com.zhao.democrud.componennt.LoginHandlerInterceptor;</span><br><span class="line">import com.zhao.democrud.componennt.MyLocaleResolver;</span><br><span class="line">import org.springframework.context.<span class="keyword">annotation</span>.<span class="title">Bean</span>;</span><br><span class="line">import org.springframework.context.<span class="keyword">annotation</span>.<span class="title">Configuration</span>;</span><br><span class="line">import org.springframework.web.servlet.LocaleResolver;</span><br><span class="line">import org.springframework.web.servlet.config.<span class="keyword">annotation</span>.<span class="title">InterceptorRegistry</span>;</span><br><span class="line">import org.springframework.web.servlet.config.<span class="keyword">annotation</span>.<span class="title">ViewControllerRegistry</span>;</span><br><span class="line">import org.springframework.web.servlet.config.<span class="keyword">annotation</span>.<span class="title">WebMvcConfigurer</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/<span class="regexp">/使用WebMvcConfigurer扩展SpringMvc的功能</span></span><br><span class="line"><span class="regexp">@Configuration</span></span><br><span class="line"><span class="regexp">public class MyMvcConfig implements WebMvcConfigurer &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    @Override</span></span><br><span class="line"><span class="regexp">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/浏览器发送/zhao</span>请求 也来到success页面</span><br><span class="line">        registry.addViewController(<span class="string">"/zhao"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /<span class="regexp">/所有的WebMvcConfigurer组件都会起作用</span></span><br><span class="line"><span class="regexp">    @Bean /</span><span class="regexp">/把组件加入到容器中</span></span><br><span class="line"><span class="regexp">    public WebMvcConfigurer webMvcConfigurer()&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        WebMvcConfigurer config = new WebMvcConfigurer() &#123;</span></span><br><span class="line"><span class="regexp">            @Override</span></span><br><span class="line"><span class="regexp">            public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="regexp">                registry.addViewController("/</span><span class="string">").setViewName("</span>login<span class="string">");</span></span><br><span class="line"><span class="string">                registry.addViewController("</span>/login.html<span class="string">").setViewName("</span>login<span class="string">");</span></span><br><span class="line"><span class="string">                registry.addViewController("</span>/main.html<span class="string">").setViewName("</span>dashboard<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            //注册拦截器</span></span><br><span class="line"><span class="string">            @Override</span></span><br><span class="line"><span class="string">            public void addInterceptors(InterceptorRegistry registry) &#123;</span></span><br><span class="line"><span class="string">                //静态资源；*.css , *.js</span></span><br><span class="line"><span class="string">                //SpringBoot已经做好了静态资源映射</span></span><br><span class="line"><span class="string">                registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns("</span>/**<span class="string">").</span></span><br><span class="line"><span class="string">                        excludePathPatterns("</span>/login.html<span class="string">","</span>/<span class="string">","</span>/user/login<span class="string">");</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        return config;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Bean</span></span><br><span class="line"><span class="string">    public LocaleResolver localeResolver()&#123;</span></span><br><span class="line"><span class="string">        return new MyLocaleResolver();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot微服务框架(二)--自动配置详解</title>
    <url>/2019/12/28/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-%E4%BA%8C-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="SpringBoot-配置文件"><a href="#SpringBoot-配置文件" class="headerlink" title="SpringBoot 配置文件"></a>SpringBoot 配置文件</h3><h4 id="Spring-Boot使用一个全局的配置文件"><a href="#Spring-Boot使用一个全局的配置文件" class="headerlink" title="Spring Boot使用一个全局的配置文件"></a>Spring Boot使用一个全局的配置文件</h4><pre><code>- application.properties
- application.yml</code></pre><ul>
<li>配置文件放在src/main/resources目录或者类路径/config下</li>
<li>.yml是YAML(YUML Ain`t Markup Language)语言的文件，以数据为中心，比json,xml等更适合做配置文件</li>
<li>注意：.yml文件，以数据为中心</li>
<li>全局配置文件的可以对一些默认的值进行修改<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4></li>
<li>配置文件的作用：修改SpringBoot自动配置的默认值；<br>SpringBoot在底层都给我们配置好；<h3 id="yml语法"><a href="#yml语法" class="headerlink" title=".yml语法"></a>.yml语法</h3><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4></li>
<li>键值对： K:(空格)V  空格必须有</li>
<li>已空格的缩进来控制层级关系；<ul>
<li>只要左对齐的一列数据，都是同一个级别的数据</li>
<li>属性和值大小写敏感<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">   <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">   <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>值的写法<br>  字面量：普通的值（数字，字符串，布尔）<br>  k：v   v直接来写即可<br>  字符串默认不用加单引号或者双引号<br>  注意：单引号会转移特殊字符</li>
<li>对象,map(属性和值)；<br>  对象还是k：v的方式<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">friends：</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></li>
<li>行内写法<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">friends:</span> ( <span class="string">name:</span> zhangsan,<span class="string">age:</span> <span class="number">20</span>)</span><br></pre></td></tr></table></figure></li>
<li>数组（list，set）:<br>用- 值表示数组中的一个元素<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">pets:</span><br><span class="line"><span class="bullet">  - </span>cat</span><br><span class="line"><span class="bullet">  - </span>dog</span><br><span class="line"><span class="bullet">  - </span>pig</span><br></pre></td></tr></table></figure></li>
<li>行内写法<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">pet<span class="variable">s:</span> [<span class="keyword">cat</span>,dog.pig]</span><br></pre></td></tr></table></figure>
<h3 id="pml属性配置文件"><a href="#pml属性配置文件" class="headerlink" title=".pml属性配置文件"></a>.pml属性配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/springboot-web</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">沐沐</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">brith:</span> <span class="number">2019</span><span class="string">/12/19</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">里斯</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">天天</span></span><br><span class="line">  <span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">西西</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>
<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo-test02<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>demo-test02<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * @ConfigurationProperties 告诉SpringBoot将本类中所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @Component 这个注解表示被加上这个注解的类成为容器中的一个组件</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器的组件，才能让容器提供@ConfigurationProperties(prefix = "person")的功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 此处要导入依赖,属性配置文件会有提示</span></span><br><span class="line"><span class="comment"> * &lt;!--导入配置文件处理器，配置文件进行绑定--&gt;</span></span><br><span class="line"><span class="comment"> *		&lt;dependency&gt;</span></span><br><span class="line"><span class="comment"> *			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment"> *			&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment"> *			&lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line"><span class="comment"> *		&lt;/dependency&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *@ConfigurationProperties(prefix = "person")默认从全局配置文件中获取值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"> @Component</span><br><span class="line"> @ConfigurationProperties(prefix = <span class="string">"person"</span>)</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;Int&gt; &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date brith;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>,Object&gt; maps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", boss="</span> + boss +</span><br><span class="line">                <span class="string">", brith="</span> + brith +</span><br><span class="line">                <span class="string">", list="</span> + <span class="built_in">list</span> +</span><br><span class="line">                <span class="string">", maps="</span> + maps +</span><br><span class="line">                <span class="string">", dog="</span> + dog +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getBoss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBoss</span><span class="params">(Boolean boss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boss = boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBrith</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brith;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrith</span><span class="params">(Date brith)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brith = brith;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; getList() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Object&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">list</span> = <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, Object&gt; getMaps() &#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;<span class="keyword">String</span>, Object&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">String</span> name, Integer age, Boolean boss, Date brith, List&lt;Object&gt; <span class="built_in">list</span>, Map&lt;<span class="keyword">String</span>, Object&gt; maps, Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.boss = boss;</span><br><span class="line">        <span class="keyword">this</span>.brith = brith;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">list</span> = <span class="built_in">list</span>;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dog&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* SpringBoot启动类，启动Spring容器，启动内嵌tomcat</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest01Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	SpringApplication.run(DemoTest01Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入juint4 --&gt;</span></span><br><span class="line">@RunWith(SpringRunner.class)   //告诉他用spring驱动器运行</span><br><span class="line">@SpringBootTest</span><br><span class="line">class test &#123;</span><br><span class="line">    <span class="comment">&lt;!-- @Resource是J2EE的注解 @AutoWrited也可 自动注入 --&gt;</span></span><br><span class="line">@Resource</span><br><span class="line">private Person person;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">void contextLoads() &#123;</span><br><span class="line">	System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>自我评估：遇到报错，不要慌仔细阅读，看不懂英文百度。。。。<h3 id="properties文件配置"><a href="#properties文件配置" class="headerlink" title=".properties文件配置"></a>.properties文件配置</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置person的值</span></span><br><span class="line"><span class="attr">person.name</span>=米粒</span><br><span class="line"><span class="attr">person.age</span>=<span class="number">20</span></span><br><span class="line"><span class="attr">person.boss</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">person.brith</span>=<span class="number">2019</span>/<span class="number">12</span>/<span class="number">12</span></span><br><span class="line"><span class="attr">person.list</span>=a,bc,egf</span><br><span class="line"><span class="attr">person.maps.k1</span>=丽丽</span><br><span class="line"><span class="attr">person.maps.k2</span>=咪咪</span><br><span class="line"><span class="attr">person.dog.name</span>=小狗</span><br><span class="line"><span class="attr">person.dog.age</span>=<span class="number">12</span></span><br><span class="line"><span class="comment"># 注意会有乱码情况编码格式UTF-8</span></span><br></pre></td></tr></table></figure>
<h3 id="Value-“”-注解"><a href="#Value-“”-注解" class="headerlink" title="@Value(“”)注解"></a>@Value(“”)注解</h3><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* <span class="title">@value</span>(<span class="string">""</span>)注解</span><br><span class="line">* 相当于</span><br><span class="line">* &lt;bean class=<span class="string">"Person"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"name"</span> value=<span class="string">"字面量/$&#123;key&#125;从环境变量，配置文件中获取值/#&#123;SPEL&#125;"</span>&gt;&lt;/property&gt;</span><br><span class="line">* &lt;/bean&gt;</span><br><span class="line">* */</span><br><span class="line">//<span class="title">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String name<span class="comment">;</span></span><br><span class="line"><span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line"><span class="comment">private Integer age;</span></span><br><span class="line"><span class="comment">//@Value("true")</span></span><br><span class="line"><span class="comment">private Boolean boss;</span></span><br></pre></td></tr></table></figure>
<h3 id="Value获取数据与-ConfigurationProperties获取比较"><a href="#Value获取数据与-ConfigurationProperties获取比较" class="headerlink" title="@Value获取数据与@ConfigurationProperties获取比较"></a>@Value获取数据与@ConfigurationProperties获取比较</h3></li>
</ul>
<table>
<thead>
<tr>
<th>对比</th>
<th align="center">@ConfigurationProperties</th>
<th align="right">@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td align="center">批量注入配置文件中的属性</td>
<td align="right">单一指定</td>
</tr>
<tr>
<td>松散绑定</td>
<td align="center">支持lastName对应last-name</td>
<td align="right">不支持</td>
</tr>
<tr>
<td>SpEl</td>
<td align="center">不支持</td>
<td align="right">支持</td>
</tr>
<tr>
<td>JSPR303数据效验</td>
<td align="center">支持如@Email，@NotNull</td>
<td align="right">不支持</td>
</tr>
<tr>
<td>复杂类型数据(map)</td>
<td align="center">支持</td>
<td align="right">不支持(基本数据类型)</td>
</tr>
</tbody></table>
<ul>
<li>注意：在业务逻辑中获取配置文件中某项值，使用@Value<br>JavaBean和配置文件映射使用@ConfigurationProperties</li>
</ul>
<h3 id="PropertySource-只能用于perperties文件-和-ImportResource读取外部配置文件"><a href="#PropertySource-只能用于perperties文件-和-ImportResource读取外部配置文件" class="headerlink" title="@PropertySource(只能用于perperties文件)和@ImportResource读取外部配置文件"></a>@PropertySource(只能用于perperties文件)和@ImportResource读取外部配置文件</h3><ul>
<li><p>@PropertySource 加载指定路径下的文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">PropertySource</span>(<span class="keyword">value</span> = &#123;"<span class="selector-tag">classpath</span><span class="selector-pseudo">:person.properties"</span>&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>@ImportResource: 导入Spring的配置文件，让Spring的配置文件生效</p>
</li>
<li><p>Spring 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.example.service.helloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意：在启动类上加入@ImportResource(locations = {“classpath:beans.xml”})注解</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line">public class DemoTest02Application &#123;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">	<span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(DemoTest02Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot推荐该容器中添加组建的方式：全注解"><a href="#SpringBoot推荐该容器中添加组建的方式：全注解" class="headerlink" title="SpringBoot推荐该容器中添加组建的方式：全注解"></a>SpringBoot推荐该容器中添加组建的方式：全注解</h3></li>
<li><p>配置类 config(使用@Bean给容器添加组件)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//配置类</span></span><br><span class="line"> <span class="meta">@Configuration</span>   <span class="comment">//指明当前类是一个配置类，就是来代替之前的Spring配置文件</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppconfig</span> </span>&#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Bean</span></span><br><span class="line"><span class="comment"> * 相当于</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中，容器中默认组件的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> helloService <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> helloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h3></li>
<li><p>RandomValuepropertySource:配置文件中可以使用随机数<br>${random.value},${random.int},${random.long}<br>${random.int(10)},${random.int[1024,65536]}</p>
</li>
<li><p>属性配置占位符</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">app.name</span>=MyApp</span><br><span class="line"><span class="attr">app.description</span>=<span class="variable">$&#123;app.name&#125;</span>_lili</span><br></pre></td></tr></table></figure></li>
<li><p>可以在配置文件中应用之前那个配置过的属性(优先级前面配置过的这里都能使用)。<br>${app.name:默认值}来指定找不到属性时的默认值</p>
</li>
</ul>
<h3 id="Profile多文件配置（默认使用application-properties）"><a href="#Profile多文件配置（默认使用application-properties）" class="headerlink" title="Profile多文件配置（默认使用application.properties）"></a>Profile多文件配置（默认使用application.properties）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 激活使用那个配置文件 --&gt;</span></span><br><span class="line">spring.profiles.active=test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如以下文件 --&gt;</span></span><br><span class="line">application-dev.properties //开发配置</span><br><span class="line">application-test.properties //测试配置</span><br><span class="line">application-online.properties //上线配置</span><br></pre></td></tr></table></figure>
<h3 id="yml多文档块模式"><a href="#yml多文档块模式" class="headerlink" title=".yml多文档块模式"></a>.yml多文档块模式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">   <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">profiles:</span> </span><br><span class="line">   <span class="attr">active:</span> <span class="string">dev</span>   <span class="comment">#激活</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">   <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"> <span class="attr">server:</span></span><br><span class="line">   <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure>
<h3 id="命令行激活"><a href="#命令行激活" class="headerlink" title="命令行激活"></a>命令行激活</h3><ul>
<li>Run–》Edit–&gt;program arguments: –spring.profiles.active=dev<br>  打包 执行 Java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev;</li>
<li>虚拟机参数：<pre><code>-Dspring.properties.active=dev4m</code></pre></li>
</ul>
<h3 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h3><ul>
<li>springBoot启动会扫描已下位置的application.properties/.yml文件作为Springboot的默认文件</li>
</ul>
<ul>
<li>file: ./config/</li>
<li>file: ./</li>
<li>classpath:/config/</li>
<li>classpath：/</li>
</ul>
<ul>
<li>注意：优先级由高到低，高优先级配置会覆盖低优先级的配置</li>
<li>SpringBoot会从这四个位置全部加载主配置文件：互补配置<h5 id="我们还可以通过spring-config-location-G-application-properties来改变默认的配置文件位置（外部部配置加载）"><a href="#我们还可以通过spring-config-location-G-application-properties来改变默认的配置文件位置（外部部配置加载）" class="headerlink" title="我们还可以通过spring.config.location=G:/application.properties来改变默认的配置文件位置（外部部配置加载）"></a>我们还可以通过spring.config.location=G:/application.properties来改变默认的配置文件位置（外部部配置加载）</h5></li>
<li>项目打包后，我们可使用命令行参数的模式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用的形式互补配置；<h4 id="SpringBoot自动配置原理"><a href="#SpringBoot自动配置原理" class="headerlink" title="SpringBoot自动配置原理"></a>SpringBoot自动配置原理</h4></li>
<li>配置文件能写什么？怎么写？自动配原理？<h5 id="自动配置原理："><a href="#自动配置原理：" class="headerlink" title="自动配置原理："></a>自动配置原理：</h5></li>
</ul>
<ol>
<li>Spring启动的时候加载主配置类，开启自动配置功能@EnableAutoConfiguration</li>
<li>@EnableAutoConfiguration的作用：<ul>
<li>利用EnableAutoConfigurationImportSelector该容器中导入一些组件？</li>
<li>可以查看selectImports()方法的内容：</li>
<li>List<String> configurations = getCandidateConfigurations(annotationMetadata,attributes);<br>获取候选的配置<ul>
<li>SpringFactoriesLoader.loadFactorynames()扫描所有jar包下类路径的META-INF/Spring.factories</li>
<li>把扫描到的文件内容包装成properties对象</li>
<li>从properties文件中获取到EnableAutoConfiguration.class类(类名)对应的值然后把它们添加到容器中；</li>
<li>将类路径下META-INF/Spring.factories里面的配置的所用EnableAutoConfiguration的值加入到容器中；</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>META-INF/Spring.factories配置文件(位置：spring-boot-autocongfigure)      <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">org.springframework.context.ApplicationListener=\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"># </span>Auto Configuration Import Listeners</span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"># </span>Auto Configuration Import Filters</span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.condition.OnClassCondition,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"># </span>Auto Configure</span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveRestClientAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span></span><br></pre></td></tr></table></figure></li>
<li>注意：上面每一个这样的 xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们做自动配置；</li>
</ul>
<ol start="3">
<li>每一个自动配置类进行自动配置功能：<ul>
<li>已HttpEncodingAutoConfiguration(Http编码自动配置<br>)为例解释自动配置原理；<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">   proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span>  <span class="comment">//启用指定类(&#123;HttpProperties.class&#125;)configurationProperties功能,</span></span><br><span class="line">将配置文件这种对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到IOC容器中</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">   type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span>      <span class="comment">//Spring底层 @Conditional注解，根据不同的条件，如果满足指定条件，整个配置类里面的配置就会立即生效； 判断当前应用是否Web应用，如果是当前配置内生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span>  <span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter：SpringMVC中经行乱码解决的过滤器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">   prefix = <span class="meta-string">"spring.http.encoding"</span>,</span></span><br><span class="line"><span class="meta">   value = &#123;<span class="meta-string">"enabled"</span>&#125;,</span></span><br><span class="line"><span class="meta">   matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span>   <span class="comment">//判断配置文件中是否存在某个配置 spring.http.encoding.enabled; 如果不存在判断也是成立的</span></span><br><span class="line"><span class="comment">//相当于，即使我们配置文件中不配置spring.http.encoding.enabled=true;，也是默认生效的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//它已经和SpringBoot配置文件映射了</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况，参数的值就会从容器中拿</span></span><br><span class="line">   <span class="keyword">public</span> HttpEncodingAutoConfiguration(HttpProperties properties) &#123;</span><br><span class="line">       <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span>  <span class="comment">//给容器中添加一个组件，这个组件中的某些值要从properties文件中获取</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">   <span class="keyword">public</span> CharacterEncodingFilter characterEncodingFilter() &#123;</span><br><span class="line">       CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();</span><br><span class="line">       filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">       filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));</span><br><span class="line">       filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));</span><br><span class="line">       <span class="keyword">return</span> filter;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li>注意：根据当前文件中不同条件判断，决定这个配置是否生效？<br>  一旦这个配置内生效：这个配置类就会该容器中添加各种组件：这些组件的属性是从对应的properties类中获取的，这些组件中的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和properties文件绑定的</li>
<li>配置properties<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们能配置的属性都类源于这个功能的properties类</span></span><br><span class="line"><span class="attr">spring.http.encoding.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.http.encoding.charset</span>= utf-<span class="number">8</span></span><br><span class="line"><span class="attr">spring.http.encoding.force</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot的精髓："><a href="#SpringBoot的精髓：" class="headerlink" title="SpringBoot的精髓："></a>SpringBoot的精髓：</h3></li>
</ul>
<ol>
<li>SpringBoot启动会加载大量的自动配置类</li>
<li>我们要看到我们需要的功能有没有SpringBoot默认配置写好的自动配置类，</li>
<li>这个自动配置类中到底有哪些组件;(如果我们配置的组件有，我们就不需要配置)</li>
<li>给容器中自动配置添加组件的时候，会从properties类中获取某些属性，我们就可以在配置文件中指定这些属性的的值；</li>
</ol>
<ul>
<li>xxxAutoConfiguration:自动配置类；<br>给容器中添加组件<br>xxxProperties:封装配置文件中相关属性；<h4 id="IDEA快捷键，快捷搜索ctrl-N（如输入”-AutoConfiguration”）"><a href="#IDEA快捷键，快捷搜索ctrl-N（如输入”-AutoConfiguration”）" class="headerlink" title="IDEA快捷键，快捷搜索ctrl+N（如输入”*AutoConfiguration”）"></a>IDEA快捷键，快捷搜索ctrl+N（如输入”*AutoConfiguration”）</h4></li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 微服务框架(一)</title>
    <url>/2019/12/17/Spring-Boot-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="SpringBoot框架-Maven包管理工具"><a href="#SpringBoot框架-Maven包管理工具" class="headerlink" title="SpringBoot框架+Maven包管理工具"></a>SpringBoot框架+Maven包管理工具</h3><h3 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h3><h3 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--父项目--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--这个插件，可以将应用打包成一个可执行的jar包--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--&lt;build&gt;</span></span><br><span class="line"><span class="comment">       &lt;plugins&gt;</span></span><br><span class="line"><span class="comment">           &lt;plugin&gt;</span></span><br><span class="line"><span class="comment">               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">               &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">               &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">                   &lt;source&gt;1.8&lt;/source&gt;</span></span><br><span class="line"><span class="comment">                   &lt;target&gt;1.8&lt;/target&gt;</span></span><br><span class="line"><span class="comment">               &lt;/configuration&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           &lt;/plugin&gt;</span></span><br><span class="line"><span class="comment">       &lt;/plugins&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   &lt;/build&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意添加插件时加入以下代码，否则会报错 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot启动类"><a href="#SpringBoot启动类" class="headerlink" title="SpringBoot启动类"></a>SpringBoot启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao;</span><br><span class="line"><span class="keyword">import</span> com.sun.deploy.uitoolkit.impl.fx.AppletStageManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span>      org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @SpringBootApplication</span></span><br><span class="line"><span class="comment">* 标注主程序类，说明SpringBoot 应用</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWordmainApplication</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//spring应用启动</span></span><br><span class="line">       SpringApplication.run(HelloWordmainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">package com.zhao.controller;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.<span class="keyword">annotation</span>.<span class="title">RequestMapping</span>;</span><br><span class="line">import org.springframework.web.bind.<span class="keyword">annotation</span>.<span class="title">ResponseBody</span>;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   @ResponseBody</span><br><span class="line">   @RequestMapping(<span class="string">"/hello"</span>)</span><br><span class="line">   public String hello()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"helloWord"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行项目 浏览器输入“localhost：8080/hello”即可<h3 id="项目打jar包，"><a href="#项目打jar包，" class="headerlink" title="项目打jar包，"></a>项目打jar包，</h3></li>
<li>在Maven项目管理中 Lifecycle–》单击package在项目中其打包到target文件中如：springboot01-1.0-SNAPSHOT.jar</li>
<li>cmd进入管理员命令行执行:java -jar springboot01-1.0-SNAPSHOT.jar 启动项目</li>
<li>在浏览器端查看localhost：8080/hello</li>
</ul>
<h3 id="pom-xml详解"><a href="#pom-xml详解" class="headerlink" title="pom.xml详解"></a>pom.xml详解</h3><ul>
<li>父项目<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--父项目--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- tadefu他的父项目 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 他来真正管理Spring Boot应用里的的所有的依赖版本； --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Boot Dependencies<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Spring boot 的版本仲裁中心（以及我们导入的默认的是不需要写版本）；没有在Dependencies里面管理的自然需要声明版本号 --&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>导入的依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>spring-boot-starter-web ：springBoot场景启动器：帮我们导入了web模块正常运行所依赖的组件</li>
</ul>
<h3 id="主程序类详解"><a href="#主程序类详解" class="headerlink" title="主程序类详解"></a>主程序类详解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @SpringBootApplication</span></span><br><span class="line"><span class="comment"> * 标注主程序类，说明SpringBoot 应用</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"> <span class="meta">@SpringBootApplication</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWordmainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//spring应用启动</span></span><br><span class="line">        SpringApplication.run(HelloWordmainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> &lt;!-- run方法必须加载<span class="meta">@SpringBootController</span>标注的类 --&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>@SpringBootApplication：springBoot标注在某个类上说明这个类是SpringBoot的主配置类，springboot就应该运行这个类的main方法来启动SpringBoot应用；</li>
<li>组合注解<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@Documented</span></span><br><span class="line"><span class="variable">@Inherited</span></span><br><span class="line"><span class="variable">@SpringBootConfiguration</span></span><br><span class="line"><span class="variable">@EnableAutoConfiguration</span></span><br><span class="line"><span class="variable">@ComponentScan</span>(</span><br><span class="line">   excludeFilters = &#123;<span class="variable">@Filter</span>(</span><br><span class="line">   type = FilterType.CUSTOM,</span><br><span class="line">   classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="variable">@Filter</span>(</span><br><span class="line">   type = FilterType.CUSTOM,</span><br><span class="line">   classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line">public <span class="variable">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure></li>
<li>@SpringBootConfiguration：Spring Boot配置类<br>标注在某个类上，表示这是一个SpringBoot的配置类；</li>
<li>@EnableAutoConfiguration：开启自动配置功能<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">   String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">   Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>@AutoConfigurationPackage:自动配包<br>@Import({Registrar.class})<br>Spring底层注解@import，给容器中导入一个组件；导入的组件由Registrar.class；<br>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；<br>@Import({AutoConfigurationImportSelector.class})<br>该容器中导入组件<br>AutoConfigurationImportSelector：导入那些组件的选择器；<br>将所有需要导入的组件已全类名的方式返回；这些组件就会被添加到容器中；<br>会该容器中导入非常多的自动配置类（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件；并配置好这些组件；</li>
<li>J2EE的整体整合解决方案和自动配置都在   <pre><code>E:\Maven\repository\org\springframework\boot\spring-boot-autoconfigure\2.2.2.RELEASE\spring-boot-autoconfigure-2.2.2.RELEASE.jar</code></pre><h3 id="使用Spring-Initializer快速创建SpringBoot项目"><a href="#使用Spring-Initializer快速创建SpringBoot项目" class="headerlink" title="使用Spring Initializer快速创建SpringBoot项目"></a>使用Spring Initializer快速创建SpringBoot项目</h3></li>
<li>IDEA都支持使用Spring的项目创建向导快速创建一个项目；</li>
<li>File –》New project–》Spring Initializr<br>![项目结构](images/批注 2019-12-16 225236.png,”项目结构”)<ul>
<li>默认生成的Spring Boot项目<ul>
<li>主程序生成好，我们只需要我们自己的逻辑</li>
<li>resources文件夹中的目录：<ul>
<li>static：保存所有的静态资源：js css html</li>
<li>templates：保存所有的模板页面：（SpringBoot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker，thymeleaf）</li>
<li>application.properties:Spring Boot应用的配置为文件；（如配置端口 server.port=8081）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis框架(一)</title>
    <url>/2019/12/16/mybatis%E6%A1%86%E6%9E%B6-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="官网地址：https-mybatis-org-mybatis-3-zh-index-html"><a href="#官网地址：https-mybatis-org-mybatis-3-zh-index-html" class="headerlink" title="官网地址：https://mybatis.org/mybatis-3/zh/index.html"></a>官网地址：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></h3><h3 id="mybatis结构图"><a href="#mybatis结构图" class="headerlink" title="mybatis结构图"></a>mybatis结构图</h3><p><img src="https://static.oschina.net/uploads/space/2017/1008/165811_hvXz_1400519.png" alt="mybatis"></p>
<h3 id="配置文件介绍…"><a href="#配置文件介绍…" class="headerlink" title="配置文件介绍…."></a>配置文件介绍….</h3><ol>
<li>mybatis配置<br>SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。<br>mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。<br>SqlMapConfig.xml是mybatis的核心文件。mybatis将dao层与sql语句分离开来，虽然写的时候分离开来了，但是执行的时候还是要依靠sql语句，所以我们的sql语句写在Mapper.xml中。我们在加载核心的时候，会加载他下面的Mapper.xml，所以sql语句便会加载进去了。我们只需要在SqlMapConfig.xml中引入Mapper.xml就可以了，所以最后只需要加载SqlMapConfig.xml这一个核心配置文件。</li>
</ol>
<ul>
<li>实例 SqlMapConfig.xml配置文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">       PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.direct.cleanking.backstage.entity"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/direct/cleanking/backstage/dao/AdminMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/direct/cleanking/backstage/dao/TypeMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/direct/cleanking/backstage/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>实例 mapper.xml映射文件<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper</span></span></span><br><span class="line"><span class="xml"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="xml"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.direct.cleanking.backstage.dao.AdminDao"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.direct.cleanking.backstage.entity.Admin"</span> <span class="attr">id</span>=<span class="string">"adminMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"nickname"</span> <span class="attr">property</span>=<span class="string">"nickname"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"description"</span> <span class="attr">property</span>=<span class="string">"description"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"head_icon"</span> <span class="attr">property</span>=<span class="string">"headIcon"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"login"</span> <span class="attr">resultMap</span>=<span class="string">"adminMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select  id,username,nickname,description,head_icon  from admin </span></span><br><span class="line"><span class="xml">	where username = #</span><span class="template-variable">&#123;username&#125;</span></span><br><span class="line"><span class="xml">	and password =  #</span><span class="template-variable">&#123;password&#125;</span><span class="xml">   </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"adminMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select  *  from  admin </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			username like #</span><span class="template-variable">&#123;username&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"nickname!=null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			and nickname like #</span><span class="template-variable">&#123;nickname&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description!=null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			and description like #</span><span class="template-variable">&#123;description&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">	limit #</span><span class="template-variable">&#123;pageNum&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;pageSize&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"count"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select count(id) from admin</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultMap</span>=<span class="string">"adminMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select * from  admin where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.direct.cleanking.backstage.entity.Admin"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	update admin  </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">set</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			username = #</span><span class="template-variable">&#123;username&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"nickname != null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			,nickname = #</span><span class="template-variable">&#123;nickname&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			,password = #</span><span class="template-variable">&#123;password&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"headIcon != null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			,head_icon = #</span><span class="template-variable">&#123;headIcon&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			,description = #</span><span class="template-variable">&#123;description&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml">			</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"admin"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	insert into `admin`(`username`,nickname,password,description,head_icon) </span></span><br><span class="line"><span class="xml">	value(#</span><span class="template-variable">&#123;username&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;nickname&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;password&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;description&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;headIcon&#125;</span><span class="xml">);</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delOne"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	delete from admin where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li><p>通过mybatis环境等配置信息构造SqlSessionFactory即会话工厂。工厂能帮我们去加载核心配置文件。加载了核心配置文件后就创建session,通过session可以对数据库进行操作。</p>
</li>
<li><p>由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。</p>
</li>
<li><p>mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。Executor是执行者，我们不需要管，因为mybatis已经为我们封装好了。mybatis直接执行sql语句。</p>
</li>
<li><p>Mapped Statement也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。</p>
</li>
<li><p>Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对preparedStatement设置参数。</p>
</li>
<li><p>Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql后将输出结果映射至java对象中，输出结果映射过程相当于jdbc编程中对结果的解析处理过程。</p>
</li>
<li><p>Mapped Statement是输入与输出中间过程中产生的一些对象，通过这些对象去访问数据库。</p>
<h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p><img src="https://images2018.cnblogs.com/blog/1268854/201803/1268854-20180301135834041-259560906.png" alt=""></p>
</li>
</ol>
<ul>
<li>数据处理层四大对象：<ol>
<li>SQL执行： executor、</li>
<li>参数映射：parameterHandler、</li>
<li>结果处理和映射：ResultSetHandler /      StatementHandler</li>
<li>SQL解析：SqlSource<br><img src="https://img-blog.csdn.net/20180722095805935?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hMTU3MzI2MjUyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></li>
</ol>
</li>
</ul>
<h3 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h3><h4 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h4><ul>
<li>MyBatis的核心包和依赖包<br>mybatis-3.2.7.jar(核心包)<br>asm-3.3.1.jar(依赖包)<br>cglib-2.2.2.jar(依赖包)<br>commons-logging-1.1.1.jar(依赖包)<br>javassist-3.17.1-GA.jar(依赖包)<br>log4j-1.2.17.jar(依赖包)<br>log4j-api-2.0-rc1.jar(依赖包)<br>log4j-core-2.0-rc1.jar(依赖包)<br>slf4j-api-1.7.5.jar(依赖包)<br>slf4j-log4j12-1.7.5.jar(依赖包)</li>
<li>MyBatis和Spring的整合包<br>mybatis-spring-1.2.2.jar<h3 id="实例-增删改查"><a href="#实例-增删改查" class="headerlink" title="实例 增删改查"></a>实例 增删改查</h3></li>
<li>mybatis全局配置文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 环境列表，并指定环境 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 定义环境，并指定名称  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 指定事物处理管理 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 设置数据源参数  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><span class="comment">&lt;!--设置驱动管理器  --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatis"</span>/&gt;</span><span class="comment">&lt;!--设置数据库地址  --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span><span class="comment">&lt;!--设置数据库账号--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span><span class="comment">&lt;!--设置数据库密码  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 映射文件列表  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 引入映射文件  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/direct/mybatis/entity/ClassesMapper.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/direct/mybatis/entity/StudentMapper.xml"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>实体类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.direct.mybatis.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classes</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> className;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> desc;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Classes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Classes</span><span class="params">(Integer id, <span class="keyword">String</span> className, <span class="keyword">String</span> desc)</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">	<span class="keyword">this</span>.className = className;</span><br><span class="line">	<span class="keyword">this</span>.desc = desc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> className;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassName</span><span class="params">(<span class="keyword">String</span> className)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.className = className;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> desc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(<span class="keyword">String</span> desc)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.desc = desc;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"Classes [id="</span> + id + <span class="string">", className="</span> + className + <span class="string">", desc="</span> + desc + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>映射文件<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper</span></span></span><br><span class="line"><span class="xml"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="xml"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- namespace 名称空间 ,名称空间不能重复，代理模式名称名称必须设置标准,和对应的dao类的全限名称相同--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.direct.mybatis.dao.ClassesDao"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.direct.mybatis.entity.Classes"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 select c_id id,c_name className,c_desc `desc` from Classes; </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- select标签定义的是查询语句  --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- select标签中的属性，parameterType：指定传入的参数类型 </span></span></span><br><span class="line"><span class="xml"> 					    resultType:指定返回值的类型</span></span><br><span class="line"><span class="xml"> 		sql语句中，指定参数，使用 #</span><span class="template-variable">&#123;任意的字符&#125;</span><span class="xml">			    </span></span><br><span class="line"><span class="xml">  --&gt;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>  <span class="attr">resultType</span>=<span class="string">"com.direct.mybatis.entity.Classes"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	 select c_id id,c_name className,c_desc `desc` from Classes where c_id=#</span><span class="template-variable">&#123;qq&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper</span></span></span><br><span class="line"><span class="xml"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="xml"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- namespace 名称空间 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- select标签定义的是查询语句  --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- select标签中的属性，parameterType：指定传入的参数类型 </span></span></span><br><span class="line"><span class="xml"> 					    resultType:指定返回值的类型</span></span><br><span class="line"><span class="xml"> 		sql语句中，指定参数，使用 #</span><span class="template-variable">&#123;任意的字符&#125;</span><span class="xml">			    </span></span><br><span class="line"><span class="xml">  --&gt;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>  <span class="attr">resultType</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//更新的</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper</span></span></span><br><span class="line"><span class="xml"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="xml"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- namespace 名称空间 ,名称空间不能重复，代理模式名称名称必须设置标准,和对应的dao类的全限定名称相同--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.direct.mybatis.dao.ClassesDao"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- #</span></span><span class="template-variable">&#123;id&#125;</span><span class="xml"><span class="comment">指定参数，使用#</span></span><span class="template-variable">&#123;任意字符&#125;</span><span class="xml"><span class="comment">   --&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!-- 实体类和表名字段要对应</span></span></span><br><span class="line"><span class="xml">若不对应解决方法：</span></span><br><span class="line"><span class="xml">	1.sql语句加别名   select c_id id。。。。。</span></span><br><span class="line"><span class="xml"> 	2.如下添加<span class="tag">&lt;<span class="name">resultMap</span>&gt;</span>标签</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 对象属性和结果集的列名映射  --&gt;</span>	</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"classesMap"</span> <span class="attr">type</span>=<span class="string">"com.direct.mybatis.entity.Classes"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"className"</span> <span class="attr">column</span>=<span class="string">"c_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"desc"</span> <span class="attr">column</span>=<span class="string">"c_desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!--  条件查询 --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"classesMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 select * from Classes </span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 条件标签，根据条件拼sql  --&gt;</span></span></span><br><span class="line"><span class="xml">	 <span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 <span class="comment">&lt;!-- if判断标签  --&gt;</span></span></span><br><span class="line"><span class="xml">	 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"cName != null "</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 		c_name like #</span><span class="template-variable">&#123;cName&#125;</span></span><br><span class="line"><span class="xml">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		 <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"desc != null "</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 		and c_desc like #</span><span class="template-variable">&#123;desc&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 limit #</span><span class="template-variable">&#123;pageNum&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;pageSize&#125;</span><span class="xml">; </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- select标签定义的是查询语句  --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- select标签中的属性，parameterType：指定传入的参数类型 </span></span></span><br><span class="line"><span class="xml"> 					    resultType:指定返回值的类型</span></span><br><span class="line"><span class="xml"> 		sql语句中，指定参数，使用 #</span><span class="template-variable">&#123;任意的字符&#125;</span><span class="xml">			    </span></span><br><span class="line"><span class="xml">  --&gt;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>  <span class="attr">resultType</span>=<span class="string">"com.direct.mybatis.entity.Classes"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	 select c_id id,c_name className,c_desc `desc` from Classes where c_id=#</span><span class="template-variable">&#123;qq&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- delete标签定义的是删除语句  --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> &gt;</span></span></span><br><span class="line"><span class="xml"> 	 delete from classes where c_id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addOne"</span> <span class="attr">parameterType</span>=<span class="string">"com.direct.mybatis.entity.Classes"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	insert into classes(c_name,c_desc) value(#</span><span class="template-variable">&#123;className&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;desc&#125;</span><span class="xml">);</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- parameterType:设置需要传入的对象的类型  --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateOne"</span> <span class="attr">parameterType</span>=<span class="string">"com.direct.mybatis.entity.Classes"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	update classes set c_name=#</span><span class="template-variable">&#123;className&#125;</span><span class="xml">,c_desc=#</span><span class="template-variable">&#123;desc&#125;</span><span class="xml"> where c_id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>数据持久层Dao<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.direct.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.direct.mybatis.entity.Classes;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Connection;</span><br><span class="line">   <span class="comment">//	注意：增删改需要提交事务否则回滚事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassesDao</span> &#123;</span></span><br><span class="line"><span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">	<span class="comment">//获取配置文件输入流</span></span><br><span class="line">	InputStream inputStream=null;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//创建会话工厂构造者</span></span><br><span class="line">	SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">	<span class="comment">//通过工厂会话构造者根据配置文件构造会话工厂</span></span><br><span class="line">	  sqlSessionFactory =  sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//条件查询</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Classes&gt; findAll(Map <span class="built_in">map</span>)&#123;</span><br><span class="line">	List&lt;Classes&gt; cList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//通过会话工厂获取会话</span></span><br><span class="line">	SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">	<span class="comment">//查询数据,根据sql语句的id值指定调用的sql语句</span></span><br><span class="line">	cList = sqlSession.selectList(<span class="string">"findAll"</span>,<span class="built_in">map</span>);</span><br><span class="line">	<span class="comment">//释放资源,关闭会话</span></span><br><span class="line">	sqlSession.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> cList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据id查询班级</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Classes <span class="title">selectOneById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//通过会话工厂获取会话</span></span><br><span class="line">	SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">	<span class="comment">//查询数据,根据sql语句的id值指定调用的sql语句,并传入指定的参数</span></span><br><span class="line">	Classes classes = sqlSession.selectOne(<span class="string">"selectOneById"</span>, id);</span><br><span class="line">	<span class="comment">//释放资源,关闭会话</span></span><br><span class="line">	sqlSession.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> classes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据id删除班级</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delOneById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	<span class="comment">//获取会话</span></span><br><span class="line">	SqlSession sqlSession =  sqlSessionFactory.openSession();</span><br><span class="line">	<span class="comment">//执行删除</span></span><br><span class="line">	<span class="keyword">int</span> num =  sqlSession.<span class="keyword">delete</span>(<span class="string">"deleteOneById"</span>,id);</span><br><span class="line">	<span class="comment">//事物提交,所有的数据更新操作都需要提交事物</span></span><br><span class="line">	sqlSession.commit();</span><br><span class="line">	<span class="comment">//关闭回话</span></span><br><span class="line">	sqlSession.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加班级</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addOne</span><span class="params">(Classes classes)</span></span>&#123;</span><br><span class="line">	<span class="comment">//获取会话</span></span><br><span class="line">	SqlSession sqlSession =  sqlSessionFactory.openSession();</span><br><span class="line">	<span class="comment">//执行删除</span></span><br><span class="line">	<span class="keyword">int</span> num =  sqlSession.<span class="keyword">delete</span>(<span class="string">"addOne"</span>,classes);</span><br><span class="line">	<span class="comment">//事物提交,所有的数据更新操作都需要提交事物</span></span><br><span class="line">	sqlSession.commit();</span><br><span class="line">	<span class="comment">//关闭回话</span></span><br><span class="line">	sqlSession.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改班级</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateOne</span><span class="params">(Classes classes)</span></span>&#123;</span><br><span class="line">	<span class="comment">//获取会话</span></span><br><span class="line">	SqlSession sqlSession =  sqlSessionFactory.openSession();</span><br><span class="line">	<span class="comment">//执行删除</span></span><br><span class="line">	<span class="keyword">int</span> num =  sqlSession.<span class="keyword">delete</span>(<span class="string">"updateOne"</span>,classes);</span><br><span class="line">	<span class="comment">//事物提交,所有的数据更新操作都需要提交事物</span></span><br><span class="line">	sqlSession.commit();</span><br><span class="line">	<span class="comment">//关闭回话</span></span><br><span class="line">	sqlSession.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.direct.mybatis.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.direct.mybatis.dao.ClassesDao;</span><br><span class="line"><span class="keyword">import</span> com.direct.mybatis.entity.Classes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisDaoTest</span> &#123;</span></span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	ClassesDao classDao = <span class="keyword">new</span> ClassesDao();</span><br><span class="line">	<span class="comment">//参数集合Map,设置模糊查询条件</span></span><br><span class="line">	Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"desc"</span>, <span class="string">"%哈%"</span>);</span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"pageNum"</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"pageSize"</span>, <span class="number">2</span>);</span><br><span class="line">	</span><br><span class="line">	List&lt;Classes&gt; cList = classDao.findAll(<span class="built_in">map</span>);</span><br><span class="line">	</span><br><span class="line">	System.out.<span class="built_in">println</span>(cList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectOneTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	ClassesDao classDao = <span class="keyword">new</span> ClassesDao();</span><br><span class="line">	</span><br><span class="line">	Classes classes = classDao.selectOneById(<span class="number">4</span>);</span><br><span class="line">	</span><br><span class="line">	System.out.<span class="built_in">println</span>(classes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delOneTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	ClassesDao classDao = <span class="keyword">new</span> ClassesDao();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> num = classDao.delOneById(<span class="number">5</span>);</span><br><span class="line">	</span><br><span class="line">	System.out.<span class="built_in">println</span>(<span class="string">"删除了"</span>+num+<span class="string">"条数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOneTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	ClassesDao classDao = <span class="keyword">new</span> ClassesDao();</span><br><span class="line">	</span><br><span class="line">	Classes classes = <span class="keyword">new</span> Classes(<span class="string">"a1802"</span>,null);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> num = classDao.addOne(classes);</span><br><span class="line">	</span><br><span class="line">	System.out.<span class="built_in">println</span>(<span class="string">"添加了"</span>+num+<span class="string">"条数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOneTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	ClassesDao classDao = <span class="keyword">new</span> ClassesDao();</span><br><span class="line">	</span><br><span class="line">	Classes classes = <span class="keyword">new</span> Classes(<span class="number">9</span>,<span class="string">"a1802"</span>,<span class="string">"哈哈哈"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> num = classDao.updateOne(classes);</span><br><span class="line">	</span><br><span class="line">	System.out.<span class="built_in">println</span>(<span class="string">"修改了"</span>+num+<span class="string">"条数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
————————————————<br>本文参考：CSDN博主「shuaibi.1」<br>原文链接：<a href="https://blog.csdn.net/sinat_37064286/article/details/86768268" target="_blank" rel="noopener">https://blog.csdn.net/sinat_37064286/article/details/86768268</a></li>
</ul>
]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>java 反射机制详解</title>
    <url>/2019/12/02/java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h3><pre><code>* 框架：半成品软件，可以在框架的基础上进行软件开发，简化编码
* 反射：将类的各个组成部分封装为其他对象，这就是反射机制；
    * 好处：
          1. 可以在程序运行过程中，操作这些对象。
          2. 可以解耦，提高程序的可扩展性 </code></pre><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul>
<li><p>定义：JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p>
</li>
<li><p>用途：在日常的第三方应用开发过程中，经常会遇到某个类的某个成员变量、方法或是属性是私有的或是只对系统应用开放，这时候就可以利用Java的反射机制通过反射来获取所需的私有成员或是方法。</p>
<h4 id="反射机制的相关类"><a href="#反射机制的相关类" class="headerlink" title="反射机制的相关类"></a>反射机制的相关类</h4></li>
<li><p>获取Class(字节码文件)对象的方式：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td>Class.forName(“全类名”)</td>
<td align="center">将字节码文件加载进内存，返回class对象(一般用于：配置文件，将类名定义在配置文件中。读取文件，加载类)</td>
</tr>
<tr>
<td>类名.class</td>
<td align="center">通过类名属性class属性获取(一般用于：参数的传递)</td>
</tr>
<tr>
<td>对象.getClass()</td>
<td align="center">getClass()方法在Object类中定义的(一般用于：对象获取字节码方式)</td>
</tr>
<tr>
<td>- 注意：同一个字节码文件(*.class)在一次程序运行过程中，只被加载一次，不论那种方式获取的class对象都是同一个。</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>与Java反射相关的类如下：<br>类名|用途<br>–|:–:<br>Class类|代表类的实体，在运行的Java应用程序中表示类和接口<br>Field类|代表类的成员变量（成员变量也称为类的属性）<br>Method类|代表类的方法<br>Constructor类|代表类的构造方法</p>
<h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><ul>
<li>Class代表类的实体，在运行的Java应用程序中表示类和接口。在这个类中提供了很多有用的方法，这里对他们简单的分类介绍。<h5 id="获得类相关的方法"><a href="#获得类相关的方法" class="headerlink" title="获得类相关的方法"></a>获得类相关的方法</h5></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th align="center">用途</th>
</tr>
</thead>
<tbody><tr>
<td>asSubclass(Class<U> clazz)</td>
<td align="center">把传递的类的对象转换成代表其子类的对象</td>
</tr>
<tr>
<td>Cast</td>
<td align="center">把对象转换成代表类或是接口的对象</td>
</tr>
<tr>
<td>getClassLoader()</td>
<td align="center">获得类的加载器</td>
</tr>
<tr>
<td>getClasses()</td>
<td align="center">返回一个数组，数组中包含该类中所有公共类和接口类的对象</td>
</tr>
<tr>
<td>getDeclaredClasses()</td>
<td align="center">返回一个数组，数组中包含该类中所有类和接口类的对象</td>
</tr>
<tr>
<td>forName(String className)</td>
<td align="center">根据类名返回类的对象</td>
</tr>
<tr>
<td>getName()</td>
<td align="center">获得类的完整路径名字</td>
</tr>
<tr>
<td>newInstance()</td>
<td align="center">创建类的实例</td>
</tr>
<tr>
<td>getPackage()</td>
<td align="center">获得类的包</td>
</tr>
<tr>
<td>getSimpleName()</td>
<td align="center">获得类的名字</td>
</tr>
<tr>
<td>getSuperclass()</td>
<td align="center">获得当前类继承的父类的名字</td>
</tr>
<tr>
<td>getInterfaces()</td>
<td align="center">获得当前类实现的类或是接口</td>
</tr>
</tbody></table>
<h5 id="获得类中属性相关的方法"><a href="#获得类中属性相关的方法" class="headerlink" title="获得类中属性相关的方法"></a>获得类中属性相关的方法</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>Field[] getField(String name)</td>
<td align="left">获得某个公有的属性对象</td>
</tr>
<tr>
<td>Field[] getFields()</td>
<td align="left">获得所有公有的属性对象</td>
</tr>
<tr>
<td>Field[] getDeclaredField(String name)</td>
<td align="left">获得某个属性对象</td>
</tr>
<tr>
<td>Field[] getDeclaredFields()</td>
<td align="left">获得所有属性对象</td>
</tr>
</tbody></table>
<h5 id="获得类中注解相关的方法"><a href="#获得类中注解相关的方法" class="headerlink" title="获得类中注解相关的方法"></a>获得类中注解相关的方法</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>Field[] getAnnotation(Class<A> annotationClass)</td>
<td align="left">返回该类中与参数类型匹配的公有注解对象</td>
</tr>
<tr>
<td>Field[] getAnnotations()</td>
<td align="left">返回该类所有的公有注解对象</td>
</tr>
<tr>
<td>Field[] getDeclaredAnnotation(Class<A> annotationClass)</td>
<td align="left">返回该类中与参数类型匹配的所有注解对象</td>
</tr>
<tr>
<td>Field[] getDeclaredAnnotations()</td>
<td align="left">返回该类所有的注解对象</td>
</tr>
</tbody></table>
<h5 id="获得类中构造器相关的方法"><a href="#获得类中构造器相关的方法" class="headerlink" title="获得类中构造器相关的方法"></a>获得类中构造器相关的方法</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>Constructor<?>[] getConstructor(Class...<?> Constructor&lt;?&gt;[] parameterTypes)</td>
<td align="left">获得该类中与参数类型匹配的公有构造方法</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getConstructors()</td>
<td align="left">获得该类的所有公有构造方法</td>
</tr>
<tr>
<td>Constructor<?>[] getDeclaredConstructor(Class...<?> parameterTypes)</td>
<td align="left">获得该类中与参数类型匹配的构造方法</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td>
<td align="left">获得该类所有构造方法</td>
</tr>
</tbody></table>
<h5 id="获得类中方法相关的方法"><a href="#获得类中方法相关的方法" class="headerlink" title="获得类中方法相关的方法"></a>获得类中方法相关的方法</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>Method[] getMethod(String name, Class…&lt;?&gt; parameterTypes)</td>
<td align="left">获得该类某个公有的方法</td>
</tr>
<tr>
<td>Method[] getMethods()</td>
<td align="left">获得该类所有公有的方法</td>
</tr>
<tr>
<td>Method[] getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td>
<td align="left">获得该类某个方法</td>
</tr>
<tr>
<td>Method[] getDeclaredMethods()</td>
<td align="left">获得该类所有方法</td>
</tr>
</tbody></table>
<h5 id="类中其他重要的方法"><a href="#类中其他重要的方法" class="headerlink" title="类中其他重要的方法"></a>类中其他重要的方法</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>isAnnotation()</td>
<td align="left">如果是注解类型则返回true</td>
</tr>
<tr>
<td>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</td>
<td align="left">如果是指定类型注解类型则返回true</td>
</tr>
<tr>
<td>isAnonymousClass()</td>
<td align="left">如果是匿名类则返回true</td>
</tr>
<tr>
<td>isArray()</td>
<td align="left">如果是一个数组类则返回true</td>
</tr>
<tr>
<td>isEnum()</td>
<td align="left">如果是枚举类则返回true</td>
</tr>
<tr>
<td>isInstance(Object obj)</td>
<td align="left">如果obj是该类的实例则返回true</td>
</tr>
<tr>
<td>isInterface()</td>
<td align="left">如果是接口类则返回true</td>
</tr>
<tr>
<td>isLocalClass()</td>
<td align="left">如果是局部类则返回true</td>
</tr>
<tr>
<td>isMemberClass()</td>
<td align="left">如果是内部类则返回true</td>
</tr>
</tbody></table>
<h5 id="Field类-Field代表类的成员变量（成员变量也称为类的属性）。"><a href="#Field类-Field代表类的成员变量（成员变量也称为类的属性）。" class="headerlink" title="Field类|Field代表类的成员变量（成员变量也称为类的属性）。"></a>Field类|Field代表类的成员变量（成员变量也称为类的属性）。</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>equals(Object obj)</td>
<td align="left">属性与obj相等则返回true</td>
</tr>
<tr>
<td>get(Object obj)</td>
<td align="left">获得obj中对应的属性值</td>
</tr>
<tr>
<td>set(Object obj, Object value)</td>
<td align="left">设置obj中对应属性值</td>
</tr>
</tbody></table>
<h5 id="Method类-Method代表类的方法。"><a href="#Method类-Method代表类的方法。" class="headerlink" title="Method类|Method代表类的方法。"></a>Method类|Method代表类的方法。</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>invoke(Object obj, Object… args)</td>
<td align="left">传递object对象及参数调用该对象对应的方法</td>
</tr>
</tbody></table>
<h5 id="Constructor类-Constructor代表类的构造方法。"><a href="#Constructor类-Constructor代表类的构造方法。" class="headerlink" title="Constructor类|Constructor代表类的构造方法。"></a>Constructor类|Constructor代表类的构造方法。</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>newInstance(Object… initargs)</td>
<td align="left">根据传递的参数创建类的对象</td>
</tr>
</tbody></table>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul>
<li><p>获取成员变量</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*1. 获取成员变量们</span></span><br><span class="line"><span class="comment">  * Field[] getFields();  获取public修饰的成员变量</span></span><br><span class="line"><span class="comment">  * Field[] getField(String name); 获取指定的public修饰的成员变量</span></span><br><span class="line"><span class="comment">  * Field[] getDeclaredFields();</span></span><br><span class="line"><span class="comment">  * Field[] getDeclaredField(String name);</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> test &#123;</span><br><span class="line">   <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">       //<span class="number">0.</span>获取Person的<span class="keyword">class</span>对象</span><br><span class="line">       <span class="keyword">Class</span> personClass = Person.<span class="keyword">class</span>;</span><br><span class="line">       //<span class="number">1.</span>Field[] getFields() 获取所有<span class="built_in">public</span>修饰的成员变量</span><br><span class="line">       Field[] fields = personClass.getFields();</span><br><span class="line">       <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println(field);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println("---------");</span><br><span class="line">       //<span class="number">1.</span>Field[] getFields(String <span class="type">name</span>) 获取指定<span class="built_in">public</span>修饰的成员变量</span><br><span class="line">       Field mimi = personClass.getField("mimi");</span><br><span class="line">       //操作<span class="keyword">get</span>|<span class="keyword">set</span></span><br><span class="line">       Person p = <span class="built_in">new</span> Person();</span><br><span class="line">       <span class="keyword">Object</span> <span class="keyword">value</span> = mimi.<span class="keyword">get</span>(p);</span><br><span class="line">       //mimi.<span class="keyword">set</span>("咪咪");</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">value</span>);</span><br><span class="line">       mimi.<span class="keyword">set</span>(p, "咪咪");</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(p);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println("-----------");</span><br><span class="line">       //<span class="number">3.</span>Field[] getDeclareFields() 获取所有的成员变量,不考虑修饰符</span><br><span class="line">       Field[] declaredFields = personClass.getDeclaredFields();</span><br><span class="line">       <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println(field);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println("-----------");</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       *4.Field[] getDeclareFields(String name)</span></span><br><span class="line"><span class="comment">       * 获取指定的成员变量,注意设置私有的属性是汇报错</span></span><br><span class="line"><span class="comment">       * 解决方法：暴力反射</span></span><br><span class="line"><span class="comment">       * 忽略访问修饰符的安全检查</span></span><br><span class="line"><span class="comment">       * 对象.setAccessible()</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       Field <span class="type">name</span> = personClass.getDeclaredField("name");</span><br><span class="line">       //忽略访问修饰符的安全检查</span><br><span class="line">       <span class="type">name</span>.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">Object</span> value2 = <span class="type">name</span>.<span class="keyword">get</span>(p);</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(value2);</span><br><span class="line">       <span class="type">name</span>.<span class="keyword">set</span>(p, "赵明");</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(p);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>获取构造器</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static void main(String<span class="literal">[]</span> args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">      <span class="comment">//0.获取Person的class对象</span></span><br><span class="line">      Class personClass = <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*2. 获取构造方法们</span></span><br><span class="line"><span class="comment">      * Constructor&lt;?&gt;[] getConstructors();</span></span><br><span class="line"><span class="comment">      * Constructor&lt;T&gt;[] getConstructor(类&lt;?&gt;... parameterTypes);</span></span><br><span class="line"><span class="comment">      * Constructor&lt;?&gt;[] getDeclaredConstructors();</span></span><br><span class="line"><span class="comment">      * Constructor&lt;T&gt;[] getDeclaredConstructor(类&lt;?&gt;... parameterTypes);</span></span><br><span class="line"><span class="comment">      **/</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取构造器Constructor&lt;T&gt; getConstructor（类&lt;?&gt;.... parameterTypes）  创建对象的</span></span><br><span class="line">      Constructor constructor = personClass.get<span class="constructor">Constructor(String.<span class="params">class</span>,<span class="params">int</span>.<span class="params">class</span>)</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(constructor);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建对象.newInstance("莉莉",23);</span></span><br><span class="line">      Object person  = constructor.<span class="keyword">new</span><span class="constructor">Instance(<span class="string">"莉莉"</span>,23)</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(person);</span><br><span class="line"></span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"======================="</span>);</span><br><span class="line">      <span class="comment">//空参的构造方法</span></span><br><span class="line">      Constructor constructor1 = personClass.get<span class="constructor">Constructor()</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(constructor1);</span><br><span class="line">      <span class="comment">//创建对象</span></span><br><span class="line">      Object person1  = constructor1.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(person1);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Class类创建对象方法,一般使用此方法比较简单</span></span><br><span class="line">      Object o = personClass.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(o);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取成员方法</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static void main(String<span class="literal">[]</span> args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">//0.获取Person的class对象</span></span><br><span class="line">        Class personClass = <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*3. 获取成员方法们</span></span><br><span class="line"><span class="comment">         * Method[] getMethod()</span></span><br><span class="line"><span class="comment">         * Method getMethod(String name,类&lt;?&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment">         * Method[] getDeclaredMethod()</span></span><br><span class="line"><span class="comment">         * Method getDeclaredMethod(String name,类&lt;?&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="comment">//获取指定名称的方法  无参</span></span><br><span class="line">        Method eat = personClass.get<span class="constructor">Method(<span class="string">"eat"</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行方法 Object invoke(Object);</span></span><br><span class="line">        Person person = <span class="keyword">new</span> <span class="constructor">Person()</span>;</span><br><span class="line">        eat.invoke(person);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定名称的方法  有参</span></span><br><span class="line">        Method eat_method = personClass.get<span class="constructor">Method(<span class="string">"eat"</span>,String.<span class="params">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行方法 Object invoke(Object);</span></span><br><span class="line">        Person person1 = <span class="keyword">new</span> <span class="constructor">Person()</span>;</span><br><span class="line">        eat_method.invoke(person1,<span class="string">"好吃的"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"+++++++++++++++++++++++++++++++++++++"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有public修饰的方法</span></span><br><span class="line">        Method<span class="literal">[]</span> methods = personClass.get<span class="constructor">Methods()</span>;</span><br><span class="line">        for (Method <span class="keyword">method</span> : methods)&#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="keyword">method</span>);</span><br><span class="line">            <span class="comment">//获取方法名称</span></span><br><span class="line">            String name = <span class="keyword">method</span>.get<span class="constructor">Name()</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(name);</span><br><span class="line">            <span class="comment">//method.setAccessible(true);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全限定类名 4. 获取类名 String getName()</span></span><br><span class="line">        String classname = personClass.get<span class="constructor">Name()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(classname);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3></li>
<li><p>需求：写一个”框架”,可以帮我们 创建任意类的对象，并且执行其中任意方法</p>
</li>
<li><p>不改变类的任何代码，可以创建任意类的对象，可以执行任意方法</p>
</li>
<li><p>pro.properties配置文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全部限定类名</span></span><br><span class="line"><span class="attr">className</span> = Test.Person</span><br><span class="line"><span class="comment">#方法名</span></span><br><span class="line"><span class="attr">methodName</span> = eat</span><br><span class="line"></span><br><span class="line"><span class="comment">#className = Test.Student</span></span><br><span class="line"><span class="comment">#methodName = sleep</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static void main(String<span class="literal">[]</span> args) throws IOException, ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">      <span class="comment">//可以执行创建任意类的对象，可以执行任意方法</span></span><br><span class="line">      <span class="comment">//不改变类的任何代码，可以创建任意类的对象，可以执行任意方法</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//Person person = new Person();</span></span><br><span class="line">      <span class="comment">//person.eat();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//加载配置文件</span></span><br><span class="line">      <span class="comment">//1.创建properties对象</span></span><br><span class="line">      Properties pro = <span class="keyword">new</span> <span class="constructor">Properties()</span>;</span><br><span class="line">      <span class="comment">//2.加载配置文件，转换为一个集合</span></span><br><span class="line">      <span class="comment">//2.1获取Class目录下的配置文件</span></span><br><span class="line">      ClassLoader classLoader = <span class="module-access"><span class="module"><span class="identifier">Refleat</span>.</span></span><span class="keyword">class</span>.get<span class="constructor">ClassLoader()</span>;</span><br><span class="line">      InputStream is = classLoader.get<span class="constructor">ResourceAsStream(<span class="string">"pro.properties"</span>)</span>;</span><br><span class="line">      pro.load(is);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//3.获取配置文件中定义的数据</span></span><br><span class="line">      String classname = pro.get<span class="constructor">Property(<span class="string">"className"</span>)</span>;</span><br><span class="line">      String <span class="keyword">method</span> = pro.get<span class="constructor">Property(<span class="string">"methodName"</span>)</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//4.加载该类进内存</span></span><br><span class="line">      Class cls = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="params">classname</span>)</span>;</span><br><span class="line">      <span class="comment">//5.创建对象</span></span><br><span class="line">      Object obj = cls.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br><span class="line">      <span class="comment">//6.获取方法对象</span></span><br><span class="line">      Method method1 = cls.get<span class="constructor">Method(<span class="params">method</span>)</span>;</span><br><span class="line">      <span class="comment">//7.执行方法</span></span><br><span class="line">      method1.invoke(obj);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2 框架(三)</title>
    <url>/2019/11/30/Struts2-%E6%A1%86%E6%9E%B6-%E4%B8%89/</url>
    <content><![CDATA[<h4 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> <span class="attr">prefix</span>=<span class="string">"s"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>ognl表达式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- ognl表达式</span></span></span><br><span class="line"><span class="xml">	1.s:property表示从作用域取值 有‘’号表示字符串 </span></span><br><span class="line"><span class="xml">	2.可调用方法</span></span><br><span class="line"><span class="xml">	3.访问静态属性</span></span><br><span class="line"><span class="xml">	默认情况下，struts2把静态属性访问禁止，如果使用需要打开</span></span><br><span class="line"><span class="xml">	4.封装list数据，数组  Map集合#</span><span class="template-variable">&#123;key:value&#125;</span><span class="xml">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">" 'java struts' "</span>/&gt;</span>的长度</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">" 'java struts'.length() "</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">int的最大值<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"@java.lang.Integer@MAX_VALUE"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">随机数：<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"@java.lang.Math@random()*10"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">数组：<span class="tag">&lt;<span class="name">s:radio</span> <span class="attr">list</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;'男','女'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">name</span>=<span class="string">"Sex"</span> <span class="attr">label</span>=<span class="string">"性别"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:radio</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">Map集合:<span class="tag">&lt;<span class="name">s:radio</span> <span class="attr">list</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;'nan':'男','nv':'女'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">name</span>=<span class="string">"Sex"</span> <span class="attr">label</span>=<span class="string">"性别"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:radio</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="ActionContext"><a href="#ActionContext" class="headerlink" title="ActionContext"></a>ActionContext</h3><ul>
<li><p>ActionContext它是action上下文，strtus2框架它使用actionContext来保存Action在执行过程中所需要的一些对象，例如 session, application…</p>
</li>
<li><p>意思就是:<br>Struts2会根据每一次的http请求来创建对应的ActionContext,它是与当前线程绑定的。</p>
</li>
<li><p>每一次请求，就是一个线程，对应着一个request,每一次请求，会创建一个Action,每一个action对应一个ActionContext.每一次请求也对应着一个valueStack.</p>
</li>
<li><p>request—ActionContext—-Action—–ValueStack它们都对应着一次请求(一个线程).</p>
</li>
<li><p>只有存在了action才会存在action上下文(也就是ActionContext)</p>
</li>
<li><p>在ActionContext中持有valuestack中context的引用,而在context中持有root的引用</p>
</li>
<li><p>ValueStack存储数据:<br>如果通过valueStack.set(name,value)存储的,可以在页面是使用&lt;s:property value=”name”&gt;获取<br>如果通过valuestack.push(value)存储的,可以根据它在root中的序号来获取.例如<br>&lt;s:property value=”[1].top”&gt;</p>
</li>
<li><p>ActionContext就是ValueStack中的context,(就是一个容器)属于Map集合,存储session,request,response等对象,只有有了action才会有  ActionContext;所在它持有对root的引用,也就是持有对valuestack中compoundRoot(对象栈)的引用,里面主要存储action的相关数据;</p>
<h4 id="valueStack内部结构"><a href="#valueStack内部结构" class="headerlink" title="valueStack内部结构"></a>valueStack内部结构</h4></li>
<li><p>ValueStack的组成:<br>它就是一个ArrayList 和 context<br>在struts2框架中我们通过ognl表达式来获取valueStack中数据，没有使用#就会从CompoundRoot中获取数据，<br>如果使用#来获取，这时就会从context中来获取<br>CompoundRoot主要存储的是action的相关数据;其实就是一个ArrayList<br>context 其实就是一个Map集合</p>
</li>
<li><p>主要存储了一些引用，这个引用主要是关于web开发中相关信息<br>pameters :请求 参数<br>request:请求对象中所有属性<br>session:会话对象中所有属性<br>application:application对象中的所有发展<br>其中的context对象是OGNLContext，它实现了map接口，在valueStack的默认实现类中，OgnlValueStack中调用OGNL方法，返回一个OgnlContext对象。</p>
</li>
<li><p>往ActionContext中存数据</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TextAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line">	public <span class="type">String</span> execute()&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//往ActionContext中存数据</span></span><br><span class="line">	    <span class="type">ActionContext</span> contextMap = <span class="type">ActionContext</span>.getContext();</span><br><span class="line">	    contextMap.put(<span class="string">"username"</span>, <span class="string">"zhao2"</span>);</span><br><span class="line">	    contextMap.put(<span class="string">"password"</span>, <span class="string">"zhao1256"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>struts.xml 核心配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置常量  struts.action.extension表示后缀--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;constant name="struts.action.extension" value="php"&gt;&lt;/constant&gt;--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.ognl.allowStaticMethodAccess"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- abstract="true"抽象 用于继承 若包有abstract="true"属性  有包继承此包即可是有所有功能</span></span><br><span class="line"><span class="comment">	          一般抽象包不声明Action --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- namespace="/" 命名空间， 访问路径，默认为空字符串</span></span><br><span class="line"><span class="comment">	      可有用于模块划分--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;package name="p1" extends="struts-default" namespace="/" abstract="true"&gt; --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.TextAction"</span>&gt;</span></span><br><span class="line">  			<span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>取值</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="ruby">    pageEncoding=<span class="string">"UTF-8"</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ taglib uri=<span class="string">"/struts-tags"</span> prefix=<span class="string">"s"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 取值&lt;s:property value=""/&gt; </span></span></span><br><span class="line"><span class="xml">	value写ONGL表达式</span></span><br><span class="line"><span class="xml">	取contextMap，写 #+key</span></span><br><span class="line"><span class="xml">	取valueStack，写key</span></span><br><span class="line"><span class="xml">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--  valueStack：&lt;s:property value="zhao"/&gt;--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--&lt;%</span></span><span class="ruby">session.setAttribute(<span class="string">"github"</span>, <span class="string">"outstanding99"</span>); </span><span class="xml"><span class="comment">%&gt;--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:debug</span>&gt;</span><span class="tag">&lt;/<span class="name">s:debug</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="往值栈（ValueStack）存数据"><a href="#往值栈（ValueStack）存数据" class="headerlink" title="往值栈（ValueStack）存数据"></a>往值栈（ValueStack）存数据</h3><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Domo1Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public <span class="type">String</span> execute() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="comment">//往值栈（ValueStack）存数据</span></span><br><span class="line">	<span class="type">ValueStack</span> vs = <span class="type">ActionContext</span>.getContext().getValueStack();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//put方法</span></span><br><span class="line">	vs.push(<span class="keyword">new</span> <span class="type">User</span>(<span class="string">"zhao"</span>,<span class="string">"123456"</span>));</span><br><span class="line">	vs.push(<span class="keyword">new</span> <span class="type">User</span>(<span class="string">"ji"</span>,<span class="string">"789456"</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//setvalue</span></span><br><span class="line">	</span><br><span class="line">	vs.setValue(<span class="string">"iiik"</span>, <span class="string">"rgsdg"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//contextMap里存值</span></span><br><span class="line">	vs.setValue(<span class="string">"#iiik"</span>, <span class="string">"rgsdg"</span>);</span><br><span class="line">	<span class="comment">//valueStack存map类型的值</span></span><br><span class="line">	vs.set(<span class="string">"user"</span>,<span class="keyword">new</span> <span class="type">User</span>(<span class="string">"120"</span>,<span class="string">"130"</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>取值</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;s:property/&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	ValueStack vs = ActionContext.getContext().getValueStack();</span><br><span class="line">	String <span class="keyword">value</span> =(String)vs.findValue("user");</span><br><span class="line">    //<span class="keyword">out</span>.<span class="keyword">write</span>(<span class="keyword">value</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;s:<span class="keyword">debug</span>&gt;&lt;/s:<span class="keyword">debug</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="iterator-迭代"><a href="#iterator-迭代" class="headerlink" title="iterator 迭代"></a>iterator 迭代</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@page</span> <span class="attr">import</span>=<span class="string">"com.opensymphony.xwork2.util.ValueStack"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@page</span> <span class="attr">import</span>=<span class="string">"com.opensymphony.xwork2.ActionContext"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> <span class="attr">prefix</span>=<span class="string">"s"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:debug</span>&gt;</span><span class="tag">&lt;/<span class="name">s:debug</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">1</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- value 值栈变量名</span></span></span><br><span class="line"><span class="xml">		var:遍历的变量名 存到contextMap中 </span></span><br><span class="line"><span class="xml">		status 遍历状态--&gt;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"user"</span> <span class="attr">var</span>=<span class="string">"u"</span> <span class="attr">status</span>=<span class="string">"st"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">			</span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#u.name"</span>/&gt;</span>-$</span><span class="template-variable">&#123;u.name&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#u.age"</span>/&gt;</span>-$</span><span class="template-variable">&#123;u.age&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#u.city"</span>/&gt;</span>-$</span><span class="template-variable">&#123;u.city&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;st.odd&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span>	</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 往作用域存数据</span></span></span><br><span class="line"><span class="xml">	value：值</span></span><br><span class="line"><span class="xml">	var：变量名</span></span><br><span class="line"><span class="xml">	scope：作用域 可写类型 application session request page action</span></span><br><span class="line"><span class="xml">	不写就是action</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:set</span> <span class="attr">value</span>=<span class="string">"'阿尔提尔'"</span>  <span class="attr">var</span>=<span class="string">"username"</span> <span class="attr">scope</span>=<span class="string">"application"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:set</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:set</span> <span class="attr">value</span>=<span class="string">"'阿尔提尔1'"</span>  <span class="attr">var</span>=<span class="string">"username1"</span> <span class="attr">scope</span>=<span class="string">"session"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:set</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:set</span> <span class="attr">value</span>=<span class="string">"'阿尔提尔2'"</span>  <span class="attr">var</span>=<span class="string">"username2"</span> <span class="attr">scope</span>=<span class="string">"request"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:set</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:set</span> <span class="attr">value</span>=<span class="string">"'阿尔提尔3'"</span>  <span class="attr">var</span>=<span class="string">"username3"</span> <span class="attr">scope</span>=<span class="string">"action"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:set</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 取值 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#application.username"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#session.username1"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#request.username2"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#action.username3"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:debug</span>&gt;</span><span class="tag">&lt;/<span class="name">s:debug</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 表单提交 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:form</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 下拉框 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:select</span> <span class="attr">list</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;'重庆','甘肃','哈密','陇西','通渭县'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">label</span>=<span class="string">"城市"</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">headerkey</span>=<span class="string">""</span> <span class="attr">headerValue</span>=<span class="string">"-请选择城市-"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:select</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:select</span> <span class="attr">list</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;'-请选择城市-','重庆','甘肃','哈密','陇西','通渭县'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">label</span>=<span class="string">"城市"</span> <span class="attr">name</span>=<span class="string">"city"</span> &gt;</span><span class="tag">&lt;/<span class="name">s:select</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 文本域 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:textarea</span> <span class="attr">label</span>=<span class="string">"备注"</span> <span class="attr">rows</span>=<span class="string">'10'</span> <span class="attr">clos</span>=<span class="string">'50'</span>&gt;</span><span class="tag">&lt;/<span class="name">s:textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:reset</span> <span class="attr">value</span>=<span class="string">'重置'</span>&gt;</span><span class="tag">&lt;/<span class="name">s:reset</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:submit</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">theme</span>=<span class="string">'simple'</span>&gt;</span><span class="tag">&lt;/<span class="name">s:submit</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:debug</span>&gt;</span><span class="tag">&lt;/<span class="name">s:debug</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">action</span>=<span class="string">"domo1"</span> <span class="attr">var</span>=<span class="string">"myurl"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>jojo<span class="tag">&lt;/<span class="name">s:param</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span>228<span class="tag">&lt;/<span class="name">s:param</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"city"</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">s:param</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">s:url</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;s:property value='#myurl'/&gt;"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="token令牌（表单重复提交）"><a href="#token令牌（表单重复提交）" class="headerlink" title="token令牌（表单重复提交）"></a>token令牌（表单重复提交）</h3></li>
<li><p>Struts 2标签中的token标签，可以用来生成一个独一无二的标记。</p>
</li>
<li><p>这个标记必须嵌套在form标签中使用，它会在表单里插入一个隐藏字段并把标记保存到HttpSession对象里。</p>
</li>
<li><p>toke标签必须与Token或Token Session拦截器配合使用，两个拦截器都能对token标签进行处理。</p>
</li>
<li><p>Token拦截器遇到重复提交表单的情况，会返回一个”invalid.token”结果并加上一个动作级别的错误。</p>
</li>
<li><p>Token Session拦截器扩展了Token拦截器并提供了一种更复杂的服务，它采取的做法与Token拦截器不同，它只是阻断了后续的提交，这样用户不提交多少次，就好像只是提交了一次。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.acton.LoginAction"</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/scccess.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"token"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"invalid.token"</span>&gt;</span>/invalidtoken.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:form</span> <span class="attr">action</span>=<span class="string">"avoid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:token</span>&gt;</span><span class="tag">&lt;/<span class="name">s:token</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">label</span>=<span class="string">"Enter your name"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:textfield</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">label</span>=<span class="string">"Enter your birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:textfield</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:submit</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:submit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>Struts2框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2 框架(二)</title>
    <url>/2019/11/30/Struts2-%E6%A1%86%E6%9E%B6-%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="struts2表单验证"><a href="#struts2表单验证" class="headerlink" title="struts2表单验证"></a>struts2表单验证</h3><h4 id="JSP页面"><a href="#JSP页面" class="headerlink" title="JSP页面"></a>JSP页面</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> <span class="attr">prefix</span>=<span class="string">"s"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:head</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:fielderror</span>&gt;</span><span class="tag">&lt;/<span class="name">s:fielderror</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/regirster.action"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	密&amp;emsp;码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	生&amp;emsp;日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"brithday"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	爱&amp;emsp;好：</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"写代码"</span>/&gt;</span>写代码</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"泡妞"</span>/&gt;</span>泡妞</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"运动"</span>/&gt;</span>运动</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	是否已婚：</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"married"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>未婚</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"married"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span>已婚</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="properties文件"><a href="#properties文件" class="headerlink" title="properties文件"></a>properties文件</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#连接设置</span></span><br><span class="line"><span class="attr">driverClassName</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">url</span>=jdbc:mysql://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>/struts2?useUnicode=<span class="literal">true</span>&amp;characterEncoding=UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">username</span>=root</span><br><span class="line"><span class="attr">password</span>=</span><br><span class="line"><span class="comment">#初始化连接</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="number">5</span></span><br><span class="line"><span class="comment">#最大连接数量</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="number">10</span></span><br><span class="line"><span class="comment">#最大空闲连接</span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h4 id="dbcp连接数据库工具类"><a href="#dbcp连接数据库工具类" class="headerlink" title="dbcp连接数据库工具类"></a>dbcp连接数据库工具类</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">package com.zhao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBCPUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">DataSource</span> ds = null;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		<span class="type">Properties</span> prop = new <span class="type">Properties</span>();</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="type">InputStream</span> <span class="keyword">in</span> =new <span class="type">DBCPUtils</span>().getClass().getClassLoader().getResourceAsStream(<span class="string">"dbcp.properties"</span>);</span><br><span class="line">			prop.load(<span class="keyword">in</span>);</span><br><span class="line">			ds = <span class="type">BasicDataSourceFactory</span>.createDataSource(prop);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(<span class="type">Exception</span> e)&#123;</span><br><span class="line">			<span class="keyword">throw</span> new <span class="type">ExceptionInInitializerError</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	提供一个数据源的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">DataSource</span> getDataSource()&#123;</span><br><span class="line">		<span class="keyword">return</span> ds;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	提供一个获取连接的方法，注意以后获取链接，必须使用该方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Connection</span> getConnection() <span class="keyword">throws</span> <span class="type">SQLException</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ds.getConnection();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	 public static void release(Connection conn,Statement stmt,ResultSet rs)&#123;</span></span><br><span class="line"><span class="comment">//	         if(rs!=null)&#123;</span></span><br><span class="line"><span class="comment">//		            try&#123;</span></span><br><span class="line"><span class="comment">//		                  //关闭存储查询结果的ResultSet对象</span></span><br><span class="line"><span class="comment">//		                 rs.close();</span></span><br><span class="line"><span class="comment">//		            &#125;catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//		                 e.printStackTrace();</span></span><br><span class="line"><span class="comment">//		             &#125;</span></span><br><span class="line"><span class="comment">//		            rs = null;</span></span><br><span class="line"><span class="comment">//		        &#125;</span></span><br><span class="line"><span class="comment">//		         if(stmt!=null)&#123;</span></span><br><span class="line"><span class="comment">//		             try&#123;</span></span><br><span class="line"><span class="comment">//		                  //关闭负责执行SQL命令的Statement对象</span></span><br><span class="line"><span class="comment">//		                 stmt.close();</span></span><br><span class="line"><span class="comment">//		             &#125;catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//		                  e.printStackTrace();</span></span><br><span class="line"><span class="comment">//		            &#125;</span></span><br><span class="line"><span class="comment">//		          &#125;</span></span><br><span class="line"><span class="comment">//		         </span></span><br><span class="line"><span class="comment">//		         if(conn!=null)&#123;</span></span><br><span class="line"><span class="comment">//		             try&#123;</span></span><br><span class="line"><span class="comment">//		                 //将Connection连接对象还给数据库连接池</span></span><br><span class="line"><span class="comment">//		                 conn.close();</span></span><br><span class="line"><span class="comment">//		              &#125;catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//		                  e.printStackTrace();</span></span><br><span class="line"><span class="comment">//		              &#125;</span></span><br><span class="line"><span class="comment">//		          &#125;</span></span><br><span class="line"><span class="comment">//		     &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line">	<span class="keyword">private</span> Date brithday;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> hobby;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> married;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"User [username="</span> + username + <span class="string">", password="</span> + password + <span class="string">", brithday="</span> + brithday + <span class="string">", hobby="</span> + hobby</span><br><span class="line">				+ <span class="string">", married="</span> + married + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(<span class="keyword">String</span> username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(<span class="keyword">String</span> password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getBrithday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> brithday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrithday</span><span class="params">(Date brithday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.brithday = brithday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getHobby</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> hobby;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(<span class="keyword">String</span> hobby)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMarried</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> married;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMarried</span><span class="params">(<span class="keyword">boolean</span> married)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.married = married;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建数据持久层"><a href="#创建数据持久层" class="headerlink" title="创建数据持久层"></a>创建数据持久层</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package com.zhao.dao.impl;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhao.dao1.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.zhao.model.<span class="keyword">User</span>;</span><br><span class="line"><span class="keyword">import</span> com.zhao.util.DBCPUtils;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserDaoImpl implements IUserDao&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> addUser(<span class="keyword">User</span> <span class="keyword">user</span>) throws SQLException&#123;</span><br><span class="line">		</span><br><span class="line">		QueryRunner runner = <span class="built_in">new</span> QueryRunner(DBCPUtils.getDataSource());</span><br><span class="line">		String <span class="keyword">sql</span> ="insert into user values(?,?,?,?,?)";</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> runner.<span class="keyword">update</span>(<span class="keyword">sql</span>, <span class="keyword">user</span>.getUsername(),<span class="keyword">user</span>.getPassword(),<span class="keyword">user</span>.getBrithday(),<span class="keyword">user</span>.getHobby(),<span class="keyword">user</span>.isMarried());	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建业务层"><a href="#创建业务层" class="headerlink" title="创建业务层"></a>创建业务层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	IUserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regirster</span><span class="params">(User user)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		userDao.addUser(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建控制层（struts2-Action）"><a href="#创建控制层（struts2-Action）" class="headerlink" title="创建控制层（struts2 Action）"></a>创建控制层（struts2 Action）</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserAction extends ActionSupport implements ModelDriven&lt;<span class="keyword">User</span>&gt;&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 采用模型注入</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	private static final long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">	<span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * struts2自带表单验证</span></span><br><span class="line"><span class="comment">	 * 第一种： 重写validate方法</span></span><br><span class="line"><span class="comment">	 * org.apache.commons.lang3.StringUtils;</span></span><br><span class="line"><span class="comment">	 * @return</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">//	@Override</span><br><span class="line">//	<span class="built_in">public</span> <span class="type">void</span> <span class="keyword">validate</span>() &#123;</span><br><span class="line">//		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">////		判断用户名是否为空</span><br><span class="line">////		<span class="keyword">if</span>(StringUtils.isEmpty(<span class="keyword">user</span>.getUsername()))相当于<span class="keyword">if</span>(username == <span class="keyword">null</span> &amp;&amp; "".equals(username));</span><br><span class="line">//		<span class="keyword">if</span>(StringUtils.isEmpty(<span class="keyword">user</span>.getUsername()))&#123;</span><br><span class="line">//			addFieldError("username", "用户名不能为空！");</span><br><span class="line">//		&#125;</span><br><span class="line">//	&#125;</span><br><span class="line">	<span class="built_in">public</span> String regirster() throws SQLException&#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">		IUserService us = <span class="built_in">new</span> UserServiceImpl();</span><br><span class="line">		us.regirster(<span class="keyword">user</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">NONE</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="keyword">User</span> getModel() &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">user</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="struts-xml核心配置文件"><a href="#struts-xml核心配置文件" class="headerlink" title="struts.xml核心配置文件"></a>struts.xml核心配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Action --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regirster"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"regirster"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/regirster.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="I18n国际化资源-resources里的properties文件"><a href="#I18n国际化资源-resources里的properties文件" class="headerlink" title="I18n国际化资源(resources里的properties文件)"></a>I18n国际化资源(resources里的properties文件)</h3><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> I18nTest &#123;</span><br><span class="line">	@Test</span><br><span class="line">	public void test1<span class="literal">()</span>&#123;</span><br><span class="line">		<span class="comment">//要读取国际化资源resources里的properties文件</span></span><br><span class="line">		<span class="comment">//baseName = 包名+文件名</span></span><br><span class="line">		ResourceBundle rb =<span class="module-access"><span class="module"><span class="identifier">ResourceBundle</span>.</span></span>get<span class="constructor">Bundle(<span class="string">"resources.message"</span>,Locale.US)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(rb.get<span class="constructor">String(<span class="string">"login.username"</span>)</span>);</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(rb.get<span class="constructor">String(<span class="string">"login.passord"</span>)</span>);</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(rb.get<span class="constructor">String(<span class="string">"login.Submit"</span>)</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="国际化资源properties文件"><a href="#国际化资源properties文件" class="headerlink" title="国际化资源properties文件"></a>国际化资源properties文件</h4><ul>
<li>文件名(必须)：message_en_US.properties<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">login.username</span>=USERNAME</span><br><span class="line"><span class="attr">login.password</span>=PASSWORD</span><br><span class="line"><span class="attr">login.Submit</span>=SUBMIT</span><br></pre></td></tr></table></figure></li>
<li><ul>
<li>文件名(必须)：message_zh_CN.properties<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">login.username</span>=用户名</span><br><span class="line"><span class="attr">login.password</span>=密码</span><br><span class="line"><span class="attr">login.Submit</span>=注册</span><br></pre></td></tr></table></figure>
<h3 id="拦截器-登录表单拦截"><a href="#拦截器-登录表单拦截" class="headerlink" title="拦截器(登录表单拦截)"></a>拦截器(登录表单拦截)</h3><h4 id="登陆页面JSP"><a href="#登陆页面JSP" class="headerlink" title="登陆页面JSP"></a>登陆页面JSP</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/login.action"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	密&amp;emsp;码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/studentlist"</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/teacherlist"</span>&gt;</span>老师列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//		1.接收参数</span></span><br><span class="line">		</span><br><span class="line"><span class="comment">//		2.判断登录成功与否</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"zhao"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"123"</span>.equals(user.getPassword()))&#123;</span><br><span class="line"><span class="comment">//			登录成功后，把user保存到session中</span></span><br><span class="line">			ServletActionContext.getRequest().getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> SUCCESS;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> NONE;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="拦截器-继承-MethodFilterInterceptor类"><a href="#拦截器-继承-MethodFilterInterceptor类" class="headerlink" title="拦截器 继承 MethodFilterInterceptor类"></a>拦截器 继承 MethodFilterInterceptor类</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CheckLoginInterceptor</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="type">String</span> doIntercept(<span class="type">ActionInvocation</span> invocation) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">		<span class="comment">//		获取session域对象user</span></span><br><span class="line">		<span class="type">User</span> user =(<span class="type">User</span>)<span class="type">ServletActionContext</span>.getRequest().getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line"><span class="comment">//		判断</span></span><br><span class="line">		<span class="keyword">if</span>(user != <span class="literal">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> invocation.invoke();</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		如果没有登陆，回到登录页面</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"tologinPage"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="struts2核心配置-（拦截器局部配置）"><a href="#struts2核心配置-（拦截器局部配置）" class="headerlink" title="struts2核心配置 （拦截器局部配置）"></a>struts2核心配置 （拦截器局部配置）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"> <span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 声明登录校验 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zhao.interceptor.CheckLoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"tologinPage"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/main.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"studentlist"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.StudentAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 拦截器引用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/student.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"teacherlist"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.TeacherAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 拦截器引用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/teacher.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"> <span class="comment">&lt;!--	&lt;package name="p2" extends="struts-default" namespace="/student"&gt;</span></span><br><span class="line"><span class="comment">		&lt;action name="list" class="com.zhao.web.action.StudentAction" method="list"&gt;</span></span><br><span class="line"><span class="comment">			&lt;result name="success"&gt;/WEB-INF/student.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">		&lt;/action&gt;</span></span><br><span class="line"><span class="comment">	&lt;/package&gt;</span></span><br><span class="line"><span class="comment">	&lt;package name="p3" extends="struts-default" namespace="/teacher"&gt;</span></span><br><span class="line"><span class="comment">		&lt;action name="list" class="com.zhao.web.action.TeacherAction" method="list"&gt;</span></span><br><span class="line"><span class="comment">			&lt;result name="success"&gt;/WEB-INF/teacher.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">		&lt;/action&gt;</span></span><br><span class="line"><span class="comment">	&lt;/package&gt;</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="struts2核心配置-（拦截器全局配置）"><a href="#struts2核心配置-（拦截器全局配置）" class="headerlink" title="struts2核心配置 （拦截器全局配置）"></a>struts2核心配置 （拦截器全局配置）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 声明登录校验 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zhao.interceptor.CheckLoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 拦截器分组 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"mydefaultStack"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 拦截器引用 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"tologinPage"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/main.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"studentlist"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.StudentAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 拦截器引用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"mydefaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/student.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"teacherlist"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.TeacherAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 拦截器引用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"mydefaultStack"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/teacher.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"> <span class="comment">&lt;!--	&lt;package name="p2" extends="struts-default" namespace="/student"&gt;</span></span><br><span class="line"><span class="comment">		&lt;action name="list" class="com.zhao.web.action.StudentAction" method="list"&gt;</span></span><br><span class="line"><span class="comment">			&lt;result name="success"&gt;/WEB-INF/student.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">		&lt;/action&gt;</span></span><br><span class="line"><span class="comment">	&lt;/package&gt;</span></span><br><span class="line"><span class="comment">	&lt;package name="p3" extends="struts-default" namespace="/teacher"&gt;</span></span><br><span class="line"><span class="comment">		&lt;action name="list" class="com.zhao.web.action.TeacherAction" method="list"&gt;</span></span><br><span class="line"><span class="comment">			&lt;result name="success"&gt;/WEB-INF/teacher.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">		&lt;/action&gt;</span></span><br><span class="line"><span class="comment">	&lt;/package&gt;</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="配置不要拦截其方法"><a href="#配置不要拦截其方法" class="headerlink" title="配置不要拦截其方法"></a>配置不要拦截其方法</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明登录校验 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zhao.interceptor.CheckLoginInterceptor"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 不要拦截login方法</span></span><br><span class="line"><span class="comment">			      excludeMethods排除方法，写方法名 </span></span><br><span class="line"><span class="comment">			            多个方法拦截用（，）号连接--&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">" excludeMethods"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 拦截器分组 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"mydefaultStack"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 拦截器引用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 修改默认拦截器 使用拦截器分组 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"mydefaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-interceptor-ref</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"tologinPage"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/main.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"studentlist"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.StudentAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/student.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"teacherlist"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.TeacherAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/teacher.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--	&lt;package name="p2" extends="struts-default" namespace="/student"&gt;</span></span><br><span class="line"><span class="comment">	&lt;action name="list" class="com.zhao.web.action.StudentAction" method="list"&gt;</span></span><br><span class="line"><span class="comment">		&lt;result name="success"&gt;/WEB-INF/student.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">	&lt;/action&gt;</span></span><br><span class="line"><span class="comment">&lt;/package&gt;</span></span><br><span class="line"><span class="comment">&lt;package name="p3" extends="struts-default" namespace="/teacher"&gt;</span></span><br><span class="line"><span class="comment">	&lt;action name="list" class="com.zhao.web.action.TeacherAction" method="list"&gt;</span></span><br><span class="line"><span class="comment">		&lt;result name="success"&gt;/WEB-INF/teacher.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">	&lt;/action&gt;</span></span><br><span class="line"><span class="comment">&lt;/package&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Action-1"><a href="#Action-1" class="headerlink" title="Action"></a>Action</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.<span class="type">ServletActionContext</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.<span class="type">ActionSupport</span>;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.<span class="type">ModelDriven</span>;</span><br><span class="line"><span class="keyword">import</span> com.zhao.model.<span class="type">User</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="title">implements</span> <span class="title">ModelDriven&lt;User&gt;</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">User</span> user = <span class="keyword">new</span> <span class="type">User</span>();</span><br><span class="line">	public <span class="type">String</span> login()&#123;</span><br><span class="line"><span class="comment">//		1.接收参数</span></span><br><span class="line">		</span><br><span class="line"><span class="comment">//		2.判断登录成功与否</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"zhao"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"123"</span>.equals(user.getPassword()))&#123;</span><br><span class="line"><span class="comment">//			登录成功后，把user保存到session中</span></span><br><span class="line">			<span class="type">ServletActionContext</span>.getRequest().getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">NONE</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	public <span class="type">User</span> getModel() &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> public <span class="class"><span class="keyword">class</span> <span class="title">TeacherAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">String</span> list()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> public <span class="class"><span class="keyword">class</span> <span class="title">StudentAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">String</span> list()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="struts2表单标签"><a href="#struts2表单标签" class="headerlink" title="struts2表单标签"></a>struts2表单标签</h3><figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="ruby">   pageEncoding=<span class="string">"UTF-8"</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@taglib uri=<span class="string">"/struts-tags"</span> prefix=<span class="string">"s"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">lable</span>=<span class="string">"用户名"</span> <span class="attr">name</span>=<span class="string">"username"</span> &gt;</span><span class="tag">&lt;/<span class="name">s:textfield</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:password</span> <span class="attr">lable</span>=<span class="string">"密码"</span> <span class="attr">name</span>=<span class="string">"password"</span> &gt;</span><span class="tag">&lt;/<span class="name">s:password</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:file</span> <span class="attr">label</span>=<span class="string">"图片"</span> <span class="attr">name</span>=<span class="string">"photo"</span> &gt;</span><span class="tag">&lt;/<span class="name">s:file</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:submit</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:submit</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="文件上传Struts2-xml核心配置"><a href="#文件上传Struts2-xml核心配置" class="headerlink" title="文件上传Struts2.xml核心配置"></a>文件上传Struts2.xml核心配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置国际化 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.custom.i18n.resources"</span> <span class="attr">value</span>=<span class="string">"fileUploadmessage"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置最大的文件上传大小为20M --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.multipart.maxSize"</span> <span class="attr">value</span>=<span class="string">"20971520"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"upload"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UploadAction"</span> <span class="attr">method</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 默认拦截器defaultStack下有其子类fileUpload类</span></span><br><span class="line"><span class="comment">				其有属性allowedTypes及MIME类型【文件类型-image/png,image/jpeg,image/bmp】 </span></span><br><span class="line"><span class="comment">				其有属性allowedExtensions及MIME可扩展名【文件扩展名.png,.jpeg,.bmp】 </span></span><br><span class="line"><span class="comment">				下面方法为依赖注入--&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"fileUpload.allowedTypes"</span>&gt;</span>image/png,image/jpeg,image/bmp<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"fileUpload.allowedExtensions"</span>&gt;</span>.jpeg,jpg,png<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="文件上传properties文件"><a href="#文件上传properties文件" class="headerlink" title="文件上传properties文件"></a>文件上传properties文件</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">struts<span class="selector-class">.messages</span><span class="selector-class">.error</span>.uploading=Error uploading: &#123;<span class="number">0</span>&#125;</span><br><span class="line">struts<span class="selector-class">.messages</span><span class="selector-class">.error</span><span class="selector-class">.file</span><span class="selector-class">.too</span>.large=The file is to large to be uploaded: &#123;<span class="number">0</span>&#125; <span class="string">"&#123;1&#125;"</span> <span class="string">"&#123;2&#125;"</span> &#123;<span class="number">3</span>&#125;</span><br><span class="line">struts<span class="selector-class">.messages</span><span class="selector-class">.error</span><span class="selector-class">.content</span><span class="selector-class">.type</span><span class="selector-class">.not</span>.allowed=&#123;<span class="number">3</span>&#125;\u6587\u4EF6\u7C7B\u578B\u4E0D\u6B63\u786E\uFF1: &#123;<span class="number">0</span>&#125; <span class="string">"&#123;1&#125;"</span> <span class="string">"&#123;2&#125;"</span> </span><br><span class="line">struts<span class="selector-class">.messages</span><span class="selector-class">.error</span><span class="selector-class">.file</span><span class="selector-class">.extension</span><span class="selector-class">.not</span>.allowed=\u6587\u4EF6\u6269\u5C55\u540D\u4E0D\u6B63\u786E: &#123;<span class="number">0</span>&#125; <span class="string">"&#123;1&#125;"</span> <span class="string">"&#123;2&#125;"</span> &#123;<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="文件下载Action"><a href="#文件下载Action" class="headerlink" title="文件下载Action"></a>文件下载Action</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">package com.zhao.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.ServletActionContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.interceptor.ServletRequestAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadAction</span> <span class="title">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 步骤：</span></span><br><span class="line"><span class="comment">	 * 1.写个Action</span></span><br><span class="line"><span class="comment">	 * 2.在action中写个输入流属性，提供get方法</span></span><br><span class="line"><span class="comment">	 * 3.在Action中写Download方法给inputStream赋值</span></span><br><span class="line"><span class="comment">	 * 4.添加struts配置文件</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> long serialVersionUID = 1L;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">InputStream</span> inputStream;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">InputStream</span> getInputStream() &#123;</span><br><span class="line">		<span class="keyword">return</span> inputStream;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">String</span> <span class="type">Download</span>() <span class="keyword">throws</span> <span class="type">FileNotFoundException</span>&#123;</span><br><span class="line">		<span class="comment">//1.路径</span></span><br><span class="line">		<span class="type">String</span> path = <span class="string">"F:/1.jpg"</span>;</span><br><span class="line">		<span class="comment">//2.给输入流赋值</span></span><br><span class="line">		inputStream = new <span class="type">FileInputStream</span>(path);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//3.struts中不需要自己写数据返回给客户端  以前通过outputstream返回客户端数据</span></span><br><span class="line">		<span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="文件下载Struts-xml核心配置文件"><a href="#文件下载Struts-xml核心配置文件" class="headerlink" title="文件下载Struts.xml核心配置文件"></a>文件下载Struts.xml核心配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"download"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.DownloadAction"</span> <span class="attr">method</span>=<span class="string">"Download"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- stream表示已流的方式返回给客户端 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"stream"</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 读取输入流 --&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"inputName"</span>&gt;</span>inputStream<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 响应头 --&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentDisposition"</span>&gt;</span>attachment;filename=1.jpg<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 响应头类型 --&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>application/octet-stream<span class="tag">&lt;/<span class="name">param</span>&gt;</span>	</span><br><span class="line">				<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Struts2框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2 框架(一)</title>
    <url>/2019/11/30/Struts2-%E6%A1%86%E6%9E%B6-%E4%B8%80/</url>
    <content><![CDATA[<h4 id="struts2框架执行流程图"><a href="#struts2框架执行流程图" class="headerlink" title="struts2框架执行流程图"></a>struts2框架执行流程图</h4><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573586858256&di=9a6128e13e4f09150bf63d78bed0bc09&imgtype=0&src=http%3A%2F%2Fstatic.zybuluo.com%2FYano%2F84bw9li87dg4p3ytl00uhq6x%2FStruts2%25E5%258E%259F%25E7%2590%2586.png" alt="流程图"></p>
<ul>
<li><p>应用流程注解</p>
<ol>
<li><p>当Web容器收到请求（HttpServletRequest）它将请求传递给一个标准的的过滤链包括（ActionContextCleanUp）过滤器。经过Other filters(SiteMesh ,etc)，需要调用FilterDispatcher核心控制器，然后它调用ActionMapper确定请求哪个Action，ActionMapper返回一个收集Action详细信息的ActionMaping对象。</p>
</li>
<li><p>FilterDispatcher将控制权委派给ActionProxy,ActionProxy调用配置管理器(ConfigurationManager) 从配置文件中读取配置信息(struts.xml)，然后创建ActionInvocation对象。</p>
</li>
<li><p>ActionInvocation在调用Action之前会依次的调用所用配置拦截器（Interceptor N）一旦执行结果返回结果字符串ActionInvocation负责查找结果字符串对应的(Result）然后执行这个Result Result会调用一些模版（JSP）来呈现页面。</p>
</li>
<li><p>拦截器(Interceptor N)会再被执行（顺序和Action执行之前相反）最后响应(HttpServletResponse)被返回在web.xml中配置的那些过滤器和核心控制器（FilterDispatcher）。</p>
</li>
</ol>
</li>
</ul>
<ol>
<li><p>导包（基本包）<br>asm-5.2、asm-commons-5.2、asm-tree-5.2：反射的替代方案。asm是小巧便捷的java字节码操控框架，它能方便的动态生成和改造java代码<br>commons-fileupload-1.3.3：上传文件<br>commons-io-2.5：对本地文件、流进行操作<br>commons-lang3-3.6：基础文件包<br>commons-logging-1.1.3：日志包<br>freemarker-2.3.23：生成各种文本：html、xml、rtf、java源代码等<br>javassist-3.20.0-GA：使java字节码操控更加简便，是一个编译java字节码的类库，提高效率<br>log4j-api-2.8.2：日志<br>ognl-3.1.15：struts2独有的标签库<br>struts2-core-2.5.13：struts2的核心包</p>
</li>
<li><p>配置Struts2核心过滤器<br>在web.xml文件中进行如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/   XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">	 <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> </span></span><br><span class="line"><span class="tag">	 <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee </span></span></span><br><span class="line"><span class="tag"><span class="string">	 http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Struts2-domo2<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意：Struts的核心控制器默认拦截以下请求<br> .action为后缀的请求<br> 没有任何后缀的请求</li>
</ul>
</li>
<li><p>编写Action</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="title">extends</span> <span class="title">ActionSupport</span> &#123;</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *Action中处理请求的方法(动作方法)一般有以下特点</span></span><br><span class="line"><span class="comment">     *访问修饰符均为public</span></span><br><span class="line"><span class="comment">     *方法的返回值一般为String(可以为void)</span></span><br><span class="line"><span class="comment">    *方法均没有参数 </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SUCCESS;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SUCCESS;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SUCCESS;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">find</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SUCCESS;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>在src目录下创建核心配置文件struts.xml文件<br>动作访问之通配符<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"> <span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span></span><br><span class="line"><span class="xml">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="xml">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- &lt;package name="p1" extends="struts-default" namespace="/user"&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"add"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"add"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"remove"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"remove"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/remove.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"update"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/update.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"find"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"find"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/find.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span>--&gt;</span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 动作访问之通配符‘*’ 简化上面重复操作 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/user"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/</span><span class="template-variable">&#123;1&#125;</span><span class="xml">.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 两个*的通配符 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/stu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!--&lt;action name="addStu" class="com.zhao.web.action.StuAction" method="addStu"&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/addStu.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"findStu"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.StuAction"</span> <span class="attr">method</span>=<span class="string">"findStu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/findStu.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span>--&gt;</span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 下面方法访问不到 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*_*"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.StuAction"</span> <span class="attr">method</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;1&#125;</span><span class="xml"><span class="tag"><span class="string"></span></span></span><span class="template-variable">&#123;2&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/</span><span class="template-variable">&#123;2&#125;</span><span class="xml">/</span><span class="template-variable">&#123;1&#125;</span><span class="xml">.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="struts2加载文件顺序"><a href="#struts2加载文件顺序" class="headerlink" title="struts2加载文件顺序"></a>struts2加载文件顺序</h3></li>
</ol>
</li>
</ol>
<ul>
<li>struts2框架要能执行，必须先加载StrutsPrepareAndExecuteFilter.<br>在StrutsPrepareAndExecuteFilter的init方法中对Dispatcher进行了初始化.<br>在Dispatcher类中定义的init方法内就描述了struts2配置文件加载的顺序</li>
</ul>
<ol>
<li><p>default.properties文件<br> 作用:定义了struts2框架中所有常量<br> 位置: org/apache/struts2/default.properties </p>
</li>
<li><p>struts-default.xml<br> 作用:配置了bean,interceptor,result等。<br> 位置:在struts的core核心jar包. </p>
</li>
<li><p>struts-plugin.xml<br> 它是struts2框架中所使用的插件的配置文件。 </p>
</li>
<li><p>struts.xml<br> 我们使struts2所使用的配置文件。</p>
</li>
<li><p>struts.properties<br> 就是可以自定义常量。</p>
</li>
<li><p>web.xml   </p>
</li>
</ol>
<ul>
<li>在Struts.xml中配置常量(后缀)<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置常量  struts.action.extension表示后缀--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"php"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- abstract="true"抽象 用于继承 若包有abstract="true"属性  有包继承此包即可是有所有功能</span></span><br><span class="line"><span class="comment">	          一般抽象包不声明Action --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- namespace="/" 命名空间， 访问路径，默认为空字符串</span></span><br><span class="line"><span class="comment">	      可有用于模块划分--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;package name="p1" extends="struts-default" namespace="/" abstract="true"&gt; --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.HelloAction"</span> <span class="attr">method</span>=<span class="string">"sayHello"</span>&gt;</span></span><br><span class="line">  			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在struts.properties中配置常量<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">struts.action.extension</span>=asp</span><br></pre></td></tr></table></figure>
<ul>
<li>log4j.xml文件<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d %-5p [%t] %C</span></span></span><span class="template-variable">&#123;2&#125;</span><span class="xml"><span class="tag"><span class="string"> (%F:%L) - %m%n"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFile"</span> <span class="attr">fileName</span>=<span class="string">"logs/strutslog1.log"</span></span></span></span><br><span class="line"><span class="xml">                    filePattern="logs/$$</span><span class="template-variable">&#123;date:yyyy-MM&#125;</span><span class="xml">/app-%d</span><span class="template-variable">&#123;MM-dd-yyyy&#125;</span><span class="xml">-%i.log.gz"&gt;</span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;MM-dd-yyyy&#125;</span><span class="xml"> %p %c</span><span class="template-variable">&#123;1.&#125;</span><span class="xml"> [%t] -%M-%L- %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> /&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"1 KB"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">fileIndex</span>=<span class="string">"max"</span> <span class="attr">max</span>=<span class="string">"2"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"com.opensymphony.xwork2"</span> <span class="attr">level</span>=<span class="string">"WAN"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.struts2"</span> <span class="attr">level</span>=<span class="string">"WAN"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"warn"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="结果集"><a href="#结果集" class="headerlink" title="结果集"></a>结果集</h3></li>
</ul>
</li>
<li>自定义结果集  继承 StrutsResultSupport<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义结果集</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Cqudate</span> <span class="keyword">extends</span> <span class="title">StrutsResultSupport</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> void doExecute(<span class="type">String</span> arg0, <span class="type">ActionInvocation</span> arg1) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">```              </span><br><span class="line">* struts.xml文件</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
  "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
  "http://struts.apache.org/dtds/struts-2.3.dtd">

</li>
</ul>
<struts>
<!-- 配置开发模式 可以显示跟详细的错误信息-->
    <constant name="struts.devMode" value="true"></constant>
    <!-- 全局结果集视图 继承 声明抽象类属性-->
    <package name="MyResult" extends="struts-default" abstract="true">
            <result-types>
                    <result-type name="captche" class="/Struts2-domo3/src/com/zhao/web/result/Cqudate">
                    </result-type>
            </result-types>
    </package>


</struts>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">### 获取servlet 的api方式</span><br><span class="line">* 通过SrevletActionContext</span><br></pre></td></tr></table></figure>
public class TestAction extends ActionSupport {


<pre><code>/**
 * 
 */
private static final long serialVersionUID = 1L;

public String text() {
    // 获取servlet 的api方式</code></pre><p> //        第一种方式：通过SrevletActionContext<br> //        1.response<br>        HttpServletResponse  response = ServletActionContext.getResponse();<br> //        2.request<br>        HttpServletRequest request = ServletActionContext.getRequest();<br> //        3.session<br>        HttpSession session =request.getSession();</p>
<p> //        4.application(sercletContext)<br>        ServletContext context = ServletActionContext.getServletContext();<br> //        NONE不跳转，不去找result标签<br>        System.out.println(response);<br>        System.out.println(request);<br>        System.out.println(session);<br>        System.out.println(context);</p>
<p> //        org.apache.struts2.dispatcher.StrutsRequestWrapper@34374916 ruquest 属于<br> //        org.apache.catalina.session.StandardSessionFacade@40e7fb20  属于Tomcat<br> //        org.apache.catalina.core.ApplicationContextFacade@20dc66ff 属于Tomcat<br> //        org.apache.catalina.connector.ResponseFacade@5973cd44 属于Tomcat</p>
<pre><code>    return NONE;
}</code></pre><p>}</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>通过实现ServletRequestAware接口，让Struts自动注入</span><br></pre></td></tr></table></figure>
<p> public class Test2Action extends ActionSupport implements ServletRequestAware{</p>
<pre><code>private static final long serialVersionUID = 1L;
HttpServletResponse  response;
HttpServletRequest request;
public String text() {
    // 获取servlet 的api方式</code></pre><p> //        第二种方式：通过实现接口，让Struts自动注入<br> //        Aware :注入，调用方法，注入参数<br> //        1.response<br>        HttpServletResponse  response = ServletActionContext.getResponse();<br> //        request<br>        HttpServletRequest request = ServletActionContext.getRequest();<br> //        session</p>
<p> //        application(sercletContext)</p>
<pre><code>System.out.println(response);
System.out.println(request);

return NONE;</code></pre><p> //        NONE不跳转，不去找result标签<br>    }<br>    @Override<br>    public void setServletRequest(HttpServletRequest request) {<br>        // TODO Auto-generated method stub<br>        this.request = request;<br>    }</p>
<p>}</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>struts.xml</span><br></pre></td></tr></table></figure>
 <?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
    "http://struts.apache.org/dtds/struts-2.3.dtd">

 <struts>
 <!-- 配置开发模式 可以显示跟详细的错误信息-->
    <constant name="struts.devMode" value="true"></constant>

<pre><code>&lt;package name=&quot;p1&quot; extends=&quot;struts-default&quot; namespace=&quot;/&quot;&gt;
        &lt;action name=&quot;test&quot; class=&quot;com.zhao.web.action.TestAction&quot; method=&quot;text&quot;&gt;
        &lt;/action&gt;
        &lt;action name=&quot;test2&quot; class=&quot;com.zhao.web.action.Test2Action&quot; method=&quot;text&quot;&gt;
        &lt;/action&gt;
&lt;/package&gt;</code></pre> </struts>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">### 获取请求参数</span><br><span class="line">* 实体类</span><br></pre></td></tr></table></figure>
 public class User {
    private String username;
    private String password;
    public String getUsername() {
        return username;
    }
    public void setUsername(String username) {
        this.username = username;
    }
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    @Override
    public String toString() {
        return "User [username=" + username + ", password=" + password + "]";
    }

<p> }</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">* <span class="number">1.</span> Action获取请求参数两种方式：ServletActionContext</span><br></pre></td></tr></table></figure>
<pre><code> public class LoginAction extends ActionSupport {

    private String username;
    private String password;
    public void setUsername(String username) {
        System.out.println(&quot;setUsername&quot;);
        this.username = username;
    }

    public void setPassword(String password) {
        System.out.println(&quot;SetPassword&quot;);
        this.password = password;
    }


    public String login() throws Exception {
 //        获取求参数
 //        第一种方式：ServletActionContext
 //        HttpServletRequest request = ServletActionContext.getRequest();
 //        String username = request.getParameter(&quot;username&quot;);
 //        String password = request.getParameter(&quot;password&quot;);


 //        第二种方式：通过属性的Set注入

        System.out.println(username);
        System.out.println(password);
        HttpServletResponse response = ServletActionContext.getResponse();

        return NONE;
    }

}</code></pre><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>前端页面login.jsp</span><br></pre></td></tr></table></figure>
<pre><code>&lt;form action=&quot;${pageContext.request.contextPath }/login.action&quot;&gt;
    用户名：&lt;input name=&quot;username&quot; type=&quot;text&quot;/&gt;&lt;br&gt;
    密&amp;emsp;码：&lt;input name=&quot;password&quot; type=&quot;password&quot;/&gt;&lt;br&gt;
    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;
&lt;/form&gt;</code></pre> <figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">* 第三种方式：<span class="keyword">set</span>模型属性注入</span><br></pre></td></tr></table></figure>
<pre><code>public class LoginSetModelAction extends ActionSupport {
//    获取请求参数
//    第三种方式：set模型属性注入
   private User user;
   public User getUser() {
       System.out.println(&quot;getUser&quot;);
       return user;
   }

   public void setUser(User user) {
       System.out.println(&quot;setUser&quot;);
       this.user = user;
   }

   public String login(){
       System.out.println(user);
       return NONE;
   }
}</code></pre><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">* 前端页面<span class="module-access"><span class="module"><span class="identifier">LoginSetModel</span>.</span></span>jsp</span><br></pre></td></tr></table></figure>
 <form action="${pageContext.request.contextPath }/LoginSetModel.action">
    用户名：<input name="user.username" type="text"/><br>
    密&emsp;码：<input name="user.password" type="user.password"/><br>
    <input type="submit" value="登录"/>
 </form>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">* 第四种方式：通过模型注入，在action里实现一个模型驱动接口ModelDriven<span class="tag">&lt;<span class="name">User</span>&gt;</span></span><br></pre></td></tr></table></figure>
    public class LoginModelAction extends ActionSupport implements ModelDriven<User>{
        /** 第四种方式：通过模型注入，在action里实现一个模型驱动接口
         *  提供一个模型属性，并一定要赋值
         *  通过这种方式，不用在jsp页面写user.
         *  
         */
        private User user = new User();
        @Override
        public User getModel() {
            // TODO Auto-generated method stub
            return user;
        }
        public String login(){
            System.out.println(user);
            return NONE;
        }

<pre><code>}</code></pre><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>前端页面modellogin.jsp</span><br></pre></td></tr></table></figure>
 <form action="${pageContext.request.contextPath }/Model.action">
    用户名：<input name="username" type="text"/><br>
    密&emsp;码：<input name="password" type="password"/><br>
    <input type="submit" value="登录"/>
 </form>
```]]></content>
      <tags>
        <tag>Struts2框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlect+Jsp实现账户管理</title>
    <url>/2019/11/26/Servlect-Jsp%E5%AE%9E%E7%8E%B0%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="Servlet-jsp增删改查-分页"><a href="#Servlet-jsp增删改查-分页" class="headerlink" title="Servlet+jsp增删改查+分页"></a>Servlet+jsp增删改查+分页</h3><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><h4 id="1-创建JavaBean实体类"><a href="#1-创建JavaBean实体类" class="headerlink" title="1. 创建JavaBean实体类"></a>1. 创建JavaBean实体类</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> pwd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">String</span> name, <span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> pwd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(<span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", pwd="</span> + pwd + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-创建JDBC工具类"><a href="#2-创建JDBC工具类" class="headerlink" title="2. 创建JDBC工具类"></a>2. 创建JDBC工具类</h4><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JDBCUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">	e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	Connection conn = <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/t_user?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai"</span>,</span><br><span class="line">				<span class="string">"root"</span>,<span class="string">"zhao1314520"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;<span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span>(<span class="params">Connection conn, PreparedStatement pstm,ResultSet rs</span>)</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(rs!=<span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			rs.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(pstm!=<span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				pstm.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(conn!=<span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					conn.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span>(<span class="params">Connection conn, PreparedStatement pstm</span>)</span> &#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(pstm!=<span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				pstm.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(conn!=<span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					conn.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-创建数据持久层Dao"><a href="#3-创建数据持久层Dao" class="headerlink" title="3. 创建数据持久层Dao"></a>3. 创建数据持久层Dao</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.zhao.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.zhao.entity.User;</span><br><span class="line">import com.zhao.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public <span class="keyword">class</span> UserDao &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//登录</span></span><br><span class="line">	public User login(User u) &#123;</span><br><span class="line">		User user =null;</span><br><span class="line">		ResultSet rs = null;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">	</span><br><span class="line">		String sql = <span class="string">"select * from user where name=? &amp;&amp; pwd=?"</span>;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">		</span><br><span class="line">			pstm.set<span class="constructor">String(1,<span class="params">u</span>.<span class="params">getName</span>()</span>);</span><br><span class="line">			pstm.set<span class="constructor">String(2,<span class="params">u</span>.<span class="params">getPwd</span>()</span>);</span><br><span class="line">			rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">if</span>(rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">				user = <span class="keyword">new</span> <span class="constructor">User(<span class="params">rs</span>.<span class="params">getInt</span>(1)</span>,rs.get<span class="constructor">String(2)</span>,rs.get<span class="constructor">String(3)</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; catch (SQLException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">	&#125;finally &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn,pstm,rs);</span><br><span class="line">	&#125;</span><br><span class="line">	return user;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//注册</span></span><br><span class="line">	public <span class="built_in">int</span> add<span class="constructor">User(User <span class="params">u</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//User user =null;</span></span><br><span class="line">		<span class="built_in">int</span> num =<span class="number">0</span>;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">	</span><br><span class="line">		String sql = <span class="string">"insert into user(name,pwd)value(?,?)"</span>;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">		</span><br><span class="line">			pstm.set<span class="constructor">String(1,<span class="params">u</span>.<span class="params">getName</span>()</span>);</span><br><span class="line">			pstm.set<span class="constructor">String(2,<span class="params">u</span>.<span class="params">getPwd</span>()</span>);</span><br><span class="line">			num = pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">		</span><br><span class="line">			<span class="comment">//if(num == 1) &#123;</span></span><br><span class="line">				<span class="comment">//user = new User(num.getInt(1),num.getString(2),num.getString(3));</span></span><br><span class="line">		<span class="comment">//&#125;</span></span><br><span class="line">	&#125; catch (SQLException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">	&#125;finally &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn,pstm);</span><br><span class="line">	&#125;</span><br><span class="line">		return num;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//查询User列表</span></span><br><span class="line">	public List&lt;User&gt; find<span class="constructor">All()</span>&#123;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		ResultSet rs = null;</span><br><span class="line">		<span class="comment">//创建集合</span></span><br><span class="line">		List&lt;User&gt; userlist = <span class="keyword">new</span> ArrayList&lt;User&gt;<span class="literal">()</span>;</span><br><span class="line">		String sql=<span class="string">"select * from user"</span>;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">      		rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">      		</span><br><span class="line">      		<span class="keyword">while</span>(rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">      			<span class="built_in">int</span> id = rs.get<span class="constructor">Int(1)</span>;</span><br><span class="line">      			String name = rs.get<span class="constructor">String(2)</span>;</span><br><span class="line">      			String pwd = rs.get<span class="constructor">String(3)</span>;</span><br><span class="line">      			userlist.add(<span class="keyword">new</span> <span class="constructor">User(<span class="params">id</span>,<span class="params">name</span>,<span class="params">pwd</span>)</span>);</span><br><span class="line">      		&#125;</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn,pstm,rs);</span><br><span class="line">		&#125;</span><br><span class="line">		return userlist;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">	public <span class="built_in">int</span> del<span class="constructor">ById(<span class="params">int</span> <span class="params">id</span>)</span> &#123;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		<span class="built_in">int</span> num = <span class="number">0</span> ;</span><br><span class="line">		String sql=<span class="string">"delete from user where id=?"</span>;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			pstm.set<span class="constructor">Int(1,<span class="params">id</span>)</span>;</span><br><span class="line">      		num  = pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn,pstm);</span><br><span class="line">		&#125;</span><br><span class="line">		return num ;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//更新</span></span><br><span class="line">	public <span class="built_in">int</span> user<span class="constructor">Update(User <span class="params">user</span>)</span> &#123;</span><br><span class="line">		<span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		String sql=<span class="string">"update user set name=?,pwd=? where id=?"</span>;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			<span class="comment">// 这里的1,2..必须要按上面的新增的顺序来定义</span></span><br><span class="line">			pstm.set<span class="constructor">String(1,<span class="params">user</span>.<span class="params">getName</span>()</span>);</span><br><span class="line">			pstm.set<span class="constructor">String(2, <span class="params">user</span>.<span class="params">getPwd</span>()</span>);</span><br><span class="line">			pstm.set<span class="constructor">Int(3,<span class="params">user</span>.<span class="params">getId</span>()</span>);</span><br><span class="line">			</span><br><span class="line">      		num = pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">      	</span><br><span class="line">      		</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn,pstm);</span><br><span class="line">		&#125;</span><br><span class="line">		return num;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据条件查询列表页面检索</span></span><br><span class="line">	public List&lt;User&gt; select<span class="constructor">All(User <span class="params">user</span>,<span class="params">int</span> <span class="params">pageNum</span>,<span class="params">int</span> <span class="params">pageSize</span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//创建集合</span></span><br><span class="line">		List&lt;User&gt; userlist = <span class="keyword">new</span> ArrayList&lt;User&gt;<span class="literal">()</span>;</span><br><span class="line">		List&lt;Object&gt; parList = <span class="keyword">new</span> ArrayList&lt;Object&gt;<span class="literal">()</span>;</span><br><span class="line">		</span><br><span class="line">		String sql=<span class="string">"select id,name,pwd from user where 1=1"</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(user.get<span class="constructor">Id()</span> != <span class="number">0</span>) &#123;</span><br><span class="line">			sql = sql + <span class="string">" and id=?"</span>;</span><br><span class="line">			parList.add(user.get<span class="constructor">Id()</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(user.get<span class="constructor">Name()</span> != null<span class="operator"> &amp;&amp; </span>!<span class="string">""</span>.equals(user.get<span class="constructor">Name()</span>)) &#123;</span><br><span class="line">			sql = sql + <span class="string">" and name like ?"</span>;</span><br><span class="line">			parList.add(user.get<span class="constructor">Name()</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		sql = sql + <span class="string">" limit "</span>+(pageNum-<span class="number">1</span>)*pageSize+<span class="string">","</span>+pageSize;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(sql);</span><br><span class="line">		</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		ResultSet rs = null;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			for(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt; parList.size<span class="literal">()</span>;i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(i==<span class="number">0</span><span class="operator"> &amp;&amp; </span>user.get<span class="constructor">Id()</span>!=<span class="number">0</span>) &#123;</span><br><span class="line">					pstm.set<span class="constructor">Int(1, <span class="params">user</span>.<span class="params">getId</span>()</span>);</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//不懂请教老师</span></span><br><span class="line">					pstm.set<span class="constructor">String(<span class="params">i</span>+1, <span class="string">"%"</span>+(String)</span>parList.get(i)+<span class="string">"%"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">      		rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">      		</span><br><span class="line">      		<span class="keyword">while</span>(rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">      			<span class="built_in">int</span> id = rs.get<span class="constructor">Int(1)</span>;</span><br><span class="line">      			String name = rs.get<span class="constructor">String(2)</span>;</span><br><span class="line">      			String pwd =rs.get<span class="constructor">String(3)</span>;</span><br><span class="line">      		<span class="comment">// 将当前行的数据封装到user对象中，然后将user对象保存到userList集合中</span></span><br><span class="line">      			userlist.add(<span class="keyword">new</span> <span class="constructor">User(<span class="params">id</span>,<span class="params">name</span>,<span class="params">pwd</span>)</span>);</span><br><span class="line">      		&#125;</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn,pstm,rs);</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(userlist);</span><br><span class="line">		return userlist;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//单条记录详情</span></span><br><span class="line">	public User find<span class="constructor">ById(<span class="params">int</span> <span class="params">id</span>)</span> &#123;</span><br><span class="line">		User user = null;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		ResultSet rs = null;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">		String sql = <span class="string">"select id,name,pwd  from user where id=?"</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			pstm.set<span class="constructor">Int(1,<span class="params">id</span>)</span>;</span><br><span class="line">			rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">			<span class="keyword">while</span>(rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">				<span class="comment">//此处int uid = rs.getInt(1); 用SQL语句索引也行</span></span><br><span class="line">				<span class="comment">//但是若用字段名称必须是String型</span></span><br><span class="line">				<span class="comment">//若是变量会报异常SQLExecption  column Index</span></span><br><span class="line">				<span class="built_in">int</span> uid = rs.get<span class="constructor">Int(<span class="string">"id"</span>)</span>;</span><br><span class="line">				String name = rs.get<span class="constructor">String(2)</span>;</span><br><span class="line">				String pwd = rs.get<span class="constructor">String(3)</span>;</span><br><span class="line">				</span><br><span class="line">				user = <span class="keyword">new</span> <span class="constructor">User(<span class="params">uid</span>,<span class="params">name</span>,<span class="params">pwd</span>)</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		return user;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 查询记录总数</span></span><br><span class="line">	public <span class="built_in">int</span> total<span class="constructor">Count(User <span class="params">user</span>)</span> &#123;</span><br><span class="line">			<span class="built_in">int</span> total = <span class="number">0</span>;</span><br><span class="line">			List&lt;Object&gt; parList = <span class="keyword">new</span> ArrayList&lt;Object&gt;<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 声明变量</span></span><br><span class="line">			String sql = <span class="string">"select count(id) from user where 1=1"</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 判断条件是否为空</span></span><br><span class="line">			<span class="keyword">if</span> (user.get<span class="constructor">Id()</span> != <span class="number">0</span>) &#123;</span><br><span class="line">				sql = sql+<span class="string">" and id=?"</span>;</span><br><span class="line">				parList.add(user.get<span class="constructor">Id()</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(user.get<span class="constructor">Name()</span> != null<span class="operator"> &amp;&amp; </span>!<span class="string">""</span>.equals(user.get<span class="constructor">Name()</span>)) &#123;</span><br><span class="line">				sql=sql+<span class="string">" and name like ?"</span>;</span><br><span class="line">				parList.add(user.get<span class="constructor">Name()</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line">			PreparedStatement stm = null;</span><br><span class="line">			ResultSet rs = null;</span><br><span class="line">			<span class="comment">// 获取连接</span></span><br><span class="line">			Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 预编译sql</span></span><br><span class="line">				stm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">				<span class="comment">//设置参数</span></span><br><span class="line">				for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; parList.size<span class="literal">()</span>; i++) &#123;</span><br><span class="line">					<span class="keyword">if</span>(i==<span class="number">0</span> &amp; user.get<span class="constructor">Id()</span>!=<span class="number">0</span>) &#123;</span><br><span class="line">						stm.set<span class="constructor">Int(1, <span class="params">user</span>.<span class="params">getId</span>()</span>);</span><br><span class="line">					&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">						stm.set<span class="constructor">String(<span class="params">i</span>+1, <span class="string">"%"</span>+(String)</span>parList.get(i)+<span class="string">"%"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 执行sql,返回结果集</span></span><br><span class="line">				rs = stm.execute<span class="constructor">Query()</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 获取结果集中的数据</span></span><br><span class="line">				<span class="keyword">while</span> (rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">					<span class="comment">// 获取当前行的数据</span></span><br><span class="line">					total = rs.get<span class="constructor">Int(1)</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125; catch (SQLException e) &#123;</span><br><span class="line">				e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">			&#125; finally &#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn, stm, rs);</span><br><span class="line">			&#125;</span><br><span class="line">			return total;</span><br><span class="line">		&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-创建业务层Service"><a href="#4-创建业务层Service" class="headerlink" title="4. 创建业务层Service"></a>4. 创建业务层Service</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhao.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.zhao.entity.<span class="keyword">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserService &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> UserDao userDao = <span class="built_in">new</span> UserDao();</span><br><span class="line">	</span><br><span class="line">	//登录</span><br><span class="line">	<span class="built_in">public</span> <span class="keyword">User</span> <span class="keyword">login</span>(<span class="keyword">User</span> <span class="keyword">user</span>) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> userDao.<span class="keyword">login</span>(<span class="keyword">user</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	//添加/注册</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> addUser(<span class="keyword">User</span> <span class="keyword">user</span>) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">return</span> userDao.addUser(<span class="keyword">user</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	//查询</span><br><span class="line">	<span class="built_in">public</span> List&lt;<span class="keyword">User</span>&gt; findAll()&#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.findAll();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//删除</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> delById(<span class="type">int</span> id) &#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.delById(id);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	//更新</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> userUpdate(<span class="keyword">User</span> <span class="keyword">user</span>) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">return</span> userDao.userUpdate(<span class="keyword">user</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//详情记录</span><br><span class="line">	<span class="built_in">public</span> <span class="keyword">User</span> findById(<span class="type">int</span> id) &#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.findById(id);</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	//<span class="keyword">user</span>列表检索</span><br><span class="line">	<span class="built_in">public</span> List&lt;<span class="keyword">User</span>&gt; selectAll(<span class="keyword">User</span> <span class="keyword">user</span>,<span class="type">int</span> pageNum,<span class="type">int</span> pageSize)&#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.selectAll(<span class="keyword">user</span>,pageNum,pageSize);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> totalCount(<span class="keyword">User</span> <span class="keyword">user</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.totalCount(<span class="keyword">user</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-创建控制层Controller"><a href="#5-创建控制层Controller" class="headerlink" title="5. 创建控制层Controller"></a>5. 创建控制层Controller</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.zhao.controller;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.zhao.entity.User;</span><br><span class="line">import com.zhao.service.UserService;</span><br><span class="line"></span><br><span class="line">@<span class="constructor">WebServlet(<span class="string">"/UserController"</span>)</span></span><br><span class="line">public <span class="keyword">class</span> UserController extends HttpServlet &#123;</span><br><span class="line">	<span class="keyword">private</span> static final long serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    public <span class="constructor">UserController()</span> &#123;</span><br><span class="line">        super<span class="literal">()</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public UserService userService = <span class="keyword">new</span> <span class="constructor">UserService()</span>;</span><br><span class="line">	protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//设置编码</span></span><br><span class="line">		request.set<span class="constructor">CharacterEncoding(<span class="string">"utf-8"</span>)</span>;</span><br><span class="line">		response.set<span class="constructor">CharacterEncoding(<span class="string">"utf-8"</span>)</span>;</span><br><span class="line">		<span class="comment">//获取请求方法参数</span></span><br><span class="line">		String <span class="keyword">method</span> = request.get<span class="constructor">Parameter(<span class="string">"method"</span>)</span>;</span><br><span class="line">		<span class="comment">//判断登录方法</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"login"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			</span><br><span class="line">			login(request,response);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"addUser"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			</span><br><span class="line">			add<span class="constructor">User(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"findAll"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			<span class="comment">//alt+shift+l以及alt+shift+m：提取本地变量及方法</span></span><br><span class="line">			find<span class="constructor">All(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"delById"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			</span><br><span class="line">			del<span class="constructor">ById(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"userUpdate"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			user<span class="constructor">Update(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"findById"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			find<span class="constructor">ById(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"selectAll"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			select<span class="constructor">All(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			response.get<span class="constructor">Writer()</span>.append(<span class="string">"error"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//user列表检索</span></span><br><span class="line">	<span class="keyword">private</span> void select<span class="constructor">All(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span></span><br><span class="line">			throws ServletException, IOException &#123;</span><br><span class="line">		String id = request.get<span class="constructor">Parameter(<span class="string">"id"</span>)</span>;</span><br><span class="line">		String name = request.get<span class="constructor">Parameter(<span class="string">"name"</span>)</span>;</span><br><span class="line">		String pwd = request.get<span class="constructor">Parameter(<span class="string">"pwd"</span>)</span>;</span><br><span class="line">		String pageNum = request.get<span class="constructor">Parameter(<span class="string">"pageNum"</span>)</span>;</span><br><span class="line">		String pageSize = request.get<span class="constructor">Parameter(<span class="string">"pageSize"</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">int</span> num = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">int</span> size = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(pageNum!=null<span class="operator"> &amp;&amp; </span>!<span class="string">""</span>.equals(pageNum)) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">			num = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">pageNum</span>)</span>;</span><br><span class="line">			&#125;catch (Exception e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">			num=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(pageSize !=null<span class="operator"> &amp;&amp; </span>!<span class="string">""</span>.equals(pageSize)) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">			size = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">pageSize</span>)</span>;</span><br><span class="line">			&#125;catch (Exception e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">			size=<span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(num+<span class="string">","</span>+size);</span><br><span class="line">		<span class="comment">//int num = Integer.parseInt(pageNum);</span></span><br><span class="line">		<span class="comment">//int size = Integer.parseInt(pageSize);</span></span><br><span class="line">		<span class="built_in">int</span> uid = <span class="number">0</span>;  </span><br><span class="line">		<span class="keyword">if</span>(id!=null<span class="operator"> &amp;&amp; </span>!<span class="string">""</span>.equals(id)) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">			uid = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">id</span>)</span>;</span><br><span class="line">			&#125;catch (Exception e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">			uid=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		User user  = <span class="keyword">new</span> <span class="constructor">User(<span class="params">uid</span>,<span class="params">name</span>,<span class="params">pwd</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//调用service层</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//查询记录总数</span></span><br><span class="line">		<span class="built_in">int</span> total =  userService.total<span class="constructor">Count(<span class="params">user</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//计算总页数</span></span><br><span class="line">		 <span class="built_in">int</span> pageCount =  total%size==<span class="number">0</span>? total/size:total/size+<span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">		 <span class="keyword">if</span>(num&lt;<span class="number">1</span>) &#123;<span class="comment">//页码超过最小值</span></span><br><span class="line">			 num=<span class="number">1</span>;</span><br><span class="line">		 &#125;</span><br><span class="line">		 <span class="keyword">if</span>(num&gt;pageCount) &#123;<span class="comment">//页码超过最大值</span></span><br><span class="line">			 num=pageCount;</span><br><span class="line">		 &#125;</span><br><span class="line">		 <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(size);</span><br><span class="line">		 </span><br><span class="line">		<span class="comment">//返回数据列表selectAll(user,num,size)参数传值要与Dao层相呼应</span></span><br><span class="line">		List&lt;User&gt;  userList =  userService.select<span class="constructor">All(<span class="params">user</span>,<span class="params">num</span>,<span class="params">size</span>)</span>;</span><br><span class="line">		<span class="comment">//将查询到的userList集合转发到userList.jsp页面上</span></span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"userlist"</span>, <span class="params">userList</span>)</span>;</span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"condition"</span>, <span class="params">user</span>)</span>;</span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"pageNum"</span>, <span class="params">num</span>)</span>;</span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"pageSize"</span>, <span class="params">size</span>)</span>;</span><br><span class="line">		request.get<span class="constructor">RequestDispatcher(<span class="string">"userList.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//详情查询</span></span><br><span class="line">	<span class="keyword">private</span> void find<span class="constructor">ById(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span></span><br><span class="line">			throws ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//获取请求参数</span></span><br><span class="line">		String id = request.get<span class="constructor">Parameter(<span class="string">"id"</span>)</span>;</span><br><span class="line">		<span class="comment">//调用service层方法</span></span><br><span class="line">		User user = userService.find<span class="constructor">ById(Integer.<span class="params">parseInt</span>(<span class="params">id</span>)</span>);</span><br><span class="line">		<span class="keyword">if</span>(user != null) &#123;</span><br><span class="line">			<span class="comment">//把user对象放到request域</span></span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"user"</span>, <span class="params">user</span>)</span>;</span><br><span class="line">			<span class="comment">//转发到addUpdate页面</span></span><br><span class="line">			request.get<span class="constructor">RequestDispatcher(<span class="string">"addUpdate.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"msg"</span>, <span class="string">"没得详情记录！"</span>)</span>;</span><br><span class="line">			find<span class="constructor">All(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">	<span class="keyword">private</span> void del<span class="constructor">ById(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> </span><br><span class="line">		throws ServletException, IOException&#123;</span><br><span class="line">		<span class="comment">//获取传入的id值</span></span><br><span class="line">				String id = request.get<span class="constructor">Parameter(<span class="string">"id"</span>)</span>; </span><br><span class="line">				<span class="comment">//强制转换id为int类型</span></span><br><span class="line">				<span class="built_in">int</span> i = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">id</span>)</span>;</span><br><span class="line">				<span class="comment">//调用service层</span></span><br><span class="line">				<span class="built_in">int</span> num = userService.del<span class="constructor">ById(<span class="params">i</span>)</span>;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span>(num<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">					request.set<span class="constructor">Attribute(<span class="string">"msg"</span>, <span class="string">"删除失败"</span>)</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					request.set<span class="constructor">Attribute(<span class="string">"msg"</span>, <span class="string">"删除成功"</span>)</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//跳转到user列表</span></span><br><span class="line">				find<span class="constructor">All(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//更新</span></span><br><span class="line">	<span class="keyword">private</span> void user<span class="constructor">Update(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span></span><br><span class="line">			throws ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//获取id</span></span><br><span class="line">		String id =  request.get<span class="constructor">Parameter(<span class="string">"id"</span>)</span>;</span><br><span class="line">		String name = request.get<span class="constructor">Parameter(<span class="string">"name"</span>)</span>;</span><br><span class="line">		String pwd = request.get<span class="constructor">Parameter(<span class="string">"pwd"</span>)</span>;</span><br><span class="line">		<span class="built_in">int</span> uid = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">id</span>)</span>;</span><br><span class="line">		User user = <span class="keyword">new</span> <span class="constructor">User(<span class="params">uid</span>,<span class="params">pwd</span>,<span class="params">pwd</span>)</span>;</span><br><span class="line">		 <span class="built_in">int</span> num = userService.user<span class="constructor">Update(<span class="params">user</span>)</span>;</span><br><span class="line">		<span class="comment">//判断user是否为空</span></span><br><span class="line">		<span class="keyword">if</span>(num != <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">//将查询到的user对象转发到详情页面</span></span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"user"</span>, <span class="params">user</span>)</span>;</span><br><span class="line">			request.get<span class="constructor">RequestDispatcher(<span class="string">"addUser.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"msg"</span>, <span class="string">"没有详情"</span>)</span>;</span><br><span class="line">			find<span class="constructor">All(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//编码的时候出现了java.lang.NumberFormatException: null，at java.lang.Integer.parseInt(Integer.java:415)at java.lang.Integer.valueOf(Integer.java:553)。刚开始还一直以为我类型转换错误呢。</span></span><br><span class="line">		<span class="comment">//原来，不够细心，在传递url值的时候忘了传递参数，或者传递错误，这样当然获取到的值为null。</span></span><br><span class="line">		<span class="comment">//比如：本来url为http://……&amp;state=1,那么传递的一个参数为state=1，获取这个参数的时候应为int state = Integer.parseInt(request.getParameter("state")).这样就不会报错，但是如果忘了在地址栏传递参数state=1,那么，也会出现java.lang.NumberFormatException: null…………的错误。</span></span><br><span class="line">        <span class="comment">//所以java.lang.NumberFormatException错误不一定是类型转换错误，也有可能是因为获取不到参数而产生的错误</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//添加|注册</span></span><br><span class="line">	<span class="comment">//alt+shift+l以及alt+shift+m：提取本地变量及方法</span></span><br><span class="line">	<span class="keyword">private</span> void add<span class="constructor">User(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span></span><br><span class="line">			throws ServletException, IOException &#123;</span><br><span class="line">		String name = request.get<span class="constructor">Parameter(<span class="string">"name"</span>)</span>;</span><br><span class="line">		String pwd = request.get<span class="constructor">Parameter(<span class="string">"pwd"</span>)</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(name);</span><br><span class="line">		<span class="comment">//编码解码先获取iso8859-1字节，后编码utf-8格式</span></span><br><span class="line">		<span class="comment">//String name1 = new String(name.getBytes("iso8859-1"),"utf-8");</span></span><br><span class="line">		<span class="comment">//封装数据</span></span><br><span class="line">		User user = <span class="keyword">new</span> <span class="constructor">User(<span class="params">name</span>,<span class="params">pwd</span>)</span>;</span><br><span class="line">		<span class="built_in">int</span> num = userService.add<span class="constructor">User(<span class="params">user</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(num<span class="operator"> == </span><span class="number">1</span>) &#123;</span><br><span class="line">			<span class="comment">//添加</span></span><br><span class="line">			find<span class="constructor">All(<span class="params">request</span>,<span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			request.get<span class="constructor">RequestDispatcher(<span class="string">"index.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//查看账户信息</span></span><br><span class="line">	<span class="keyword">private</span> void find<span class="constructor">All(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span></span><br><span class="line">			throws ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//调用service层方法</span></span><br><span class="line">		List&lt;User&gt; userlist = userService.find<span class="constructor">All()</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将查询的数据userlist集合转发到userList.jsp</span></span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"userlist"</span>, <span class="params">userlist</span>)</span>;</span><br><span class="line">		request.get<span class="constructor">RequestDispatcher(<span class="string">"userList.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//登录</span></span><br><span class="line">	<span class="keyword">private</span> void login(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//获取请求参数</span></span><br><span class="line">		String name = request.get<span class="constructor">Parameter(<span class="string">"name"</span>)</span>;</span><br><span class="line">		String pwd = request.get<span class="constructor">Parameter(<span class="string">"pwd"</span>)</span>;</span><br><span class="line">		<span class="comment">//收集用户登录信息</span></span><br><span class="line">		User user = <span class="keyword">new</span> <span class="constructor">User(<span class="params">name</span>,<span class="params">pwd</span>)</span>;</span><br><span class="line">		<span class="comment">//调用业务层方法</span></span><br><span class="line">		User user1 = userService.login(user);</span><br><span class="line">		<span class="comment">//判断用户是否为空</span></span><br><span class="line">		<span class="keyword">if</span>(user1 != null) &#123;</span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"user"</span>, <span class="params">user1</span>)</span>;</span><br><span class="line">			request.get<span class="constructor">RequestDispatcher(<span class="string">"index.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//设置提示消息</span></span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"error"</span>,<span class="string">"账户或密码错误！"</span>)</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//设置参数到request对象中</span></span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"user"</span>, <span class="params">user</span>)</span>;</span><br><span class="line">			<span class="comment">//转发到登陆页面</span></span><br><span class="line">			request.get<span class="constructor">RequestDispatcher(<span class="string">"login.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">		<span class="keyword">do</span><span class="constructor">Get(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="jsp页面"><a href="#jsp页面" class="headerlink" title="jsp页面"></a>jsp页面</h3><ol>
<li>登录<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"UserController?method=login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">		账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;error &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">		密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"register.jsp"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>注册<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"UserController?method=addUser"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">	账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>账号管理页面<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>表EL表达式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 页面检索 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"UserController?method=selectAll"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		ID:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"&lt;c:if test="</span>$</span></span><span class="template-variable">&#123;condition.id != 0&#125;</span><span class="xml"><span class="tag">"&gt;</span>$</span><span class="template-variable">&#123;condition.id&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">c:if</span>&gt;</span>"&gt;</span></span><br><span class="line"><span class="xml">		账号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;condition.name &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"搜索"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"register.jsp"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span><span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;userlist&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"user"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;user.id&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;user.name&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;user.pwd&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="comment">&lt;!-- 注意：详情和删除都是id属性进行操作的必须加条件&amp;id=$</span></span><span class="template-variable">&#123;user.id&#125;</span><span class="xml"><span class="comment"></span></span></span><br><span class="line"><span class="xml">					不然会报异常：java.lang.NumberFormatException: null </span></span><br><span class="line"><span class="xml">					显示为null --&gt;</span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"UserController?method=findById&amp;id=$</span></span></span><span class="template-variable">&#123;user.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"UserController?method=delById&amp;id=$</span></span></span><span class="template-variable">&#123;user.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>	</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span> </span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 分页 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"UserController?method=selectAll&amp;pageNum=$</span></span></span><span class="template-variable">&#123;pageNum-1&#125;</span><span class="xml"><span class="tag"><span class="string">&amp;pageSize=2"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>当前页$</span><span class="template-variable">&#123;pageNum&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"UserController?method=selectAll&amp;pageNum=$</span></span></span><span class="template-variable">&#123;pageNum+1&#125;</span><span class="xml"><span class="tag"><span class="string">&amp;pageSize=2"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>更新<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!--判断user为空添加，user不为空更新  --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">form</span>  &lt;<span class="attr">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;empty user &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>action="UserController?method=addUser"<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		   <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;not empty user &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>action="UserController?method=userUpdate"<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		   method="post"&gt;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.name &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">		密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.pwd &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"更新"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Java web</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架(五)</title>
    <url>/2019/11/21/Hibernate%E6%A1%86%E6%9E%B6-%E4%BA%94/</url>
    <content><![CDATA[<h3 id="一对一关系映射详解"><a href="#一对一关系映射详解" class="headerlink" title="一对一关系映射详解"></a>一对一关系映射详解</h3><ol>
<li>方式一：一对一关系外键配置</li>
</ol>
<ul>
<li>实体类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id;<span class="comment">//公司Id</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> name;<span class="comment">//公司名称</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Adderss adderss;<span class="comment">//公司属于某个地址</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Adderss <span class="title">getAdderss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> adderss;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdderss</span><span class="params">(Adderss adderss)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.adderss = adderss;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.zhao.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adderss</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id; <span class="comment">//地址id</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> name; <span class="comment">//地址名称</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Company company;<span class="comment">//地址属于某个公司</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Company <span class="title">getCompany</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> company;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.company = company;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>映射文件 .hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhao.domain.Company"</span> <span class="attr">table</span>=<span class="string">"t_company"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--一个公司对应一个地址，一对一关系 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"adderss"</span> <span class="attr">class</span>=<span class="string">"com.zhao.domain.Adderss"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-one</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.zhao.domain"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Adderss"</span> <span class="attr">table</span>=<span class="string">"t_adderss"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--一个地址只属于一个公司，一对一关系</span></span><br><span class="line"><span class="comment">       这是一种特殊的多对一关系</span></span><br><span class="line"><span class="comment">       column="company_id" 外键名称</span></span><br><span class="line"><span class="comment">       unique="true" 外键唯一 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"company"</span> <span class="attr">class</span>=<span class="string">"Company"</span> <span class="attr">column</span>=<span class="string">"company_id"</span> <span class="attr">unique</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>核心配置类<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">           com.mysql.cj.jdbc.Driver</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">           jdbc:mysql://localhost:3306/hibernate_user?serverTimezone=Asia/Shanghai</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--		配置映射文件与数据库表关系</span></span><br><span class="line"><span class="comment">                   update：有表则更新，无则创建</span></span><br><span class="line"><span class="comment">                   create：每次启动hibernate都创建，（注意：以前数据没得了）</span></span><br><span class="line"><span class="comment">                   create-drop：每次启动hibernate都创建，执行完后删除表--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 开启二级缓存 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--		&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 设置二级缓存插件EHCache的Provider类&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--		&lt;property name="hibernate.cache.region.factory_class"&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--			org.hibernate.cache.ehcache.EhCacheRegionFactory--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--		&lt;/property&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--开启与当前线程绑定session功能--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库方言 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">           org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/domain/Address.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/domain/Company.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>提取工具类<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.hibernate_utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">util</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory factory;</span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">       <span class="comment">//1.获取核心配置文件对象</span></span><br><span class="line">       Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">       <span class="comment">//2.创建会话工厂</span></span><br><span class="line">       factory = configuration.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//监听程序关闭</span></span><br><span class="line">       Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread()&#123;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               System.out.println(<span class="string">"程序关闭。。。！"</span>);</span><br><span class="line">               <span class="comment">//关闭会话工厂</span></span><br><span class="line">               factory.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Session <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//返回会话工厂获取到的session对象</span></span><br><span class="line">       <span class="function"><span class="keyword">return</span> factory.<span class="title">openSession</span><span class="params">()</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Session <span class="title">getCurrentSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">return</span> factory.<span class="title">getCurrentSession</span><span class="params">()</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.<span class="keyword">Session</span>;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> lession &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> test()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> =util.openSession();</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       Company company = <span class="built_in">new</span> Company();</span><br><span class="line">       company.setName("埃尔");</span><br><span class="line"></span><br><span class="line">       Adderss adderss = <span class="built_in">new</span> Adderss();</span><br><span class="line">       adderss.setName("匹尔科斯101街道");</span><br><span class="line"></span><br><span class="line">       adderss.setCompany(company);</span><br><span class="line">       //保存</span><br><span class="line">       <span class="keyword">session</span>.save(company);</span><br><span class="line">       <span class="keyword">session</span>.save(adderss);</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>方式二：一对一关系主键又是外键配置</li>
</ol>
<ul>
<li><p>修改外键映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.zhao.domain"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Adderss"</span> <span class="attr">table</span>=<span class="string">"t_adderss"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 指定使用哪个主键生成主键 使用外键的方式生成主键 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"foreign"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- property属性指定使用当前持久化类的哪一个属性的主键作为外键 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--property属性执行使用当前哪个持久化的类的哪个属性作为外键 指定当前持久化类的哪个属性作为主键 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"property"</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--一个地址只属于一个公司，一对一关系</span></span><br><span class="line"><span class="comment">       这是一种特殊的多对一关系</span></span><br><span class="line"><span class="comment">       constrained="true" --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"company"</span> <span class="attr">class</span>=<span class="string">"Company"</span> <span class="attr">constrained</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-one</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>constrained=”true”</p>
<ol>
<li><p>表示：constrained属性在hibernate一对一关系中会用到，hibernate文档中是这么写的，constrained（约束）,只能在one-to-one的映射中使用，一般在主表映射中，有外键的那个表，如果constrained=true，则表明存在外键与关联表对应，并且关联表中肯定存在对应的键与其对应，另外，改选项最关键的是影响save和deleted先后顺序，如果是增加的时候，如果constrained=true则会增加关联表，然后增加本表，删除的时候是先伸出本表然后删除关联的表</p>
</li>
<li><p>one-to-one的单向关联中，如果constrained=false则会在查询的时候全部取出来，用left outer join的方式 如果constrained=true，hibernate会延迟加载sql，只会把主表查询出来，等有用到关联表的时候再发出sql语句去取出来</p>
</li>
<li><p>one-to-one的双向关联，必须设置constrained=true 要不然会出现重复读数据，</p>
</li>
<li><p>如果2个表中Company，Adderss在false时候的sql语句如下</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span> Company </span><br><span class="line">c left outer join </span><br><span class="line">Adderss a <span class="keyword">on</span> c.<span class="built_in">id</span>=a.<span class="built_in">id</span> </span><br><span class="line">left outer join <span class="keyword">on</span> Company</span><br><span class="line">com <span class="keyword">on</span> c.<span class="built_in">id</span>=com.<span class="built_in">id</span> <span class="keyword">where</span> c.<span class="built_in">id</span>=?</span><br></pre></td></tr></table></figure>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3></li>
</ol>
<ul>
<li>缓存(Cache)</li>
<li>概念什么是缓存？<ol>
<li>☞缓存就是数据交换的缓冲区（称作：Cache），当某一硬件要读取数据时，会首先从缓存汇总查询数据，有则直接执行，不存在时从内存中获取。由于缓存的数据比内存快的多，所以缓存的作用就是帮助硬件更快的运行。</li>
<li>☞ 缓存往往使用的是RAM（断电既掉的非永久存储），所以在用完后还是会把文件送到硬盘等存储器中永久存储。电脑中最大缓存就是内存条，硬盘上也有16M或者32M的缓存。</li>
<li>☞ 高速缓存是用来协调CPU与主存之间存取速度的差异而设置的。一般CPU工作速度高，但内存的工作速度相对较低，为了解决这个问题，通常使用高速缓存，高速缓存的存取速度介于CPU与主存之间。系统将一些CPU在最近几个时间段经常访问的内容存在高速缓存，这样就在一定程度上缓解了由于主存速度低造成的CPU“停工待料”的情况。</li>
<li>☞ 缓存就是把一些外存上的数据保存在内存上而已，为什么保存在内存上，我们运行的所有程序里面的变量都是存放在内存中的，所以如果想将值放入内存上，可以通过变量的方式存储。在JAVA中一些缓存一般都是通过Map集合来实现的。<br>▁▂▃▅▆ ：缓存在不同的场景下，作用是不一样的具体举例说明：<br>✔  操作系统磁盘缓存 ——&gt; 减少磁盘机械操作。<br>✔  数据库缓存——&gt;减少文件系统IO。<br>✔  应用程序缓存——&gt;减少对数据库的查询。<br>✔  Web服务器缓存——&gt;减少应用服务器请求。<br>✔  客户端浏览器缓存——&gt;减少对网站的访问。</li>
</ol>
</li>
</ul>
</li>
<li><p>总结：</p>
<ol>
<li>作用：降低应用程序直接读写硬盘的频率,提高其运行性能;</li>
<li>缓存中的数据是数据存储源中的拷贝，其物理介质一般是内存；</li>
<li>程序《– （内存） –》 硬盘<h3 id="hibernate-二级缓存（PO-persist-object-持久化对象）"><a href="#hibernate-二级缓存（PO-persist-object-持久化对象）" class="headerlink" title="hibernate 二级缓存（PO persist object 持久化对象）"></a>hibernate 二级缓存（PO persist object 持久化对象）</h3>▁▂▃▅▆：hibernate 提供两种缓存机制：一级缓存 二级缓存<br>✔ 一级缓存：session缓存，在一次请求中共享数据<br>✔ 二级缓存：sessionFactory级别缓存，整个应用程序共享一个会话工厂，共享一个二级缓存。</li>
</ol>
</li>
<li><p>sessionFactory 的缓存由两部分：<br>内置缓存：使用一个Map集合，用于存放配置信息，预定义HQL语句等，提供给hibernate框架自己使用，对外只读的，不能操作。<br>外置缓存：使用另一个map集合，用于存放用户自定义数据。默认不开启。外置缓存hibernate只提供规范(接口)，需要第三方实现类。 </p>
</li>
<li><p>缓存结构图<br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1574273471066&di=21b666797a9206bf4946ffef55da20dc&imgtype=jpg&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D253178479%2C3342375082%26fm%3D214%26gp%3D0.jpg" alt="结构图"><br>▁▂▃▅▆详解：<br>First-level Cache 一级缓存(存放持久态数据)-PO<br>Second -level Cache 二级缓存<br>Cache-level Strategy  缓存并发策略<br>Query Cache 查询缓存<br>Cache Provider 二级缓存的实现类提供者<br>Class Cache Region  类缓存<br>Collection Cache Region  集合缓存<br>Query Cache Region 查询缓存<br>Update Timestamps  时间戳</p>
</li>
</ul>
<h3 id="并发访问策略-Cache-level-Strategy-缓存并发策略"><a href="#并发访问策略-Cache-level-Strategy-缓存并发策略" class="headerlink" title="并发访问策略(Cache-level Strategy  缓存并发策略)"></a>并发访问策略(Cache-level Strategy  缓存并发策略)</h3><ol>
<li>transactional 事务型(性能低)<ul>
<li>仅在手管理的环境中使用</li>
<li>提供Repeatable Read 事务隔离级别</li>
<li>适用经常被读，很少修改数据</li>
<li>可以防止脏读和不可重复读的并发问题</li>
<li>缓存支持事务，发生异常的时候，缓存也能够回滚</li>
</ul>
</li>
<li>read-write 读写型<ul>
<li>提供Read committed 事务隔离级别</li>
<li>在非集群的环境中适用</li>
<li>适用经常被读，很少修改数据</li>
<li>可以防止脏读</li>
<li>更新缓存的时候会锁定缓存中的数据</li>
</ul>
</li>
<li>nonstrict-read-write 非严格读写型<ul>
<li>适用极少修改，偶尔允许脏读数据(两个事务同时修改数据的情况很少见)</li>
<li>不保证缓存和数据库的一致性</li>
<li>不锁定缓存中的数据</li>
</ul>
</li>
<li>read-only 只读<ul>
<li>适用从来不会修改的数据</li>
<li>在此模式下如果对数据进行更新操作，会有异常</li>
<li>事务隔离级别低，并发性能高</li>
<li>在集群环境中也能完美运行</li>
</ul>
</li>
</ol>
<ul>
<li>注意：<br>  ▁▂▃▅▆ 适合放入二级缓存数据：(国家，地区等)<ul>
<li>很少被修改数据</li>
<li>不是很重要的数据，允许偶尔的并发问题<br>▁▂▃▅▆ 不适合放入二级缓存的数据：</li>
<li>经常被修改</li>
<li>财务数据，绝不允许出现并发问题</li>
<li>与其他应用共享数据</li>
</ul>
</li>
<li>二级缓存供应商<ul>
<li>Hibernate中定义二级缓存接口，实现需要自己选择的供应商</li>
<li>EHCache：对Hibernate查询提供了支持，支持集群，不支持并发访问策略transactional(事务型) <h3 id="二级缓存整合EHCache（二级缓存提供商）"><a href="#二级缓存整合EHCache（二级缓存提供商）" class="headerlink" title="二级缓存整合EHCache（二级缓存提供商）"></a>二级缓存整合EHCache（二级缓存提供商）</h3><ol>
<li>导包：</li>
</ol>
</li>
<li>backport-util-concurrent.jar</li>
<li>commons-logging.jar</li>
<li>ehcache-1.5.0.jar</li>
<li>ehcache-failsafe.xml</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p>配置hibernate.cfg.xml</p>
<ul>
<li>从hibernate.properties查看二级缓存设置<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">### 开启二级缓存</span><br><span class="line"><span class="selector-id">#hibernate</span><span class="selector-class">.cache</span><span class="selector-class">.use_second_level_cache</span>  <span class="selector-tag">false</span></span><br><span class="line">### 二级缓存提供商</span><br><span class="line"><span class="selector-id">#hibernate</span><span class="selector-class">.cache</span><span class="selector-class">.region</span><span class="selector-class">.factory_class</span>  <span class="selector-tag">org</span><span class="selector-class">.hibernate</span><span class="selector-class">.cache</span><span class="selector-class">.internal</span><span class="selector-class">.EhCacheRegionFactory</span></span><br></pre></td></tr></table></figure>
<ul>
<li>hibernate.cfg.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">           com.mysql.cj.jdbc.Driver</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">           jdbc:mysql://localhost:3306/hibernate_user?serverTimezone=Asia/Shanghai</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--		配置映射文件与数据库表关系</span></span><br><span class="line"><span class="comment">                   update：有表则更新，无则创建</span></span><br><span class="line"><span class="comment">                   create：每次启动hibernate都创建，（注意：以前数据没得了）</span></span><br><span class="line"><span class="comment">                   create-drop：每次启动hibernate都创建，执行完后删除表--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--	 开启二级缓存 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--	 设置二级缓存插件EHCache的Provider类 提供商--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.region.factory_class"</span>&gt;</span></span><br><span class="line">       			org.hibernate.cache.ehcache.EhCacheRegionFactory</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--开启与当前线程绑定session功能--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库方言 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">           org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.min_size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.timeout"</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_statements"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.idle_test_period"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.acquire_increment"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.validate"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/domain/Address.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/domain/Company.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- class=""全限定类名</span></span><br><span class="line"><span class="comment">      usage=""缓存并发策略 read-only 只读--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">class-cache</span> <span class="attr">class</span>=<span class="string">"com.zhao.domain.Company"</span> <span class="attr">usage</span>=<span class="string">"read-only"</span>&gt;</span><span class="tag">&lt;/<span class="name">class-cache</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">class-cache</span> <span class="attr">class</span>=<span class="string">"com.zhao.domain.Adderss"</span> <span class="attr">usage</span>=<span class="string">"read-only"</span>&gt;</span><span class="tag">&lt;/<span class="name">class-cache</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置集合缓存--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection-cache</span> <span class="attr">collection</span>=<span class="string">"com.zhao.domain.Company.adderss"</span> <span class="attr">usage</span>=<span class="string">"read-only"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection-cache</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>配置类和集合缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置类缓存</span></span><br><span class="line"><span class="comment">   注意：类缓存的路径是在mapping下，是dtd约束的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class-cache</span> <span class="attr">usage</span>=<span class="string">"read-only"</span> <span class="attr">class</span>=<span class="string">"全限定类名"</span>&gt;</span><span class="tag">&lt;/<span class="name">class-cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置集合缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection-cache</span> <span class="attr">usage</span>=<span class="string">"read-only"</span> <span class="attr">collection</span>=<span class="string">"全限定类名"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置</p>
<ul>
<li>把jar包中ehcache-failsafe.xml文件复制到项目的src目录，然后改名为ehcahe.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"../config/ehcache.xsd"</span>&gt;</span></span><br><span class="line">   //diskStore 硬盘存储  设置临时文件存储位置</span><br><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">       磁盘存储:将缓存中暂时不使用的对象,转移到硬盘,类似于Windows系统的虚拟内存</span></span><br><span class="line"><span class="comment">       path:指定在硬盘上存储对象的路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">       defaultCache:默认的缓存配置信息,如果不加特殊说明,则所有对象按照此配置项处理</span></span><br><span class="line"><span class="comment">       maxElementsInMemory:设置了缓存的上限,最多存储多少个记录对象</span></span><br><span class="line"><span class="comment">       eternal:代表对象是否永不过期</span></span><br><span class="line"><span class="comment">       timeToIdleSeconds:最大的发呆时间</span></span><br><span class="line"><span class="comment">       timeToLiveSeconds:最大的存活时间</span></span><br><span class="line"><span class="comment">       overflowToDisk:是否允许对象被写入到磁盘</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">defaultCache</span> <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span> <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span> <span class="attr">overflowToDisk</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">       cache:为指定名称的对象进行缓存的特殊配置</span></span><br><span class="line"><span class="comment">       name:指定对象的完整名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"com.zbaccp.entity.Person"</span> <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span> <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">timeToIdleSeconds</span>=<span class="string">"300"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span> <span class="attr">overflowToDisk</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="ehcahe-xml属性文件详解"><a href="#ehcahe-xml属性文件详解" class="headerlink" title="ehcahe.xml属性文件详解"></a>ehcahe.xml属性文件详解</h3></li>
</ul>
</li>
<li><p>diskStore ：指定数据(.data and .index)存储位置，可指定磁盘中的文件夹位置期 The diskStore element is optional. It must be configured if you have overflowToDisk or diskPersistent enabled    for any cache. If it is not configured, a warning will be issues and java.io.tmpdir will be used.</p>
</li>
<li><p>defaultCache ： 默认的管理策略</p>
</li>
</ol>
<ul>
<li>一、以下属性是必须的：<ol>
<li>name： Cache的名称，必须是唯一的(ehcache会把这个cache放到HashMap里)。</li>
<li>maxElementsInMemory：在内存中缓存的element的最大数目。 </li>
<li>maxElementsOnDisk：在磁盘上缓存的element的最大数目，默认值为0，表示不限制。 </li>
<li>eternal：设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断。 </li>
<li>overflowToDisk： 如果内存中数据超过内存限制，是否要缓存到磁盘上。 </li>
</ol>
</li>
<li>二、以下属性是可选的：<ol>
<li>timeToIdleSeconds： 对象空闲时间，指对象在多长时间没有被访问就会失效。只对eternal为false的有效。默认值0，表示一直可以访问。</li>
<li>timeToLiveSeconds： 对象存活时间，指对象从创建到失效所需要的时间。只对eternal为false的有效。默认值0，表示一直可以访问。</li>
<li>diskPersistent： 是否在磁盘上持久化。指重启jvm后，数据是否有效。默认为false。 </li>
<li>diskExpiryThreadIntervalSeconds： 对象检测线程运行时间间隔。标识对象状态的线程多长时间运行一次。</li>
<li>diskSpoolBufferSizeMB： DiskStore使用的磁盘大小，默认值30MB。每个cache使用各自的DiskStore。</li>
<li>memoryStoreEvictionPolicy： 如果内存中数据超过内存限制，向磁盘缓存时的策略。默认值LRU，可选FIFO、LFU。 </li>
</ol>
</li>
<li>三、缓存的3 种清空策略 ：<ol>
<li>FIFO ，first in first out (先进先出).</li>
<li>LFU ， Less Frequently Used (最少使用).意思是一直以来最少被使用的。缓存的元素有一个hit 属性，hit 值最小的将会被清出缓存。</li>
<li>LRU ，Least Recently Used(最近最少使用). (ehcache 默认值).缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</li>
</ol>
</li>
</ul>
<h3 id="查询缓存-又称三级缓存"><a href="#查询缓存-又称三级缓存" class="headerlink" title="查询缓存(又称三级缓存)"></a>查询缓存(又称三级缓存)</h3><ol>
<li>开启查询缓存<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启查询缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_query_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>测试<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 查询，执行sql语句，将结果进行缓存 针对HQL的</span></span><br><span class="line">Query query = session.create<span class="constructor">Query(<span class="string">"from Customer"</span>)</span>;</span><br><span class="line">query.set<span class="constructor">Cacheable(<span class="params">yrue</span>)</span>;<span class="comment">//设置允许缓存</span></span><br><span class="line">List&lt;Customer&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">session.close<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">Session session1 = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line"><span class="comment">//2.查找，从查询缓存中获取数据</span></span><br><span class="line">query = session1.create<span class="constructor">Query(<span class="string">"from Customer"</span>)</span>;</span><br><span class="line">query.set<span class="constructor">Cacheable(<span class="params">true</span>)</span>;<span class="comment">//不设置，就不会在缓存中找</span></span><br><span class="line">List&lt;Customer&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="built_in">list</span>);<span class="comment">//不执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.从二级缓存中找</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<ul>
<li>时间戳缓存<ul>
<li>任何操作都在时间戳中记录操作时间</li>
<li>底层select update select 对比如果第三次和第二次sql语句一就执行，反之执行<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//时间戳缓存</span></span><br><span class="line">Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">   Customer c = session.get(<span class="module-access"><span class="module"><span class="identifier">Customer</span>.</span></span><span class="keyword">class</span>,<span class="number">1</span>);</span><br><span class="line">   <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c);</span><br><span class="line">   <span class="comment">//c.setName("iserjhg");//报错不执行</span></span><br><span class="line">   Query query = session.create<span class="constructor">Query(<span class="string">"update Customer set name=:name where id=:id"</span>)</span>;</span><br><span class="line">   query.set<span class="constructor">Parameter(<span class="string">"name"</span>,<span class="string">"kgj"</span>)</span>;</span><br><span class="line">   query.set<span class="constructor">Parameter(<span class="string">"id"</span>,1)</span>;</span><br><span class="line">   query.execute<span class="constructor">Update()</span>;<span class="comment">//执行update语句</span></span><br><span class="line"></span><br><span class="line">session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">session.close<span class="literal">()</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>jave web复习(一)</title>
    <url>/2019/11/20/jave-web%E5%A4%8D%E4%B9%A0-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="servlet相关配置"><a href="#servlet相关配置" class="headerlink" title="servlet相关配置"></a>servlet相关配置</h3><ul>
<li>web.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>java_web<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 配置servlet程序 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> 	<span class="comment">&lt;!-- servlet全限定类名 --&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhao.domain.TestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- url-servlet映射 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 已定义名称 --&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> 		<span class="comment">&lt;!-- 浏览url地址 --&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="servlet模拟登录get请求"><a href="#servlet模拟登录get请求" class="headerlink" title="servlet模拟登录get请求"></a>servlet模拟登录get请求</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"> <span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</span><br><span class="line"> <span class="keyword">import</span> javax.servlet.annotation.<span class="type">WebServlet</span>;</span><br><span class="line"> <span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"> <span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"> <span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class GetParam</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@WebServlet</span>(<span class="string">"/GetParam"</span>)</span><br><span class="line"> public <span class="class"><span class="keyword">class</span> <span class="title">GetParam</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">       </span><br><span class="line">	<span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">		<span class="comment">//请求地址：localhost:8080/java_web/GetParam?name=lisi&amp;pwd=123456</span></span><br><span class="line">		response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">		<span class="comment">//通过参数名获取值</span></span><br><span class="line">		<span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">		<span class="type">String</span> pwd = request.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line">		<span class="type">System</span>.out.println(<span class="string">"姓名："</span>+name+<span class="string">"密码："</span>+pwd);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"lisi"</span>.equals(name) &amp;&amp; <span class="string">"123456"</span>.equals(pwd) )&#123;</span><br><span class="line">			response.getWriter().append(<span class="string">"ok!"</span>);</span><br><span class="line">			<span class="comment">//请求转发</span></span><br><span class="line">			request.getRequestDispatcher(<span class="string">"index.jsp"</span>).forward(request, response);</span><br><span class="line">			<span class="comment">//重定向</span></span><br><span class="line">			<span class="comment">//response.sendRedirect("index.jsp");</span></span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			response.getWriter().append(<span class="string">"error!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//设置参数到request对象中setAttribute("参数名", 参数值)</span></span><br><span class="line">		<span class="comment">//jsp页面el表达式取值$&#123;参数名&#125;</span></span><br><span class="line">	  <span class="comment">//request.setAttribute("name", name);</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="servlet模拟登录post表单请求"><a href="#servlet模拟登录post表单请求" class="headerlink" title="servlet模拟登录post表单请求"></a>servlet模拟登录post表单请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	<span class="comment">//获取命令参数</span></span><br><span class="line">	String command =  request.getParameter(<span class="string">"command"</span>);</span><br><span class="line">	<span class="comment">//判断命令</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="string">"login"</span>.equals(command))&#123;</span><br><span class="line">		login(request, response);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		response.getWriter().append(<span class="string">"无效命令"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	<span class="comment">//获取表单内容，request.getParameter("表单项的name属性值");</span></span><br><span class="line">	String username = request.getParameter(<span class="string">"username"</span>); </span><br><span class="line">	String pwd  = 	request.getParameter(<span class="string">"pwd"</span>);	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//设置参数到request对象中</span></span><br><span class="line">	request.setAttribute(<span class="string">"name"</span>, username);</span><br><span class="line">	<span class="comment">//判断账号密码</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="string">"zhangsan"</span>.equals(username) &amp;&amp; <span class="string">"123456"</span>.equals(pwd))&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//转发数据到index.jsp页面</span></span><br><span class="line">		request.getRequestDispatcher(<span class="string">"index.jsp"</span>).forward(request, response);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//设置提示</span></span><br><span class="line">		request.setAttribute(<span class="string">"error"</span>, <span class="string">"error"</span>);</span><br><span class="line">		<span class="comment">//登录失败跳转到登录页面</span></span><br><span class="line">		request.getRequestDispatcher(<span class="string">"login.jsp"</span>).forward(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>jsp页面<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">   pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>$</span><span class="template-variable">&#123;error&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"UserController?command=login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="java-web-三层架构详解"><a href="#java-web-三层架构详解" class="headerlink" title="java web 三层架构详解"></a>java web 三层架构详解</h3></li>
</ul>
</li>
</ul>
<ol>
<li>创建实体类（javabean）<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> pwd;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> pwd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(<span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承父类构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">String</span> name, <span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", pwd="</span> + pwd + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建连接数据库工具类（JDBCUtil）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Connection conn  = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/day2"</span>,<span class="string">"root"</span>,<span class="string">"ROOT"</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,Statement stm,ResultSet rest)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(rest!=<span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			rest.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(stm!=<span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			stm.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(conn!=<span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			conn.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>创建持久层DAO<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> UserDao &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public User user<span class="constructor">Login(User <span class="params">u</span>)</span> &#123;</span><br><span class="line">	User user =  null;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取连接对象</span></span><br><span class="line">	Connection conn =  <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">	PreparedStatement  pstm = null;</span><br><span class="line">	ResultSet rest =  null;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//预编译sql语句</span></span><br><span class="line">	String sql  =  <span class="string">"select * from user where username =  ?  and password = ?"</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		pstm =  conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">		<span class="comment">//设置参数</span></span><br><span class="line">		pstm.set<span class="constructor">String(1, <span class="params">u</span>.<span class="params">getUsername</span>()</span>);</span><br><span class="line">		pstm.set<span class="constructor">String(2, <span class="params">u</span>.<span class="params">getPwd</span>()</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//执行sql,返回结果集</span></span><br><span class="line">		rest = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">		<span class="comment">//判断是否有结果返回</span></span><br><span class="line">		<span class="keyword">if</span>(rest.next<span class="literal">()</span>) &#123;</span><br><span class="line">			<span class="comment">//创建user对象，并设置查询到的属性</span></span><br><span class="line">			user =  <span class="keyword">new</span> <span class="constructor">User(<span class="params">rest</span>.<span class="params">getInt</span>(1)</span>,rest.get<span class="constructor">String(2)</span>,rest.get<span class="constructor">String(3)</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125; catch (SQLException e) &#123;</span><br><span class="line">		e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">	&#125;finally &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn, pstm, rest);</span><br><span class="line">	&#125;</span><br><span class="line">	return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建业务层service层<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public class UserService &#123;</span><br><span class="line"></span><br><span class="line">public UserDao userDao =  new UserDao();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public<span class="built_in"> User </span>userLogin(User u) &#123;</span><br><span class="line">	return userDao.userLogin(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建控制层controller<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">WebServlet(<span class="string">"/UserServlet"</span>)</span></span><br><span class="line">public <span class="keyword">class</span> UserServlet extends HttpServlet &#123;</span><br><span class="line"><span class="keyword">private</span> static final long serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">public UserService userService =  <span class="keyword">new</span> <span class="constructor">UserService()</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">//获取命令参数</span></span><br><span class="line">			String command =  request.get<span class="constructor">Parameter(<span class="string">"command"</span>)</span>;</span><br><span class="line">			<span class="comment">//判断命令</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="string">"login"</span>.equals(command))&#123;</span><br><span class="line">				login(request, response);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				response.get<span class="constructor">Writer()</span>.append(<span class="string">"无效命令"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">private</span> void login(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">//获取表单内容，request.getParameter("表单项的name属性值");</span></span><br><span class="line">	String name = request.get<span class="constructor">Parameter(<span class="string">"name"</span>)</span>; </span><br><span class="line">	String pwd  = 	request.get<span class="constructor">Parameter(<span class="string">"pwd"</span>)</span>;	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//收集用户的登录信息</span></span><br><span class="line">	User u =  <span class="keyword">new</span> <span class="constructor">User(<span class="params">name</span>,<span class="params">pwd</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//调用service层的登录方法，返回登录的结果</span></span><br><span class="line">	User  user = userService.user<span class="constructor">Login(<span class="params">u</span>)</span>;  </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//判断账号密码</span></span><br><span class="line">	<span class="keyword">if</span>(user!= null)&#123;<span class="comment">//返回user不为空，代表数据库中有对应的信息</span></span><br><span class="line">		<span class="comment">//设置参数到request对象中</span></span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"user"</span>, <span class="params">user</span>)</span>;</span><br><span class="line">		<span class="comment">//转发数据到index.jsp页面</span></span><br><span class="line">		request.get<span class="constructor">RequestDispatcher(<span class="string">"index.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//设置提示</span></span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"error"</span>, <span class="string">"账号或密码错误"</span>)</span>;</span><br><span class="line">		<span class="comment">//设置参数到request对象中</span></span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"user"</span>, <span class="params">u</span>)</span>;</span><br><span class="line">		<span class="comment">//登录失败跳转到登录页面</span></span><br><span class="line">		request.get<span class="constructor">RequestDispatcher(<span class="string">"login.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="keyword">do</span><span class="constructor">Get(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>jsp页面</li>
</ul>
<ol>
<li>index.jsp<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span></span><br><span class="line"><span class="xml">   pageEncoding="utf-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">欢迎<span class="tag">&lt;<span class="name">h1</span>&gt;</span>$</span><span class="template-variable">&#123;user.username&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>login.jsp<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">   pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>$</span><span class="template-variable">&#123;error&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"UserController?command=login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Java web</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 复习(一)</title>
    <url>/2019/11/19/Java-%E5%A4%8D%E4%B9%A0-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="Jdk（java开发工具包）"><a href="#Jdk（java开发工具包）" class="headerlink" title="Jdk（java开发工具包）"></a>Jdk（java开发工具包）</h3><ul>
<li>安装目录：<ol>
<li>bin（java的可执行程序）</li>
<li>DB (内置小型数据库)</li>
<li>Jre(java运行环境)</li>
<li>Lib(java的类库)</li>
</ol>
</li>
</ul>
<h3 id="安装完成需要配置环境变量（都是目录，控制台执行时需要引用）："><a href="#安装完成需要配置环境变量（都是目录，控制台执行时需要引用）：" class="headerlink" title="安装完成需要配置环境变量（都是目录，控制台执行时需要引用）："></a>安装完成需要配置环境变量（都是目录，控制台执行时需要引用）：</h3><ol>
<li>JAVA_HOME:    C:\Program Files\Java\jdk1.8.0_162(JDK安装的主目录)        </li>
<li>Path：C:\Program Files\Java\jdk1.8.0_162\bin（可执行程序的目录，在控制台任意目录下启动）</li>
<li>CLASSPATH: C:\Program Files\Java\jdk1.8.0_162\lib;.（需要调用的类的目录）</li>
</ol>
<ul>
<li><p>可能提示的问题：<br>  找不到或无法加载主类：查看classpath变量是否配置正确</p>
</li>
<li><p>Eclipse安装：注意jdk版本和eclipse版本相同（都是32位或64位）</p>
<pre><code>常用快捷键：alt+/
代码注释：ctrl+/
删除行：ctrl+d        
代码切换行:alt+”↑/↓”
代码上下行复制:ctrl+alt+”↑/↓”    </code></pre><h3 id="jdbc连接mysql数据库"><a href="#jdbc连接mysql数据库" class="headerlink" title="jdbc连接mysql数据库"></a>jdbc连接mysql数据库</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.direct.day1.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//jdbc链接mysql数据库</span></span><br><span class="line"><span class="comment">//1、准备链接驱动</span></span><br><span class="line"><span class="comment">//2、加载驱动</span></span><br><span class="line"><span class="comment">//3、获取数据库链接</span></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">String</span> url = <span class="string">"jdbc:mysql://localhost:3306/demo1?characterEncoding=utf-8"</span>;</span><br><span class="line"><span class="keyword">String</span> user = <span class="string">"root"</span>;</span><br><span class="line"><span class="keyword">String</span> pwd = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="comment">//通过驱动管理器获取数据库链接对象，需要传入参数(链接地址，账号，密码)</span></span><br><span class="line">	Connection conn = DriverManager.getConnection(url,user, pwd);</span><br><span class="line">	System.out.<span class="built_in">println</span>(conn);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建sql语句执行对象</span></span><br><span class="line">	Statement stm = conn.createStatement();</span><br><span class="line">	<span class="keyword">String</span>  sql =  <span class="string">"select * from user"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//执行查询语句，返回ResultSet结果集</span></span><br><span class="line">	ResultSet rest = stm.executeQuery(sql);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取结果集中的数据,通过next()方法移动指针,如果执行所指位置没有数据，则返回false</span></span><br><span class="line">	<span class="keyword">while</span>(rest.next())&#123;</span><br><span class="line">		<span class="comment">//从结果集中获取数据的方法 getInt("字段名称/或字段的下标位置")，getString("字段名称/或字段的下标位置")</span></span><br><span class="line">		<span class="comment">//通过传递数据表的字段名称，获取int类型的数据</span></span><br><span class="line">		<span class="keyword">int</span> id  = rest.getInt(<span class="string">"id"</span>);</span><br><span class="line">		<span class="comment">//通过传递数据表的字段下标，获取String类型的数据</span></span><br><span class="line">		<span class="keyword">String</span> username =  rest.getString(<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">String</span> password =  rest.getString(<span class="string">"password"</span>);</span><br><span class="line">		System.out.<span class="built_in">println</span>(id+<span class="string">" "</span>+username+<span class="string">" "</span>+password);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//释放资源</span></span><br><span class="line">	rest.<span class="built_in">close</span>();</span><br><span class="line">	stm.<span class="built_in">close</span>();</span><br><span class="line">	conn.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模仿用户登录实现"><a href="#模仿用户登录实现" class="headerlink" title="模仿用户登录实现"></a>模仿用户登录实现</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> package com.direct.day1.demo1;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"> <span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"> <span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"> <span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"> <span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"> <span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//jdbc链接mysql数据库</span></span><br><span class="line">	<span class="comment">//1、准备链接驱动</span></span><br><span class="line">	<span class="comment">//2、加载驱动</span></span><br><span class="line">	<span class="comment">//3、获取数据库链接</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * @param u 账号</span></span><br><span class="line"><span class="comment">	 * @param p 密码</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">login</span><span class="params">(<span class="keyword">String</span> u,<span class="keyword">String</span> p)</span></span>&#123;</span><br><span class="line">		<span class="comment">//加载驱动</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">String</span> url = <span class="string">"jdbc:mysql://localhost:3306/demo1?characterEncoding=utf-8"</span>;</span><br><span class="line">		<span class="keyword">String</span> user = <span class="string">"root"</span>;</span><br><span class="line">		<span class="keyword">String</span> pwd = <span class="string">"123456"</span>;</span><br><span class="line">		 <span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//通过驱动管理器获取数据库链接对象，需要传入参数(链接地址，账号，密码)</span></span><br><span class="line">			Connection conn = DriverManager.getConnection(url,user, pwd);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//创建sql语句执行对象</span></span><br><span class="line">			Statement stm = conn.createStatement();</span><br><span class="line">			<span class="keyword">String</span>  sql =  <span class="string">"select * from user where username='"</span>+u+<span class="string">"' and password='"</span>+p+<span class="string">"';"</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//执行查询语句，返回ResultSet结果集</span></span><br><span class="line">			ResultSet rest = stm.executeQuery(sql);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">boolean</span> flag = <span class="literal">false</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//获取结果集中的数据,通过next()方法移动指针,如果执行所指位置没有数据，则返回false</span></span><br><span class="line">			<span class="keyword">while</span>(rest.next())&#123;</span><br><span class="line">				<span class="comment">//从结果集中获取数据的方法 getInt("字段名称/或字段的下标位置")，getString("字段名称/或字段的下标位置")</span></span><br><span class="line">				<span class="comment">//通过传递数据表的字段名称，获取int类型的数据</span></span><br><span class="line">				<span class="keyword">int</span> id  = rest.getInt(<span class="string">"id"</span>);</span><br><span class="line">				<span class="comment">//通过传递数据表的字段下标，获取String类型的数据</span></span><br><span class="line">				<span class="keyword">String</span> username =  rest.getString(<span class="number">2</span>);</span><br><span class="line">				<span class="keyword">String</span> password =  rest.getString(<span class="string">"password"</span>);</span><br><span class="line">				System.out.<span class="built_in">println</span>(id+<span class="string">" "</span>+username+<span class="string">" "</span>+password);</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(flag)System.out.<span class="built_in">println</span>(<span class="string">"登录成功"</span>);</span><br><span class="line">			<span class="keyword">else</span> System.out.<span class="built_in">println</span>(<span class="string">"登录失败"</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			rest.<span class="built_in">close</span>();</span><br><span class="line">			stm.<span class="built_in">close</span>();</span><br><span class="line">			conn.<span class="built_in">close</span>();</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//sql语句注入</span></span><br><span class="line">		login(<span class="string">"6f4asdfasdf"</span>,<span class="string">"3213' or '1'='1"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="预编译执行对象详解"><a href="#预编译执行对象详解" class="headerlink" title="预编译执行对象详解"></a>预编译执行对象详解</h3> <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> package com.direct.day1.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLogin2</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//jdbc链接mysql数据库</span></span><br><span class="line">	<span class="comment">//1、准备链接驱动</span></span><br><span class="line">	<span class="comment">//2、加载驱动</span></span><br><span class="line">	<span class="comment">//3、获取数据库链接</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * @param u 账号</span></span><br><span class="line"><span class="comment">	 * @param p 密码</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">login</span><span class="params">(<span class="keyword">String</span> u,<span class="keyword">String</span> p)</span></span>&#123;</span><br><span class="line">		<span class="comment">//加载驱动</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">String</span> url = <span class="string">"jdbc:mysql://localhost:3306/demo1?characterEncoding=utf-8"</span>;</span><br><span class="line">		<span class="keyword">String</span> user = <span class="string">"root"</span>;</span><br><span class="line">		<span class="keyword">String</span> pwd = <span class="string">"123456"</span>;</span><br><span class="line">		 <span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//通过驱动管理器获取数据库链接对象，需要传入参数(链接地址，账号，密码)</span></span><br><span class="line">			Connection conn = DriverManager.getConnection(url,user, pwd);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//“？”代表需要设置的参数</span></span><br><span class="line">			<span class="keyword">String</span>  sql =  <span class="string">"select * from user where username= ? and password= ? "</span>;</span><br><span class="line">			<span class="comment">//创建sql语句 预编译执行对象</span></span><br><span class="line">			PreparedStatement pstm = conn.prepareStatement(sql);</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			pstm.setString(<span class="number">1</span>, u);</span><br><span class="line">			pstm.setString(<span class="number">2</span>, p);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//执行查询语句，返回ResultSet结果集</span></span><br><span class="line">			ResultSet rest = pstm.executeQuery();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">boolean</span> flag = <span class="literal">false</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//获取结果集中的数据,通过next()方法移动指针,如果执行所指位置没有数据，则返回false</span></span><br><span class="line">			<span class="keyword">while</span>(rest.next())&#123;</span><br><span class="line">				<span class="comment">//从结果集中获取数据的方法 getInt("字段名称/或字段的下标位置")，getString("字段名称/或字段的下标位置")</span></span><br><span class="line">				<span class="comment">//通过传递数据表的字段名称，获取int类型的数据</span></span><br><span class="line">				<span class="keyword">int</span> id  = rest.getInt(<span class="string">"id"</span>);</span><br><span class="line">				<span class="comment">//通过传递数据表的字段下标，获取String类型的数据</span></span><br><span class="line">				<span class="keyword">String</span> username =  rest.getString(<span class="number">2</span>);</span><br><span class="line">				<span class="keyword">String</span> password =  rest.getString(<span class="string">"password"</span>);</span><br><span class="line">				System.out.<span class="built_in">println</span>(id+<span class="string">" "</span>+username+<span class="string">" "</span>+password);</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(flag)System.out.<span class="built_in">println</span>(<span class="string">"登录成功"</span>);</span><br><span class="line">			<span class="keyword">else</span> System.out.<span class="built_in">println</span>(<span class="string">"登录失败"</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			rest.<span class="built_in">close</span>();</span><br><span class="line">			pstm.<span class="built_in">close</span>();</span><br><span class="line">			conn.<span class="built_in">close</span>();</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//sql语句注入</span></span><br><span class="line">		login(<span class="string">"6f4asdfasdf"</span>,<span class="string">"3213' or '1'='1"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="增删改查操作"><a href="#增删改查操作" class="headerlink" title="增删改查操作"></a>增删改查操作</h3><ul>
<li>操作类<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"> package com.direct.day1.demo1;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> TestCRUD &#123;</span><br><span class="line">	@Test	</span><br><span class="line">	public void <span class="constructor">TestFindById()</span> &#123;</span><br><span class="line">		<span class="built_in">int</span> id = <span class="number">2</span>;</span><br><span class="line">		</span><br><span class="line">		Connection conn =  <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">		String sql = <span class="string">"select * from  user where id = ?"</span>;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		ResultSet rest = null;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//创建预编译sql语句对象</span></span><br><span class="line">			 pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			pstm.set<span class="constructor">Int(1, <span class="params">id</span>)</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//执行查询sql</span></span><br><span class="line">			rest =  pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">while</span>(rest.next<span class="literal">()</span>)&#123;</span><br><span class="line">				<span class="comment">//根据字段名称获取数据</span></span><br><span class="line">				<span class="built_in">int</span> uid = rest.get<span class="constructor">Int(<span class="string">"id"</span>)</span>;</span><br><span class="line">				String username = rest.get<span class="constructor">String(<span class="string">"username"</span>)</span>;</span><br><span class="line">				String pwd =  rest.get<span class="constructor">String(3)</span>;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(uid+<span class="string">" "</span>+username+<span class="string">" "</span>+pwd);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;<span class="comment">//一定会执行的代码</span></span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm,rest);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	@Test	</span><br><span class="line">	public void <span class="constructor">TestDelById()</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">int</span> id = <span class="number">3</span>;</span><br><span class="line">		</span><br><span class="line">		Connection conn =  <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">		String sql = <span class="string">"delete from  user where id = ?"</span>;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//创建预编译sql语句对象</span></span><br><span class="line">			 pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			pstm.set<span class="constructor">Int(1, <span class="params">id</span>)</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//执行更新sql,返回受影响的行</span></span><br><span class="line">			<span class="built_in">int</span> num  =  pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"没有数据被删除"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"删除了"</span>+num+<span class="string">"条"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;<span class="comment">//一定会执行的代码</span></span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	@Test	</span><br><span class="line">	public void <span class="constructor">TestSave()</span> &#123;</span><br><span class="line">		String username  = <span class="string">"wangwu"</span>;</span><br><span class="line">		String password  = <span class="string">"123456"</span>;</span><br><span class="line">		</span><br><span class="line">		Connection conn =  <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">		String sql = <span class="string">"insert into user(username,password) value(?,?)"</span>;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//创建预编译sql语句对象</span></span><br><span class="line">			 pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			 pstm.set<span class="constructor">String(1, <span class="params">username</span>)</span>;</span><br><span class="line">			 pstm.set<span class="constructor">String(2, <span class="params">password</span>)</span>;</span><br><span class="line">			 </span><br><span class="line">			<span class="comment">//执行更新sql,返回受影响的行</span></span><br><span class="line">			<span class="built_in">int</span> num  =  pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"没有数据添加"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"添加了"</span>+num+<span class="string">"条"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;<span class="comment">//一定会执行的代码</span></span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	@Test	</span><br><span class="line">	public void <span class="constructor">TestUpdate()</span> &#123;</span><br><span class="line">		<span class="built_in">int</span> id = <span class="number">4</span>;</span><br><span class="line">		String username  = <span class="string">"狗蛋"</span>;</span><br><span class="line">		String password  = <span class="string">"123456"</span>;</span><br><span class="line">		</span><br><span class="line">		Connection conn =  <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">		String sql = <span class="string">"update user  set  username = ?, password = ? where id= ? "</span>;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//创建预编译sql语句对象</span></span><br><span class="line">			 pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			 pstm.set<span class="constructor">String(1, <span class="params">username</span>)</span>;</span><br><span class="line">			 pstm.set<span class="constructor">String(2, <span class="params">password</span>)</span>;</span><br><span class="line">			 pstm.set<span class="constructor">Int(3, <span class="params">id</span>)</span>;</span><br><span class="line">			 </span><br><span class="line">			<span class="comment">//执行更新sql,返回受影响的行</span></span><br><span class="line">			<span class="built_in">int</span> num  =  pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"没有数据修改"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"修改了"</span>+num+<span class="string">"条"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;<span class="comment">//一定会执行的代码</span></span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>驱动类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> package com.direct.day1.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> &#123;</span></span><br><span class="line">	<span class="comment">//静态代码块，在类加载的时候就会执行</span></span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		<span class="comment">//加载驱动</span></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Connection  <span class="title">getConn</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">String</span> url = <span class="string">"jdbc:mysql://localhost:3306/demo1?characterEncoding=utf-8"</span>;</span><br><span class="line">		<span class="keyword">String</span> user = <span class="string">"root"</span>;</span><br><span class="line">		<span class="keyword">String</span> pwd = <span class="string">"123456"</span>;</span><br><span class="line">		Connection conn = null;</span><br><span class="line">		 <span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//通过驱动管理器获取数据库链接对象，需要传入参数(链接地址，账号，密码)</span></span><br><span class="line">			conn = DriverManager.getConnection(url,user, pwd);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		 <span class="comment">//返回链接</span></span><br><span class="line">		 <span class="keyword">return</span>  conn;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//释放资源的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,PreparedStatement pstm,ResultSet rest)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(rest!=null)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				rest.<span class="built_in">close</span>();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(pstm!=null)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				pstm.<span class="built_in">close</span>();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(conn!=null)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.<span class="built_in">close</span>();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,PreparedStatement pstm)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(pstm!=null)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				pstm.<span class="built_in">close</span>();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(conn!=null)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.<span class="built_in">close</span>();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架(四)</title>
    <url>/2019/11/19/Hibernate%E6%A1%86%E6%9E%B6-%E5%9B%9B/</url>
    <content><![CDATA[<h3 id="HQL查询"><a href="#HQL查询" class="headerlink" title="HQL查询"></a>HQL查询</h3><ul>
<li>HQL的语法与SQL语法基本一致，不同的是HQL是指向面向对象查询的，查询的是对象和对象中的属性</li>
<li>HQL关键支部区分大小写，但类名和属性区分大小写<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select 别名/属性名/表达式</span><br><span class="line"><span class="keyword">from</span> 实体 as 别名 </span><br><span class="line">where 过滤条件</span><br><span class="line">group by 分组条件</span><br><span class="line">having 分组后的结果的过滤条件</span><br><span class="line">orday by 排序条件</span><br></pre></td></tr></table></figure>
<ul>
<li>查询所有客户<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Lesson8 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询所有客户，查询是所有表的字段</span></span><br><span class="line">       Query query = session.create<span class="constructor">Query(<span class="string">"from Customer"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询结果会封装到一个list集合中</span></span><br><span class="line">       List&lt;Customer&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历</span></span><br><span class="line">       for(Customer c : <span class="built_in">list</span>)&#123;</span><br><span class="line">           <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c.get<span class="constructor">Name()</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">       session.close<span class="literal">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>选择查询<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Lesson10 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.带条件</span></span><br><span class="line">       <span class="comment">//Query query = session.createQuery("from Customer where id=2");</span></span><br><span class="line">       <span class="comment">//Query query = session.createQuery("from Customer where id=?");</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.别名</span></span><br><span class="line">       <span class="comment">//Query query = session.createQuery("from Customer c where c.id=?");</span></span><br><span class="line">       Query query = session.create<span class="constructor">Query(<span class="string">"select c from Customer c where c.id=?"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.设置参数</span></span><br><span class="line">       query.set<span class="constructor">Integer(0,2)</span>;</span><br><span class="line">       <span class="comment">//query.setParameter(1,2);</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.查询结果会封装到一个list集合中</span></span><br><span class="line">       List&lt;Customer&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历</span></span><br><span class="line">       for(Customer c : <span class="built_in">list</span>)&#123;</span><br><span class="line">           <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c.get<span class="constructor">Name()</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询只获取一条数据</span></span><br><span class="line">       Customer c = (Customer)query.unique<span class="constructor">Result()</span>;</span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out,println(c);</span><br><span class="line"></span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">       session.close<span class="literal">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>投影查询(其不会把结果封装成对象，封装的是数组)<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson11 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       //查询所有客户</span><br><span class="line">       Query query = <span class="keyword">session</span>.createQuery("select c.id,c.name from Customer c ");</span><br><span class="line"></span><br><span class="line">       //查询结果会封装到一个list集合中</span><br><span class="line">       List&lt;<span class="keyword">Object</span>[]&gt; list = query.list();</span><br><span class="line"></span><br><span class="line">       //注意：封装的是数组</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">Object</span> c : obj)&#123;</span><br><span class="line">               <span class="keyword">System</span>.<span class="keyword">out</span>.peintln(c);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println("--------------")</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="排序-order-by-desc降序-asc升序"><a href="#排序-order-by-desc降序-asc升序" class="headerlink" title="排序 order by desc降序  asc升序"></a>排序 order by desc降序  asc升序</h3> <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Session session = util.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有客户结果会封装到一个list集合中</span></span><br><span class="line">    List&lt;Customer&gt; <span class="built_in">list</span> = session.createQuery(<span class="string">"from Customer c order by c.id desc"</span>).<span class="built_in">list</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">for</span>(Customer c : <span class="built_in">list</span>)&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(c)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    session.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3> <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Query</span> <span class="keyword">query</span> = session.createQuery(<span class="string">"from Customer"</span>);</span><br><span class="line"><span class="comment">//pageNum 当前页（之前的 pageCode）</span></span><br><span class="line"><span class="keyword">query</span>.setFirstResult(0);</span><br><span class="line"> <span class="comment">//每页显示个数，pageSize</span></span><br><span class="line"> <span class="keyword">query</span>.setMaxResults(5);</span><br></pre></td></tr></table></figure>
<h3 id="聚合函数和分组查询"><a href="#聚合函数和分组查询" class="headerlink" title="聚合函数和分组查询"></a>聚合函数和分组查询</h3> <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"> <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line"></span><br><span class="line">     //查询所有客户结果会封装到一个list集合中</span><br><span class="line">     Query query = <span class="keyword">session</span>.createQuery("select count（*）from Customer c ");</span><br><span class="line"></span><br><span class="line">     Long count = (Long)query.uniqueResult();</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println("客户表的总记录：+count")</span><br><span class="line"></span><br><span class="line">     //HQL分组<span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">     //<span class="keyword">SQL</span>语句 <span class="keyword">select</span> o.customer_id,count(o.customer_id) <span class="keyword">from</span>  t_order o <span class="keyword">group</span> <span class="keyword">by</span> o.customer_id;</span><br><span class="line"></span><br><span class="line">     List&lt;<span class="keyword">object</span>[]&gt; list = <span class="keyword">session</span>.createQuery("select o.customer, count(o) from Order o group by o.customer").list();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list))&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">object</span> o : obj)&#123;</span><br><span class="line">             <span class="keyword">System</span>.<span class="keyword">out</span>.println(o);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">System</span>.<span class="keyword">out</span>.println("----------");</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><ul>
<li><p>inner join 内连接</p>
</li>
<li><p>left outer join 左外连接</p>
</li>
<li><p>right outer join 右外连接</p>
</li>
<li><p>HQL中：<br>内连接  inner join | join </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       //内连接【<span class="keyword">inner</span> <span class="keyword">join</span>】返回结果数组List&lt;<span class="keyword">Object</span>[]&gt;</span><br><span class="line">       //<span class="keyword">From</span> Customer <span class="keyword">inner</span> <span class="keyword">join</span> c.orders 相当于 <span class="keyword">select</span> * form t_customer tc <span class="keyword">inner</span> <span class="keyword">join</span> t_order <span class="keyword">to</span> <span class="keyword">on</span> tc.id = <span class="keyword">to</span>.customer.id</span><br><span class="line">       List&lt;<span class="keyword">Object</span>[]&gt; list = <span class="keyword">session</span>.createQuery("From Customer c inner join c.orders").list();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj[<span class="number">0</span>]+":"+obj[<span class="number">1</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>迫切内连接  inner join feath | join fetch</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       // 迫切内连接  <span class="keyword">inner</span> <span class="keyword">join</span> feath | <span class="keyword">join</span> <span class="keyword">fetch</span> 返回数据List&lt;Customer&gt;;</span><br><span class="line">       List&lt;Customer&gt; list = <span class="keyword">session</span>.createQuery("From Customer c inner join fetch c.orders").list();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(Customer c : list)&#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println(c.getName());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>隐式内连接【join】 </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">      <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">      //隐式内连接 == 笛卡尔集过滤条件</span><br><span class="line">      List&lt;<span class="keyword">Object</span>[]&gt; list = <span class="keyword">session</span>.createQuery("From Customer c, Order o where c = o.customer").list();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">          <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj[<span class="number">0</span>]+":"+obj[<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">      <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>左外连接   left outer join | left join 左表中如果没有右表的匹配数据，左表记录也会显示<br>迫切左外连接  left outer join fetch | left join fetch<br>右外连接  right outer join | outer join<br>交叉连接  ClassA ClassB</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">      <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">      //HQL交叉连接相当于 == <span class="keyword">SQL</span>笛卡尔集</span><br><span class="line">      List&lt;<span class="keyword">Object</span>[]&gt; list = <span class="keyword">session</span>.createQuery("From Customer c, Order o").list();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">          <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj[<span class="number">0</span>]+":"+obj[<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">      <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="命名查询"><a href="#命名查询" class="headerlink" title="命名查询"></a>命名查询</h3><ul>
<li>命名查询:hql写在映射文件,通过session的getNameQuery()来返回一个Query对象<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">      <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">      //命名查询,把hql写在映射文件中比较灵活</span><br><span class="line">      <span class="comment">/*hql写入映射文件2种方式：</span></span><br><span class="line"><span class="comment">      *1.写在类class标签里面，hql是局部的</span></span><br><span class="line"><span class="comment">      *2.写在hibernate-mapping标签里面，hql是全局的</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      //String hql = "from Customer";</span><br><span class="line">      //Query query = <span class="keyword">session</span>.createQuery(hql);</span><br><span class="line">      //<span class="keyword">System</span>.<span class="keyword">out</span>.println(query.list());</span><br><span class="line"></span><br><span class="line">      //获取<span class="keyword">Class</span>里的局部hql语句(方法参数 包名+类名);</span><br><span class="line">      Query query = <span class="keyword">session</span>.getNameQuery("zhao/hibernate/domain/Customer.hql1");</span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(query.list());</span><br><span class="line"></span><br><span class="line">      //获取hibernate-<span class="keyword">mapping</span>中全局的hql(方法参数 类名);</span><br><span class="line">      Query query = <span class="keyword">session</span>.getNameQuery("hql2");</span><br><span class="line">      query.setParames(<span class="number">0</span>,"沐沐");</span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(query.uniqueResult());</span><br><span class="line">      <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">      <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>映射文件<!--第一种hql的位置-->
<query name="hql1">hql语句</query><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"zhao.hibernate.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"customer"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        描述一对多关系</span></span><br><span class="line"><span class="comment">       key中Colum写的是外键名称</span></span><br><span class="line"><span class="comment">       one-to-many 一对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">cascade</span>=<span class="string">"delete-orphan"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"zhao.hibernate.domain.Order"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-many</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--第一种hql的位置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">query</span> <span class="attr">name</span>=<span class="string">"hql1"</span>&gt;</span>from Customer<span class="tag">&lt;/<span class="name">query</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--第二种hql的位置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">query</span> <span class="attr">name</span>=<span class="string">"hql2"</span>&gt;</span>from Customer where name=?<span class="tag">&lt;/<span class="name">query</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置C3P0"><a href="#配置C3P0" class="headerlink" title="配置C3P0"></a>配置C3P0</h3></li>
<li>找到Hibernate\hibernate-release-5.4.8.Final\project\etc\hibernate.properties文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--		配置C3P0连接池--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		#hibernate.connection.provider_class org.hibernate.connection.C3P0ConnectionProvider--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		#hibernate.c3p0.max_size 2</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.min_size 2</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.timeout 5000</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.max_statements 100</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.idle_test_period 3000</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.acquire_incre</span></span><br><span class="line"><span class="comment">           ment 2</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.validate false--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.min_size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.timeout"</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_statements"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.idle_test_period"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.acquire_increment"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.validate"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="悲观锁，乐观锁"><a href="#悲观锁，乐观锁" class="headerlink" title="悲观锁，乐观锁"></a>悲观锁，乐观锁</h3><ul>
<li><p>悲观锁分为两种：</p>
<ol>
<li>读锁/共享锁【比较少用】</li>
</ol>
<ul>
<li>读锁可被其他线程所共享，如果是读取的话大家都可以用这把锁读到数据。<br>select * from table lock in share mode（读锁/共享锁）<br>start transaction; 开启事务<br>commit;  提交事务</li>
</ul>
<ol start="2">
<li>写锁/排他锁【用的多】</li>
</ol>
<ul>
<li><p>写锁不能共享，只要有人为数据加入了写锁，其他人就不能为数据加入任何锁<br>select * from table for update;【锁表，不推荐使用】<br>select * from table  where id= 1 for update;【锁行，常用】   </p>
<h3 id="Hibernate添加写锁"><a href="#Hibernate添加写锁" class="headerlink" title="Hibernate添加写锁"></a>Hibernate添加写锁</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">        <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">        //hibernate 的写锁/陪他锁实现</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 演示</span></span><br><span class="line"><span class="comment">         * A线程【命令行】，开启事务--》读取一行数据加锁</span></span><br><span class="line"><span class="comment">         * B 线程【应用程序】，开启事务--》读取一行数据加锁</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">         //方式一执行<span class="keyword">Sql</span>语句进行写锁</span><br><span class="line">         Customer customer = <span class="keyword">session</span>.<span class="keyword">get</span>(Customer.<span class="keyword">class</span>,<span class="number">1</span>,LockOptions.<span class="keyword">UPDATE</span>);//写锁</span><br><span class="line">         <span class="keyword">System</span>,<span class="keyword">out</span>.println(customer);</span><br><span class="line"></span><br><span class="line">         //方式<span class="number">2</span></span><br><span class="line">         //Query query = <span class="keyword">session</span>.createQuery("from Customer where id=?");</span><br><span class="line">         query.setLockOpties(LockOptions.<span class="keyword">UPDATE</span>);</span><br><span class="line">         query.setParamer(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">         Customer customer = (Customer)query.uniqueResult();</span><br><span class="line">         //query.executeUpdate();</span><br><span class="line">         <span class="keyword">System</span>,<span class="keyword">out</span>.println(customer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> ```    </span><br><span class="line">* 乐观锁</span><br><span class="line"> 乐观锁就是添加一个<span class="keyword">version</span>字段来控制数据的不一致性</span><br><span class="line"> <span class="number">1.</span> 实体类</span><br></pre></td></tr></table></figure>
<p>public class Customer {</p>
<p>private Integer id;  //客户Id<br>private String name; //客户名称</p>
<p>//加个乐观锁：加个版本控制字段，字段用Integer<br>private Integer version;</p>
<p>public Integer getVersion() {<br>   return version;<br>}</p>
<p>public void setVersion(Integer version) {<br>   this.version = version;<br>}</p>
<p>//一对多属性描述，一个客户对应有多个订单<br>private Set<Order> orders = new HashSet<Order>();</p>
<p>public Integer getId() {<br>   return id;<br>}</p>
<p>public void setId(Integer id) {<br>   this.id = id;<br>}</p>
<p>public String getName() {<br>   return name;<br>}</p>
<p>public void setName(String name) {<br>   this.name = name;<br>}</p>
<p>public Set<Order> getOrders() {<br>   return orders;<br>}</p>
<p>public void setOrders(Set<Order> orders) {<br>   this.orders = orders;<br>}</p>
<p>@Override<br>public String toString() {<br>   return “Customer{“ +</p>
<pre><code>&quot;id=&quot; + id +
&quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +
&apos;}&apos;;</code></pre><p>}<br>}</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">2.映射文件<span class="selector-tag">customer</span><span class="selector-class">.hbm</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
     "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
     "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>

 <class name="zhao.hibernate.domain.Customer" table="customer">
     <id name="id" column="id">
         <generator class="native"></generator>
     </id>
    <!--乐观锁 位置有dtd约束 放在 id和property和id中间-->
     <version name="version"></version>

<pre><code>&lt;property name=&quot;name&quot; column=&quot;name&quot;&gt;&lt;/property&gt;</code></pre></li>
</ul>
 <!--        描述一对多关系
        key中Colum写的是外键名称
        one-to-many 一对多，其class属性表示外键表实体类名-->
<pre><code>    &lt;set name=&quot;orders&quot; cascade=&quot;delete-orphan&quot;&gt;
        &lt;key column=&quot;customer_id&quot;&gt;&lt;/key&gt;
        &lt;one-to-many class=&quot;zhao.hibernate.domain.Order&quot;&gt;&lt;/one-to-many&gt;
    &lt;/set&gt;
&lt;/class&gt;</code></pre> </hibernate-mapping>
  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span> 测试类</span><br></pre></td></tr></table></figure>
 /*
 *乐观锁
 * */
 public class Lesson12 {

<pre><code>@Test
public void save(){

    Session session = util.openSession();
    session.getTransaction().begin();

    //乐观锁：每次更新，版本都会加1
    /*
    * 如果当前的版本【2】比数据库【3】中的低，就不更新，报错
    * Row was uodated or deleted by another transaction;
    * 乐观锁是hibernate自己实现的
    * for update 是Mysql 实现的
    * */
    Customer customer = session.get(Customer.class,1);
    customer.setName(&quot;阿尔提尔&quot;);

    session.getTransaction().commit();
    session.close();
}</code></pre><p> }<br>  <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">### log4j日志配置</span><br><span class="line"><span class="comment">* 配置文件内容：</span></span><br><span class="line">    1. 记录器</span><br><span class="line">    2. 输出源</span><br><span class="line">    3. 布局</span><br><span class="line"><span class="comment">* 记录器</span></span><br><span class="line"> 例如：log4j.rootLogger=info,stdout,<span class="keyword">file</span></span><br><span class="line"> 格式： log4j.rootLogger=日志级别，输出源1，输出源2，...</span><br><span class="line"> log4j 日志级别： fatal致命错误 <span class="keyword">error</span>错误 warm警告 info信息 debug调试  trace堆栈信息（由高到低顺序）</span><br><span class="line"><span class="comment"> * stdout控制台输出源</span></span><br><span class="line"><span class="comment">* 输出源</span></span><br><span class="line">   例如：log4j.appender.<span class="keyword">file</span>=org.apaphe.log4j.FileAppender</span><br><span class="line">   格式：log4j.appender.输出源的名称=输出源的实现类</span><br><span class="line">   名称：自定义</span><br><span class="line">   实现类：log4j提供</span><br><span class="line">   输出源属性例如：log4j.appender.<span class="keyword">file</span>.<span class="keyword">File</span>=<span class="keyword">d</span>:/mylong.<span class="keyword">log</span></span><br><span class="line">   输出源属性格式：log4j.appender.名称.属性=值</span><br></pre></td></tr></table></figure></p>
<h3 id="direct-log-messages-to-stdout"><a href="#direct-log-messages-to-stdout" class="headerlink" title="direct log messages to stdout"></a>direct log messages to stdout</h3><p> log4j.appender.stdout=org.apache.log4j.ConsoleAppender<br> log4j.appender.stdout.Target=System.out<br> log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<br> log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n</p>
<h3 id="direct-messages-to-file-hibernate-log"><a href="#direct-messages-to-file-hibernate-log" class="headerlink" title="direct messages to file hibernate.log"></a>direct messages to file hibernate.log</h3><p> #log4j.appender.file=org.apache.log4j.FileAppender</p>
<h1 id="文件输出路径"><a href="#文件输出路径" class="headerlink" title="文件输出路径"></a>文件输出路径</h1><p> #log4j.appender.file.File=hibernate.log<br> #log4j.appender.file.layout=org.apache.log4j. PatternLayout<br> #log4j.appender.file.layout.ConversionPattern=%d  {ABSOLUTE} %5p %c{1}:%L - %m%n</p>
<h3 id="set-log-levels-for-more-verbose-logging-change-‘info’-to-‘debug’"><a href="#set-log-levels-for-more-verbose-logging-change-‘info’-to-‘debug’" class="headerlink" title="set log levels - for more verbose logging change   ‘info’ to ‘debug’"></a>set log levels - for more verbose logging change   ‘info’ to ‘debug’</h3><h3 id="log4j-rootLogger-warn-stdout"><a href="#log4j-rootLogger-warn-stdout" class="headerlink" title="log4j.rootLogger=warn, stdout"></a>log4j.rootLogger=warn, stdout</h3><h1 id="ware-：日志级别"><a href="#ware-：日志级别" class="headerlink" title="ware ：日志级别"></a>ware ：日志级别</h1>  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">* 代码里使用日志。</span><br><span class="line"> step1:创建日志对象</span><br><span class="line"> step2：调用日志对象的方法</span><br><span class="line"></span><br><span class="line"> Logger（org.slf4j）</span><br><span class="line"> Logger logger = <span class="module-access"><span class="module"><span class="identifier">LoggerFactory</span>.</span></span>get<span class="constructor">Logger()</span></span><br></pre></td></tr></table></figure>
<p>  public class Lesson12 {<br>    //Logger（org.slf4j）<br>    Logger logger = LoggerFactory.getLogger(Lesson12.class);<br>    @Test<br>    public void save(){</p>
<pre><code>    Session session = util.openSession();
    session.getTransaction().begin();


   logger.error(&quot;error....&quot;);//错误
   ligger.ware(&quot;ware....&quot;);//警告
   logger.info(&quot;info.....&quot;);//信息 


    session.getTransaction().commit();
    session.close();
}</code></pre><p> }<br>   ```</p>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架(三)</title>
    <url>/2019/11/16/Hibernate%E6%A1%86%E6%9E%B6-%E4%B8%89/</url>
    <content><![CDATA[<h3 id="查询一对多和删除"><a href="#查询一对多和删除" class="headerlink" title="查询一对多和删除"></a>查询一对多和删除</h3> <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson8 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       //查询一对多</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 默认情况下，只有使用Customer的orders数据，会执行SQL查询</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line">       //查询<span class="number">2</span>的客户</span><br><span class="line">       Customer customer = <span class="keyword">session</span>.<span class="keyword">get</span>(Customer.<span class="keyword">class</span>,<span class="number">2</span>);</span><br><span class="line">       </span><br><span class="line">       //删除客户要开启事务，查询不需要</span><br><span class="line">       //<span class="keyword">session</span>.<span class="keyword">delete</span>(customer);</span><br><span class="line">       </span><br><span class="line">       //获取名字</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println("客户名字："+customer.getName());</span><br><span class="line"></span><br><span class="line">       //获取客户所有订单</span><br><span class="line">       <span class="keyword">Set</span>&lt;<span class="keyword">Order</span>&gt; orders = customer.getOrders();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">Order</span> o : orders)&#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println("购买订单名称："+o.getName());</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println("-------------");</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="cascade级联"><a href="#cascade级联" class="headerlink" title="cascade级联"></a>cascade级联</h3><ul>
<li>save-update：级联保存，级联修改，保存A（客户)时,同时保存B(订单)</li>
<li>delete ：级联删除，删除A，同时删除B<br>底层先查，后删（先删除从表，在删除主表）</li>
<li>delete-orphan：孤儿删除<br>  孤儿删除，解除关系，同时将B删除，A存在</li>
<li>如果配置多项，使用逗号隔开<set cascade="save-update,delete"><br>  all:相当于save-delete和delete整合<br>  all-delete-orphan：相当于【save-update,delete，delete-orphan】三个整合</li>
</ul>
<ol>
<li>.hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主表映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"custimer_id"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Order"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*一对多数据保存方式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">public <span class="keyword">class</span> Lesson7 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//保存数据</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.创建客户对象</span></span><br><span class="line">       Customer customer = <span class="keyword">new</span> <span class="constructor">Customer()</span>;</span><br><span class="line">       customer.set<span class="constructor">Name(<span class="string">"沐沐1"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.创建两个订单</span></span><br><span class="line">       Order order1 = <span class="keyword">new</span> <span class="constructor">Order()</span>;</span><br><span class="line">       order1.set<span class="constructor">Name(<span class="string">"手机"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       Order order2 = <span class="keyword">new</span> <span class="constructor">Order()</span>;</span><br><span class="line">       order2.set<span class="constructor">Name(<span class="string">"衣服"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.维护订单与客户的关系</span></span><br><span class="line">       order1.set<span class="constructor">Customer(<span class="params">customer</span>)</span>;</span><br><span class="line">       order2.set<span class="constructor">Customer(<span class="params">customer</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.客户拥有订单</span></span><br><span class="line">       customer.get<span class="constructor">Orders()</span>.add(order1);</span><br><span class="line">       customer.get<span class="constructor">Orders()</span>.add(order2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//5.保存</span></span><br><span class="line">       session.save(customer);<span class="comment">//保存完，客户有Id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//注意：cascade级联配置了就不需要保存从表数据</span></span><br><span class="line">       <span class="comment">//session.save(order1);</span></span><br><span class="line">       <span class="comment">//session.save(order2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">       session.close<span class="literal">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>delete-orphan：孤儿删除</li>
</ul>
<ol>
<li>.hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        描述一对多关系</span></span><br><span class="line"><span class="comment">       key中Colum写的是外键名称</span></span><br><span class="line"><span class="comment">       one-to-many 一对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">cascade</span>=<span class="string">"delete-orphan"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"zhao.hibernate.domain.Order"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-many</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson9 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">        //查询一对多</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 级联孤儿删除 delete-orphan</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        //查询<span class="number">2</span>的客户</span><br><span class="line">        Customer customer = <span class="keyword">session</span>.<span class="keyword">get</span>(Customer.<span class="keyword">class</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        //孤儿删除（把客户里所有订单删除）</span><br><span class="line">        //将订单从Customer中的<span class="keyword">set</span>集合中删除</span><br><span class="line">        <span class="keyword">Set</span>&lt;<span class="keyword">Order</span>&gt; <span class="keyword">set</span> = customer.getOrders();</span><br><span class="line">        Iterator&lt;<span class="keyword">Order</span>&gt; iterator = <span class="keyword">set</span>.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            iterator.next();//取出下一个元素</span><br><span class="line">            iterator.remove();//移除当前元素</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Hibernate表多对多-中间表id关联"><a href="#Hibernate表多对多-中间表id关联" class="headerlink" title="Hibernate表多对多(中间表id关联)"></a>Hibernate表多对多(中间表id关联)</h3></li>
</ol>
<ul>
<li>1.创建实体类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sid;<span class="comment">//学生Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;<span class="comment">//学生姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Course&gt; courses = <span class="keyword">new</span> HashSet&lt;Course&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(Integer sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Course&gt; getCourses() &#123;</span><br><span class="line">        <span class="keyword">return</span> courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(Set&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> Integer cid;<span class="comment">//课程Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;<span class="comment">//课程姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Student&gt; students = <span class="keyword">new</span> HashSet&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(Integer cid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cid = cid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Student&gt; getStudents() &#123;</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(Set&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.students = students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li><p>.hbm.xml映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhao.Dao.Student"</span> <span class="attr">table</span>=<span class="string">"t_student"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"sid"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--        描述多对多关系</span></span><br><span class="line"><span class="comment">               set中table="t_Student_Course" 中间表名字</span></span><br><span class="line"><span class="comment">               key中Colum写的是当前实体类外键名称</span></span><br><span class="line"><span class="comment">               many-to-many 多对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"courses"</span> <span class="attr">table</span>=<span class="string">"t_student_course"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"sid"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.zhao.Dao.Course"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhao.Dao.Course"</span> <span class="attr">table</span>=<span class="string">"t_course"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"cid"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--        描述多对多关系</span></span><br><span class="line"><span class="comment">            set中table="t_Student_Course" 中间表名字</span></span><br><span class="line"><span class="comment">            key中Colum写的是当前实体类外键名称</span></span><br><span class="line"><span class="comment">            many-to-many 多对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"students"</span> <span class="attr">table</span>=<span class="string">"t_student_course"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.zhao.Dao.Student"</span> <span class="attr">column</span>=<span class="string">"sid"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>hibernate.cfg.xml核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">		com.mysql.cj.jdbc.Driver</span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">		jdbc:mysql://localhost:3306/hibernate_user?serverTimezone=Asia/Shanghai</span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--		配置映射文件与数据库表关系</span></span><br><span class="line"><span class="comment">		update：有表则更新，无则创建</span></span><br><span class="line"><span class="comment">		create：每次启动hibernate都创建，（注意：以前数据没得了）</span></span><br><span class="line"><span class="comment">		create-drop：每次启动hibernate都创建，执行完后删除表--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 开启二级缓存 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 设置二级缓存插件EHCache的Provider类&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&lt;property name="hibernate.cache.region.factory_class"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--			org.hibernate.cache.ehcache.EhCacheRegionFactory--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启与当前线程绑定session功能--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库方言 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">		org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/Dao/Student.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/Dao/Course.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<ul>
<li>提取工具类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">util</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory factory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取核心配置文件对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        <span class="comment">//2.创建会话工厂</span></span><br><span class="line">        factory = configuration.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听程序关闭</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread()&#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"程序关闭。。。！"</span>);</span><br><span class="line">                <span class="comment">//关闭会话工厂</span></span><br><span class="line">                factory.<span class="built_in">close</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回会话工厂获取到的session对象</span></span><br><span class="line">        <span class="keyword">return</span> factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCurrentSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory.getCurrentSession();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li>保存数据<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> text()&#123;</span><br><span class="line"></span><br><span class="line">       //保存多对多数据</span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       //<span class="number">1.</span>创建两个学生</span><br><span class="line">       Student student =<span class="built_in">new</span> Student("赵云");</span><br><span class="line">       Student student2 =<span class="built_in">new</span> Student("洛克");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="number">2.</span>创建<span class="number">2</span>个课程</span><br><span class="line">       Course  c1 = <span class="built_in">new</span> Course("java");</span><br><span class="line">       Course  c2 = <span class="built_in">new</span> Course("c#");</span><br><span class="line"></span><br><span class="line">       //<span class="number">3.</span>绑定课程到到学生对象</span><br><span class="line">       student.getCourses().<span class="keyword">add</span>(c1);</span><br><span class="line">       student.getCourses().<span class="keyword">add</span>(c2);</span><br><span class="line"></span><br><span class="line">       student2.getCourses().<span class="keyword">add</span>(c1);</span><br><span class="line">       student2.getCourses().<span class="keyword">add</span>(c2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="number">4.</span>保存</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 注意：配置级联，只保存学生对象</span></span><br><span class="line"><span class="comment">       * 1.如果在student中配置inverse="true",由Course来维护外键关系，中间表没数据</span></span><br><span class="line"><span class="comment">       * 2.默认student配置inveerse="false",由Student来维护外键关系,中间表有数据</span></span><br><span class="line"><span class="comment">       * 3.多对多，inverse不能两边都为true；不管保存那个数据中间表都没数据</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line">       <span class="keyword">session</span>.save(student);</span><br><span class="line">       <span class="keyword">session</span>.save(student2);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加载策略"><a href="#加载策略" class="headerlink" title="加载策略"></a>加载策略</h3></li>
</ul>
<ul>
<li><p>类级别的加载策略<br>get方法即时加载数据，执行sql语句<br>load方法是懒加载数据，只有用到里面数据数据时，才执行Sql语句<br>load方法 如果只是取id，也不会执行sql语句<br>如果在.hbm.xml映射文件中的<class>lazy属性默认是懒加载’lazy=”true”‘,配置成’lazy=”false”‘这时load方法就是即时加载</p>
</li>
<li><p>关联级别</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> text()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 关联级别的加载策略</span></span><br><span class="line"><span class="comment">      * 1.默认Student下的course也是懒加载,只有访问的时候才会执行sql语句</span></span><br><span class="line"><span class="comment">      * 2.在映射文件set中配置lazy="false",不用访问course属性，也会执行sql查询数据</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line"></span><br><span class="line">      //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">      //查询学生</span><br><span class="line">      Student stu1 = (Student) <span class="keyword">session</span>.<span class="keyword">load</span>(Student.<span class="keyword">class</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(stu1);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println("------------");</span><br><span class="line">      //<span class="number">1.</span> Student下的course也是懒加载,只有访问的时候才会执行<span class="keyword">sql</span>语句</span><br><span class="line">      <span class="comment">/*Set&lt;Course&gt; courses = stu1.getCourses();//sql 语句 inner join（内连接查询）</span></span><br><span class="line"><span class="comment">      System.out.println(courses);*/</span></span><br><span class="line"></span><br><span class="line">      //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">      <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li>映射文件<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">set</span> <span class="type">name</span>="courses" table="t_student_course" <span class="keyword">cascade</span>="save-update" lazy="false"&gt;</span><br><span class="line">          &lt;key column="sid"&gt;&lt;/key&gt;</span><br><span class="line">          &lt;many-<span class="keyword">to</span>-many <span class="keyword">class</span>="com.zhao.Dao.Course" column="cid"&gt;&lt;/many-<span class="keyword">to</span>-many&gt;</span><br><span class="line">      &lt;/<span class="keyword">set</span>&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Mysql语句关联查询回顾"><a href="#Mysql语句关联查询回顾" class="headerlink" title="Mysql语句关联查询回顾"></a>Mysql语句关联查询回顾</h3><ul>
<li>查询每个学生对应课程<ul>
<li>内连接chaxun<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student ts</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> t_student_course tsc</span><br><span class="line"><span class="keyword">on</span> ts.id = tsc.sid</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> course tc</span><br><span class="line"><span class="keyword">on</span> tsc.cid = tc.id</span><br><span class="line"><span class="keyword">where</span> ts.id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li>左外连接查询:左边没有匹配到右边的数据也会显示<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> student ts</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> t_student_course tsc</span><br><span class="line"><span class="keyword">on</span> ts.id = tsc.sid</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> course tc</span><br><span class="line"><span class="keyword">on</span> tsc.cid = tc.id</span><br><span class="line"><span class="keyword">where</span> ts.id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="fetch-拿取，获取数据"><a href="#fetch-拿取，获取数据" class="headerlink" title="fetch(拿取，获取数据)"></a>fetch(拿取，获取数据)</h3></li>
</ul>
<ul>
<li><p>fetch:是指查询集合的SQL方式</p>
<ol>
<li>select：默认的，普通select查询语句</li>
<li>join：表连接查询</li>
<li>subselect：使用子查询<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> text()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 在映射文件set中配置'fatch="join"'属性</span></span><br><span class="line"><span class="comment">    * fetch:是指查询集合的SQL方式</span></span><br><span class="line"><span class="comment">    * 1.select：默认的，普通select查询语句</span></span><br><span class="line"><span class="comment">    * 2. join：查询数据时，使用一条语句搞定,使用左外连接</span></span><br><span class="line"><span class="comment">    * 3. subselect：使用子查询，在条件里有select语句</span></span><br><span class="line"><span class="comment">    *              子查询只能用于多对多，一对多中</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line"></span><br><span class="line">    //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">    //查询</span><br><span class="line">    Student student =<span class="keyword">session</span>.<span class="keyword">load</span>(Student.<span class="keyword">class</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(student);</span><br><span class="line">    //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">    <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>多对一加载策略</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">   多对一加载策略：</span><br><span class="line">   lazy：有三个选项</span><br><span class="line">   <span class="literal">false</span>：【即时加载数据】</span><br><span class="line">   proxy：使用代理，根据类级别的加载策略来决定，还要依赖fetch</span><br><span class="line">   no-proxy：无代理</span><br><span class="line"></span><br><span class="line">   多种情况： </span><br><span class="line">   class:lazy   mony：lazy    mony:fetch</span><br><span class="line">   =======================================</span><br><span class="line">   <span class="literal">false</span>          <span class="built_in"> proxy </span>          join        即时加载数据，一条SQL语句</span><br><span class="line">   <span class="literal">false</span>          <span class="built_in"> proxy </span>          select      Order是及时加载，Customer是懒加载</span><br><span class="line">   <span class="literal">true</span>           <span class="built_in"> proxy </span>          join        Order是懒加载，Customer是及时加载</span><br><span class="line">   <span class="literal">true</span>           <span class="built_in"> proxy </span>          select      Order是懒加载，Customer是懒加载 </span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">&lt;many-to-one <span class="attribute">name</span>=<span class="string">"customer"</span> <span class="attribute">class</span>=<span class="string">"Customer"</span>  <span class="attribute">column</span>=<span class="string">"customer_id"</span> <span class="attribute">lazy</span>=<span class="string">"proxy"</span> <span class="attribute">fecth</span>=<span class="string">"join"</span>/&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="批量加载"><a href="#批量加载" class="headerlink" title="批量加载"></a>批量加载</h3><ul>
<li>set标签中可以配置一个batch-size=”2”,表示每次加载两条数据</li>
<li>映射文件<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">set</span> <span class="type">name</span>="orders" <span class="keyword">cascade</span>="delete-orphan" batch-size="2"&gt;</span><br><span class="line">          &lt;key column="customer_id"&gt;&lt;/key&gt;</span><br><span class="line">          &lt;one-<span class="keyword">to</span>-many <span class="keyword">class</span>="zhao.hibernate.domain.Order"&gt;&lt;/one-<span class="keyword">to</span>-many&gt;</span><br><span class="line">      &lt;/<span class="keyword">set</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*批量加载数据</span></span><br><span class="line"><span class="comment">*set中添加属性batch-size</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lesson10</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.openSession();</span><br><span class="line">       <span class="comment">//session.getTransaction().begin();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//查询所有与客户</span></span><br><span class="line">       List&lt;Customer&gt; <span class="built_in">list</span> = session.createQuery(<span class="string">"From Customer"</span>).<span class="built_in">list</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历客户，查看这个客户有多少订单</span></span><br><span class="line">       <span class="keyword">for</span>(Customer customer : <span class="built_in">list</span>)&#123;</span><br><span class="line">           System.out.<span class="built_in">println</span>(<span class="string">"客户名称："</span>+customer.getName()+<span class="string">"订单数量："</span>+customer.getOrders().<span class="built_in">size</span>());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//session.getTransaction().commit();</span></span><br><span class="line">       session.<span class="built_in">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>hibernate异常(一)</title>
    <url>/2019/11/13/hibernate%E5%BC%82%E5%B8%B8-%E4%B8%80/</url>
    <content><![CDATA[<h4 id="异常：Error-executing-DDL"><a href="#异常：Error-executing-DDL" class="headerlink" title="异常：Error executing DDL"></a>异常：Error executing DDL</h4><ul>
<li><p>hibernate支持使用旧的方言，而在新版本中就要求使用新的方言了<br>报错：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">hibernate.cfg.xml配置自动创建表：</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;update&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line"></span><br><span class="line">会通过映射文件生成一个sql语句来创建表，</span><br><span class="line"></span><br><span class="line">如果配置了下面方言的语句：</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"hibernate.dialect"</span>&gt;org.hibernate.dialect.MySQLDialect&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line"></span><br><span class="line">而且你使用的mysql是<span class="number">5.</span>x,那么会报错： type=MyISAM</span><br><span class="line"></span><br><span class="line">解决方法是：</span><br><span class="line"></span><br><span class="line">配置改成：</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"hibernate.dialect"</span>&gt;org.hibernate.dialect.MySQL5Dialect&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line"></span><br><span class="line">MySQL5Dialect： An SQL dialect <span class="keyword">for</span> MySQL <span class="number">5.</span>x specific features.</span><br></pre></td></tr></table></figure></li>
<li><p>异常：Caused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘type=MyISAM’ at line 5<br>大概意思执行SQL语句第5行”type=MyISAM”产生异常</p>
</li>
<li><p>异常：Caused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘order (</p>
<pre><code>id integer not null auto_increment,</code></pre><p>‘ at line 1<br>解决方法：<br>注意：这种一般情况下是语法问题，说明mysql的各种语句还是不够熟练，<br>（1）看表名是不是使用了Mysql的关键字，如果是，请立马改掉；<br>（2）语句给出哪里错误，如我的题目中给出“near”,说明在那附近有问题，我的错误是，使用了Mysql的关键字order<br>改掉就好了。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>hibernate异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架(二)</title>
    <url>/2019/11/13/Hibernate%E6%A1%86%E6%9E%B6-%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="实体类（entity）"><a href="#实体类（entity）" class="headerlink" title="实体类（entity）"></a>实体类（entity）</h3><ul>
<li><p>编写规则：</p>
<pre><code>1. 必须提供无参构造方法，获取数据封装模型会调用无参的构造方法
2. 提供一个表示属性，映射数据表主键字段，提供Id（映射文件）
3. 所有属性提供public访问修饰符的 set get 方法（JavaBean）
4.标识属性应尽量使用基本数据类型的包装类型（int integer  bibernate面向对象）
5.不要用final修饰实体，（将无法生成代理对象进行优化）</code></pre></li>
<li><p>持久化对象的唯一标识OID（对象的Id）</p>
<pre><code>1. Java按地址去区分同一个类的不同对象
2. 关系数据库用主键区分同一条数据
3. Hibernate使用OID来建立内存中的对象和数据库中记录的对应关系结论：对象的OID和数据库的表的主键对应。
4. 为保证OID的唯一性，应该让Hibernate来为OID赋值</code></pre></li>
<li><p>区分自然主键和代理主键</p>
<pre><code>1. 主键需要具备：不为空、不能重复、不能改变
2. 自然主键： 在业务中，某个属性符合主键的三个要求，那么该属性可以作为主键列，【登录名可以是自然主键】
3. 代理主键： 在业务中，不符合以上3个属性，那么就增加一个没有意义的列，那么就增加一个没有意义的的列，作为主键</code></pre></li>
<li><p>基本数据类型和包装数据类型</p>
<pre><code>1. 基本数据类型和包装数据类型都对应Hibernate的映射数据类型相同
2. 基本数据类型无法表示为空（null），数字类型默认为0
3. 包装数据类型默认值为空（null），但对于默认值有业务意义时需要使用包装类</code></pre></li>
<li><p>主键生成策略.hbm.xml(映射文件)</p>
<pre><code>&lt;generator calss=&quot;&quot;&gt;&lt;/generator&gt;
1. native 【经常使用】
        如果是Mysql，id会自动增长
        如果是oracle数据库，也会自动增长，与sequence相关
2. increment也会自动增长，但是其由Hibernate实现增长(表中Id的最大值)，
   执行select MAX(id)查询，会有线程并发问题
3. sequence 一般在oracle数据库才用
4. uuid 【经常使用】一个长字符串需要把实体类的id改成字符串
保存的时候自己不用设置Id，hibernate会自动生成
5. assigned 【经常使用】要手动设置Id
保存时设置：
    user.setId(UUID.rendomUUID().toString().replace(&quot;-&quot;,&quot;&quot;));</code></pre><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">id</span> <span class="built_in">name</span>=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;</span><br><span class="line">       &lt;generator <span class="built_in">class</span>=<span class="string">"native"</span>&gt;&lt;/generator&gt;</span><br><span class="line">&lt;/<span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>动态更新及插入<br>在映射文件<class name="全限定类名" table="表名" dynamic-insert="true" dynamic-update="true" />中添加属性</p>
<pre><code>dynamic-insert=&quot;true&quot; 动态插入
dynamic-update=&quot;true&quot; 动态更新</code></pre></li>
<li><p>type<br><property name="username" column="username" type="java.lang.String" length="16"></property></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--       Date 类型 在property中默认为 datetime</span></span><br><span class="line"><span class="comment">            可用属性 type="Date" 声明格式 数据库为  Date</span></span><br><span class="line"><span class="comment">            type="time" 数据库为 time --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>状态的转换过程</p>
</li>
<li><p>实体entity有三种状态：<br> 瞬时状态，持久状态，托管状态<br> 瞬时状态：Transaction，session没有缓存，数据库也没有记录<br> ，Oid没值<br> 持久状态：persist ，save有缓存，数据库也有记录，oid有值<br> 托管状态：detached，session没有缓存，数据库有记录，oid有值</p>
<ol>
<li>查询操作：get、load、createQuery、createCriteria 等 获得都是持久态</li>
<li>瞬时状态：执行save、update、saveOrUpdate之后变成持久状态</li>
<li>持久态转托管态<br>session.close();关闭<br>session.clear();清除所有<br>session.evict(object) 清除指定的po对象</li>
</ol>
</li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul>
<li>一级缓存： session级别缓存，当获得一次会话（session），bibernate在seaaion中创建多个集合（map），用于存放操作数据的PO对象，位程序优化服务，如果之前需要相应的数据，hibernate优先从session中获取，如果有就使用，如果没有就查询数据库。当session关闭时，一级缓存销毁。<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">*证明一级缓存存在</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson3 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">User</span> <span class="keyword">user</span> = (<span class="keyword">User</span>) <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">5</span>);//执行<span class="keyword">select</span></span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">session</span>.clear();//清除所有缓存</span><br><span class="line">       <span class="keyword">session</span>.fulsh();//刷新</span><br><span class="line">       <span class="keyword">User</span> user1 = (<span class="keyword">User</span>) <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">5</span>);//不执行selecct</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>一级缓存的细节<ul>
<li>HQL的结果会进行一级缓存，SQL的结果不会添加到一级缓存<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson4 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //查询所有数据</span><br><span class="line">       //<span class="number">1.</span>HQL会对数据进行一级缓存</span><br><span class="line">       Query query = <span class="keyword">session</span>.createQuery("From User");</span><br><span class="line">       List&lt;<span class="keyword">User</span>&gt; list = query.list();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">User</span> <span class="keyword">user</span> = <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">3</span>);</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="keyword">SQL</span>不会对数据进行一级缓存</span><br><span class="line">       SQLQuery query1 = <span class="keyword">session</span>.createSQLQuery("select * from hibernate_user");</span><br><span class="line">       List&lt;<span class="keyword">User</span>&gt; list2 = query.list();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">User</span> user2 = <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">3</span>);</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(user2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="number">3.</span>Criteria会对数据进行一级缓存</span><br><span class="line">       Criteria criteria = <span class="keyword">session</span>.createCriteria(<span class="keyword">User</span>.<span class="keyword">class</span>);</span><br><span class="line">       List list1 = criteria.list();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">User</span> user3 = <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">3</span>);</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(user3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="save和persist方法区别（保存数据）"><a href="#save和persist方法区别（保存数据）" class="headerlink" title="save和persist方法区别（保存数据）"></a>save和persist方法区别（保存数据）</h3></li>
</ul>
</li>
</ul>
<ol>
<li>save方法:瞬时态 转换 持久态会初始化OID</li>
</ol>
</li>
<li>执行save方法，立即触发insert语句，从数据库获得主键值（OID值）</li>
<li>执行save方法前，设置OID将忽略</li>
<li>如果执行查询，session缓存清除了，在执行save方法，将执行insert<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">public</span> <span class="keyword">class</span> Lesson5 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *  1. save方法:瞬时态 转换 持久态会初始化OID</span></span><br><span class="line"><span class="comment">        * 执行save方法，立即触发insert语句，从数据库获得主键值（OID值）</span></span><br><span class="line"><span class="comment">        * 执行save方法前，设置OID将忽略</span></span><br><span class="line"><span class="comment">        * 如果执行查询，session缓存清除了，在执行save方法，将执行insert</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> =  <span class="built_in">new</span> <span class="keyword">User</span>();//瞬时态</span><br><span class="line">        <span class="keyword">user</span>.setUid(<span class="number">12</span>);</span><br><span class="line">        <span class="keyword">user</span>.setUsername("黎明");</span><br><span class="line">        <span class="keyword">user</span>.setPassword("123");</span><br><span class="line">        <span class="keyword">user</span>.setBirthday(<span class="built_in">new</span> <span class="type">Date</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">session</span>.save(<span class="keyword">user</span>);//持久态</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">session</span>.clear();//<span class="keyword">user</span>托管状态</span><br><span class="line">        <span class="keyword">session</span>.save(<span class="keyword">user</span>);</span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>persist方法：瞬时态 转换 持久态</li>
</ol>
<ul>
<li>persist保存的对象，再保存前，不能设置Id，否则会报错</li>
<li>save和persist都有持久化对象的作用</li>
<li>save 应为需要返回一个主键值，因此会立即执行insert语句<br>而persiet 在事务外部调用时则不会立即执行insert语句，<br>在事务内调用还是会立即执行 insert 语句</li>
</ul>
</li>
</ul>
<h3 id="表关系创建模型（一对多，多对多，一对一）"><a href="#表关系创建模型（一对多，多对多，一对一）" class="headerlink" title="表关系创建模型（一对多，多对多，一对一）"></a>表关系创建模型（一对多，多对多，一对一）</h3><ul>
<li>实体类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//主表实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id;  <span class="comment">//客户Id</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> name; <span class="comment">//客户名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多属性描述，一个客户对应有多个订单</span></span><br><span class="line">   <span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> HashSet&lt;Order&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Set&lt;Order&gt; getOrders() &#123;</span><br><span class="line">       <span class="keyword">return</span> orders;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrders</span><span class="params">(Set&lt;Order&gt; orders)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.orders = orders;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//从表实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id; <span class="comment">//订单ID，以后工作中订单Id一般用UUID字符串类型</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> name; <span class="comment">//订单名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Customer customer;<span class="comment">//订单属性只属于某个客户</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> customer;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.customer = customer;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>映射文件 .hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主表映射文件 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"zhao.hibernate.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"customer"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        描述一对多关系</span></span><br><span class="line"><span class="comment">       key中Colum写的是外键名称</span></span><br><span class="line"><span class="comment">       one-to-many 一对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"zhao.hibernate.domain.Order"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-many</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--从表映射文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"zhao.hibernate.domain.Order"</span> <span class="attr">table</span>=<span class="string">"t_order"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  描述Customer的关系</span></span><br><span class="line"><span class="comment">       many-to-many:多对一</span></span><br><span class="line"><span class="comment">       class：主键的实体类</span></span><br><span class="line"><span class="comment">       coulmn:写外键--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"zhao.hibernate.domain.Customer"</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>核心配置文件 hibernate.cfg.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">			com.mysql.cj.jdbc.Driver</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">			jdbc:mysql://localhost:3306/hibernate_user?serverTimezone=Asia/Shanghai</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--		配置映射文件与数据库表关系</span></span><br><span class="line"><span class="comment">			update：有表则更新，无则创建</span></span><br><span class="line"><span class="comment">			create：每次启动hibernate都创建，（注意：以前数据没得了）</span></span><br><span class="line"><span class="comment">			create-drop：每次启动hibernate都创建，执行完后删除表--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 开启二级缓存 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--		&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 设置二级缓存插件EHCache的Provider类&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;property name="hibernate.cache.region.factory_class"&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--			org.hibernate.cache.ehcache.EhCacheRegionFactory--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;/property&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--开启与当前线程绑定session功能--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库方言 此处注意MySQL版本--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">			org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"zhao/hibernate/domain/hibernate.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"zhao/hibernate/domain/Customer.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"zhao/hibernate/domain/order.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*一对多数据保存方式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">public <span class="keyword">class</span> Lesson7 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//保存数据</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.创建客户对象</span></span><br><span class="line">       Customer customer = <span class="keyword">new</span> <span class="constructor">Customer()</span>;</span><br><span class="line">       customer.set<span class="constructor">Name(<span class="string">"沐沐"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.创建两个订单</span></span><br><span class="line">       Order order1 = <span class="keyword">new</span> <span class="constructor">Order()</span>;</span><br><span class="line">       order1.set<span class="constructor">Name(<span class="string">"手机"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       Order order2 = <span class="keyword">new</span> <span class="constructor">Order()</span>;</span><br><span class="line">       order2.set<span class="constructor">Name(<span class="string">"衣服"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.维护订单与客户的关系</span></span><br><span class="line">       order1.set<span class="constructor">Customer(<span class="params">customer</span>)</span>;</span><br><span class="line">       order2.set<span class="constructor">Customer(<span class="params">customer</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.客户拥有订单</span></span><br><span class="line">       customer.get<span class="constructor">Orders()</span>.add(order1);</span><br><span class="line">       customer.get<span class="constructor">Orders()</span>.add(order2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//5.保存</span></span><br><span class="line">       session.save(customer);<span class="comment">//保存完，客户有Id</span></span><br><span class="line">       session.save(order1);</span><br><span class="line">       session.save(order2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">       session.close<span class="literal">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设置外键维护关系"><a href="#设置外键维护关系" class="headerlink" title="设置外键维护关系"></a>设置外键维护关系</h3></li>
<li>修改Customer的映射文件，在set中添加inverse属性</li>
<li>inverse 是hibernate 双向关系中的基本概念。inverse的真正作用是指定出有那一方面来维护之间的关联关系。<br>当一方中指定了”inverse=false(默认)”,那么哪一方就有责任负责之间的关联关系。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- inverse:反转 true 表示为另一方来维护外键关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_Id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"从表实体类全限定名名"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql笔记</title>
    <url>/2019/11/06/Mysql%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="关联mysql"><a href="#关联mysql" class="headerlink" title="关联mysql"></a>关联mysql</h3><ul>
<li><p>报错：Server returns invalid timezone. Go to ‘Advanced’ tab and set ‘serverTimezon’</p>
</li>
<li><p>时区错误，MySQL默认的时区是UTC时区，比北京时间晚8个小时。</p>
</li>
<li><p>所以要修改mysql的时长</p>
</li>
<li><p>方式一：在mysql的命令模式下，输入：</p>
<p>  set global time_zone=’+8:00’;</p>
<p>  再次连接成功</p>
</li>
<li><p>方式二：</p>
<p>spring.datasource.url=jdbc:mysql://localhost:3306/secondskill?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架（一）</title>
    <url>/2019/11/06/Hibernate%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="Web内容回顾"><a href="#Web内容回顾" class="headerlink" title="Web内容回顾"></a>Web内容回顾</h3><ul>
<li>javaEE 三层架构</li>
</ul>
<ol>
<li>web层 ：struts2框架，SpringMVC框架</li>
<li>service层： spring框架 </li>
<li>Dao层： Hibernate框架 MyBites框架<pre><code>对数据库进行CRUD操作</code></pre></li>
</ol>
<h3 id="MVC思想"><a href="#MVC思想" class="headerlink" title="MVC思想"></a>MVC思想</h3><ol>
<li>m：模型</li>
<li>v：视图</li>
<li>c：控制器<h3 id="Hibernate概述"><a href="#Hibernate概述" class="headerlink" title="Hibernate概述"></a>Hibernate概述</h3></li>
</ol>
<ul>
<li><p>框架：半成品项目</p>
</li>
<li><p>Hibernate框架：</p>
<ol>
<li>Dao层框架2.</li>
<li>底层是对jdbc的封装</li>
<li>开源轻量级框架<br><img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=9f95e02a03f3d7ca18fb37249376d56c/d009b3de9c82d158cb08fea58f0a19d8bc3e421f.jpg" alt="bibernate"></li>
</ol>
</li>
<li><p>ORM思想</p>
<ol>
<li>hibarnate使用orm思想对数据库进行crud操作</li>
<li>在web阶段学习的JavaBean，更正确叫法实体类</li>
<li>orm：object ，relational（关系）mapping  对象关系映射<br>让实体类和数据库表进行一一对应关系<br>让数据库表里的字段 和 实体类的属性对应<br>不需要直接操作数据库表，而操作表对应实体类对象<br>案例：<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">jdbc代码</span><br><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line"><span class="keyword">class</span>.forname(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//创建链接</span></span><br><span class="line">Connection conn = <span class="module-access"><span class="module"><span class="identifier">DriverManager</span>.</span></span>get<span class="constructor">Connection(<span class="params">url</span>,<span class="params">user</span>,<span class="params">password</span>)</span>;</span><br><span class="line"><span class="comment">//对Sql语句进行预编译效果</span></span><br><span class="line">String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">PrepareStatement psmt = conn.perpare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line"><span class="comment">//执行Sql语句</span></span><br><span class="line">ResultSet rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line"><span class="comment">//遍历结果集</span></span><br><span class="line">.....</span><br><span class="line"><span class="comment">//释放资源(关闭连接)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Hibarnate 实体类<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">user</span>()&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    pribvate String password;</span><br><span class="line">    <span class="comment">//set get 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在配置文件中实现表与实体类的一一对应<br>不需要操作表，而是表对应的实体类</li>
<li>hibarnate封装的对象session<br>//创建对象<br>User user = new User();<br>user.setUserName(“eratg”);<br>session.save(user);</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Hibarnate入门"><a href="#Hibarnate入门" class="headerlink" title="Hibarnate入门"></a>Hibarnate入门</h3><ol>
<li><p>导包：<br>包的作用:<br>net.sf.hibernate.*<br>该包的类基本上都是接口类和异常类<br>net.sf.hibernate.cache.*<br>JCS的实现类<br>net.sf.hibernate.cfg.*<br>配置文件读取类<br>net.sf.hibernate.collection.*<br>Hibernate集合接口实现类，例如List，Set，Bag等等，Hibernate之所以要自行编写集合接口实现类是为了支持lazy loading<br>net.sf.hibernate.connection.*<br>几个数据库连接池的Provider<br>net.sf.hibernate.dialect.*<br>支持多种数据库特性，每个Dialect实现类代表一种数据库，描述了该数据库支持的数据类型和其它特点，例如是否有AutoIncrement，是否有Sequence，是否有分页sql等等<br>net.sf.hibernate. eg.*<br>Hibernate文档中用到的例子<br>net.sf.hibernate.engine.*<br>这个包的类作用比较散<br>net.sf.hibernate.expression.*<br>HQL支持的表达式<br>net.sf.hibernate.hq.*<br>HQL实现<br>net.sf.hibernate. id.*<br>ID生成器<br>net.sf.hibernate.impl.*<br>最核心的包，一些重要接口的实现类，如Session，SessionFactory，Query等<br>net.sf.hibernate.jca.*<br>JCA支持，把Session包装为支持JCA的接口实现类<br>net.sf.hibernate.jmx.*<br>JMX是用来编写App Server的管理程序的，大概是JMX部分接口的实现，使得App Server可以通过JMX接口管理Hibernate<br>net.sf.hibernate.loader.*<br>也是很核心的包，主要是生成sql语句。<br>net.sf.hibernate.lob.*<br>Blob和Clob支持<br>net.sf.hibernate.mapping.*<br>hbm文件的属性实现<br>net.sf.hibernate.metadata.*<br>PO的Meta实现<br>net.sf.hibernate.odmg.*<br>ODMG是一个ORM标准，这个包是ODMG标准的实现类<br>net.sf.hibernate.persister.*<br>核心包，实现持久对象和表之间的映射<br>net.sf.hibernate.proxy.*<br>Proxy和Lazy Loading支持<br>net.sf.hibernate. ps.*<br>该包是PreparedStatment Cache<br>net.sf.hibernate.sql.*<br>生成JDBC sql语句的包<br>net.sf.hibernate.test.*<br>测试类，你可以用junit来测试Hibernate<br>net.sf.hibernate.tool.hbm2ddl.*<br>用hbm配置文件生成DDL<br>net.sf.hibernate.transaction.*<br>Hibernate Transaction实现类<br>net.sf.hibernate.type.*<br>Hibernate中定义的持久对象的属性的数据类型<br>net.sf.hibernate.util.*<br>一些工具类，作用比较散<br>net.sf.hibernate.xml.*<br>XML数据绑定</p>
</li>
<li><p>创建实体类<br>使用hibarnate 时候，不需要自己手动创建表，hibarnate会创建表</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(<span class="keyword">String</span> username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(<span class="keyword">String</span> password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"uid="</span> + uid +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置数据库表和实体类一一对应关系(映射)</p>
<ul>
<li>创建XML格式的配置文件<br>建议：在实体类所在包中创建，实体类名.hbm.xml;<br>在配置文件中引入xml约束 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibarnate-mpping PUBLC</span></span><br><span class="line"><span class="meta">   "-//Hibernate/Hibaernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">   "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="hibernate映射的配置文件XML"><a href="#hibernate映射的配置文件XML" class="headerlink" title="hibernate映射的配置文件XML"></a>hibernate映射的配置文件XML</h4><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573040111707&di=3810b046e0a99ebe7445132675534d50&imgtype=0&src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fpng%2Fda0a0d956df111683450e7d4d1a805c7.png%3Fx-oss-process%3Dimage%2Fresize%2Cp_100%2Fauto-orient%2C1%2Fquality%2Cq_90%2Fformat%2Cjpg%2Fwatermark%2Cimage_eXVuY2VzaGk%3D%2Ct_100" alt="class,属性详解"></p>
<ul>
<li>hibernate.hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibarnate-mpping PUBLC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibaernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibarnate-mpping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置类和表的对应</span></span><br><span class="line"><span class="comment">       name:实体类全路径</span></span><br><span class="line"><span class="comment">       table=;数据库表名称--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhao.Dao.User"</span> <span class="attr">table</span>=<span class="string">"t_user"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置实体类和表中id对应</span></span><br><span class="line"><span class="comment">           hiberna要求实体类有一个属性唯一值</span></span><br><span class="line"><span class="comment">           hibernate要求表的字段作为唯一值--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        id标签 name：实体类里面id属性名称</span></span><br><span class="line"><span class="comment">                   column：生成表字段名称--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt; !<span class="attr">--</span>            设置数据库<span class="attr">id</span>增长的策略<span class="attr">--</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name；是实体类中属性 column：是与之对应的数据库表中字段  --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"adderss"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibarnate-mpping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建Hibernate的核心配置文件<br>注意：核心XML文件，其文件名和位置是固定的；<br>位置：必须src下<br>名称: 必须hibernate.cfg.xml</li>
</ul>
<ol>
<li>引入dtd约束<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>hibernate操作过程中，只会加载核心配置文件，其他配置文件不会加载</li>
</ol>
<ul>
<li>配置数据库信息</li>
<li>配置hibernate信息</li>
<li>映射文件放入核心文件</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li>hibernate.cfg.xml配置文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">			com.mysql.cj.jdbc.Driver</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">			jdbc:mysql://localhost:3306/hibernate_user</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 开启二级缓存 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 设置二级缓存插件EHCache的Provider类&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;property name="hibernate.cache.region.factory_class"&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--			org.hibernate.cache.ehcache.EhCacheRegionFactory--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库方言 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">			org.hibernate.dialect.MySQLDialect</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/hibernate/domain/hibernate.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SessionFactory工厂"><a href="#SessionFactory工厂" class="headerlink" title="SessionFactory工厂"></a>SessionFactory工厂</h3><ul>
<li>sessionFactory 工厂用于管理所有的所有的session</li>
<li>获得SessionFactory方式：config.bulidSessionFactory();</li>
<li>sessionFactory线程安全：多个线程同时访问数据时，不会出现线程并发问题<h3 id="Session会话获取"><a href="#Session会话获取" class="headerlink" title="Session会话获取"></a>Session会话获取</h3></li>
<li>sessionFarctory提供两个方法获取两个方法获取session</li>
<li>factory.openSession() 获取一个全新的session</li>
<li>factory.getCurrentSession() 获取一个与当前线程绑定的session</li>
</ul>
<ul>
<li>注意：<ul>
<li>要使用getCurrentSession()必须在hibernate.cfg.hbm.xml中配置<br><property name="hibernate.current_session_context_class">thread</property><ul>
<li>hibernate支持，将创建的session绑定到本地线程池中，底层使用ThreadLocal，<br>在线程之间共享session</li>
<li>如果提交或者回滚事务，底层自动关闭事务  所以session不需要自动动关闭</li>
</ul>
</li>
</ul>
</li>
<li>测试类<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">//保存用户数据</span><br><span class="line">        //<span class="number">1.</span>获取核心配置文件，默认加载src的hiber.cfg.xml文件</span><br><span class="line">        <span class="keyword">Configuration</span> <span class="keyword">configuration</span> = <span class="built_in">new</span> <span class="keyword">Configuration</span>().configure();</span><br><span class="line">        //代码方式加载映射文件</span><br><span class="line">        //方式一</span><br><span class="line">        //<span class="keyword">configuration</span>.addResource("com/zhao/hibernate/domain/hibernate.hbm.xml");</span><br><span class="line">        //方式二</span><br><span class="line">        //<span class="keyword">configuration</span>.addClass(<span class="keyword">User</span>.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">        //<span class="number">2.</span>创建会话工厂</span><br><span class="line">        SessionFactory factory = <span class="keyword">configuration</span>.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        //<span class="number">3.</span>创建会话【会话相当于连接Coonnection】</span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = factory.openSession();</span><br><span class="line"></span><br><span class="line">        //<span class="number">4.</span> 开启事务</span><br><span class="line">        <span class="keyword">Transaction</span> <span class="keyword">transaction</span> = <span class="keyword">session</span>.getTransaction();</span><br><span class="line">        <span class="keyword">transaction</span>.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">        //<span class="number">5.</span>保存【直接把对象保存到数据库】</span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">        <span class="keyword">user</span>.setUsername("阿尔提尔");</span><br><span class="line">        <span class="keyword">user</span>.setPassword("123");</span><br><span class="line">        <span class="keyword">session</span>.save(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line">        //<span class="number">6.</span>关闭会话</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">        //<span class="number">7.</span>关闭工厂，释放资源</span><br><span class="line">        factory.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加载映射文件"><a href="#加载映射文件" class="headerlink" title="加载映射文件"></a>加载映射文件</h3>  代码方式加载映射文件<ul>
<li>方式一<br>//configuration.addResource(“com/zhao/hibernate/domain/hibernate.hbm.xml”);</li>
<li>方式二<br>//configuration.addClass(User.class);</li>
<li>方式三：配置<br><mapping name="全限定名"></mapping></li>
</ul>
</li>
</ul>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ol>
<li><p>session.save()  保存   </p>
</li>
<li><p>session.get(user.class,4)|session.load(user.class,5);通过Id查找<br> 区别：</p>
<ul>
<li>无数据时get方法显示为空，而load报错</li>
<li>get方法直接加载数据</li>
<li>load方法设计是懒加载，用到的时候才会加载数据</li>
<li>load方法返回的数据是一个代理</li>
</ul>
</li>
<li><p>delete，删除数据两种方式</p>
<ul>
<li><p>第一种方式：先获取要删除的对象，然后在调用delete方法<br>   User user =(User)session.get(User.class,5);<br>   session.delete(user);</p>
</li>
<li><p>第二种方式：创建一个user对象，设置Id，然后在调用delete方法；<br>   User user = new User();<br>   user.setId(8);<br>   session.delete(user);</p>
</li>
</ul>
</li>
</ol>
<ul>
<li>事务：<br>  开启事务：session.getTransaction().begin();<br>  提交事务：session.getTransaction().commit();</li>
</ul>
<ol start="4">
<li>update 更新数据<ul>
<li>获取数据，调用set方法，事务提交<br>User user = (User)session.get(User.class,5);<br>user.setUsername(“哒哒”);<br>session.Update(user);<br>//session.saveOrUpdate(user);判断user有没有id，有则更新数据，无则插入数据<br>注意：插入数据事物自动提交</li>
</ul>
</li>
</ol>
<h3 id="Query对象（分页查询）"><a href="#Query对象（分页查询）" class="headerlink" title="Query对象（分页查询）"></a>Query对象（分页查询）</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Lesson1 &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Test</span></span><br><span class="line">    public void <span class="keyword">save</span>()&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存用户数据</span></span><br><span class="line">        <span class="comment">//1.获取核心配置文件，默认加载src的hiber.cfg.xml文件</span></span><br><span class="line">        Configuration configuration = new Configuration().configure();</span><br><span class="line">        <span class="comment">//代码方式加载映射文件</span></span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        <span class="comment">//configuration.addResource("com/zhao/hibernate/domain/hibernate.hbm.xml");</span></span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line">        <span class="comment">//configuration.addClass(User.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建会话工厂</span></span><br><span class="line">        SessionFactory factory = configuration.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话【会话相当于连接Coonnection】</span></span><br><span class="line">        Session session = factory.openSession();</span><br><span class="line">        <span class="comment">//查询对象</span></span><br><span class="line">        <span class="keyword">Query</span>&lt;User&gt;  <span class="keyword">query</span> = session.createQuery(<span class="string">"from User"</span>);</span><br><span class="line">                ;</span><br><span class="line">        <span class="comment">//分页查询limit?,?</span></span><br><span class="line">        <span class="keyword">query</span>.setFirstResult(0); <span class="comment">//起始位置</span></span><br><span class="line">        <span class="keyword">query</span>.setMaxResults(3);  <span class="comment">//查询条数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//返回一行数据  query.uniqueResult();</span></span><br><span class="line">        <span class="comment">//返回多行数据</span></span><br><span class="line">        <span class="keyword">List</span> <span class="keyword">list</span> = <span class="keyword">query</span>.<span class="keyword">list</span>();</span><br><span class="line">        <span class="keyword">for</span> (Object  obj : <span class="keyword">list</span>)&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭会话</span></span><br><span class="line">        session.<span class="keyword">close</span>();</span><br><span class="line">        <span class="comment">//7.关闭工厂，释放资源</span></span><br><span class="line">        factory.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Criteria对象"><a href="#Criteria对象" class="headerlink" title="Criteria对象"></a>Criteria对象</h3><ul>
<li>hibernate提供的纯面向对象语言，提供直接使用PO对象进行操作<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Lesson3 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存用户数据</span></span><br><span class="line">        <span class="comment">//1.获取核心配置文件，默认加载src的hiber.cfg.xml文件</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> <span class="constructor">Configuration()</span>.configure<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">//代码方式加载映射文件</span></span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        <span class="comment">//configuration.addResource("com/zhao/hibernate/domain/hibernate.hbm.xml");</span></span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line">        <span class="comment">//configuration.addClass(User.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建会话工厂</span></span><br><span class="line">        SessionFactory factory = configuration.build<span class="constructor">SessionFactory()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话【会话相当于连接Coonnection】</span></span><br><span class="line">        Session session = factory.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Criteria 查询对象</span></span><br><span class="line">        Criteria criteria = session.create<span class="constructor">Criteria(User.<span class="params">class</span>)</span>;</span><br><span class="line">        <span class="comment">//eq=</span></span><br><span class="line">        criteria.add(<span class="module-access"><span class="module"><span class="identifier">Restrictions</span>.</span></span>eq(<span class="string">"username"</span>,<span class="string">"阿尔提尔"</span>));</span><br><span class="line">        criteria.add(<span class="module-access"><span class="module"><span class="identifier">Restrictions</span>.</span></span>eq(<span class="string">"password"</span>,<span class="string">"123"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(criteria.<span class="built_in">list</span><span class="literal">()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 【gt &gt;   ge &gt;= 】【lt &lt;   le &lt;= 】</span></span><br><span class="line">        criteria.add(<span class="module-access"><span class="module"><span class="identifier">Restrictions</span>.</span></span>gt(<span class="string">"uid"</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模糊查询</span></span><br><span class="line">        criteria.add(<span class="module-access"><span class="module"><span class="identifier">Restrictions</span>.</span></span>like(<span class="string">"username"</span>,<span class="string">"%提%"</span>));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(criteria.<span class="built_in">list</span><span class="literal">()</span>);</span><br><span class="line">        <span class="comment">//6.关闭会话</span></span><br><span class="line">        session.close<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">//7.关闭工厂，释放资源</span></span><br><span class="line">        factory.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SQLQuery-原生sql语句"><a href="#SQLQuery-原生sql语句" class="headerlink" title="SQLQuery 原生sql语句"></a>SQLQuery 原生sql语句</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson4 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">//保存用户数据</span><br><span class="line">        //<span class="number">1.</span>获取核心配置文件，默认加载src的hiber.cfg.xml文件</span><br><span class="line">        <span class="keyword">Configuration</span> <span class="keyword">configuration</span> = <span class="built_in">new</span> <span class="keyword">Configuration</span>().configure();</span><br><span class="line">    </span><br><span class="line">        //<span class="number">2.</span>创建会话工厂</span><br><span class="line">        SessionFactory factory = <span class="keyword">configuration</span>.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        //<span class="number">3.</span>创建会话【会话相当于连接Coonnection】</span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = factory.openSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //创建Sqlquery对象</span><br><span class="line">        SQLQuery query = <span class="keyword">session</span>.createSQLQuery("select * from user ");</span><br><span class="line">        List&lt;<span class="keyword">Object</span>[]&gt; list = query.list();</span><br><span class="line">        // 此处返回结果为集合   多维数组</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">Object</span> o : obj)&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(o);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("-----------------");</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //<span class="number">6.</span>关闭会话</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">        //<span class="number">7.</span>关闭工厂，释放资源</span><br><span class="line">        factory.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="提取工具类"><a href="#提取工具类" class="headerlink" title="提取工具类"></a>提取工具类</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">util</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory factory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取核心配置文件对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        <span class="comment">//2.创建会话工厂</span></span><br><span class="line">        factory = configuration.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听程序关闭</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread()&#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"程序关闭。。。！"</span>);</span><br><span class="line">                <span class="comment">//关闭会话工厂</span></span><br><span class="line">                factory.<span class="built_in">close</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回会话工厂获取到的session对象</span></span><br><span class="line">        <span class="keyword">return</span> factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCurrentSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory.getCurrentSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lesson5</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存用户数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话【会话相当于连接Coonnection】</span></span><br><span class="line"></span><br><span class="line">        Session session = util.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Sqlquery对象</span></span><br><span class="line">        SQLQuery query = session.createSQLQuery(<span class="string">"select * from user "</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Object[]&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span>();</span><br><span class="line">        <span class="comment">// 此处返回结果为集合   多维数组</span></span><br><span class="line">        <span class="keyword">for</span> (Object[] obj : <span class="built_in">list</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Object o : obj)&#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(o);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"-----------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭会话</span></span><br><span class="line">        session.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>spring框架事务管理(三)</title>
    <url>/2019/11/04/spring%E6%A1%86%E6%9E%B6%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86(%E4%B8%89)/</url>
    <content><![CDATA[<h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><ul>
<li>事务：一组业务操作，要不全部成功，要不全部失败</li>
<li>特性：ACID<br>  原子性：整体<br>  一致性：完成<br>  隔离性：并发<br>  持久性：结果</li>
<li>隔离问题：<br>  脏读：一个事务读到另一个事务没有提交的数据<br>  不可重复读：一个事务读到另一个事务已提交的数据（update）<br>  虚读（幻读）：一个事务读到另一个事务已提交的数据（insert）</li>
<li>隔离级别：<br>  read uncommitted:读未提交；存在3个问题<br>  read committed:  读已提交；解决，脏读：存在2个问题<br>  repeatable read:  可重复读；解决，脏读，不可重复读，存在一个问题<br>  serializable：    串行化；都解决，单事务。</li>
<li>MySQL事务操作</li>
</ul>
<ol>
<li>获取连接</li>
<li>开启事务 conn.setAutoCommit(false);</li>
<li>提交事务 conn.committed();</li>
<li>catch()中回滚事务 conn.roolback();</li>
</ol>
<ul>
<li>Savepoint 保存点，记录用户操作的当前位置，之后可以回滚到指定的位置</li>
</ul>
<h3 id="spring事务管理（transaction）"><a href="#spring事务管理（transaction）" class="headerlink" title="spring事务管理（transaction）"></a>spring事务管理（transaction）</h3><p>导包：spring-tx<br>三个顶级接口</p>
<ul>
<li>PlatformTransactionManager    平台事务管理器   spring要管理事务，必须使用事务管理器<br> 进行事务配置时，必须配置事务管理器</li>
<li>TransactionDefinition         事务详情（事务定义，事务属性），spring用于确定事物具体详情<br> 例如：隔离级别，是否只读（readonly），超时时间（timeout）<br> 进行事务配置时，必须配置事务详情，spring将配置项封装到给对象的实例。</li>
<li>TransactionStatus             事务状态，spring用于记录当前的事务运行状态，例如:是否有保存点，事务是否完成<br> spring底层根据状态进行相应操作</li>
</ul>
<h4 id="详解："><a href="#详解：" class="headerlink" title="详解："></a>详解：</h4><ul>
<li>PlatformTransactionManager 平台事务管理器<br>导包：spring-jdbc（jdbc开发） ，spring—orm（整合Hibernate）</li>
</ul>
<ol>
<li>常见事务管理器(及PlatformTransactionManager的实现类)<br>DatesourceTransactionManager    jdbc包下其开发时的事务管理器，采用JdbcTemplate<br>HibernateTransactionManager   Hibernate包下其开发时的事务管理器，整合hibernate<ul>
<li>api详解<br>TransactionStatus getTransaction(TransationDefinition definition),<br>事务管理器 通过’事务详情’，获得’事务状态’，从而管理事务<br>void commit(TransactionStatus status)    根据状态提交<br>void rollback(TransactionStatus status)  根据状态回滚</li>
</ul>
</li>
</ol>
<ul>
<li><p>TransactionDefinition  事务详情<br>  String getName()  配置事务详情名称，一般方法名称。例如：save add<br>  boolean isReadOnly() 是否只读(增删改 读写；查询：只读)<br>  int  getTime()  超时时间<br>  int  Isolationlevel() 隔离级别<br>  int  getPropagationBehavior()  传播行为</p>
</li>
<li><p>传播行为：在两个业务之间如何共享事务<br>7种常量<br>PROPAGATLON_REQUIRED , required 必须<br>  支持当前事务，A如果创建事务，B必须使用该事务<br>  如果A没有事务，B将创建一个新事务<br>PROPAGATLON_SUPPORTS ， supports 支持<br>  支持当前事务，A如果创建事务，B必须使用该事务<br>  如果A没有事务，B将已非事务<br>PROPAGATLON_MANDATORY ，mandatory 强制<br>  支持当前事务，A如果创建事务，B必须使用该事务<br>  如果A没有事务，B将抛出异常<br>PROPAGATLON_REQUIRES_NEW  requires_new 必须新的<br>  如果A有事务，将A事务挂提，B将创建一个新的事务<br>  如果A没有事务，B将创建一个新的事务<br>PROPAGATLON_NOT_SUPPORTED , not_supported  不支持<br>  如果A有事务，将A事务挂提，B将已非事务执行<br>  如果A没有事务，B将已非事务执行<br>PROPAGATLON_NEVER ， never  从不<br>  如果A有事务，B将抛出异常<br>  如果A没有事务，B将已非事务执行<br>PROPAGATLON_NESTED ，nested 嵌套<br>  A和B底层采用保存点机制，形成嵌套事务</p>
</li>
<li><p>TransactionStatus      事务状态</p>
<h3 id="事务案例"><a href="#事务案例" class="headerlink" title="事务案例"></a>事务案例</h3></li>
</ul>
<ol>
<li>转账1<br>导包：![图片alt](图片地址 ‘’图片title’’)<br><img src="E:/VScode-data/1.png" alt="jar"></li>
</ol>
<ul>
<li>Dao层<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> AccountDaoImpl extends JdbcDaoSupport implements AccountDao &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">out</span>(String ounter, <span class="type">Integer</span> <span class="type">money</span>) &#123;</span><br><span class="line">        getJdbcTemplate().<span class="keyword">update</span>("update account set money = money - ? where username = ?",<span class="type">money</span>,ounter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">in</span>(String <span class="keyword">inner</span>, <span class="type">Integer</span> <span class="type">money</span>) &#123;</span><br><span class="line">        getJdbcTemplate().<span class="keyword">update</span>("update account set money = money + ? where username = ?",<span class="type">money</span>,<span class="keyword">inner</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Service层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * service层调用Dao</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * spring注入提供set方法</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transation</span><span class="params">(String ounter, String inner, Integer money)</span> </span>&#123;</span><br><span class="line">        accountDao.out(ounter,money);</span><br><span class="line">        accountDao.in(inner,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>XML配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    datasource数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Dirver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Dao.Impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--service层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Service.Impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        AccountServiceImpl accountService = applicationContext.getBean(<span class="string">"accountService"</span>, AccountServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        accountService.transation(<span class="string">"jack"</span>,<span class="string">"ross"</span> ,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>手动管理事务（了解）</li>
</ol>
<ul>
<li>spring底层使用 TransactuinTemplate 事务模板进行操作</li>
<li>操作：<pre><code>1. service 需要获得 TransactionTemplate 事务模板
2. spring 配置模板，并注入给service
3. 模板需要注入事务管理器
4. 配置事务管理器 DateSourceTranctionManager 需要注入DataSource数据源</code></pre></li>
</ul>
<ul>
<li>修改Service<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * service层调用Dao</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * spring注入提供set方法</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 创建事务模板</span></span><br><span class="line"><span class="comment">    * spring注入</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * setter方法注入模板</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTransactionTemplate</span><span class="params">(TransactionTemplate transactionTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transactionTemplate = transactionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transation</span><span class="params">(<span class="keyword">final</span> String ounter, <span class="keyword">final</span> String inner, <span class="keyword">final</span> Integer money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus transactionStatus)</span> </span>&#123;</span><br><span class="line">                accountDao.out(ounter,money);</span><br><span class="line">                accountDao.in(inner,money);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>修改XML配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    datasource数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Dirver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Dao.Impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--service层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Service.Impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 修改（添加）的是以下代码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionTemolate"</span> <span class="attr">ref</span>=<span class="string">"transactionTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    创建模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"txmanager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    配置事务管理器 管理需要事务，事务从Connection获得，连接从连接池DataSource获得--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txmanager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="工厂Bean-生成代理：半自动"><a href="#工厂Bean-生成代理：半自动" class="headerlink" title="工厂Bean 生成代理：半自动"></a>工厂Bean 生成代理：半自动</h3><ul>
<li>Spring提供 管理事务的代理工厂bean： TransactionProxyFactoryBean<ol>
<li>getBean() 获得代理对象</li>
<li>Spring 配置一个代理</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>修改XML配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    datasource数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Dirver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.zhao3.Dao.Impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--service层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zhao3.Service.Impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    service代理对象</span></span><br><span class="line"><span class="comment">        1.proxyInterfaces接口</span></span><br><span class="line"><span class="comment">        2.target目标类</span></span><br><span class="line"><span class="comment">        3.transactionManager 事务管理器</span></span><br><span class="line"><span class="comment">        4.transactionAttributes 事务属性（事务详情）</span></span><br><span class="line"><span class="comment">        5.prop key:确定哪些方法使用当前事务配置</span></span><br><span class="line"><span class="comment">        6.&lt;prop&gt;标签体中（prop text）：配置事务详情</span></span><br><span class="line"><span class="comment">            格式：PROPAGATION,传播行为</span></span><br><span class="line"><span class="comment">             ISOLATION,隔离级别</span></span><br><span class="line"><span class="comment">             readonly,是否只读</span></span><br><span class="line"><span class="comment">             -Exception,异常回滚</span></span><br><span class="line"><span class="comment">             +Exception，异常提交</span></span><br><span class="line"><span class="comment">         eg:数字1和-1</span></span><br><span class="line"><span class="comment">         &lt;prop key="transation"&gt;PROPAGATION_REQUIRED,ISOLATION_AEFAULT&lt;/prop&gt; 数字1和-1也可默认传播行为和隔离级别</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyAccountService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyInterfaces"</span> <span class="attr">value</span>=<span class="string">"com.zhao3.Service.AccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"accountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"transation"</span>&gt;</span>PROPAGATION_REQUIRED,ISOLATION_DEFAULT<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"> ``` </span><br><span class="line">- 测试类</span><br></pre></td></tr></table></figure>
<p>public class TestApp {</p>
<p>  @Test<br>  public void save(){</p>
<pre><code>ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao3/applicationContext.xml&quot;);

AccountService accountService = applicationContext.getBean(&quot;proxyAccountService&quot;, AccountService.class);

accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);</code></pre><p>  }<br>}</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">* 注意：</span><br><span class="line">    有异常：org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named <span class="string">'proxyAccountService'</span> is expected <span class="keyword">to</span> be of<span class="built_in"> type </span><span class="string">'com.zhao3.Service.Impl.AccountServiceImpl'</span> but was actually of<span class="built_in"> type </span><span class="string">'com.sun.proxy.$Proxy9'</span></span><br><span class="line">    解决方法：</span><br><span class="line">    AccountService accountService = applicationContext.getBean(<span class="string">"proxyAccountService"</span>, AccountService.class);</span><br><span class="line">    此处要用接口，用实现类会报上面异常</span><br><span class="line"></span><br><span class="line"><span class="comment">### AOP配置基于XML</span></span><br><span class="line">* spring XML配置aop 自动生成代理，进行事务管理</span><br><span class="line">1. 配置事务管理器</span><br><span class="line">2. 配置事务详情</span><br><span class="line">3. 配置aop</span><br><span class="line">* XML配置文件</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/beans&quot;</a></p>
<pre><code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</code></pre></li>
</ul>
<!--    datasource数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Dirver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    Dao-->
<pre><code>&lt;bean id=&quot;accountDao&quot; class=&quot;com.zhao3.Dao.Impl.AccountDaoImpl&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--service层-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;com.zhao3.Service.Impl.AccountServiceImpl&quot;&gt;
    &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    service代理对象
        1.proxyInterfaces接口
        2.target目标类
        3.transactionManager 事务管理器
        4.transactionAttributes 事务属性（事务详情）
        5.prop key:确定哪些方法使用当前事务配置
        6.<prop>标签体中（prop text）：配置事务详情
            格式：PROPAGATION,传播行为
             ISOLATION,隔离级别
             readonly,是否只读
             -Exception,异常回滚
             +Exception，异常提交
         eg:数字1和-1
         <prop key="transation">PROPAGATION_REQUIRED,ISOLATION_AEFAULT</prop> 数字1和-1也可默认传播行为和隔离级别
        -->
<pre><code>&lt;bean id=&quot;proxyAccountService&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;
    &lt;property name=&quot;proxyInterfaces&quot; value=&quot;com.zhao3.Service.AccountService&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;target&quot; ref=&quot;accountService&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;transactionManager&quot; ref=&quot;txManager&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;transactionAttributes&quot;&gt;
        &lt;props&gt;
            &lt;prop key=&quot;transation&quot;&gt;PROPAGATION_REQUIRED,ISOLATION_DEFAULT&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    事务管理器-->
<pre><code>&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre></beans>
 <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>测试类</span><br></pre></td></tr></table></figure>
public class TestApp {

<pre><code>@Test
public void save(){

    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao3/applicationContext.xml&quot;);

    AccountService accountService = applicationContext.getBean(&quot;proxyAccountService&quot;, AccountService.class);

    accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);
}</code></pre><p>}<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### AOP配置基于注解</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>配置事务管理器，并将事务管理器交予spring</span><br><span class="line"><span class="bullet">* </span>在目标类或目标方法添加注解即可 @Transactional</span><br><span class="line"><span class="bullet">* </span>XML配置</span><br></pre></td></tr></table></figure><br><?xml version="1.0" encoding="UTF-8"?><br><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
"></p>
 <!--    datasource数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Dirver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--    Dao-->
<pre><code>&lt;bean id=&quot;accountDao&quot; class=&quot;com.zhao4.Dao.Impl.AccountDaoImpl&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--service层-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;com.zhao4.Service.Impl.AccountServiceImpl&quot;&gt;
    &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    事务管理
        1. 事务管理器
        -->
<pre><code>&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--将事务管理器交予Spring
    transaction-manager="transactionManager" 配置事务管理器
    proxy-target-class="false" 值为true表示底层强制使用cglib代理
    -->
<pre><code>&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation-driven&gt;</code></pre></beans>
 <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>service层</span><br></pre></td></tr></table></figure>
 @Transactional
 public class AccountServiceImpl implements AccountService {
    /*
    * service层调用Dao
    * */
    private AccountDao accountDao;
    /*
    * spring注入提供set方法
    * */
    public void setAccountDao(AccountDao accountDao) {
        this.accountDao = accountDao;
    }

<pre><code>@Override
public void transation(String ounter, String inner, Integer money) {
    accountDao.out(ounter,money);
    accountDao.in(inner,money);
}</code></pre><p> }<br>  <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>注解事务详情配置</span><br></pre></td></tr></table></figure><br>    @Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT )<br> <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">### 整合Junit</span><br><span class="line"><span class="number">1</span>. 导包：spring-test</span><br><span class="line"><span class="number">2</span>. 让Junit通知Spring加载配置文件 </span><br><span class="line">   加注解:</span><br><span class="line">   <span class="meta">@RunWith(SpringIunit4ClassRunner.class)</span></span><br><span class="line">   <span class="meta">@ContextConfiguration(locations=<span class="meta-string">"classpath:applicationContext.xml"</span>)</span></span><br><span class="line">   <span class="meta">@Autowried</span> <span class="comment">//与junit整合，不需要在spring Xml中配置扫描</span></span><br><span class="line"><span class="number">3</span>. 让 spring容器自动注入</span><br><span class="line">* 案例：</span><br></pre></td></tr></table></figure><br> @RunWith(SpringJUnit4ClassRunner.class)<br> @ContextConfiguration(locations = “classpath:applicationContext.xml”)<br> public class TestApp {</p>
<pre><code>@Autowired //与Junit整合，不需要Spring xml 配置扫描
private AccountService accountService;

@Test
public void save(){</code></pre><p> //        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(“com/zhao4/applicationContext.xml”);<br> //<br> //        AccountService accountService = applicationContext.getBean(“accountService”, AccountService.class);</p>
<pre><code>    accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);
}</code></pre><p> }<br> <figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"> <span class="comment">### 整合Web</span></span><br><span class="line"> 导入jar包：spring-web</span><br><span class="line"> <span class="number">1</span>. tomcat启动加载配置文件</span><br><span class="line">    servlet  init(ServletConfig)  <span class="tag">&lt;load-on-start&gt;</span><span class="number">2</span></span><br><span class="line">    filter    init(FilterConfig)  web.<span class="keyword">xml</span> <span class="title">注册过滤器自动调用初始化</span></span><br><span class="line"><span class="title">    listener</span>(监听器)  ServletContextListener  ServletContext对象的监听【Spring】</span><br><span class="line">    Spring 提供监听器 ContextLoaderListener   web.<span class="keyword">xml</span>  <span class="title">&lt;listener</span>&gt;<span class="tag">&lt;listener-class&gt;</span>....  </span><br><span class="line">        如果只配置监听器，默认加载xml位置，WEB<span class="literal">-INF</span>/applicationContext.xml</span><br><span class="line"> <span class="number">2</span>. 确定配置文件，通过系统初始化参数</span><br><span class="line">    servletContext 初始化参数 web.<span class="keyword">xml</span> <span class="title"></span></span><br><span class="line"><span class="title">    &lt;context-param</span>&gt;</span><br><span class="line">        <span class="tag">&lt;param-name&gt;</span>contextConfigLocation</span><br><span class="line">        <span class="tag">&lt;param-value&gt;</span>classpath:applicationContext.xml</span><br><span class="line">* web.xml</span><br></pre></td></tr></table></figure><br> <?xml version="1.0" encoding="UTF-8"?><br> <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0"></p>
 <!--    确定配置文件的位置-->
<pre><code>&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
&lt;/context-param&gt;</code></pre> <!--    配置Spring的监听器 用来加载Xml配置-->
<pre><code>&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;</code></pre> </web-app>
  ```
* 从ServletContext作用域 获得spring容器（了解）
]]></content>
  </entry>
  <entry>
    <title>Sprig框架AOP(二)</title>
    <url>/2019/11/04/Sprig%E6%A1%86%E6%9E%B6AOP(%E4%BA%8C)/</url>
    <content><![CDATA[<h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><ol>
<li>traget :目标类，需要被代理的类 eg：UserService</li>
<li>Jionpoint(连接点) ：指那些可能被拦截的方法 eg：所有方法</li>
<li>pointCut：切入点，已经被增强的连接点 eg：addUser（）</li>
<li>advice：通知增强，增强的代码 eg：after（）</li>
<li>Weaving（织入）:是指把增强的advice应用到目标对象，target来创建新的对象proxy的过程</li>
<li>proxy：代理</li>
<li>Aspect（切面）： 是切入点和通知advice的结合</li>
</ol>
<h3 id="手动方式："><a href="#手动方式：" class="headerlink" title="手动方式："></a>手动方式：</h3><ul>
<li>JDK动态代理 对“装饰者”设计模式简化，使用前提，必须有接口</li>
</ul>
<ol>
<li>目标类：接口 + 实现类</li>
<li>切面类：用于存通知 myAspect</li>
<li>工厂类：编写工厂生成代理</li>
<li>测试</li>
</ol>
<ul>
<li>目标类<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>切面类<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Myaspect &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">before</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("前方法");</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">after</span>()&#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("后方法");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>工厂类<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">UserService <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类必须加final</span></span><br><span class="line">        <span class="comment">//目标类</span></span><br><span class="line">        <span class="keyword">final</span> UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">//切面类</span></span><br><span class="line">        <span class="keyword">final</span> Myaspect myaspect = <span class="keyword">new</span> Myaspect();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *生成代理类</span></span><br><span class="line"><span class="comment">        *将目标类（切入点）和切面类（通知）结合 --》切面</span></span><br><span class="line"><span class="comment">        *  Proxy.newProxyInstance()</span></span><br><span class="line"><span class="comment">        * 参数1：loader 类加载器 动态代理类，运行时加载，任何类都需要类加载器将其加载到内存</span></span><br><span class="line"><span class="comment">        *       一般情况：当前类.class.getClassLoader();</span></span><br><span class="line"><span class="comment">        *          目标类实例.getClass().getClassloader();</span></span><br><span class="line"><span class="comment">        *  参数2：Class&lt;?&gt;(Class类型的数组)interfaces 代理类需要实现的所有接口</span></span><br><span class="line"><span class="comment">        *       方式一：目标实例.getClass().getInterfaces(); 注意：只能获得自己接口，不能获得父元素的接口；</span></span><br><span class="line"><span class="comment">        *       方式二：new Class[]&#123;userService.class&#125;;</span></span><br><span class="line"><span class="comment">        *       例如：jdbc 驱动 DriverManager  获得接口Connection</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 参数3：InvocationHandler  处理类，接口，必须进行实现类，一般采用匿名内部类</span></span><br><span class="line"><span class="comment">        *       提供invoke方法，代理类的每一个方法执行时，都将调用一次invoke</span></span><br><span class="line"><span class="comment">        *           参数1：Object proxy 代理对象</span></span><br><span class="line"><span class="comment">        *           参数2：method method  代理对象当前执行方法的描述方法（反射）</span></span><br><span class="line"><span class="comment">        *                   执行方法名：method.getName();</span></span><br><span class="line"><span class="comment">        *                   执行方法：method.invoke(对象实际参数);</span></span><br><span class="line"><span class="comment">        *           参数3：Object【】 args：方法的实际参数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        UserService proxService = (UserService) Proxy.newProxyInstance(MyBeanFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), <span class="title">userService</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(), <span class="title">new</span> <span class="title">InvocationHandler</span>() </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//前方法</span></span><br><span class="line">                myaspect.<span class="keyword">before</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//执行目标类方法</span></span><br><span class="line">                Object obj = method.invoke(userService,args);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//后方法</span></span><br><span class="line"></span><br><span class="line">                myaspect.<span class="keyword">after</span>();</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDK</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserService userService = MyBeanFactory.createService();</span><br><span class="line">        userService.addUser();</span><br><span class="line">        userService.deleteUser();</span><br><span class="line">        userService.updateUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="cglib字节码增强"><a href="#cglib字节码增强" class="headerlink" title="cglib字节码增强"></a>cglib字节码增强</h3><ul>
<li>没有接口，只有实现类</li>
<li>采用字节码增强框架 cglib 运行原理：在运行时创建目标类的子类，从而对目标类进行增强</li>
<li>导jar包<br>自己导jar包【了解】<br>核心：hibernate lib\bytecord\cglib….jar<br>依赖：struts2 lib\asm…jar<br>spring 的core.jar中已经整合了以上两个内容</li>
</ul>
</li>
</ul>
<ol>
<li><p>目标类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"添加"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"更新"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"删除"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>切面类</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Myaspect &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">before</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("前方法");</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">after</span>()&#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("后方法");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>工厂类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">UserServiceImpl <span class="title">createService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//目标类</span></span><br><span class="line">        <span class="keyword">final</span> UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">//切面类</span></span><br><span class="line">        <span class="keyword">final</span> Myaspect myaspect = <span class="keyword">new</span> Myaspect();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *3.生成代理类 采用cglib,底层创建目标类的子类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//3.1 核心类</span></span><br><span class="line">        Enhancer enhancer =<span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//3.2确定父类</span></span><br><span class="line">        enhancer.setSuperclass(userService.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *3.3设置回调函数 MethodInterceptor等效jdk InvoCationHandler接口</span></span><br><span class="line"><span class="comment">        * intercept() 等效于JDK invoke()</span></span><br><span class="line"><span class="comment">        *       参数1：参数2：参数3：与invoke一样的</span></span><br><span class="line"><span class="comment">        *       参数4：methodProxy 方法的代理</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//前方法</span></span><br><span class="line">                myaspect.<span class="keyword">before</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//执行目标类方法</span></span><br><span class="line">               Object o1 = method.invoke(userService,objects);</span><br><span class="line">               <span class="comment">//上下效果等同  执行代理类的父类，执行目标类(目标类和代理类 父子关系);</span></span><br><span class="line">               methodProxy.invokeSuper(o,objects);</span><br><span class="line"></span><br><span class="line">               <span class="comment">//后方法</span></span><br><span class="line">                myaspect.<span class="keyword">after</span>();</span><br><span class="line">                <span class="keyword">return</span> o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.4 创建代理</span></span><br><span class="line">        UserServiceImpl proxService = (UserServiceImpl) enhancer.create();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proxService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCglib</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserServiceImpl userService = MyBeanFactory.createService();</span><br><span class="line">        userService.addUser();</span><br><span class="line">        userService.deleteUser();</span><br><span class="line">        userService.updateUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="spring编写代理：半自动"><a href="#spring编写代理：半自动" class="headerlink" title="spring编写代理：半自动"></a>spring编写代理：半自动</h3></li>
</ol>
<h3 id="Spring基于XML配置（切点表达式）"><a href="#Spring基于XML配置（切点表达式）" class="headerlink" title="Spring基于XML配置（切点表达式）"></a>Spring基于XML配置（切点表达式）</h3><ul>
<li>导包AOP联盟<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>业务类或目标类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="title">implements</span> <span class="title">IAccountService</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 账户业务层实现类</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"更新"</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteAcount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"删除"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>2.切面类或通知类 </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 用于记录日志的工具类。提供公共代码</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">logger</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于打印日志，计划在其切入点方法执行之前执行（切入点方法就是目标方法及业务层方法）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Logger类中前置行方法执行记录日志"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>XML配置文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    配置Spring IOC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    Spring基于XML的AOP配置步骤</span></span><br><span class="line"><span class="comment">        1.把通知的Bean特交给该Spring管理</span></span><br><span class="line"><span class="comment">        2.使用aop:config标签表明开始配置AOP</span></span><br><span class="line"><span class="comment">        3.使用aop：aspect表明配置切面</span></span><br><span class="line"><span class="comment">                 属性 id：表示给切面提供唯一标识</span></span><br><span class="line"><span class="comment">                        ref：表示指定通知类bean的Id</span></span><br><span class="line"><span class="comment">        4. 在aop；aspect标签中使用对引的标签来配置通知的类型</span></span><br><span class="line"><span class="comment">            aop:before 表示前置通知</span></span><br><span class="line"><span class="comment">                    属性：method用于指定logger类中那个方法是前置通知</span></span><br><span class="line"><span class="comment">            aop：after 表示后置通知</span></span><br><span class="line"><span class="comment">            pointcut属性：用于指定切入点的表达式，该表达式的含义指的是对业务层中那些方法的增强</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           切入点表达式写法：</span></span><br><span class="line"><span class="comment">                关键字;execution(表达式)</span></span><br><span class="line"><span class="comment">                表达式：</span></span><br><span class="line"><span class="comment">                        访问修饰符 返回值 包名。包名。包名...类名.方法名(参数列表)</span></span><br><span class="line"><span class="comment">            表达式标准写法：</span></span><br><span class="line"><span class="comment">                public void com.zhao.service.AccountServiceImpl.saveAccount();</span></span><br><span class="line"><span class="comment">                访问修饰符可以省略</span></span><br><span class="line"><span class="comment">                void com.zhao.Service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                返回值可以使用通配符，表示任意通配符</span></span><br><span class="line"><span class="comment">                * com.zhao.Service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                包名可以使用通配符，，表示任意包，但几级包，就要写几个*.</span></span><br><span class="line"><span class="comment">                * *.*.*.*.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                包名可以使用..表示当前包及其子包</span></span><br><span class="line"><span class="comment">                * *..AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                类名和方法名可以用*实现通配</span></span><br><span class="line"><span class="comment">                * *..*.*()</span></span><br><span class="line"><span class="comment">                参数列表；</span></span><br><span class="line"><span class="comment">                    可以直接写参数类型：</span></span><br><span class="line"><span class="comment">                            基本类型：直接写名称  int</span></span><br><span class="line"><span class="comment">                            引用类型：写包名.类名的方式  eg：Java.lang.String</span></span><br><span class="line"><span class="comment">                            可以使用通配符表示任意参数，但必须有参数</span></span><br><span class="line"><span class="comment">                            可以表示..表示有无参数均可，有参数可以是任意类型</span></span><br><span class="line"><span class="comment">                全通配写法：</span></span><br><span class="line"><span class="comment">                * *..*.*(..)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                实际开发中切入点表达式的通常写法：</span></span><br><span class="line"><span class="comment">                       * com.zhao.Service.Impl.*.*(..)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Service.utils.logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--        配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--            配置通知类型，并且建立通知方法和切入点方法的关联--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--            &lt;aop:before method="printLog" pointcut="execution( public void com.zhao.Service.impl.AccountServiceImpl.saveAccount())"&gt;&lt;/aop:before&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printLog"</span> <span class="attr">pointcut</span>=<span class="string">"execution( * *..*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">  ``` </span><br><span class="line">4. 测试类</span><br></pre></td></tr></table></figure>
/**<ul>
<li>测试Aop配置</li>
<li>*/</li>
</ul>
</li>
</ol>
<p>public class test {<br>    //快捷键psvm<br>    public static void main(String[] args) {<br>        //获得容器<br>        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(“beans.xml”);<br>        //获取对象<br>        IAccountService iAccountService = (IAccountService)applicationContext.getBean(“accountService”);</p>
<pre><code>    //执行方法
    iAccountService.saveAccount();
    iAccountService.updateAccount(1);
    iAccountService.deleteAcount();
}</code></pre><p>}</p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"> ### 四种常用通知类型</span><br><span class="line"></span><br><span class="line">1. 目标类</span><br></pre></td></tr></table></figure>
<p>public class AccountServiceImpl implements IAccountService {</p>
<pre><code>/*
* 账户业务层实现类
* */
public void saveAccount() {
    System.out.println(&quot;保存&quot;);
}

public void updateAccount(int i) {
    System.out.println(&quot;更新&quot;+i);
}

public int deleteAcount() {
    System.out.println(&quot;删除&quot;);
    return 0;
}</code></pre><p>}</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> XML配置</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd"></p>
 <!--    配置Spring IOC-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;Service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;


&lt;bean id=&quot;logger&quot; class=&quot;Service.utils.logger&quot;&gt;&lt;/bean&gt;</code></pre> <!--    配置AOP-->
<pre><code>&lt;aop:config&gt;</code></pre> <!--        配置切面-->
 <!--        非局部的id="p1"唯一标识符 expression=""用于指定切入点表达式内容 位置必须在aop:aspect上面-->
<pre><code>&lt;aop:pointcut id=&quot;p1&quot; expression=&quot;execution( * *..*.*(..))&quot;/&gt;
&lt;aop:aspect id=&quot;logAdvice&quot; ref=&quot;logger&quot;&gt;</code></pre> <!--            配置通知类型，并且建立通知方法和切入点方法的关联-->
 <!--            <aop:before method="printLog" pointcut="execution( public void com.zhao.Service.impl.AccountServiceImpl.saveAccount())"></aop:before>-->
 <!--            前置通知-->
<pre><code>&lt;aop:before method=&quot;beforeLog&quot; pointcut-ref=&quot;p1&quot;&gt;&lt;/aop:before&gt;</code></pre> <!--           后置通知 -->
<pre><code>&lt;aop:after-returning method=&quot;agterLog&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:after-returning&gt;</code></pre> <!--        异常通知-->
<pre><code>&lt;aop:after-throwing method=&quot;executeAdvice&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:after-throwing&gt;</code></pre> <!--         最终通知-->
<pre><code>&lt;aop:after method=&quot;findalyAdvice&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:after&gt;</code></pre> <!--            局部的-->
 <!--            <aop:pointcut id="p1" expression="execution( * *..*.*(..))"/>-->

<pre><code>    &lt;/aop:aspect&gt;

&lt;/aop:config&gt;</code></pre></beans>
 <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Spring环绕通知</span><br><span class="line"><span class="number">1.</span> XML文件</span><br></pre></td></tr></table></figure>
 <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

 <!--    配置Spring IOC-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;Service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;


&lt;bean id=&quot;logger&quot; class=&quot;Service.utils.logger&quot;&gt;&lt;/bean&gt;</code></pre> <!--    配置AOP-->
<pre><code>&lt;aop:config&gt;</code></pre> <!--        配置切面-->
 <!--        非局部的 id="p1"唯一标识符 expression=""用于指定切入点表达式内容 位置必须在aop:aspect上面-->
<pre><code>&lt;aop:pointcut id=&quot;p1&quot; expression=&quot;execution( * *..*.*(..))&quot;/&gt;
&lt;aop:aspect id=&quot;logAdvice&quot; ref=&quot;logger&quot;&gt;</code></pre> <!--            配置环绕通知-->
<pre><code>        &lt;aop:around method=&quot;aroundLog&quot; pointcut-ref=&quot;p1&quot;&gt;&lt;/aop:around&gt;

    &lt;/aop:aspect&gt;

&lt;/aop:config&gt;</code></pre></beans>
  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 切面类或通知类</span><br></pre></td></tr></table></figure>
/*
* 用于记录日志的工具类。提供公共代码
* */

<p>import org.aspectj.lang.ProceedingJoinPoint;</p>
<p>public class logger {</p>
<pre><code>//用于打印日志，计划在其切入点方法执行之前执行（切入点方法就是目标方法及业务层方法）

/*
* 环绕通知：
*   当我们配置环绕通知之后，切入点方法没有执行，而通知方法执行了
* 分析：
*       通过对比动态代理中的的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用，而我们的代码中没得；
* 解决：
*       Spring框架为我们提供一个接口，ProceedingJoinPoint。此接口有一个方法proceed(),
*       此方法相当予明确调用切入点方法。
*       该接口可以作为环绕通知的方法参数，在程序执行时，spring框架为我们提供该接口的实现类供我们使用
*
* Spring中的环绕通知
*       他是Spring框架为我们提供的一种可以在代码中控制增强方法的何时执行的方式；
* */
public Object aroundLog(ProceedingJoinPoint pjp){
    Object rtVslue = null;
    try{

        Object[] args = pjp.getArgs();//获得执行方法的所需的参数

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志....前置&quot; );

        rtVslue = pjp.proceed(args);//明确调用业务层方法（切入点方法）

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。后置&quot;);

        return rtVslue;
    }catch (Throwable t){
        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。异常&quot;);
        throw new RuntimeException(t);
    }finally {

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志 。。。最终通知&quot;);
    }

}</code></pre><p>}</p>
 <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 注解AOP</span><br><span class="line"><span class="number">1.</span> Xml配置</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd"></p>
 <!--    配置Spring创建容器时要扫描的包-->
<pre><code>&lt;context:component-scan base-package=&quot;com.zhao.Aware.Service&quot;&gt;&lt;/context:component-scan&gt;</code></pre> <!--配置spring开启注解的功能-->
<pre><code>&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</code></pre></beans>
 <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 切面类</span><br></pre></td></tr></table></figure>
 @Component("logger")
@Aspect //表示当前类是一个切面类|通知类
public class logger {

<pre><code>@Pointcut(&quot;execution(* com.zhao.Aware.Service.*.*(..))&quot;)</code></pre><p>   private void p(){}</p>
<pre><code>//用于打印日志，计划在其切入点方法执行之前执行（切入点方法就是目标方法及业务层方法）
//前置执行方法
@Before(&quot;p()&quot;)
public void beforeLog(){
    System.out.println(&quot;Logger类中前置行方法执行记录日志&quot;);
}

//后置执行方法
@AfterReturning(&quot;p()&quot;)
public void agterLog(){
    System.out.println(&quot;Logger类中后置行方法执行记录日志&quot;);
}


//提成通知
@AfterThrowing(&quot;p()&quot;)
public void executeAdvice(){
    System.out.println(&quot;Logger类中异常方法执行记录日志&quot;);
}

//最终通知
@After(&quot;p()&quot;)
public void findalyAdvice(){
    System.out.println(&quot;Logger类中最终通知方法执行记录日志&quot;);
}
//环绕通知
//@Around(&quot;p()&quot;)
public Object aroundLog(ProceedingJoinPoint pjp) {
    Object rtVslue = null;
    try {

        Object[] args = pjp.getArgs();//获得执行方法的所需的参数

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志....前置&quot;);

        rtVslue = pjp.proceed(args);//明确调用业务层方法（切入点方法）

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。后置&quot;);

        return rtVslue;
    } catch (Throwable t) {
        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。异常&quot;);
        throw new RuntimeException(t);
    } finally {

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志 。。。最终通知&quot;);
    }
}</code></pre><p>}</p>
 <figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>. 目标类<span class="string">|业务类</span></span><br></pre></td></tr></table></figure>
<p>@Service(“accountService”)<br>public class AccountServiceImpl implements IAccountService {</p>
<pre><code>/*
* 账户业务层实现类
* */

public void saveAccount() {
    System.out.println(&quot;保存&quot;);
}

public void updateAccount(int i) {
    System.out.println(&quot;更新&quot;+i);
}

public int deleteAcount() {
    System.out.println(&quot;删除&quot;);
    return 0;
}</code></pre><p>}</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">  ### JdbcTemplate模板</span><br><span class="line"><span class="bullet">  * </span>spring提供一种操作JDBC的工具类，类似DBUtils；</span><br><span class="line"><span class="bullet">  * </span>依赖 连接池DataSouce（数据源）</span><br><span class="line"><span class="bullet">  * </span></span><br><span class="line"></span><br><span class="line"><span class="bullet">  1. </span>使用API（了解）</span><br><span class="line"><span class="bullet">  * </span>原生dbcp</span><br><span class="line"><span class="bullet">- </span>目标类</span><br></pre></td></tr></table></figure>

<p>public class user {</p>
<pre><code>private int id;
private String name;
private float money;

public int getId() {
    return id;
}

public void setId(int id) {
    this.id = id;
}

public String getName() {
    return name;
}

public void setName(String name) {
    this.name = name;
}

public float getMoney() {
    return money;
}

public void setMoney(float money) {
    this.money = money;
}</code></pre><p>}</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">测试类</span><br></pre></td></tr></table></figure>
<p>  public class TestApi {</p>
<pre><code>//jdbc模板
public static void main(String[] args) {

    //1.创建数据源dbcp
    BasicDataSource  dataSource = new BasicDataSource();

    //基本4项
    dataSource.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);
    dataSource.setUrl(&quot;jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&quot;);
    dataSource.setUsername(&quot;root&quot;);
    dataSource.setPassword(&quot;zhao1314520&quot;);



    //2.创建模板
    JdbcTemplate jdbcTemplate = new JdbcTemplate();
    jdbcTemplate.setDataSource(dataSource);

    //3.通过api操作
    String sql = &quot;insert into account(name,money) values(?,?)&quot;;
    jdbcTemplate.update(&quot;sql&quot;,&quot;mmm&quot;,&quot;998&quot;);

}</code></pre><p>}<br>   <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>XML配置dbcp</span><br><span class="line"><span class="bullet">1. </span>模板注入</span><br></pre></td></tr></table></figure><br>  public class accountDao {</p>
<p>//jdbc的模板将由spring注入</p>
<pre><code>private JdbcTemplate jdbcTemplate;

public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
    this.jdbcTemplate = jdbcTemplate;
}


public void updata(user account){

    String sql= &quot;update account set name=?,money=? where id=?&quot;;
    Object[] objects = {account.getName(),account.getMoney(),account.getId()};
    jdbcTemplate.update(sql,objects);
}</code></pre><p>}</p>
   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">beans</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
  <!--    配置DAO-->
<pre><code>&lt;bean id=&quot;account&quot; class=&quot;com.zhao.dbcp.accountDao&quot;&gt;
    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre> <!--    创建模板,诸如数据源-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--    创建数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost.3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre>   <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span> 测试</span><br></pre></td></tr></table></figure>
<p>   public class TestDbcp {</p>
<pre><code>@Test
public void save(){
    user account = new user();
    account.setId(1);
    account.setName(&quot;沐沐&quot;);
    account.setMoney(100000);
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);
    accountDao ac = (accountDao) applicationContext.getBean(&quot;account&quot;);

    ac.updata(account);
}</code></pre> <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>C3P0数据源</span><br><span class="line">XML配置文件</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"></p>
 <!--    配置DAO-->
<pre><code>&lt;bean id=&quot;account&quot; class=&quot;com.zhao.C3P0.accountDao&quot;&gt;
    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre> <!--    创建模板,诸如数据源-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--    创建数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre></beans>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">测试类</span><br></pre></td></tr></table></figure>
 public class TestC3p0 {

<pre><code>@Test
public void save(){
    user account = new user();
    account.setId(1);
    account.setName(&quot;沐沐&quot;);
    account.setMoney(100000);
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao/C3P0/beans.xml&quot;);
    IaccountDao ac = (IaccountDao) applicationContext.getBean(&quot;account&quot;);

    ac.updata(account);

}</code></pre><p>}<br>  <figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">* <span class="keyword">properties</span>.<span class="keyword">properties</span>文件</span><br></pre></td></tr></table></figure><br>jdbc.DriverClassName=com.mysql.cj.jdbc.Driver<br>jdbc.Url=jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai<br>jdbc.Username=root<br>jdbc.Password=zhao1314520<br> <figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">XML配置</span><br><span class="line">注意：</span><br><span class="line"><span class="number">1</span>. 命名空间xmlns:<span class="keyword">context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line"><span class="number">2</span>. 加载配文件classpath:</span><br><span class="line"> &lt;<span class="keyword">context</span>:<span class="keyword">property</span>-placeholder location=<span class="string">"classpath:com/zhao/properties/properties.properties"</span>&gt;&lt;/<span class="keyword">context</span>:<span class="keyword">property</span>-placeholder&gt;</span><br></pre></td></tr></table></figure><br><?xml version="1.0" encoding="UTF-8"?><br><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"></p>
 <!--    加载properties配置文件-->
<pre><code>&lt;context:property-placeholder location=&quot;classpath:com/zhao/properties/properties.properties&quot;&gt;&lt;/context:property-placeholder&gt;</code></pre> <!--    配置DAO-->
<pre><code>&lt;bean id=&quot;account&quot; class=&quot;com.zhao.dbcp.accountDao&quot;&gt;
    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre> <!--    创建模板,诸如数据源-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    创建数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;

    &lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driverClassName}&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre></beans>
 <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">### JdbcTemplate模板详解(Spring数据源)</span><br><span class="line">* maven配置</span><br></pre></td></tr></table></figure>
 <packaging>jar</packaging>

<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;8.0.18&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre> <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### <span class="number">1.</span> 原生spring内部数据源</span><br></pre></td></tr></table></figure>
<p>public class JdbcTemplatedomo1 {</p>
<pre><code>public static void main(String[] args) {
    //3.准备数据源，spring内部数据源
    DriverManagerDataSource ds = new DriverManagerDataSource();
    ds.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver &quot;);
    ds.setUrl(&quot;jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&quot;);
    ds.setUsername(&quot;root&quot;);
    ds.setPassword(&quot;zhao1314520&quot;);

    //1.创建对象jdbcTemplate
    JdbcTemplate jdbcTemplate = new JdbcTemplate();
    //4.给jdbcTemplate设置数据源
    jdbcTemplate.setDataSource(ds);
    //2.执行操作
    jdbcTemplate.execute(&quot;insert into account(name,money)values(&apos;mmm&apos;,10000)&quot;);

}</code></pre><p>}</p>
 <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"> * 注意：MySQL8<span class="number">.0</span><span class="number">.18</span>版本中连接数据库</span><br><span class="line">    ds.setDriverClassName(<span class="string">"com.mysql.cj.jdbc.Driver "</span>);</span><br><span class="line">    ds.setUrl(<span class="string">"jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">####<span class="number">2.</span> 基于XML配置JdbcTemplate</span><br><span class="line">* xml配置文件</span><br></pre></td></tr></table></figure>
 <!--    配置JdbcTemplate模板-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!--配置Spring数据源--&gt;
&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>测试类</span><br></pre></td></tr></table></figure>

<p>public class JdbcTemplatedomo2 {</p>
<pre><code>public static void main(String[] args) {
 //1.获取容器
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);
    //2.获取对象
     JdbcTemplate jdbcTemplate = (JdbcTemplate) applicationContext.getBean(&quot;jdbcTemplate&quot;);
     //3.执行操作
    jdbcTemplate.execute(&quot;insert into account (name,money)values(&apos;zhao&apos;,10000)&quot;);

}</code></pre><p>}<br>  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">#### <span class="number">3.</span> JdbcTemplate的CRUD操作</span><br><span class="line">* 注意：Spring提供的封装工具,new BeanPropertyRowMapper&lt;Account&gt;(Account.<span class="keyword">class</span>)</span><br><span class="line">自定义<span class="symbol">AccountRowmapper</span>封装工具，实现接口 <span class="symbol">RowMapper</span>&lt;<span class="symbol">Account</span>&gt;</span><br></pre></td></tr></table></figure><br>//JdbcTemplate的CRUD操作<br>public class JdbcTemplatedomo3 {</p>
<pre><code>public static void main(String[] args) {
 //1.获取容器
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);
     JdbcTemplate jdbcTemplate = (JdbcTemplate) applicationContext.getBean(&quot;jdbcTemplate&quot;);
     //执行操作
    //保存
    //jdbcTemplate.update(&quot;insert into account (name,money)values(?,?)&quot;,&quot;艾尔提尔&quot;,10000f);
    //更新
    //jdbcTemplate.update(&quot;update account set name=?,money=? where id=?&quot;,&quot;阿尔提尔&quot;,8888f,5);
    //删除
   jdbcTemplate.update(&quot;delete from account where id=?&quot;,8);
    //查询所有
    //自定义
   // List&lt;Account&gt; accounts = jdbcTemplate.query(&quot;select * from account where money=?&quot;,new AccountRowmapper(),10000f);
    //spring提供,new BeanPropertyRowMapper&lt;Account&gt;(Account.class)
 List&lt;Account&gt; accounts = jdbcTemplate.query(&quot;select * from account where money=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),10000f);
    for(Account account : accounts){
        System.out.println(account);

    }
    //查询一个
    List&lt;Account&gt; accounts1 = jdbcTemplate.query(&quot;select * from account where id=?&quot;,new AccountRowmapper(),1);
    System.out.println(accounts1.isEmpty()?&quot;没有内容&quot;:accounts1.get(0));
    //查询一行一列（使用聚合函数，但不加ground子句）
    Long count1 = jdbcTemplate.queryForObject(&quot;select count(*) from account where money&gt;?&quot;,Long.class,1000f);
    System.out.println(count1);

}</code></pre><p>}<br> /*</p>
<ul>
<li><p>自定义Account的封装工具类</p>
</li>
<li><p>*/<br>class AccountRowmapper implements RowMapper<Account>{</p>
<p>public Account mapRow(ResultSet resultSet, int i) throws SQLException {</p>
<pre><code>/*
* 把结果集中的数据封装到Account中，然后由Spring把每个Account加到集合中
* */
Account  account =new Account();
account.setId(resultSet.getInt(&quot;id&quot;));
account.setName(resultSet.getString(&quot;name&quot;));
account.setMoney(resultSet.getFloat(&quot;money&quot;));
return account;</code></pre><p>}<br>}</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### <span class="number">4.</span> Dao层操作</span><br><span class="line">* XML配置</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"></p>
<!--    配置Dao-->
<bean id="accountDaoId" class="com.zhao.dao.impl.AccountImpl">
   <property name="jdbcTemplate" ref="jdbcTemplate"></property> 
</bean>
<!--    配置JdbcTemplate-->
<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="dataSource"></property>
</bean>
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
    <property name="url" value="jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai"></property>
    <property name="username" value="root"></property>
    <property name="password" value="zhao1314520"></property>
</bean>
</beans>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>实现类</span><br></pre></td></tr></table></figure>
/*
* 账户持久层实现类
* */
public class AccountImpl implements IAccountDao {

<p>private JdbcTemplate jdbcTemplate;</p>
<p>public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {</p>
<pre><code>this.jdbcTemplate = jdbcTemplate;</code></pre><p>}</p>
</li>
</ul>
<pre><code>public Account findAccountById(Integer accountId) {
    List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where id=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountId);
    return accounts.isEmpty()?null:accounts.get(0);

}



public Account findAccountName(String accountName) {
    List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where name=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountName);
    if(accounts.isEmpty()){
        return null;
    }
    if(accounts.size()&gt;1){
        throw new RuntimeException(&quot;结果集不唯一&quot;);
    }
    return accounts.get(0);
}




public void updateAccount(Account account) {
    String sql =&quot;update account set name=?,money=? where id=?&quot;;
    Object[] obj ={account.getName(),account.getMoney(),account.getId()};
    getJdbcTemplate().update(sql,obj);
}</code></pre><p>}<br> <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>测试类</span><br></pre></td></tr></table></figure><br>public class JdbcTemplatedomo4 {</p>
<pre><code>public static void main(String[] args) {

    ApplicationContext applicationContext =new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);
    IAccountDao iAccountDao = applicationContext.getBean(&quot;accountDaoId&quot;, IAccountDao.class);
    Account account = iAccountDao.findAccountById(1);
    System.out.println(account);

    account.setMoney(40000f);
    iAccountDao.updateAccount(account);

}</code></pre><p>}<br> <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### <span class="number">5.</span> 多个Dao 方式一：提取自定义代码方式</span><br><span class="line"><span class="number">1.</span> 公共类</span><br></pre></td></tr></table></figure><br>/*</p>
<ul>
<li>用于抽取Dao中的重复代码</li>
<li>注意get|set方法</li>
<li>*/</li>
</ul>
<p>public class jdbcDaoSupport {<br>    private JdbcTemplate jdbcTemplate;</p>
<pre><code>public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
    this.jdbcTemplate = jdbcTemplate;
}

public JdbcTemplate getJdbcTemplate() {
    return jdbcTemplate;
}

//private DataSource dataSource;

public void setDateSource(DataSource dataSource) {
   // this.dataSource = dataSource;
    if(jdbcTemplate == null){
        jdbcTemplate = createJdbcTemplate(dataSource);
    }
}
private JdbcTemplate createJdbcTemplate(DataSource dataSource){
    return new JdbcTemplate(dataSource);
}</code></pre><p>}<br> <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 实现类</span><br></pre></td></tr></table></figure><br>/*</p>
<ul>
<li><p>账户持久层实现类</p>
</li>
<li><p>继承 jdbcDaoSupport</p>
</li>
<li><p>*/<br>public class AccountImpl extends jdbcDaoSupport implements IAccountDao {</p>
<p>  public Account findAccountById(Integer accountId) {</p>
<pre><code>List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where id=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountId);
return accounts.isEmpty()?null:accounts.get(0);</code></pre><p>  }</p>
</li>
</ul>
<pre><code>public Account findAccountName(String accountName) {
    List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where name=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountName);
    if(accounts.isEmpty()){
        return null;
    }
    if(accounts.size()&gt;1){
        throw new RuntimeException(&quot;结果集不唯一&quot;);
    }
    return accounts.get(0);
}


public void updateAccount(Account account) {
    String sql =&quot;update account set name=?,money=? where id=?&quot;;
    Object[] obj ={account.getName(),account.getMoney(),account.getId()};
    getJdbcTemplate().update(sql,obj);
}</code></pre><p>}<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">3. </span>XML配置</span><br><span class="line"><span class="bullet">* </span>公共类中含有数据源</span><br><span class="line"><span class="bullet">* </span>可取消下面代码</span><br></pre></td></tr></table></figure><br> <!--    配置JdbcTemplate--><br>    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"><br>        <property name="dataSource" ref="dataSource"></property><br>    </bean>–&gt;<br> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    配置Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDaoId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.dao.impl.AccountImpl"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--        &lt;property name="jdbcTemplate" ref="jdbcTemplate"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    配置JdbcTemplate</span></span><br><span class="line"><span class="comment">    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="6-多个Dao-方式二：继承Spring-JdbcDaoSupport类"><a href="#6-多个Dao-方式二：继承Spring-JdbcDaoSupport类" class="headerlink" title="6.  多个Dao 方式二：继承Spring  JdbcDaoSupport类"></a>6.  多个Dao 方式二：继承Spring  JdbcDaoSupport类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.support.JdbcDaoSupport;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 账户持久层实现类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = getJdbcTemplate().query(<span class="string">"select * from account where id=?"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">accountId</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> accounts.isEmpty()?<span class="keyword">null</span>:accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountName</span><span class="params">(String accountName)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = getJdbcTemplate().query(<span class="string">"select * from account where name=?"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">accountName</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span>(accounts.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(accounts.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> accounts.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        String sql =<span class="string">"update account set name=?,money=? where id=?"</span>;</span><br><span class="line">        Object[] obj =&#123;account.getName(),account.getMoney(),account.getId()&#125;;</span><br><span class="line">        getJdbcTemplate().update(sql,obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>spring框架-一</title>
    <url>/2019/11/03/spring%E6%A1%86%E6%9E%B6-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="知识点一："><a href="#知识点一：" class="headerlink" title="知识点一："></a>知识点一：</h3><ol>
<li>4+1   4个核心（beans core context expression）+1个依类（commons-logins..jar）</li>
</ol>
<p>！<a href="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572031281077&di=19f3b40cfe98239b9a176702be5a0cd8&imgtype=0&src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-07d0fdbd0f685bc90d59abe2a976eb41_b.jpg" target="_blank" rel="noopener" title="Spring的jar包">Spring</a></p>
<ol start="2">
<li>IO  控制反转 由Spring配置文件beans.xml完成创建对象的过程</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.service.UserSercice"</span>&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;<span class="regexp">/bean&gt;</span></span><br></pre></td></tr></table></figure>
<p>DI Dependency Injection 依赖注入 在service写一个属性 有get、set方法 在bean.xml中配置属性<br>    其内部执行相当于 new创建对象 调用set方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖注入调用属性的Set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接口指向实现类（实现类也可以）实例化<br>依赖：一个类需要另一个类<br>注入：set方法设置值</p>
<h3 id="知识点二："><a href="#知识点二：" class="headerlink" title="知识点二："></a>知识点二：</h3><p>Spring加载beans.xml 的三种方式：</p>
<ol>
<li><p>方式1.？加载beans.xml配置文件（ApplicationContext 容器）<br>ClassPath：指的是classes路径</p>
<pre><code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</code></pre></li>
<li><p>方式2.文件系统路径获取配置文件</p>
<pre><code>ApplicationContext context1 = new FileSystemXmlApplicationContext(&quot;G:\\IDEA\\Spring_Domo\\spring01\\src\\beans.xml&quot;);</code></pre></li>
</ol>
<p>3.// 方式3.     使用BeanFactory（了解）<br>        String path =”G:\IDEA\Spring_Domo\spring01\src\beans.xml”;<br>        BeanFactory factory = new XmlBeanFactory(new FileSystemResource(path));</p>
<p>  //2.从spring容器中获取对象<br>        IuserSercice userSercice = (IuserSercice) context.getBean(“userService”);<br>        userSercice.add();</p>
<h3 id="知识点三："><a href="#知识点三：" class="headerlink" title="知识点三："></a>知识点三：</h3><ol>
<li>ApplicationContext和BeanFactory比较</li>
<li>BeanFactory 采用延时加载，第一次getBean时才会初始化Bean</li>
<li>ApplicationContext 及时加载</li>
</ol>
<h3 id="知识点四："><a href="#知识点四：" class="headerlink" title="知识点四："></a>知识点四：</h3><h5 id="装配Bean的三种方式"><a href="#装配Bean的三种方式" class="headerlink" title="装配Bean的三种方式"></a>装配Bean的三种方式</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--装配Bean的三种方式，--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一种   new实现类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService1"</span> <span class="attr">class</span>=<span class="string">"com.zhao.service.UserSercice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    第二种方式 通过静态工厂方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService2"</span> <span class="attr">class</span>=<span class="string">"com.zhao.service.UserServiceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createUserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    第三种方式 通过实例工厂方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory2"</span> <span class="attr">class</span>=<span class="string">"com.zhao.service.UserServiceFactory1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService3"</span> <span class="attr">factory-bean</span>=<span class="string">"factory2"</span> <span class="attr">factory-method</span>=<span class="string">"createUserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Lensson1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//new对象</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//      classPath 类路径加载</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans1.xml"</span>);</span><br><span class="line">        IuserSercice userService1 = (IuserSercice) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        userService1.<span class="keyword">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        静态工厂</span></span><br><span class="line">        IuserSercice userSercice2 =UserServiceFactory.createUserService();</span><br><span class="line">        userSercice2.<span class="keyword">add</span>();</span><br><span class="line"></span><br><span class="line">        ApplicationContext context1 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans1.xml"</span>);</span><br><span class="line">        IuserSercice userService3 = (IuserSercice) context1.getBean(<span class="string">"userService2"</span>);</span><br><span class="line">        userService3.<span class="keyword">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        实例工厂</span></span><br><span class="line"><span class="comment">//        1.创建工厂</span></span><br><span class="line"><span class="comment">//        UserServiceFactory1 factory2 = new UserServiceFactory1();</span></span><br><span class="line"><span class="comment">//        IuserSercice userService4 = factory2.createUserService();</span></span><br><span class="line"><span class="comment">//        userService4.add();</span></span><br><span class="line"></span><br><span class="line">        ApplicationContext context3 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans1.xml"</span>);</span><br><span class="line"></span><br><span class="line">        IuserSercice userSercice4 = (IuserSercice) context3.getBean(<span class="string">"userService3"</span>);</span><br><span class="line">        userSercice4.<span class="keyword">add</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二种静态工厂"><a href="#第二种静态工厂" class="headerlink" title="第二种静态工厂"></a>第二种静态工厂</h3><pre><code>public class UserServiceFactory {

    public static IuserSercice createUserService(){

        return new UserSercice();
    }
}</code></pre><h4 id="第三种工厂类"><a href="#第三种工厂类" class="headerlink" title="第三种工厂类"></a>第三种工厂类</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceFactory1</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IuserSercice <span class="title">createUserService</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserSercice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="装配Bean基于XML"><a href="#装配Bean基于XML" class="headerlink" title="装配Bean基于XML"></a>装配Bean基于XML</h4><h4 id="1-默认构造"><a href="#1-默认构造" class="headerlink" title="1. 默认构造"></a>1. 默认构造</h4><pre><code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;&lt;\bean&gt;</code></pre><h4 id="2-静态工厂（Spring整合）"><a href="#2-静态工厂（Spring整合）" class="headerlink" title="2. 静态工厂（Spring整合）"></a>2. 静态工厂（Spring整合）</h4><p>常用语Spring整合其他框架<br>静态工厂：用于生产实例，方法必须static</p>
<pre><code>&lt;bean id=&quot;&quot; class=&quot;工厂全限定名&quot; factory-method=&quot;方法名&quot;&gt;&lt;\bean&gt;</code></pre><p>Spring之前创建静态工厂的方法</p>
<ol>
<li><p>工厂类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建工厂</span></span><br><span class="line">    <span class="comment">//    spring 之创建用工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserSercice <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserSercice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    spring 之前调用工厂方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">domo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserSercice userSercice = MyBeanFactory.createService();</span><br><span class="line">        userSercice.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Spring创建静态工厂方法</p>
</li>
<li><p>beans.xml文件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  将静态工厂创建的实例交于Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.zhao.bean_static_factory.MyBeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">domo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Spring工厂</span></span><br><span class="line">       <span class="comment">//String xmlPath="com/zhao/bean_static_factory/beans.xml";</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zhao/bean_static_factory/beans.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      getBean 参数二类型，不需要强转</span></span><br><span class="line"><span class="comment">//      UserSercice userSercice1 =(UserService) applicationContext.getBean("userService");</span></span><br><span class="line">        UserSercice userSercice1 = applicationContext.getBean(<span class="string">"userService"</span>,UserSercice<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        userSercice1.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h4><p>Spring之前创建工厂的方法</p>
</li>
<li><p>工厂类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建工厂（实例工厂）</span></span><br><span class="line">    <span class="comment">//    spring 之创建用工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserSercice <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserSercice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    spring 之前调用工厂方法</span></span><br><span class="line"><span class="comment">//    自定义工厂</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">domo01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        1.创建工厂</span></span><br><span class="line">        MyBeanFactory myBeanFactory = <span class="keyword">new</span> MyBeanFactory();</span><br><span class="line">        <span class="comment">//2.通过工厂实例，获取对象</span></span><br><span class="line">        UserSercice userSercice = myBeanFactory.createService();</span><br><span class="line">        userSercice.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Spring创建工厂方法</p>
</li>
<li><p>beans.xml文件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    将工厂创建的实例交于Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanFactory"</span> <span class="attr">class</span>=<span class="string">"com.zhao.bean_factory.MyBeanFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    获得UserService--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span>  <span class="attr">factory-bean</span>=<span class="string">"myBeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">domo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Spring工厂</span></span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zhao/bean_factory/beans.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      getBean 参数二类型，不需要强转</span></span><br><span class="line"><span class="comment">//      UserSercice userSercice1 =(UserService) applicationContext.getBean("userService");</span></span><br><span class="line">        UserSercice userSercice1 = applicationContext.getBean(<span class="string">"userServiceId"</span>, UserSercice<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        userSercice1.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="bean的种类"><a href="#bean的种类" class="headerlink" title="bean的种类"></a>bean的种类</h3></li>
<li><p>普通bean： <bean id="" class="A"> spring 直接创建A实例，并返回</p>
</li>
<li><p>FactoryBean：是一个特殊的bean，具有工厂生产对象的能力，只能生产特定的对象<br>bean必须实现FactoryBean接口，此接口提供方法getObject()用于<br>获得特定的对象(bean)<br><bean id="" class="FB">先创建FB实例，使用调用getObject()方法，并返回方法的返回值<br>底层调用方法：<br> FB fb = new FB();<br> return fb,getObject();</p>
</li>
<li><p>BeanFactory 和 FactoryBean 比较</p>
<ul>
<li>BeanFactory: 工厂，用于生产任意bean</li>
<li>FactoryBean：特殊bean，用于生产特殊的bean<br>例如：ProxyFactoryBean 此工厂bean用于生产代理<br><bean id="" class="...ProxyFactoryBean"> 获取代理对象的实例，AOP使用<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3></li>
</ul>
</li>
</ol>
<ul>
<li><p>singleton： 单例 默认值；</p>
</li>
<li><p>prototype:  多例,每执行一次getBean将获得一个实例，select单例，struts2的Action为多例</p>
</li>
<li><p>配置信息</p>
</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">    &lt;bean id=<span class="string">""</span> <span class="keyword">class</span>=<span class="string">""</span>&gt;</span><br><span class="line"><span class="comment">//scope="prototype" 多例</span></span><br><span class="line">    &lt;bean id=<span class="string">"userService"</span> <span class="keyword">class</span>=<span class="string">"com.zhao.scop.UserSercice"</span> scope=<span class="string">"prototype"</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h3 id="生命周期（11步）"><a href="#生命周期（11步）" class="headerlink" title="生命周期（11步）"></a>生命周期（11步）</h3><ul>
<li><p>初始化和销毁</p>
<ul>
<li>目标方法执行前和执行后，将执行初始化或销毁</li>
<li>beans.xml<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">""</span> <span class="attribute">class</span>=<span class="string">""</span> <span class="attribute">init-method</span>=<span class="string">"初始化方法"</span>      <span class="attribute">destory-method</span>=<span class="string">"销毁方法名称"</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"userService"</span> <span class="attribute">class</span>=<span class="string">"com.zhao.lifecycle.UserSercice"</span> <span class="attribute">init-method</span>=<span class="string">"myInit"</span> <span class="attribute">destroy-method</span>=<span class="string">"myDestory"</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>调用方法</p>
<pre><code>public class Testlifecycle {</code></pre></li>
</ul>
<pre><code>    @Test
    public void domo02() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {

        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao/lifecycle/beans.xml&quot;);
        UserSercice userSercice = applicationContext.getBean(&quot;userService&quot;,UserSercice.class);

        userSercice.add();

        //要求：1.容器必须close，执行销毁方法
        applicationContext.getClass().getMethod(&quot;close&quot;).invoke(applicationContext);
        //applicationContext.close();
    }
}</code></pre><ul>
<li>BeanPostProcessor 后处理bean<ul>
<li>Spring 提供一种机制，只要实现此接口BeanPostprocessor，并将实现类提供该Spring容器，Spring容器将自动执行，在初始化方法前执行before(),在初始化方法后执行after()</li>
<li>Spring 提供工厂钩子，用于修改实例对象，可以生成代理对象，是AOP的底层</li>
</ul>
</li>
</ul>
<p>后处理类：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> myPostProcessor implements BeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">Object</span> postProcessBeforeInitialization(<span class="keyword">Object</span> bean, String beanName) throws BeansException &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("前处理"+beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">Object</span> postProcessAfterInitialization(<span class="keyword">Object</span> bean, String beanName) throws BeansException &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("后处理"+beanName);</span><br><span class="line">        //bean目标对象 bean.getClass().getInterfaces()</span><br><span class="line">//        生成JDK代理 Proxy JDK工具类  myPostProcessor.<span class="keyword">class</span>.getClassLoader()当前类的类加载器</span><br><span class="line">//        <span class="built_in">new</span> InvocationHandler() 处理程序</span><br><span class="line">        //<span class="keyword">return</span> bean;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(myPostProcessor.<span class="keyword">class</span>.getClassLoader(),</span><br><span class="line">                bean.getClass().getInterfaces(),</span><br><span class="line">                <span class="built_in">new</span> InvocationHandler() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="built_in">public</span> <span class="keyword">Object</span> invoke(<span class="keyword">Object</span> proxy, <span class="keyword">Method</span> <span class="keyword">method</span>, <span class="keyword">Object</span>[] args) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">System</span>.<span class="keyword">out</span>.println("开启事务处理方法");</span><br><span class="line">                        //执行目标方法</span><br><span class="line">                        <span class="keyword">Object</span> <span class="keyword">object</span> = <span class="keyword">method</span>.invoke(bean);</span><br><span class="line">                        <span class="keyword">System</span>.<span class="keyword">out</span>.println("提交事务处理方法");</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">object</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> benas.xml<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">     &lt;bean id=<span class="string">"userServiceId"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.lifecycle.UserSercice"</span> init-method=<span class="string">"myInit"</span> destroy-method=<span class="string">"myDestory"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line">&lt;!--    将后处理的的实现类注册给Spring--&gt;</span><br><span class="line">    &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.lifecycle.myPostProcessor"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testlifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">domo02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zhao/lifecycle/beans.xml"</span>);</span><br><span class="line"></span><br><span class="line">        IuserSercice  userSercice = (IuserSercice) applicationContext.getBean(<span class="string">"userServiceId"</span>);</span><br><span class="line"></span><br><span class="line">        userSercice.add();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要求：1.容器必须close，执行销毁方法</span></span><br><span class="line">        applicationContext.getClass().getMethod(<span class="string">"close"</span>).invoke(applicationContext);</span><br><span class="line">        <span class="comment">//applicationContext.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   错误信息： org.springframework.beans.factory.BeanNotOfRequiredTypeException</p>
<p>   注入spring的bean 出现的，具体是由于spring采用代理的机制导致的<br>   解决方法：(注意此处接口指向)</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">I<span class="keyword">user</span>Sercice  <span class="keyword">user</span>Sercice = (I<span class="keyword">user</span>Sercice) applicationContext.getBean(<span class="string">"userServiceId"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="属性依赖注入"><a href="#属性依赖注入" class="headerlink" title="属性依赖注入"></a>属性依赖注入</h3><ul>
<li><p>Setter方法注入</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>普通数据：&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"pname"</span> value=<span class="string">"阿尔提尔"</span>&gt;&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line"><span class="number">2.</span>字标签&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"pname"</span> &gt;</span><br><span class="line">    &lt;value&gt;v阿尔提尔&lt;/value&gt;</span><br><span class="line">&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">注意：<span class="number">1</span>和<span class="number">2</span>是等效的</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"pesonId"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.setter.peson"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"pname"</span> value=<span class="string">"阿尔提尔"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">    &lt;property name=<span class="string">"age"</span> value=<span class="string">"24"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;property name=<span class="string">"coperAddrs"</span> ref=<span class="string">"coperAddrId"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">    &lt;property name=<span class="string">"homeAddr"</span>&gt;</span><br><span class="line">        &lt;ref bean=<span class="string">"homeAddrId"</span>/&gt;</span><br><span class="line">    &lt;<span class="regexp">/property&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>bean&gt;</span><br><span class="line">&lt;!-- 引用数据--&gt;</span><br><span class="line">&lt;bean id=<span class="string">"homeAddrId"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.setter.Address"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"home"</span> value=<span class="string">"重庆"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">    &lt;property name=<span class="string">"tel"</span> value=<span class="string">"13993216246"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/bean&gt;</span></span><br><span class="line"><span class="regexp">&lt;bean id="coperAddrId" class="com.zhao.setter.Address"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;property name="home" value="城管"&gt;&lt;/</span>property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"tel"</span> value=<span class="string">"18522536924"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/bean&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="P命名空间【了解】"><a href="#P命名空间【了解】" class="headerlink" title="P命名空间【了解】"></a>P命名空间【了解】</h4><ul>
<li>对setter方法注入进行简化，替换<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"属性名"</span>&gt;</span><br></pre></td></tr></table></figure>
而是在&lt;bean p:属性名=”普通值” p:属性名 -ref=”引用值”&gt;</li>
<li>P命名空间使用前提必须添加命名空间<br>xmlns:p=”<a href="http://www.springframework.org/schema/p&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/p&quot;</a></li>
</ul>
<p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--    p命名空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pesonId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.p.peson"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:pname</span>=<span class="string">"阿尔提尔"</span> <span class="attr">p:age</span>=<span class="string">"22"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:coperAddrs-ref</span>=<span class="string">"coperAddrId"</span> <span class="attr">p:homeAddr-ref</span>=<span class="string">"homeAddrId"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"homeAddrId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.p.Address"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:home</span>=<span class="string">"重庆"</span> <span class="attr">p:tel</span>=<span class="string">"13993216246"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"coperAddrId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.p.Address"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:home</span>=<span class="string">"城管"</span> <span class="attr">p:tel</span>=<span class="string">"18522536924"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SpEL【了解】"><a href="#SpEL【了解】" class="headerlink" title="SpEL【了解】"></a>SpEL【了解】</h3><ul>
<li>对<property>进行统一编程所有的内容都是用value<property name="" value="#{表达式}">
eg：#{123} #{"jack"}
  #{beanId}          :另一个bean的引用
  #{bean.propName}   :操作属性
  #{bean.toString()} :执行方法
  #{T(类)字段|方法}   ：静态方法或字段

</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--    </span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">peoperty</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;userId.name.toUpperCase()&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        通过另一个bean，获得属性，调用方法</span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">peoperty</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;userId.name?.toUpperCase()&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ?.表示对象不为空，调用方法   </span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.SpEl.User"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;'阿尔提尔'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pi"</span> <span class="attr">value</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;T(java.lang.<span class="keyword">Math</span>).PI&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h3> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    集合的注入都是给&lt;peoperty&gt;添加字标签</span></span><br><span class="line"><span class="comment">    数组：&lt;array&gt;</span></span><br><span class="line"><span class="comment">    List：&lt;list&gt;</span></span><br><span class="line"><span class="comment">    Set：&lt;set&gt;</span></span><br><span class="line"><span class="comment">    Map：&lt;map&gt;  键值对&lt;entry&gt;</span></span><br><span class="line"><span class="comment">    Properties：&lt;props&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    普通数据：&lt;value&gt;</span></span><br><span class="line"><span class="comment">    引用数据：&lt;ref&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.coll.CollDate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arryData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DZD<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>屌丝<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>吊中吊<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"listData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DZD<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>屌丝<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>吊中吊<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"setData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>屌丝<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>吊中吊<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"jack"</span> <span class="attr">value</span>=<span class="string">"杰克"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>kaer<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>卡尔<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propsData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"高富帅nao"</span>&gt;</span>嫐<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"白富美niao"</span>&gt;</span>嬲<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"男屌丝nong"</span>&gt;</span>挊<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  ``` </span><br><span class="line"></span><br><span class="line">### 装配Bean基于注解</span><br><span class="line">* 注解：就是一个类，使用@注解名称</span><br><span class="line">* 开发中:使用注解 取代XML配置文件</span><br><span class="line">1. @Component 取代 ```<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure>
<pre><code>@Component(&quot;id&quot;) 取代 ```&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;```</code></pre><ol start="2">
<li>web开发，提供3个@Component注解的衍生注解(功能一样) 取代<code>&lt;bean class=&quot;&quot;&gt;</code><br> @Repository  dao层<br> @service     service层<br> @Controller  web层</li>
<li>依赖注入  给私有字段设置 也可以给setter方法设置<br> 普通值：@value(“”)<br> 引用值：<pre><code>方式一：按照【类型】注入
        @Autowired  【自动】
方式二：按照【名称】注入1
        @Autowired 
        @Qualifier(&quot;名称&quot;)
方式三：按照【名称】注入2
        @Resource(&quot;名称&quot;)</code></pre></li>
<li>生命周期<br> 初始化：@PostConstruct<br> 销毁： @PreDestroy</li>
<li>作用域<br> @Scope(“prototype”)多例</li>
</ol>
<h5 id="注解使用前提，添加命名空间，让Spring扫描含有注解的类"><a href="#注解使用前提，添加命名空间，让Spring扫描含有注解的类" class="headerlink" title="注解使用前提，添加命名空间，让Spring扫描含有注解的类"></a>注解使用前提，添加命名空间，让Spring扫描含有注解的类</h5><p>schema命名空间</p>
<ol>
<li>默认命名空间<br> 默认 xmlns=””; &lt;标签名&gt; <bean><br> 显示：xmlns：别名=”” &lt;别名：标签名&gt; <a href="context:...." target="_blank" rel="noopener">context:....</a></li>
<li>确定schema.xsd 文件位置<br> xsl:schemaLocaltion=”名称 位置 名称2 位置2 …..”;<br> 内容都是成对的【名称 位置】</li>
</ol>
<ul>
<li>添加的分别是：</li>
</ul>
<ol>
<li>xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context&quot;</a></li>
<li><a href="http://www.springframework.org/schema/context" target="_blank" rel="noopener">http://www.springframework.org/schema/context</a></li>
<li><a href="http://www.springframework.org/schema/context/spring-context.xsd" target="_blank" rel="noopener">http://www.springframework.org/schema/context/spring-context.xsd</a></li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;beans <span class="attribute">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:<span class="attribute">xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:<span class="attribute">context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:<span class="attribute">schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>beans.xml配置组建扫描，扫描含有注解的类<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    组建扫描，扫描含有注解的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zhao.annotation_IOC"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>测试类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testweb</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zhao/Web/beans.xml"</span>);</span><br><span class="line">        StudentAction studentAction =  applicationContext.getBean(<span class="string">"studentActionId"</span>,StudentAction<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        studentAction.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>web层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Controller</span>(<span class="string">"studentActionId"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        studentService.addStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>service 层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"studentDaoId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentDao</span><span class="params">(StudentDao studentDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        studentDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>dao层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Repository</span>(<span class="string">"studentDaoId"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
