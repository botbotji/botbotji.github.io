<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端知识点归纳之vue+微信小程序</title>
    <url>/2020/06/19/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9%E5%BD%92%E7%BA%B3%E4%B9%8Bvue-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="v-show-和-v-if-的区别及应用场景"><a href="#v-show-和-v-if-的区别及应用场景" class="headerlink" title="v-show 和 v-if 的区别及应用场景"></a>v-show 和 v-if 的区别及应用场景</h3><ul>
<li>相同点：v-show 和 v-if 都能对元素控制其显示和隐藏；</li>
<li>不同点：<ol>
<li>v-if 是通过控制 DOM 节点的存在与否来控制元素的显隐;<br>v-show 是通过设置 Dom 节点元素的 display 样式，block 为显示，none 为隐藏;</li>
<li>编译过程：v-if 切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重建内部的事件监听和子组件;v-show 只是简单的基于 css 的切换;</li>
<li>编译条件:<ul>
<li>v-if 是惰性的，如果初始化条件为 false，则什么都不会做；只有在条件第一次为 true 时才开始局部编译(编译被缓存？编译被缓存后，然后再切换的时候进行局部卸载);</li>
<li>v-show 是在任何条件下(首次条件是否为真)都会被编译，然后被缓存，而且 DOM 元素保留</li>
</ul>
</li>
<li>性能消耗：v-if 有更高的切换消耗；v-show 有更高的初始渲染消耗；</li>
<li>v-if 有配套的 v-else-if 和 v-else，而 v-show 没有</li>
<li>v-if 可以搭配 template 使用，而 v-show 不行</li>
</ol>
</li>
<li>应用场景：<ul>
<li>非常频繁的切换 则使用 v-show 较好(v-if 会添加和删除 DOM 节点);</li>
<li>如果在运行时条件很少改变，则使用 v-if 较好。</li>
</ul>
</li>
<li>小结：<ul>
<li>v-if 判断是否加载，可以减轻服务器的压力，在需要时加载,但有更高的切换开销，比如单页面应用;</li>
<li>v-show 调整 DOM 元素的 CSS 的 dispaly 属性，可以使客户端操作更加流畅，但有更高的初始渲染开销。如果需要非常频繁地切换，则使用 v-show 较好，tab 中使用较好；</li>
</ul>
</li>
</ul>
<h3 id="微信小程序开发-实践案例"><a href="#微信小程序开发-实践案例" class="headerlink" title="微信小程序开发 - 实践案例"></a>微信小程序开发 - 实践案例</h3><ul>
<li>总结 1：对于单体应用小程序，比如 员工系统（只有登录，没得注册，首页出现登录界面的情况），2019 年 7 月份微信官方对于其做出调整;导致提交审核无法通过，<ul>
<li>解决方案：在登陆页添加微信用户授权，完成用户交互 ===》可解决</li>
<li>注意：以上这种小程序在审核时要提交测试账号及密码，完成微信官方的审核</li>
<li>页面出现空数据的情况,微信审核是不通过的，<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">//button按钮 获取用户授权 注意要有：<span class="keyword">open</span>-<span class="keyword">type</span>="getUserInfo" 这个属性, 获取用户信息的事件：bindgetuserinfo="bindGetUserInfo"</span><br><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">'conf-button'</span> <span class="keyword">open</span>-<span class="keyword">type</span>="getUserInfo" bindgetuserinfo="bindGetUserInfo"&gt;登录&lt;/button&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//js处理逻辑 通过bindGetUserInfo事件的浏览器传过来的event对象，获取用户昵称</span></span><br><span class="line"><span class="comment">//如果昵称存在调用登录方法</span></span><br><span class="line"><span class="comment">//否则弹窗提示</span></span><br><span class="line">bindGetUserInfo (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.detail.userInfo)</span><br><span class="line">    <span class="keyword">if</span>(e.detail.userInfo.nickName )&#123;</span><br><span class="line">    <span class="keyword">this</span>.loginTap()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        wx.showModal(&#123;</span><br><span class="line">        title: <span class="string">'用户授权提示'</span>,</span><br><span class="line">        content: <span class="string">'请您授权！'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//登录方法</span></span><br><span class="line">loginTap: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">    wx.showLoading(&#123;</span><br><span class="line">    title: <span class="string">'请稍后'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">    url: getApp().data.mainURL + getApp().apis.userLogin,</span><br><span class="line">    method: <span class="string">"POST"</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        empno: <span class="keyword">this</span>.data.empno,</span><br><span class="line">        password: <span class="keyword">this</span>.data.passwd</span><br><span class="line">    &#125;,</span><br><span class="line">    header: &#123;</span><br><span class="line">        <span class="string">'content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    complete: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.data.state == <span class="string">"ok"</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> userinfo = res.data.obj</span><br><span class="line">        <span class="built_in">console</span>.log(userinfo)</span><br><span class="line">        that.getVillagerInfo(userinfo.empno)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wx.setStorageSync(<span class="string">'userinfo'</span>, userinfo)</span><br><span class="line">            wx.setStorageSync(<span class="string">'islogin'</span>, <span class="literal">true</span>)</span><br><span class="line">            wx.setStorageSync(<span class="string">'userid'</span>, userinfo.empno)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(e)</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            wx.hideLoading()</span><br><span class="line">            wx.navigateBack()</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wx.showLoading(&#123;</span><br><span class="line">            title: res.data.msg</span><br><span class="line">        &#125;)</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            wx.hideLoading()</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="订阅消息"><a href="#订阅消息" class="headerlink" title="订阅消息"></a>订阅消息</h4><ul>
<li>模板消息官网：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/template-message.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/template-message.html</a></li>
<li>2020 年 1 月份微信去掉了模板消息，换成了模板消息</li>
<li>之前模板消息，是通过 formId 通过后台发出模板消息的</li>
<li>页面的 form 组件，属性 report-submit 为 true 时，可以声明为需要发送模板消息，此时点击按钮提交表单可以获取 formId，用于发送模板消息。或者当用户完成 支付行为，可以获取 prepay_id 用于发送模板消息。</li>
</ul>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> bindsubmit=<span class="string">"btntap"</span> <span class="keyword">report</span>-submit&gt;&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>这里要取消 report-submit 这个属性,否则会有报错</li>
<li></li>
</ul>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">//注意这里this指向问题</span><br><span class="line">//requestSubscribeMessage 用到页面对象中的属性或方法就可以  const context = this 这种方式</span><br><span class="line">wx.requestSubscribeMessage(&#123;</span><br><span class="line">tmplIds: [''],</span><br><span class="line"><span class="keyword">success </span>(res) &#123; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="小程序页面选择某一天某一刻，页面及-js-的执行逻辑"><a href="#小程序页面选择某一天某一刻，页面及-js-的执行逻辑" class="headerlink" title="小程序页面选择某一天某一刻，页面及 js 的执行逻辑"></a>小程序页面选择某一天某一刻，页面及 js 的执行逻辑</h3><h3 id="微信小程序开发注意"><a href="#微信小程序开发注意" class="headerlink" title="微信小程序开发注意"></a>微信小程序开发注意</h3><h4 id="维护旧项目注意点"><a href="#维护旧项目注意点" class="headerlink" title="维护旧项目注意点"></a>维护旧项目注意点</h4><ul>
<li>维护旧项目，在添加需求的时候，要从首页起阅读源码，判断其执行逻辑与流程，若直接进入添加需求的页面。可能导致项目需求没得完成；</li>
<li>案例：在一个应用程序中存在多个页面，通过不同的请求与情况跳转，当你只修改一个页面时，某个测试账号功能实现了，但是对于其他账号就会存在问题，没有达到用户需求的页面</li>
</ul>
<h4 id="菜鸟注意点"><a href="#菜鸟注意点" class="headerlink" title="菜鸟注意点"></a>菜鸟注意点</h4><ul>
<li>注意小程序的网络协议时 https,当你在开发环境，开启合法域名,web-view(业务域名)，TLS 版本以及 HTTPS 证书的时候，运行项目没得问题，但是上线之后程序出现没法登录等问题，网络请求没得到位，菜鸟注意点</li>
</ul>
<h3 id="vue-的实例方法-reader"><a href="#vue-的实例方法-reader" class="headerlink" title="vue 的实例方法 reader"></a>vue 的实例方法 reader</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">body&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Vue 选项中的 render 函数若存在，则 Vue 构造函数不会从 template 选项或通过 el 选项指定的挂载元素中提取出的 HTML 模板编译渲染函数。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// reander 功能体现于template差不多，但是实现方式不同 他是方法 返回DOM节点</span></span></span><br><span class="line"><span class="actionscript">            render:<span class="function"><span class="keyword">function</span><span class="params">(createElement)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> element = createElement(<span class="string">"h1"</span>,<span class="literal">null</span>,<span class="string">'第二个参数代表属性，第三个参数代表渲染内容'</span>);</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> element;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="脚手架构建项目-main-js-使用-vue-实例中不使用-reader-方法，而使用-template-的方法"><a href="#脚手架构建项目-main-js-使用-vue-实例中不使用-reader-方法，而使用-template-的方法" class="headerlink" title="脚手架构建项目 main.js 使用 vue 实例中不使用 reader 方法，而使用 template 的方法"></a>脚手架构建项目 main.js 使用 vue 实例中不使用 reader 方法，而使用 template 的方法</h3><ul>
<li>官网详细说明：<a href="https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A</a></li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">//要使用<span class="keyword">template</span> 就要使用完整版的脚手架 vue-cli  <span class="string">'vue/dist/vue.esm.js'</span> 包括编译器 和运行时的环境</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue/dist/vue.esm'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">new</span> Vue(&#123;</span><br><span class="line">el:"#app",</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>:`</span><br><span class="line">    &lt;div&gt;hello&lt;/div&gt;</span><br><span class="line">`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//直接使用<span class="keyword">template</span>会报错 解决办法使用 完整版的脚手架</span><br></pre></td></tr></table></figure>

<ul>
<li>执行成功：启动项目 npm run serve 访问 localhost:8080 得到渲染结果 hello</li>
<li>main.js</li>
</ul>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简写方式</span></span><br><span class="line"> <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">   render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line"> &#125;).<span class="symbol">$mou</span>nt(<span class="string">'#app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//基础写法</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#app"</span>,</span><br><span class="line">render:<span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createElement(App)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>App.js</li>
</ul>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">//原始的写法</span><br><span class="line"><span class="title">let</span> obj= &#123;</span><br><span class="line"><span class="class"><span class="keyword">data</span>()&#123;</span></span><br><span class="line"><span class="class">    <span class="title">return</span>&#123;</span></span><br><span class="line"><span class="class">    <span class="title">msg</span>:"自测<span class="title">vue</span>的单文件组件"</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">export</span> <span class="keyword">default</span> obj</span><br><span class="line"></span><br><span class="line">//简写</span><br><span class="line"><span class="title">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">     <span class="class"><span class="keyword">data</span>()&#123;</span></span><br><span class="line"><span class="class">    <span class="title">return</span>&#123;</span></span><br><span class="line"><span class="class">    <span class="title">msg</span>:"自测<span class="title">vue</span>的单文件组件"</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全局组件在-main-js-中注册"><a href="#全局组件在-main-js-中注册" class="headerlink" title="全局组件在 main.js 中注册"></a>全局组件在 main.js 中注册</h4><ul>
<li>注意：全局组件的样式可能影响页面元素的样式，如果组件和页面都有 class=”XXX”属性，全局组件的样式优先级高，解决方法在全局组件的样式 style 标签上添加 scoped 属性</li>
</ul>
<h3 id="事件总线-页面之间数据传递-适合小项目"><a href="#事件总线-页面之间数据传递-适合小项目" class="headerlink" title="事件总线 页面之间数据传递 适合小项目"></a>事件总线 页面之间数据传递 适合小项目</h3><ul>
<li>创建空的 vue 实例作为参数传递 局部</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="regexp">// 事件总线 公共的作为参数传递</span></span><br><span class="line"><span class="regexp">//</span><span class="keyword">export</span> <span class="keyword">const</span> EventBus = <span class="keyword">new</span> Vue()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure>

<ul>
<li>$emit()发送数据</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">   &lt;li @click=<span class="string">"menu1"</span>&gt;笔记本电脑&lt;/li&gt;</span><br><span class="line">    &lt;li @click=<span class="string">"menu2"</span>&gt;手机&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    script&gt;</span><br><span class="line">    import Event from <span class="string">'./event.js'</span></span><br><span class="line">    export <span class="keyword">default</span> &#123;</span><br><span class="line">        methods:&#123;</span><br><span class="line">            menu1:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Event.$emit(<span class="string">"val"</span>,<span class="string">"1"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            menu2:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Event.$emit(<span class="string">"val"</span>,<span class="string">"2"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>$on()接受数据</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Event <span class="keyword">from</span> <span class="string">'./event.js'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> goodlist <span class="keyword">from</span> <span class="string">'./goodlist.vue'</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            kk:0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    <span class="comment">//局部的事件总线要用指定的 mounted 这个方法接收处理</span></span></span><br><span class="line"><span class="actionscript">    mounted:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> _this = <span class="keyword">this</span></span></span><br><span class="line"><span class="actionscript">        Event.$on(<span class="string">'val'</span>,<span class="function"><span class="keyword">function</span><span class="params">(m)</span></span>&#123;</span></span><br><span class="line">            _this.kk = m</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        goodlist</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="开发技巧-在几个标签出现一样的属性-在-vue-中可在外面添加-template，不用框架可将其放在-div-中"><a href="#开发技巧-在几个标签出现一样的属性-在-vue-中可在外面添加-template，不用框架可将其放在-div-中" class="headerlink" title="开发技巧 在几个标签出现一样的属性 在 vue 中可在外面添加 template，不用框架可将其放在 div 中"></a>开发技巧 在几个标签出现一样的属性 在 vue 中可在外面添加 template，不用框架可将其放在 div 中</h3><ul>
<li>案例：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-prev"</span> v-show=<span class="string">"navigation"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-next"</span> v-show=<span class="string">"navigation"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line">&lt;!-- 页面中出现两个一样的属性可能引起页面混乱，处理方法在外面加一个div 在vue中加template --&gt;</span><br><span class="line">&lt;!-- 将公共的属性添加到template中即可 --&gt;</span><br><span class="line">&lt;template v-show=<span class="string">"navigation"</span>&gt;</span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-prev"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-next"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="生命周期的钩子函数-create"><a href="#生命周期的钩子函数-create" class="headerlink" title="生命周期的钩子函数 create"></a>生命周期的钩子函数 create</h3><ul>
<li>create 钩子函数 ==》 实例已经创建完成之后被调用</li>
<li>这时可以调用 vue 实例中的数据和各种方法，发送网络请求，但是还不能对”dom”节点进行操作</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送网络请求</span></span><br><span class="line">  create: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// create钩子函数 ==》 实例已经创建完成之后被调用</span></span><br><span class="line">    <span class="comment">// 这时可以调用vue实例中的数据和各种方法，发送网络请求，但是还不能对"dom"节点进行操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化完成</span></span><br><span class="line">    <span class="comment">// jQuery请求</span></span><br><span class="line">    $.<span class="keyword">get</span>(<span class="string">"url"</span>, <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 发送ajax请求</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: <span class="string">""</span>,</span><br><span class="line">      method: <span class="string">"GET"</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="comment">//  请求头</span></span><br><span class="line">      &#125;,</span><br><span class="line">      success(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="props-中自定义组件的属性"><a href="#props-中自定义组件的属性" class="headerlink" title="props 中自定义组件的属性"></a>props 中自定义组件的属性</h3><ul>
<li>注意:类型是数组或对象===》默认值必须从一个工厂函数获取</li>
<li>同时你也可以自定义函数验证，函数中编辑自己逻辑代码处理单元</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 带有默认值的对象</span></span><br><span class="line">   propE: &#123;</span><br><span class="line">     type: Object,</span><br><span class="line">     <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">     <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> &#123; message: <span class="string">'hello'</span> &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 自定义验证函数</span></span><br><span class="line">   propF: &#123;</span><br><span class="line">     validator: <span class="function"><span class="keyword">function</span> <span class="params">(value)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">       <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="对于-v-for-循环，要注意的是-key-”index”-如果忘记就会报错"><a href="#对于-v-for-循环，要注意的是-key-”index”-如果忘记就会报错" class="headerlink" title="对于 v-for 循环，要注意的是:key=”index” 如果忘记就会报错"></a>对于 v-for 循环，要注意的是:key=”index” 如果忘记就会报错</h3><ul>
<li>注意：仔细阅读官网：<a href="https://cn.vuejs.org/v2/guide/list.html" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/list.html</a></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 常用的写法，遍历数组 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in arraysList"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="全局的-API"><a href="#全局的-API" class="headerlink" title="全局的 API"></a>全局的 API</h3><ul>
<li>Vue.extend(options) 创建 Vue 的构造器</li>
<li>使用基础 vue 构造器，创建一个子类。</li>
<li>参数:options ==&gt; {Object} 对象类型 ==》包含组件选项的对象。</li>
<li>data 选型是特例，需要注意的是，在 Vue.extend()中他必须是函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">"mount-point"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"><span class="keyword">var</span> Profile = Vue.extend(&#123; <span class="attr">template</span>:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;p&gt;&#123;&#123;irstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">data：<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        firstName:<span class="string">'Walter'</span>,</span><br><span class="line">        lastname：<span class="string">'white'</span>,</span><br><span class="line">        alias:<span class="string">'Heisenberg'</span></span><br><span class="line">        &#125; &#125; &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建profile实例，并挂载到一个元素上new</span></span><br><span class="line">Profile().$mount(<span class="string">'#mount-point'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Vue-使用技巧，之-v-if"><a href="#Vue-使用技巧，之-v-if" class="headerlink" title="Vue 使用技巧，之 v-if"></a>Vue 使用技巧，之 v-if</h3><ul>
<li>有的时候去发送 ajax 请求后获取数据，当组件在数据之前渲染出来导致页面残缺,处理方法就可以在组件加上 v-if 判断,<br>如果请求的数据封装在数组中，就可使用 v-if=”bannerlist.lenght &gt; 0”来处理</li>
</ul>
<h3 id="eslint-代码检测"><a href="#eslint-代码检测" class="headerlink" title="eslint 代码检测"></a>eslint 代码检测</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR  Failed to compile with 1 errors</span><br><span class="line">3 This relative module was not found:</span><br></pre></td></tr></table></figure>

<ul>
<li>上面这个报错，路径写错了，比如：文件的首字母是大写，你引入的时候用的是小写…</li>
<li>不能有分号结尾</li>
<li>不能用双引号</li>
<li>实用格式化工具 prettier VScode 插件==》在脚手架项目中创建 prettier.config.js 文件配置一些规则</li>
</ul>
<ul>
<li>prettier.config.js</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//prettier 格式化配置文件</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    semi: false, //不需要分号</span><br><span class="line">    singleQuote: true //使用单引号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="微信小程序之内嵌网页-webview"><a href="#微信小程序之内嵌网页-webview" class="headerlink" title="微信小程序之内嵌网页(webview)"></a>微信小程序之内嵌网页(webview)</h3><ul>
<li><p>官方介绍:</p>
<ul>
<li><p>承载网页的容器。会自动铺满整个小程序页面，个人类型的小程序不支持使用。</p>
</li>
<li><p>微信的基础库自 1.6.4 开始，就内嵌了一个<web-view>组件来连接我们的 HTML 页面</p>
</li>
<li><p>具体开发流程：</p>
<ol>
<li>登录小程序平台管理后台页面，进入“设置” =&gt; “开发设置”，配置业务域名(注意：你需要在弹出的窗口里下载“校验文件”，并把这个校验文件上传到你的网站的根目录，供小程序平台进行验证，验证通过了才能成功添加域名。)</li>
<li><web-view>总是自动铺满整个页面，且每个页面只能有一个<web-view>，它会覆盖其他组件。也就是说，没有办法实现小程序界面组件和<web-view>页面混排的情况，这点要注意。</li>
<li>页面跳转:利用微信的 JSSDK，使用它提供的方法来实现相关跳转功能</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html代码中引入JS SDK --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://res.wx.qq.com/open/js/jweixin-1.3.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 跳转到小程序的一个页面</span></span></span><br><span class="line"><span class="actionscript">wx.miniProgram.navigateTo(&#123;url: <span class="string">'/path/to/page'</span>&#125;)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>前端知识点归纳</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架VUE-插件状态管理器vuex</title>
    <url>/2020/06/19/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6VUE-%E6%8F%92%E4%BB%B6%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%99%A8vuex/</url>
    <content><![CDATA[<h3 id="vue-x"><a href="#vue-x" class="headerlink" title="vue-x"></a>vue-x</h3><ul>
<li>使用步骤</li>
</ul>
<ol>
<li>下载</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vuex</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 src 下面创建 store/index.js 文件,仓库的配置文件</li>
<li>需要在 main.js 中引入第 2 步中暴露出来的仓库的实例对象。并配置在 new Vue()的地方，通过 store 选项配置。</li>
</ol>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 仓库 引入vue</span><br><span class="line">import Vue <span class="keyword">from</span> 'vue'</span><br><span class="line"></span><br><span class="line">// <span class="number">2</span>. 引入vuex</span><br><span class="line">import Vuex <span class="keyword">from</span> 'vuex'</span><br><span class="line"></span><br><span class="line">// <span class="number">3</span>.调用vuex</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">// <span class="number">4</span>. 实例化 Vuex 仓库的实例对象</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">// 配置 <span class="keyword">state</span> - 存放的是仓库的数据</span><br><span class="line">// 可以将项目的所有数据都放在仓库的<span class="keyword">state</span>中</span><br><span class="line">// 一般不这样做，存放在仓库的<span class="keyword">state</span>中的是需要共享的数据</span><br><span class="line"><span class="keyword">state</span>: &#123;</span><br><span class="line">    // 商品数据集合</span><br><span class="line">    goods: [</span><br><span class="line">    &#123; id: <span class="number">1</span>, name: 'Apple', price: <span class="number">10</span> &#125;,</span><br><span class="line">    &#123; id: <span class="number">2</span>, name: 'Banana', price: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; id: <span class="number">3</span>, name: 'Orange', price: <span class="number">30</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    // 购物车数据集合</span><br><span class="line">    cars: [</span><br><span class="line">    &#123; id: <span class="number">1</span>, name: 'Apple', price: <span class="number">10</span> &#125;,</span><br><span class="line">    &#123; id: <span class="number">2</span>, name: 'Banana', price: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; id: <span class="number">3</span>, name: 'Orange', price: <span class="number">30</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line">// getters - store 的计算属性， 可以对<span class="keyword">state</span>中的数据或者其余getter数据做二次计算，并返回一份新数据</span><br><span class="line">//   <span class="number">1</span>. 他能修改什么？？ 不能修改</span><br><span class="line">//   <span class="number">2</span>. 它是根据依赖性的变化自动变化的。</span><br><span class="line">//   <span class="number">3</span>. 每个 getter 都会自动接收到 <span class="keyword">state</span> 参数，这个参数就是当前仓库实例对象的 <span class="keyword">state</span> 数据</span><br><span class="line">//   <span class="number">4</span>. 必须要有返回值</span><br><span class="line">getters: &#123;</span><br><span class="line">    goodNum (<span class="keyword">state</span>) &#123;</span><br><span class="line">    return <span class="keyword">state</span>.goods.length</span><br><span class="line">    &#125;,</span><br><span class="line">    carNum (<span class="keyword">state</span>) &#123;</span><br><span class="line">    return <span class="keyword">state</span>.cars.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">// mutations - 里面存放的是 mutations, mutatin 是唯一能修改仓库 <span class="keyword">state</span> 的数据的地方</span><br><span class="line">//    <span class="number">1</span>. 只能同步修改</span><br><span class="line">//    <span class="number">2</span>. 自动接收第一个参数，就是<span class="keyword">state</span></span><br><span class="line">//    <span class="number">3</span>. 第二个参数就是调用时，传递过来的payload</span><br><span class="line">mutations: &#123;</span><br><span class="line">    /**</span><br><span class="line">    * 添加商品到购物车</span><br><span class="line">    */</span><br><span class="line">    addCar (<span class="keyword">state</span>, payload) &#123;</span><br><span class="line">    console.<span class="keyword">log</span>('添加商品到购物车', payload)</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">    * 移除购物车中的商品</span><br><span class="line">    */</span><br><span class="line">    delCar (<span class="keyword">state</span>) &#123;</span><br><span class="line">    console.<span class="keyword">log</span>('移除购物车中的商品')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">// actions - 里面存放的是 action,action 是可以异步去修改 <span class="keyword">state</span> 数据的地方，但是它并不能直接修改 <span class="keyword">state</span> 数据,</span><br><span class="line">// 而是在里面调用了 某个mutation</span><br><span class="line">actions: &#123;</span><br><span class="line">    // 异步添加购物车中的某个商品</span><br><span class="line">    addCarAsync () &#123;</span><br><span class="line">    console.<span class="keyword">log</span>('异步添加购物车中的某个商品')</span><br><span class="line">    &#125;,</span><br><span class="line">    delCarAsync () &#123;</span><br><span class="line">    console.<span class="keyword">log</span>('异步移除购物车中的某个商品')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// <span class="number">5</span>. 导出</span><br><span class="line">export <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<h3 id="store"><a href="#store" class="headerlink" title="$store"></a>$store</h3><blockquote>
<p>使用了 vuex 之后,自动绑定到 vue 实例上的数据，这个数据就是当前 vuex 仓库的实例对象</p>
</blockquote>
<h3 id="如何将仓库中的-state-数据拿到组件中使用"><a href="#如何将仓库中的-state-数据拿到组件中使用" class="headerlink" title="如何将仓库中的 state 数据拿到组件中使用"></a>如何将仓库中的 state 数据拿到组件中使用</h3><ol>
<li>this.$store.state.xxx 的方式(不推荐)</li>
<li>通过计算属性 computed 去取出仓库中的数据,(计算属性的值不允许修改,vuex 中的 state 属性数据也不允许修改…),注意：修改会报错的！</li>
</ol>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>商品页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="xml">        v-for="item in goods"</span></span><br><span class="line"><span class="xml">        :key="item.id"</span></span><br><span class="line"><span class="xml">    &gt;</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;item.id&#125;&#125;</span><span class="xml"> - </span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"> - </span><span class="template-variable">&#123;&#123;item.price&#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">export default &#123;</span></span><br><span class="line"><span class="xml">// 计算属性</span></span><br><span class="line"><span class="xml">computed: &#123;</span></span><br><span class="line"><span class="xml">    goods () &#123;</span></span><br><span class="line"><span class="xml">    // 取出仓库中的goods的数据返回该当前组件</span></span><br><span class="line"><span class="xml">    return this.$store.state.goods</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">created () &#123;</span></span><br><span class="line"><span class="xml">    // 初始化完成的生命周期钩子函数</span></span><br><span class="line"><span class="xml">    // this.$store 就是vuex中仓库中的数据</span></span><br><span class="line"><span class="xml">    console.log('--------------')</span></span><br><span class="line"><span class="xml">    console.log(this.$store)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>mapState() 这个辅助函数的方式(推荐)<ul>
<li>效果与上面的一致</li>
</ul>
</li>
</ol>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物车页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="xml">        v-for="item in goods"</span></span><br><span class="line"><span class="xml">        :key="item.id"</span></span><br><span class="line"><span class="xml">    &gt;</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;item.id&#125;</span><span class="xml">&#125; - </span><span class="template-variable">&#123;&#123;item.name&#125;</span><span class="xml">&#125; - </span><span class="template-variable">&#123;&#123;item.price&#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">import </span><span class="template-variable">&#123; mapState &#125;</span><span class="xml"> from 'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 使用mapState</span></span><br><span class="line"><span class="xml">export default </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">computed: mapState(['goods'])</span></span><br><span class="line"><span class="template-variable">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>展开运算符(…) ++在存在要使用多个 computed 的时候(每个组件只能有一个)</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">computend: &#123;</span><br><span class="line">    ...map([<span class="string">'goods'</span>]),</span><br><span class="line">    fullName () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstname + <span class="string">''</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="如何将仓库中的-getter-数据拿到组件中使用"><a href="#如何将仓库中的-getter-数据拿到组件中使用" class="headerlink" title="如何将仓库中的 getter 数据拿到组件中使用"></a>如何将仓库中的 getter 数据拿到组件中使用</h3><ol>
<li>this.$store.getters.xxx 的方式(不推荐)</li>
<li>通过 computed 去取出仓库中的 getter 的数据(推荐)</li>
<li>使用 mapGetters()辅助函数</li>
</ol>
<ul>
<li>具体用法与 state 基本一致</li>
</ul>
<h3 id="如何修改仓库中的-state-的数据"><a href="#如何修改仓库中的-state-的数据" class="headerlink" title="如何修改仓库中的 state 的数据"></a>如何修改仓库中的 state 的数据</h3><ol>
<li>this.$store.commit(‘Mutation 的名字’,payload)<ul>
<li>提交载荷（Payload）: 可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）</li>
</ul>
</li>
</ol>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    f<span class="symbol">n1</span> <span class="comment">()</span> &#123;</span><br><span class="line">    this.$store.commit<span class="comment">('addCar', 123)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</li>
</ol>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">// 这个对应的是mapMutations</span><br><span class="line"> <span class="variable">&lt;button @click="addInsert(item.id)"&gt;</span>+&lt;/button&gt;</span><br><span class="line">// 这个对应的是fn1这个方法</span><br><span class="line"><span class="variable">&lt;button @click="fn1(item.id)"&gt;</span>+&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"> // 注意：mapMutations 作用于 methods</span><br><span class="line"> methods: &#123;</span><br><span class="line">   ...mapMutations('addInsert', <span class="number">123</span>),</span><br><span class="line">   fn1 () &#123;</span><br><span class="line">     this.<span class="variable">$store</span>.commit('addInsert', <span class="number">123</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  addInsert (<span class="keyword">state</span>, payload) &#123;</span><br><span class="line">     console.<span class="keyword">log</span>('添加商品到购物车', payload)</span><br><span class="line">     // <span class="number">1</span>. 取出要添加到数据</span><br><span class="line">     const msg = <span class="keyword">state</span>.cars.find(item =&gt; item.id === payload)</span><br><span class="line">     console.<span class="keyword">log</span>(msg)</span><br><span class="line">     // 将这个 msg 添加到 inserts中 ...msg (...展开符号，下面push中的意思就是，展开msg这个常量属性，并为其添加两个属性,浅拷贝的方式)</span><br><span class="line">     <span class="keyword">state</span>.inserts.push(&#123; ...msg, num: <span class="number">1</span>, total: <span class="number">10</span> &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>案例：完成购物车效果</li>
<li>购物车页</li>
</ul>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物车页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hgroup</span>&gt;</span>详情信息表单<span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>名字<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>单价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>总价<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">tr</span></span></span></span><br><span class="line"><span class="xml">        v-for="car in inserts"</span></span><br><span class="line"><span class="xml">        :key="car.id"</span></span><br><span class="line"><span class="xml">        &gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123; car.id&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123; car.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123; car.price&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123; car.num&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><span class="template-variable">&#123;&#123; car.total&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>全部价格:</span><span class="template-variable">&#123;&#123; insertTotal &#125;&#125;</span><span class="xml">元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">import &#123; mapState, mapGetters &#125; from 'vuex'</span></span><br><span class="line"><span class="xml">export default &#123;</span></span><br><span class="line"><span class="xml">computed: &#123;</span></span><br><span class="line"><span class="xml">    ...mapState(['inserts']),</span></span><br><span class="line"><span class="xml">    /**</span></span><br><span class="line"><span class="xml">    * reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</span></span><br><span class="line"><span class="xml">    * reduce() 可以作为一个高阶函数，用于函数的 compose。</span></span><br><span class="line"><span class="xml">    * 注意: reduce() 对于空数组是不会执行回调函数的。</span></span><br><span class="line"><span class="xml">    */</span></span><br><span class="line"><span class="xml">    // 计算总价的方法：</span></span><br><span class="line"><span class="xml">    // 方式1：在计算属性中，不改变属性的值，的新的属性</span></span><br><span class="line"><span class="xml">    // insertTotal () &#123;</span></span><br><span class="line"><span class="xml">    //   return this.inserts.reduce((total, item) =&gt; &#123;</span></span><br><span class="line"><span class="xml">    //     return total + item.total</span></span><br><span class="line"><span class="xml">    //   &#125;, 0)</span></span><br><span class="line"><span class="xml">    // &#125;</span></span><br><span class="line"><span class="xml">    // 方式2：在vuex的仓库中的 getters 属性</span></span><br><span class="line"><span class="xml">    ...mapGetters(['insertTotal'])</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>商品页</li>
</ul>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>商品页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hgroup</span>&gt;</span>数量:</span><span class="template-variable">&#123;&#123; carNum &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="xml">        v-for="item in cars"</span></span><br><span class="line"><span class="xml">        :key="item.id"</span></span><br><span class="line"><span class="xml">    &gt;</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123;item.id&#125;&#125;</span><span class="xml"> - </span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"> - </span><span class="template-variable">&#123;&#123;item.price&#125;&#125;</span><span class="xml"> - <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addInsert(item.id)"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">import &#123; mapState, mapGetters, mapMutations &#125; from 'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 使用mapState</span></span><br><span class="line"><span class="xml">export default &#123;</span></span><br><span class="line"><span class="xml">computed: &#123;</span></span><br><span class="line"><span class="xml">    ...mapState(['cars']),</span></span><br><span class="line"><span class="xml">    // carNum () &#123;</span></span><br><span class="line"><span class="xml">    //   return this.$store.getters.carNum</span></span><br><span class="line"><span class="xml">    // &#125;,</span></span><br><span class="line"><span class="xml">    ...mapGetters(['carNum'])</span></span><br><span class="line"><span class="xml">&#125;,</span></span><br><span class="line"><span class="xml">// 注意：mapMutations 作用于 methods</span></span><br><span class="line"><span class="xml">methods: &#123;</span></span><br><span class="line"><span class="xml">    ...mapMutations(['addInsert'])</span></span><br><span class="line"><span class="xml">    // fn1 (id) &#123;</span></span><br><span class="line"><span class="xml">    //   this.$store.commit('addCar', id)</span></span><br><span class="line"><span class="xml">    // &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>vuex 状态管理器 store</li>
</ul>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 仓库 引入vue</span><br><span class="line">import Vue <span class="keyword">from</span> 'vue'</span><br><span class="line"></span><br><span class="line">// <span class="number">2</span>. 引入vuex</span><br><span class="line">import Vuex <span class="keyword">from</span> 'vuex'</span><br><span class="line"></span><br><span class="line">// <span class="number">3</span>.调用vuex</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">// <span class="number">4</span>. 实例化 Vuex 仓库的实例对象</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">// 配置 <span class="keyword">state</span> - 存放的是仓库的数据</span><br><span class="line">// 可以将项目的所有数据都放在仓库的<span class="keyword">state</span>中</span><br><span class="line">// 一般不这样做，存放在仓库的<span class="keyword">state</span>中的是需要共享的数据</span><br><span class="line"><span class="keyword">state</span>: &#123;</span><br><span class="line">    // 商品数据集合</span><br><span class="line">    goods: [</span><br><span class="line">    &#123; id: <span class="number">1</span>, name: 'Apple', price: <span class="number">10</span> &#125;,</span><br><span class="line">    &#123; id: <span class="number">2</span>, name: 'Banana', price: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; id: <span class="number">3</span>, name: 'Orange', price: <span class="number">30</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    // 购物车数据集合</span><br><span class="line">    cars: [</span><br><span class="line">    &#123; id: <span class="number">1</span>, name: 'Apple', price: <span class="number">10</span> &#125;,</span><br><span class="line">    &#123; id: <span class="number">2</span>, name: 'Banana', price: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; id: <span class="number">3</span>, name: 'Orange', price: <span class="number">30</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    // inserts: []</span><br><span class="line">    // 由于数据保存到本地内存，localStorage,页面加载如果本地内存存在数据就取本地内存(或数据库)的数据，不存在就该空数组</span><br><span class="line">    inserts: window.localStorage.getItem('inserts') ? JSON.parse(window.localStorage.getItem('inserts')) : []</span><br><span class="line">&#125;,</span><br><span class="line">// getters - store 的计算属性， 可以对<span class="keyword">state</span>中的数据或者其余getter数据做二次计算，并返回一份新数据</span><br><span class="line">//   <span class="number">1</span>. 他能修改什么？？ 不能修改</span><br><span class="line">//   <span class="number">2</span>. 它是根据依赖性的变化自动变化的。</span><br><span class="line">//   <span class="number">3</span>. 每个 getter 都会自动接收到 <span class="keyword">state</span> 参数，这个参数就是当前仓库实例对象的 <span class="keyword">state</span> 数据</span><br><span class="line">//   <span class="number">4</span>. 必须要有返回值</span><br><span class="line">getters: &#123;</span><br><span class="line">    goodNum (<span class="keyword">state</span>) &#123;</span><br><span class="line">    return <span class="keyword">state</span>.goods.length</span><br><span class="line">    &#125;,</span><br><span class="line">    carNum (<span class="keyword">state</span>) &#123;</span><br><span class="line">    return <span class="keyword">state</span>.cars.length</span><br><span class="line">    &#125;,</span><br><span class="line">    // 对于计算购物车总价 getters属性的方式</span><br><span class="line">    insertTotal (<span class="keyword">state</span>) &#123;</span><br><span class="line">    return <span class="keyword">state</span>.inserts.reduce((total, item) =&gt; &#123;</span><br><span class="line">        return total + item.total</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">// mutations - 里面存放的是 mutations, mutatin 是唯一能修改仓库 <span class="keyword">state</span> 的数据的地方</span><br><span class="line">//    <span class="number">1</span>. 只能同步修改</span><br><span class="line">//    <span class="number">2</span>. 自动接收第一个参数，就是<span class="keyword">state</span></span><br><span class="line">//    <span class="number">3</span>. 第二个参数就是调用时，传递过来的paylond</span><br><span class="line">mutations: &#123;</span><br><span class="line">    /**</span><br><span class="line">    * 添加商品到购物车</span><br><span class="line">    */</span><br><span class="line">    addCar (<span class="keyword">state</span>, payload) &#123;</span><br><span class="line">    console.<span class="keyword">log</span>('添加商品到购物车', payload)</span><br><span class="line">    // <span class="number">1</span>. 取出要添加到数据</span><br><span class="line">    // const msg = <span class="keyword">state</span>.goods.find(item =&gt; item.id === payload)</span><br><span class="line">    // console.<span class="keyword">log</span>(msg)</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">    * 移除购物车中的商品</span><br><span class="line">    */</span><br><span class="line">    delCar (<span class="keyword">state</span>) &#123;</span><br><span class="line">    console.<span class="keyword">log</span>('移除购物车中的商品')</span><br><span class="line">    &#125;,</span><br><span class="line">    addInsert (<span class="keyword">state</span>, payload) &#123;</span><br><span class="line">    console.<span class="keyword">log</span>('添加商品到购物车', payload)</span><br><span class="line">    // <span class="number">1</span>. 取出要添加到数据</span><br><span class="line">    const msg = <span class="keyword">state</span>.cars.find(item =&gt; item.id === payload)</span><br><span class="line">    console.<span class="keyword">log</span>(msg)</span><br><span class="line">    // <span class="number">2</span>. 判断当前数据是否已经在inserts中存在,如果存在在添加其数据导致key值重复报错！！！！</span><br><span class="line">    const index = <span class="keyword">state</span>.inserts.findIndex(item =&gt; item.id === payload)</span><br><span class="line">    if (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        // 存在</span><br><span class="line">        <span class="keyword">state</span>.inserts[index].num++</span><br><span class="line">        <span class="keyword">state</span>.inserts[index].total += msg.price</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 不存在</span><br><span class="line">        // 将这个 msg 添加到 inserts中 ...msg (...展开符号，下面push中的意思就是，展开msg这个常量属性，并为其添加两个属性,浅拷贝的方式)</span><br><span class="line">        <span class="keyword">state</span>.inserts.push(&#123; ...msg, num: <span class="number">1</span>, total: msg.price &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    // <span class="number">3</span>. 添加完成之后，将localStorage 保存到本地内存</span><br><span class="line">    // 注意：localStroage 不能存放数组，要json格式</span><br><span class="line">    window.localStorage.<span class="built_in">set</span>Item('insters', JSON.stringify(<span class="keyword">state</span>.insters))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">// actions - 里面存放的是 action,action 是可以异步去修改 <span class="keyword">state</span> 数据的地方，但是它并不能直接修改 <span class="keyword">state</span> 数据,</span><br><span class="line">// 而是在里面调用了 某个mutation</span><br><span class="line">actions: &#123;</span><br><span class="line">    // 异步添加购物车中的某个商品</span><br><span class="line">    addCarAsync () &#123;</span><br><span class="line">    console.<span class="keyword">log</span>('异步添加购物车中的某个商品')</span><br><span class="line">    &#125;,</span><br><span class="line">    delCarAsync () &#123;</span><br><span class="line">    console.<span class="keyword">log</span>('异步移除购物车中的某个商品')</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// <span class="number">5</span>. 导出</span><br><span class="line">export <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<h3 id="如何调用-action-呢？？？？？"><a href="#如何调用-action-呢？？？？？" class="headerlink" title="如何调用 action 呢？？？？？"></a>如何调用 action 呢？？？？？</h3><ul>
<li><p>action 类似于 mutation,不同在于：</p>
<ul>
<li>action 提交的是 mutation，而不是直接变更状态。</li>
<li>action 可以包含任意异步操作</li>
<li>action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getter 来获取 state 和 getters。</li>
<li>context 对象不是 store 实例本身。</li>
</ul>
</li>
<li><p>分发 Action</p>
<ul>
<li>Action 通过 store.dispatch 方法触发：<blockquote>
<p>store.dispatch(‘increment’)</p>
</blockquote>
</li>
</ul>
</li>
<li><p>注意的是:mutation 必须同步执行,action 内部执行异步操作：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    incrementASync (&#123; commit &#125;) &#123;</span><br><span class="line">        setTimeout (<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">            commit(<span class="string">'increment'</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    checkout (&#123; commit, <span class="keyword">state</span> &#125;,products) &#123;</span><br><span class="line">        const saveCarItems = [...<span class="keyword">state</span>.cart.added]</span><br><span class="line">        commit(type.CHECKOUT_REQUEST)</span><br><span class="line">        //购物 API 接受一个成功回调和一个失败的回调</span><br><span class="line">        shop.buyProducts(</span><br><span class="line">            products,</span><br><span class="line">            //成功</span><br><span class="line">            () =&gt; commit(type.CHECKOUT_SUCCESS),</span><br><span class="line">            () =&gt; commit(type.CHECKOUT_FAILURE,saveCartItems))</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>this.$store.dispatch(‘action 的名字’,playload)</li>
</ol>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">  methods:&#123;</span><br><span class="line">      fn1 (payload) &#123;</span><br><span class="line">      // 异步的vuex的actions</span><br><span class="line">      this.<span class="variable">$store</span>.dispatch('delCarAsync', payload)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">// store</span><br><span class="line">// actions - 里面存放的是 action,action 是可以异步去修改 <span class="keyword">state</span> 数据的地方，但是它并不能直接修改 <span class="keyword">state</span> 数据,</span><br><span class="line">// 而是在里面调用了 某个 mutation</span><br><span class="line">// actions 方法的参数</span><br><span class="line">// <span class="number">1</span>. 第一个参数，是自动接收的 context(上下文对象)对象</span><br><span class="line">// <span class="number">2</span>. 第二个参数，是 payload</span><br><span class="line">// <span class="number">3</span>. 可以实现异步的代码</span><br><span class="line">// <span class="number">4</span>. 要修改<span class="keyword">state</span> 的数据，其实是通过context.commmit()再去调用某个mutations</span><br><span class="line">actions: &#123;</span><br><span class="line">// 异步添加购物车中的某个商品</span><br><span class="line">addCarAsync (context, payload) &#123;</span><br><span class="line">console.<span class="keyword">log</span>('异步添加购物车中的某个商品', payload)</span><br><span class="line">&#125;,</span><br><span class="line">delCarAsync (context, payload) &#123;</span><br><span class="line">console.<span class="keyword">log</span>('异步移除购物车中的某个商品', payload)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过 mapActions 的辅助函数(推荐使用)</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">button</span> @<span class="keyword">click</span>="<span class="keyword">delCarAsync</span>(<span class="keyword">item</span>.<span class="keyword">id</span>)"&gt;-&lt;/<span class="keyword">button</span>&gt;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    ..<span class="selector-class">.mapActions</span>(<span class="selector-attr">['delCarAsync']</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：注意要对 state 中的数据进行 CRUD,必须要有 mutations,actions 异步执行也是通过调用 mutations 实现的。</li>
<li>在这里要把数据存储到数据库,就要请求后端的接口,这是异步操作就须在 actions 中完成</li>
<li>uni-app 中的代码片段</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    <span class="comment">// lazy loading openid</span></span><br><span class="line">    getUserOpenId: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        commit,</span></span></span><br><span class="line"><span class="function"><span class="params">        state</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.openid) &#123;</span><br><span class="line">                resolve(state.openid)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                uni.login(&#123;</span><br><span class="line">                    success: <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                        commit(<span class="string">'login'</span>)</span><br><span class="line">                        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//模拟异步请求服务器获取 openid</span></span><br><span class="line">                            <span class="keyword">const</span> openid = <span class="string">'123456789'</span></span><br><span class="line">                            <span class="built_in">console</span>.log(<span class="string">'uni.request mock openid['</span> + openid + <span class="string">']'</span>);</span><br><span class="line">                            commit(<span class="string">'setOpenid'</span>, openid)</span><br><span class="line">                            resolve(openid)</span><br><span class="line">                        &#125;, <span class="number">1000</span>)</span><br><span class="line">                    &#125;,</span><br><span class="line">                    fail: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'uni.login 接口调用失败，将无法正常使用开放接口等服务'</span>, err)</span><br><span class="line">                        reject(err)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Module-–》-Vuex-允许我们将-store-分割成模块（module）。"><a href="#Module-–》-Vuex-允许我们将-store-分割成模块（module）。" class="headerlink" title="Module –》 Vuex 允许我们将 store 分割成模块（module）。"></a>Module –》 Vuex 允许我们将 store 分割成模块（module）。</h3><ul>
<li>每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块</li>
</ul>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">import Vue <span class="keyword">from</span> 'vue'</span><br><span class="line">import Vuex <span class="keyword">from</span> 'vuex'</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">// 仓库模块A</span><br><span class="line">const moduleA = &#123;</span><br><span class="line"><span class="keyword">state</span>: &#123;</span><br><span class="line">    name: 'A'</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 仓库模块B</span><br><span class="line">const moduleB = &#123;</span><br><span class="line"><span class="keyword">state</span>: &#123;</span><br><span class="line">    name: 'B'</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">// <span class="keyword">state</span>:&#123;&#125;</span><br><span class="line">// 将<span class="keyword">state</span>数据都拆分到子模块中，那么我这个主模块还能不能有自己的<span class="keyword">state</span>？？？  可以</span><br><span class="line"><span class="keyword">state</span>: &#123;</span><br><span class="line">    name: '主'</span><br><span class="line">&#125;,</span><br><span class="line">modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<ul>
<li>如何访问子模块的 state 的数据？？？？<ol>
<li>this.$store.state.xxx 模块的名字.yy 数据</li>
<li>computed</li>
<li>mapState</li>
</ol>
</li>
</ul>
<ul>
<li><p>子模块中定义了相同名字的 getter 数据，发现报错</p>
<blockquote>
<p>报错: duplicate getter key: nameLength ?<br>原因是：子模块的 getter 数据，是挂载到全局的上面。<br>默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的——这样使得多个模块能够对同一 mutation 或 action 作 出响应。</p>
</blockquote>
<blockquote>
<p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。</p>
</blockquote>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">import Vue <span class="keyword">from</span> 'vue'</span><br><span class="line">import Vuex <span class="keyword">from</span> 'vuex'</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">// 仓库模块A</span><br><span class="line">const moduleA = &#123;</span><br><span class="line"><span class="keyword">state</span>: &#123;</span><br><span class="line">    name: '张仙人.....'</span><br><span class="line">&#125;,</span><br><span class="line">getters: &#123;</span><br><span class="line">    anameLength (<span class="keyword">state</span>) &#123;</span><br><span class="line">    return <span class="keyword">state</span>.name.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 仓库模块B</span><br><span class="line">const moduleB = &#123;</span><br><span class="line"><span class="keyword">state</span>: &#123;</span><br><span class="line">    name: 'B'</span><br><span class="line">&#125;,</span><br><span class="line">getters: &#123;</span><br><span class="line">    bnameLength (<span class="keyword">state</span>) &#123;</span><br><span class="line">    return <span class="keyword">state</span>.name.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">// <span class="keyword">state</span>:&#123;&#125;</span><br><span class="line">// 将<span class="keyword">state</span>数据都拆分到子模块中，那么我这个主模块还能不能有自己的<span class="keyword">state</span>？？？  可以</span><br><span class="line"><span class="keyword">state</span>: &#123;</span><br><span class="line">    name: '主'</span><br><span class="line">&#125;,</span><br><span class="line">getters: &#123;</span><br><span class="line">    nameLength (<span class="keyword">state</span>) &#123;</span><br><span class="line">    return <span class="keyword">state</span>.name.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line">// js</span><br><span class="line"><span class="variable">&lt;template&gt;</span></span><br><span class="line"><span class="variable">&lt;div id="app"&gt;</span></span><br><span class="line">    <span class="variable">&lt;h1&gt;</span>APP&lt;/h1&gt;</span><br><span class="line">    <span class="variable">&lt;p&gt;</span>全局的nameLength：&#123;&#123; nameLength &#125;&#125; &lt;/p&gt;</span><br><span class="line">    <span class="variable">&lt;p&gt;</span>A模块的name:&#123;&#123; name &#125;&#125; + 长度：&#123;&#123; anameLength &#125;&#125;&lt;/p&gt;</span><br><span class="line">    <span class="variable">&lt;p&gt;</span>B模块的name:&#123;&#123; b.name &#125;&#125; + &#123;&#123; bnameLength &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;script&gt;</span></span><br><span class="line">import &#123; mapState, mapGetters &#125; <span class="keyword">from</span> 'vuex'</span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">// 计算属性</span><br><span class="line">computed: &#123;</span><br><span class="line">    // 获得 module 的<span class="keyword">state</span></span><br><span class="line">    name () &#123;</span><br><span class="line">    return this.<span class="variable">$store</span>.<span class="keyword">state</span>.a.name</span><br><span class="line">    &#125;,</span><br><span class="line">    ...mapState(['b']),</span><br><span class="line">    ...mapGetters(['nameLength', 'anameLength', 'bnameLength'])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>[vuex] unknown getter: nameLength 这个报错就是 getters 这个单词写错了</p>
</blockquote>
<ul>
<li>注意：当在子模块中定义了相同的名字的 mutation 数据时，无报错，但是后续 commit 这个 mutation 时,都会被执行。</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">methods:</span> &#123;</span><br><span class="line">    ...mapMutations([<span class="string">'hello'</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 像这个他会掉用vuex状态管理器中所有的 hello  比如a模块和b模块的都有mutations&gt;hello 则这两个都会调用，有点象事件冒泡</span></span><br></pre></td></tr></table></figure>

<ul>
<li>actions 与 mutations 的(重名)相同的方法，都会调用; 而 getters 中(重名)相同的方法都会报错; state 通过模块名引用<ul>
<li>针对上面的问题：我们希望分出来的模块能够独立,这时就需要命名空间。</li>
</ul>
<ol>
<li>定义模块的时候，设置一个 namespaced: true 这时 …actions 与 mutations 的(重名)相同的方法…会报错，这样就限制重复调用同名方法的弊端<blockquote>
<p>报错信息: unknown mutation type: xxxx</p>
</blockquote>
</li>
<li>但是，上面报错没有达到我们的目的<br>(注意：这里模块添加 命名空间 namespaced: true )<ol>
<li>mutation<br>方式 1：this.$store.commit(‘模块名/mutation 的名字’)<br>方式 2：…mapMutations(‘模块名’, [‘mutation 的名字’])</li>
<li>action 与 mutation 操作一样</li>
</ol>
</li>
<li>getters 在加上命名空间时,使用 mapGetters(‘模块名’,[‘getter 的名字’]); 当然 state 也可以使用这种方法。</li>
</ol>
</li>
</ul>
<h3 id="表单处理-v-model-双向绑定"><a href="#表单处理-v-model-双向绑定" class="headerlink" title="表单处理 v-model 双向绑定"></a>表单处理 v-model 双向绑定</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;!-- 表单绑定 vuex仓库的数据 --&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"inputValue"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="comment">// 这里计算属性是不允许修改的</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapState([<span class="string">'inputValue'</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 若在input框中修改值就会报错，因为计算属性是不能修改的，而且仓库中的数据不能直接修改</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 报错信息：vue.runtime.esm.js?2b0e:619 [Vue warn]: Computed property "inputValue" was assigned to but it has no setter.</span></span><br></pre></td></tr></table></figure>

<ul>
<li>处理上面异常</li>
</ul>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="variable">&lt;template&gt;</span></span><br><span class="line"><span class="variable">&lt;div id="app"&gt;</span></span><br><span class="line"><span class="variable">&lt;!-- 表单绑定 vuex仓库的数据 --&gt;</span></span><br><span class="line"><span class="variable">&lt;input type="text" v-model="inputValue"&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;script&gt;</span></span><br><span class="line">// import &#123; mapMutations &#125; <span class="keyword">from</span> 'vuex'</span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">// 这里计算属性是不允许修改的</span><br><span class="line">computed: &#123;</span><br><span class="line">    // ...mapState(['inputValue']),</span><br><span class="line">    inputValue: &#123;</span><br><span class="line">    get () &#123;</span><br><span class="line">        return this.<span class="variable">$store</span>.<span class="keyword">state</span>.inputValue</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">set</span> (newVal) &#123;</span><br><span class="line">        // 提交突变 修改表单数据,仓库中的数据也相应改变</span><br><span class="line">        this.<span class="variable">$store</span>.commit('<span class="built_in">set</span>InputValue', newVal)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// store</span><br><span class="line">import Vue <span class="keyword">from</span> 'vue'</span><br><span class="line">import Vuex <span class="keyword">from</span> 'vuex'</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">// <span class="keyword">state</span>:&#123;&#125;</span><br><span class="line">// 将<span class="keyword">state</span>数据都拆分到子模块中，那么我这个主模块还能不能有自己的<span class="keyword">state</span>？？？  可以</span><br><span class="line"><span class="keyword">state</span>: &#123;</span><br><span class="line">    inputValue: 'hello'</span><br><span class="line">&#125;,</span><br><span class="line">// 通过 mutations 修改其值</span><br><span class="line">mutations: &#123;</span><br><span class="line">    <span class="built_in">set</span>InputValue (<span class="keyword">state</span>, payload) &#123;</span><br><span class="line">    <span class="keyword">state</span>.inputValue = payload</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>

<h3 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h3><ol>
<li>getters</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">    <span class="comment">// 参数 state 当前的state的数据，getters能拿到getters的数据, rootState能拿到根state的数据</span></span><br><span class="line">    hello (state, getters, rootState) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.xxx.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>mutatons</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">mutations:</span> &#123;</span><br><span class="line">    <span class="comment">// 只能设置2个参数, 需要设置多个参数，就设置plyload为对象的形式</span></span><br><span class="line">    fn1 (state, plyload) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外面调用</span></span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'xxx'</span>,&#123;<span class="string">a:</span><span class="string">'123'</span>&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>action</li>
</ol>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">actions: &#123;</span><br><span class="line">    fn1 (context, payload) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 需要设置多个参数，就设置plyload为对象的形式</span><br><span class="line">//外面使用</span><br><span class="line">this.<span class="variable">$store</span>.dispatch('xxx', &#123;&#125;)</span><br><span class="line">// 获取根<span class="keyword">state</span>的数据，就可以使用cotext.rootState获取到跟模块的<span class="keyword">state</span>的数据</span><br></pre></td></tr></table></figure>

<h3 id="记录一个报错"><a href="#记录一个报错" class="headerlink" title="记录一个报错"></a>记录一个报错</h3><blockquote>
<p>keys detected: ‘1’. This may cause an update error.</p>
</blockquote>
<ul>
<li>表示 key 之重复了,比如 v-for id 于 vuex mutations 属性添加数据导致 key 值重复</li>
</ul>
<h3 id="补充知识点-JavaScript-reduce-gt-累加器"><a href="#补充知识点-JavaScript-reduce-gt-累加器" class="headerlink" title="补充知识点 JavaScript reduce() ==&gt; 累加器"></a>补充知识点 JavaScript reduce() ==&gt; 累加器</h3><ul>
<li>定义和用法</li>
</ul>
<ol>
<li>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</li>
<li>reduce() 可以作为一个高阶函数，用于函数的 compose。</li>
<li>注意: reduce() 对于空数组是不会执行回调函数的。</li>
</ol>
<ul>
<li>案例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">65</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">total, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> total + num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = numbers.reduce(getSum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//125</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>前端框架VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架VUE+插件路由vue-router</title>
    <url>/2020/06/15/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6VUE-%E6%8F%92%E4%BB%B6%E8%B7%AF%E7%94%B1vue-router/</url>
    <content><![CDATA[<h3 id="vue-项目中使用-vue-router"><a href="#vue-项目中使用-vue-router" class="headerlink" title="vue 项目中使用 vue-router"></a>vue 项目中使用 vue-router</h3><ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vue-router</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在页面的某一位置选择一个坑，用来切换路由页面</li>
</ol>
<ul>
<li>在页面放置一个路由的坑，路由的视图，后续 url 地址匹配什么样的路由视图规则，所对应的路由页面组件，就会渲染这个位置<br><router-view></router-view></li>
</ul>
<ol start="3">
<li>在 src 下面创建一个 router.js 文件。这个文件去实例化 vue-router 的实例对象，并配置路由的规则。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//1. 引入Vue</span><br><span class="line">import Vue from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">//2. 引入vue-router</span><br><span class="line">import VueRouter from &quot;vue-router&quot;</span><br><span class="line"></span><br><span class="line">// 5. 引入需要用到的路由页面组件</span><br><span class="line">import PageA from &quot;./views/PageA.vue&quot;</span><br><span class="line">import PageA from &quot;./views/PageB.vue&quot;</span><br><span class="line"></span><br><span class="line">//3. vue-router 是vue的插件，需要使用Vue.use()方法去调用插件</span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line">//4. 定义路由规则  下面数组的第一项为添加默认选中的状态</span><br><span class="line">const routes = [</span><br><span class="line">    &#123;</span><br><span class="line">      //默认高亮显示</span><br><span class="line">       path: &apos;/&apos;,</span><br><span class="line">        component: PageA</span><br><span class="line">      //重定向</span><br><span class="line">      //redirect: &apos;相对路径&apos;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &apos;/a&apos;,</span><br><span class="line">        component: PageA</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: &apos;/b&apos;,</span><br><span class="line">        component: PageB</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">// 6. 实例化 vue-router</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">    routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 7. 暴露 实例对象</span><br><span class="line">export default router</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>需要在 main.js 中，new Vue()的地方，配置一个 router 选项，选项的值，就是第三步中暴露出来的路由的实例</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import router from &apos;./router&apos;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router: router,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure>

<ul>
<li>以上就完成了路由的配置及初步使用 <a href="http://localhost:8082/#/b" target="_blank" rel="noopener">http://localhost:8082/#/b</a> 访问 b 页面</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1&gt;我是App&lt;/h1&gt;</span><br><span class="line">  &lt;a href=&quot;/#/a&quot;&gt;A页面&lt;/a&gt;</span><br><span class="line">  &lt;a href=&quot;/#/b&quot;&gt;B页面&lt;/a&gt;</span><br><span class="line">  &lt;!-- router-link 路由的组件 相当于a标签的功能 --&gt;</span><br><span class="line">  &lt;router-link to=&quot;/a&quot;&gt;router-link++A页面&lt;/router-link&gt;</span><br><span class="line">  &lt;router-link to=&quot;/b&quot;&gt;router-link++B页面&lt;/router-link&gt;</span><br><span class="line">  &lt;!-- 在页面放置一个路由的坑，路由的视图，后续url地址匹配什么样的路由视图规则，所对应的路由页面组件，就会渲染这个位置 --&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="vue-router-插件的-rounter-link-组件编译后在浏览器显示的效果"><a href="#vue-router-插件的-rounter-link-组件编译后在浏览器显示的效果" class="headerlink" title="vue-router 插件的 rounter-link 组件编译后在浏览器显示的效果"></a>vue-router 插件的 rounter-link 组件编译后在浏览器显示的效果</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;a <span class="attribute">href</span>=<span class="string">"#/films/nowPlaying"</span> <span class="attribute">class</span>=<span class="string">"router-link-exact-active router-link-active"</span> <span class="attribute">aria-current</span>=<span class="string">"page"</span>&gt;电影&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：在鼠标选中这个 router-link 的时候他会多出两个属性 ==》router-link-exact-active 与 router-link-active</li>
<li>这样就可以修改他的选中高亮显示的效果</li>
</ul>
<h3 id="路由的初步使用导航栏"><a href="#路由的初步使用导航栏" class="headerlink" title="路由的初步使用导航栏"></a>路由的初步使用导航栏</h3><ul>
<li>App.vue</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 可变的路由坑 --&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-keng"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 不变的路由坑 --&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"tabbar"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 根据路由的页面router的路由规则，渲染页面 --&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/films/nowPlaying"</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/center"</span>&gt;</span>影院<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/cinemas"</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">export default </span><span class="xquery">&#123;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span></span></span><br><span class="line"><span class="xml">* </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">  margin: <span class="number">0</span>;</span></span><br><span class="line"><span class="xquery">  padding: <span class="number">0</span>;</span></span><br><span class="line"><span class="xquery">&#125;</span></span><br><span class="line"><span class="xml">html,</span></span><br><span class="line"><span class="xml">body </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">  height: <span class="number">100</span>%;</span></span><br><span class="line"><span class="xquery">&#125;</span></span><br><span class="line"><span class="xml">#app </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">  height: <span class="number">100</span>%;</span></span><br><span class="line"><span class="xquery">  // background: #ff5777;</span></span><br><span class="line"><span class="xquery">  // 调整flexbox交叉轴的方向</span></span><br><span class="line"><span class="xquery">  flex-direction: column;</span></span><br><span class="line"><span class="xquery">  display: flex;</span></span><br><span class="line"><span class="xquery">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">.page-keng </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">  flex: <span class="number">1</span>;</span></span><br><span class="line"><span class="xquery">&#125;</span></span><br><span class="line"><span class="xml">.tabbar </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">  display: flex;</span></span><br><span class="line"><span class="xquery">  height: <span class="number">50</span>px;</span></span><br><span class="line"><span class="xquery">  //上下居中</span></span><br><span class="line"><span class="xquery">  line-height: <span class="number">50</span>px;</span></span><br><span class="line"><span class="xquery">  border-top: <span class="number">1</span>px solid #<span class="number">000</span>;</span></span><br><span class="line"><span class="xquery">  li &#123;</span></span><br><span class="line"><span class="xquery">    list-style: none;</span></span><br><span class="line"><span class="xquery">    flex: <span class="number">1</span>;</span></span><br><span class="line"><span class="xquery">    text-align: center;</span></span><br><span class="line"><span class="xquery">    .router-link-active &#123;</span></span><br><span class="line"><span class="xquery">      color: #ff577f;</span></span><br><span class="line"><span class="xquery">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>router.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="comment">//路由页面</span></span><br><span class="line"><span class="keyword">import</span> Center <span class="keyword">from</span> <span class="string">'./views/Center.vue'</span></span><br><span class="line"><span class="keyword">import</span> Cinemas <span class="keyword">from</span> <span class="string">'./views/Cinemas.vue'</span></span><br><span class="line"><span class="keyword">import</span> Films <span class="keyword">from</span> <span class="string">'./views/Films.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//vue-router 是vue的插件，需要使用Vue.use()方法去调用插件</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     path: '/',</span></span><br><span class="line">    <span class="comment">//     component: Center</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/center'</span>,</span><br><span class="line">        component: Center</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/cinemas'</span>,</span><br><span class="line">        component: Cinemas</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/films/nowPlaying'</span>,</span><br><span class="line">        component: Films</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>

<h3 id="eslint-的代码检查工具"><a href="#eslint-的代码检查工具" class="headerlink" title="eslint 的代码检查工具"></a>eslint 的代码检查工具</h3><ul>
<li>向上面路由中的部分代码,不允许出现出现空行</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">const routes = [</span><br><span class="line">    &#123; <span class="string">path:</span> <span class="string">'/'</span>, <span class="string">redirect:</span> <span class="string">'/films/nowPlaying'</span> &#125;,</span><br><span class="line">    &#123; <span class="string">path:</span> <span class="string">'/center'</span>, <span class="string">component:</span> Center &#125;,</span><br><span class="line">    &#123; <span class="string">path:</span> <span class="string">'/cinemas'</span>, <span class="string">component:</span> Cinemas &#125;,</span><br><span class="line">    &#123; <span class="string">path:</span> <span class="string">'/films/nowPlaying'</span>, <span class="string">component:</span> Films &#125;,</span><br><span class="line">    &#123; <span class="string">path:</span> <span class="string">'/film/4728'</span>, <span class="string">component:</span> Film &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h3 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h3><ul>
<li>应用 比如在某个路由页面不需要 tab 导航栏，就可以使用嵌套路由</li>
</ul>
<ul>
<li>重定向</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123; <span class="attribute">path</span>: <span class="string">'/'</span>, redirect: <span class="string">'/films/nowPlaying'</span> &#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>嵌套</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.use(VueRouter)</span><br><span class="line">const routes = [</span><br><span class="line">  &#123; path: &apos;/film/4728&apos;, component: Film &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &apos;/&apos;,</span><br><span class="line">    component: Home,</span><br><span class="line">    children: [</span><br><span class="line">      // 默认显示的页面</span><br><span class="line">      &#123; path: &apos;/&apos;, redirect: &apos;/films/nowPlaying&apos; &#125;,</span><br><span class="line">      &#123; path: &apos;/center&apos;, component: Center &#125;,</span><br><span class="line">      &#123; path: &apos;/cinemas&apos;, component: Cinemas &#125;,</span><br><span class="line">      &#123; path: &apos;/films/nowPlaying&apos;, component: Films &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default router</span><br></pre></td></tr></table></figure>

<h3 id="动态路由-gt-动态路径参数-以冒号开头"><a href="#动态路由-gt-动态路径参数-以冒号开头" class="headerlink" title="动态路由 ==&gt;动态路径参数 以冒号开头"></a>动态路由 ==&gt;动态路径参数 以冒号开头</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; path: &apos;/user/:id&apos;, component: User &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>一个“路径参数”使用冒号 : 标记。当匹配到一个路由时，参数值会被设置到 this.$route.params，可以在每个组件内使用</li>
</ul>
<h3 id="VScode-开发技巧-更改语言模式"><a href="#VScode-开发技巧-更改语言模式" class="headerlink" title="VScode 开发技巧 更改语言模式"></a>VScode 开发技巧 更改语言模式</h3><ul>
<li>如果你有需求将一段数据的格式改变 json 等格式就可以使用</li>
<li>步骤：<ol>
<li>按快捷键 ctrl + t 弹出面板 输入：&gt;Change Langeuage Mode 修改语言模板 enter</li>
<li>输入 json 就会转化成 json 格式</li>
</ol>
</li>
</ul>
<h3 id="router-link-组件的使用技巧"><a href="#router-link-组件的使用技巧" class="headerlink" title="router-link 组件的使用技巧"></a>router-link 组件的使用技巧</h3><ul>
<li>这里采用 router-link 代替 li 添加组件的 tag 属性指明替换的属性 tag=”li”</li>
</ul>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-films"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>电影列表页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">router-link</span></span></span></span><br><span class="line"><span class="xml">       class="film-page"</span></span><br><span class="line"><span class="xml">       v-for="item in filmList"</span></span><br><span class="line"><span class="xml">       :key="item.filmId"</span></span><br><span class="line"><span class="xml">       :to="'/film/' + item.filmId"</span></span><br><span class="line"><span class="xml">       tag="li"</span></span><br><span class="line"><span class="xml">     &gt;</span></span><br><span class="line"><span class="xml">       <span class="comment">&lt;!-- 这里采用router-link 代替li 添加组件的tag属性指明替换的属性==tag="li" --&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="comment">&lt;!-- &lt;router-link to="/film/item.filmId"&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"item.poster"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">img</span></span></span></span><br><span class="line"><span class="xml">           src=""</span></span><br><span class="line"><span class="xml">           alt=""</span></span><br><span class="line"><span class="xml">         &gt;</span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;item.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">button</span>&gt;</span>购票<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="comment">&lt;!-- &lt;/router-link&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h4 id="route"><a href="#route" class="headerlink" title="$route"></a>$route</h4><ul>
<li>当我们在 vue 项目中使用了 vue-router。这时，当我们项目中的每一个 vue 组件，都会自动获取到一个$route 数据。这个数据中存放的是匹配当前路由的信息对象。</li>
<li>可以通过它，得到当前动态路由参数 Params 或查询参数的 query(query 中就是通过在路径上?传参的数据信息)</li>
</ul>
<h3 id="二级页面出现数据没有更新的问题"><a href="#二级页面出现数据没有更新的问题" class="headerlink" title="二级页面出现数据没有更新的问题"></a>二级页面出现数据没有更新的问题</h3><ul>
<li><p>原因：Vue 把当前页面路由页面组件给缓存了，也就是这个详情页面没有销毁也就不会重新创建</p>
</li>
<li><p>解决方法：</p>
<ol>
<li>监听$route 是否有变化 watch()属性</li>
</ol>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">  watch(<span class="function"><span class="keyword">function</span></span>(<span class="keyword">new</span><span class="type">Val</span> oldVal)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">new</span><span class="type">Val</span> === <span class="built_in">this</span>.$route.params.fileId)&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>。。。。。使用一个路由的钩子函数 beforeRouterUpdate</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">  <span class="comment">//ajax</span></span><br><span class="line">    getFilminfo()&#123;</span><br><span class="line">      <span class="comment">//获取当前影片的Id</span></span><br><span class="line">      <span class="keyword">let</span> id = <span class="keyword">this</span>.$route.params.filmId</span><br><span class="line"></span><br><span class="line">      <span class="comment">//发送ajax请求</span></span><br><span class="line">      $ajax(&#123;</span><br><span class="line">        url: <span class="string">`url`</span>,</span><br><span class="line">        method: <span class="string">'GET'</span>,</span><br><span class="line">        headers:&#123;</span><br><span class="line">          <span class="comment">//头信息</span></span><br><span class="line">        &#125;,</span><br><span class="line">        success:<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(res.status == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.filmInfo = res.data.film</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//axios</span></span><br><span class="line">    getFilmInfo()&#123;</span><br><span class="line">      <span class="comment">//获取当前影片的Id</span></span><br><span class="line">      <span class="keyword">let</span> id = <span class="keyword">this</span>.$route.params.filmId</span><br><span class="line"></span><br><span class="line">      axios.get(<span class="string">'url'</span>,&#123;</span><br><span class="line">        params:&#123;</span><br><span class="line">          <span class="comment">//参数</span></span><br><span class="line">        &#125;,</span><br><span class="line">        headers:&#123;</span><br><span class="line">          <span class="comment">//请求头</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = response.data</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  created()&#123;</span><br><span class="line">    <span class="keyword">this</span>.this.getFilmInfo()</span><br><span class="line">  &#125;</span><br><span class="line">  beforeRouterUpdate(to, <span class="keyword">from</span>, next)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'组件内的 update'</span>)</span><br><span class="line">    next()</span><br><span class="line">    <span class="keyword">this</span>.getFilmInfo()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><ul>
<li>用 js 的方式来实现跳转，而不是 router-link</li>
<li>需要用到的是 $router 路由实例对象</li>
<li>方法:<ul>
<li>$router.push() 普通的 router-link 的跳转</li>
<li>$router.replace() 重定向 -$router.back() 后退</li>
<li>$router.forward() 前进</li>
<li>$router.go() 前进/后退 go(1)</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> @<span class="attr">click</span>=<span class="string">"goRouter"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:[</span><br><span class="line">      goRouter(film)&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">//传递url地址的方式</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//this.$router.push('/film/$&#123;film.filmId&#125;')</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//传递对象的方式(path 与 params 不能同时存在；params 与 query不能单独存在)</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//name 在配置路由的时候可以 配置name属性，然后在这里可以用name:'路由名'，来跳转</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//query 路径拼接的参数</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$router.push(&#123;</span></span><br><span class="line"><span class="actionscript">          path:<span class="string">'/film/$&#123;film.filmId&#125;'</span>,</span></span><br><span class="line"><span class="actionscript">          name:<span class="string">''</span>,</span></span><br><span class="line">          params:&#123;&#125;,</span><br><span class="line">          query:&#123;&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="路由的两种模式-hash-默认-history-模式"><a href="#路由的两种模式-hash-默认-history-模式" class="headerlink" title="路由的两种模式 hash 默认 history 模式"></a>路由的两种模式 hash 默认 history 模式</h3><ul>
<li>两者的区别</li>
</ul>
<ol>
<li>url 地址表现不同，hash 有#号，history 没有</li>
<li>实现原理不同，<br>hash 的原理是通过监听 onhashchange 事件<br>history 原理是基于 html5 中新增的 history 相关的 api 实现的，<br>hisotry.push() 追加<br>history.replace() 替换<br>window.onpopstate 事件 前进/后退</li>
<li>上线之后的表现不同，hash 不会有问题，而 history 可能会出现 404 的问题，需要服务端那边做配置处理</li>
</ol>
<h3 id="axios-与-正向代理"><a href="#axios-与-正向代理" class="headerlink" title="axios 与 正向代理"></a>axios 与 正向代理</h3><ul>
<li>axios</li>
<li>网络请求工具库 ==》axios<ol>
<li>axios.get(url,config)</li>
<li>axios.post(url,data,config)</li>
<li>axios(config)</li>
</ol>
</li>
</ul>
<ul>
<li>返回一个 Promise 对象</li>
<li>then 里面接受到的 res，并不是后台的数据，而是 axios 封装过的数据，包含有请求与响应信息等，res 中的 data 才是后台该我们的数据。</li>
</ul>
<ul>
<li>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="regexp">// axios.get(url,config)</span></span><br><span class="line"><span class="regexp">    axios.get('https://m</span>.maizuo.com/gateway<span class="string">', &#123;</span></span><br><span class="line"><span class="string">      params: &#123;</span></span><br><span class="line"><span class="string">        k: 308996</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      headers: &#123;</span></span><br><span class="line"><span class="string">        '</span>X-Client-Info<span class="string">': '</span>&#123;<span class="string">"a"</span>:<span class="string">"3000"</span>,<span class="string">"ch"</span>:<span class="string">"1002"</span>,<span class="string">"v"</span>:<span class="string">"5.0.4"</span>,<span class="string">"e"</span>:<span class="string">"1592188274293904612065281"</span>,<span class="string">"bc"</span>:<span class="string">"310100"</span>&#125;<span class="string">',</span></span><br><span class="line"><span class="string">        '</span>X-Host<span class="string">': '</span>mall.report.event<span class="string">'</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;).then(response =&gt; &#123;</span></span><br><span class="line"><span class="string">      console.log(response)</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>官网案例 GET 方法</li>
</ul>
<figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的请求也可以这样做</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      ID: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>POST</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">'http://movie.miguvideo.com/mgw/search4mv/v1/search/cinema'</span>)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = response.data</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">  firstName: <span class="string">'Fred'</span>,</span><br><span class="line">  lastName: <span class="string">'Flintstone'</span></span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>异常跨域</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">'http://movie.miguvideo.com/mgw/search4mv/v1/search/cinema'</span> <span class="keyword">from</span> origin <span class="string">'http://localhost:8080'</span> has been blocked by CORS policy: No <span class="string">'Access-Control-Allow-Origin'</span> header <span class="keyword">is</span> present on the requested resource.</span><br><span class="line">xhr.js?b50d:<span class="number">178</span> POST http:<span class="comment">//movie.miguvideo.com/mgw/search4mv/v1/search/cinema net::ERR_FAILED</span></span><br><span class="line">dispatchXhrRequest @ xhr.js?b50d:<span class="number">178</span></span><br><span class="line">xhrAdapter @ xhr.js?b50d:<span class="number">12</span></span><br><span class="line">dispatchRequest @ dispatchRequest.js?<span class="number">5270</span>:<span class="number">52</span></span><br><span class="line">Promise.then (async)</span><br><span class="line">request @ Axios.js?<span class="number">0</span>a06:<span class="number">61</span></span><br><span class="line">Axios.&lt;computed&gt; @ Axios.js?<span class="number">0</span>a06:<span class="number">86</span></span><br><span class="line">wrap @ bind.js?<span class="number">1</span>d2b:<span class="number">9</span></span><br><span class="line">created @ App.vue?<span class="number">234</span>e:<span class="number">24</span></span><br><span class="line">invokeWithErrorHandling @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">1854</span></span><br><span class="line">callHook @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">4219</span></span><br><span class="line">Vue._init @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">5008</span></span><br><span class="line">VueComponent @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">5154</span></span><br><span class="line">createComponentInstanceForVnode @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">3283</span></span><br><span class="line">init @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">3114</span></span><br><span class="line">createComponent @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">5978</span></span><br><span class="line">createElm @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">5925</span></span><br><span class="line">patch @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">6516</span></span><br><span class="line">Vue._update @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">3945</span></span><br><span class="line">updateComponent @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">4066</span></span><br><span class="line"><span class="keyword">get</span> @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">4479</span></span><br><span class="line">Watcher @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">4468</span></span><br><span class="line">mountComponent @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">4073</span></span><br><span class="line">Vue.$mount @ vue.runtime.esm.js?<span class="number">2</span>b0e:<span class="number">8415</span></span><br><span class="line">eval @ main.js?<span class="number">56</span>d7:<span class="number">4</span></span><br><span class="line">./src/main.js @ app.js:<span class="number">1009</span></span><br><span class="line">__webpack_require__ @ app.js:<span class="number">849</span></span><br><span class="line">fn @ app.js:<span class="number">151</span></span><br><span class="line"><span class="number">1</span> @ app.js:<span class="number">1022</span></span><br><span class="line">__webpack_require__ @ app.js:<span class="number">849</span></span><br><span class="line">checkDeferredModules @ app.js:<span class="number">46</span></span><br><span class="line">(anonymous) @ app.js:<span class="number">925</span></span><br><span class="line">(anonymous) @ app.js:<span class="number">928</span></span><br><span class="line">createError.js?<span class="number">2</span>d83:<span class="number">16</span> Uncaught (<span class="keyword">in</span> promise) Error: Network Error</span><br><span class="line">  at createError (createError.js?<span class="number">2</span>d83:<span class="number">16</span>)</span><br><span class="line">  at XMLHttpRequest.handleError (xhr.js?b50d:<span class="number">83</span>)</span><br></pre></td></tr></table></figure>

<h3 id="正向代理-请求数据"><a href="#正向代理-请求数据" class="headerlink" title="正向代理 请求数据"></a>正向代理 请求数据</h3><ul>
<li>协议域名端口号，一项不匹配就会产生跨域</li>
<li>出现跨域问题，可使用正向代理解决</li>
<li>安装创建代理</li>
</ul>
<ul>
<li>安装命令<br>npm init -y<br>npm install –save express axios</li>
</ul>
<ul>
<li>cd 项目</li>
<li>创建 server.js 文件</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">'axios'</span>)</span><br><span class="line"><span class="keyword">const</span> server = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置报错的请求头</span></span><br><span class="line">server.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.set(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听网络请求</span></span><br><span class="line">server.get(<span class="string">'/migu'</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.post(<span class="string">'http://movie.miguvideo.com/mgw/search4mv/v1/search/cinema'</span>)</span><br><span class="line">        .then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> result = response.data;</span><br><span class="line">            res.send(result)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>启动命令: nodemon .\server.js</li>
<li>访问 localhost:3000/migu</li>
<li>nodemon 是一种工具，通过在检测到目录中的文件更改时自动重新启动节点应用程序来帮助开发基于 node.js 的应用程序。</li>
</ul>
<p>nodemon 并没有要求任何对你的代码或开发的方法中的额外变化。nodemon 是一个替换包装器 node，用于在执行脚本时 nodemon 替换 node 命令行上。</p>
<ul>
<li>最后让 localhost:8080 -访问-&gt;localhist:3000/migu(代理) –&gt;目标网址</li>
</ul>
<h3 id="直接配置-vue-config-js-中的-proxy-代理"><a href="#直接配置-vue-config-js-中的-proxy-代理" class="headerlink" title="直接配置 vue-config.js 中的 proxy 代理"></a>直接配置 vue-config.js 中的 proxy 代理</h3><ul>
<li>vue-config.js 是当前项目的一些配置设置，可以设置 webpack，多页面，正向代理</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 当前项目的一些配置设置，可以设置webpack，多页面，正向代理 module.exports = &#123;</span><br><span class="line">devServer: &#123; proxy: &apos;http://movie.miguvideo.com&apos; // 直接配置域名 &#125; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>？？？？？？？？？？？？？？？？</p>
<h3 id="路由的导航守卫和-beforeRouterUpdate"><a href="#路由的导航守卫和-beforeRouterUpdate" class="headerlink" title="路由的导航守卫和 beforeRouterUpdate"></a>路由的导航守卫和 beforeRouterUpdate</h3><ul>
<li>导航就是路由在发生一些变化，守卫就是在这过程中的一些操作，主要用来通过跳转或取消的方式守卫导航</li>
</ul>
<h4 id="植入路由导航的级别-》参数或查询的改变并不会触发进入-离开的导航守卫-总共-7-个钩子函数某个时刻会自动触发"><a href="#植入路由导航的级别-》参数或查询的改变并不会触发进入-离开的导航守卫-总共-7-个钩子函数某个时刻会自动触发" class="headerlink" title="植入路由导航的级别 =》参数或查询的改变并不会触发进入/离开的导航守卫(总共 7 个钩子函数某个时刻会自动触发)"></a>植入路由导航的级别 =》参数或查询的改变并不会触发进入/离开的导航守卫(总共 7 个钩子函数某个时刻会自动触发)</h4><ul>
<li><p>全局守卫</p>
<ol>
<li>全局前置 brforeEach</li>
</ol>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function"><span class="params">(to, <span class="keyword">from</span>, <span class="built_in">next</span>)</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>参数说明：<ol>
<li>to<br>要去的路由信息对象</li>
<li>from<br>从哪里来的路由信息对象</li>
<li>next(只会严格调用一次)<br>是否放行</li>
<li>next() 放行进入下一个钩子函数，若全部的钩子函数执行完毕，导航的状态就是 confirmed(确定的)</li>
<li>next(false) 阻止，中断当前的导航，url 改变，那么 url 的地址就会重置到 from 路由对应的地址。</li>
<li>next(‘/‘)或者 next({path:’/‘}) 重定向到某个路由上，当前的导航被中断，然后进行一个新的导航。</li>
<li>next(error) 抛出异常，传入的参数是一个 Error 实例，则导航会被终止且该错误会被传递给 router.onError()注册过的回调。</li>
</ol>
</li>
</ul>
<ol start="2">
<li>全局的解析守卫 beforeResolve<ul>
<li>这和 router.beforeEach 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用.</li>
</ul>
</li>
<li>全局后置 afterEach</li>
</ol>
</li>
<li><p>单个路由独享</p>
<ol>
<li>beforeEnter<br>在全局前置之后调用，路由独享在组件内的 enter 之前调用</li>
</ol>
</li>
<li><p>组件级=》组件内的守卫</p>
<ol>
<li>beforeRouterEnter<br>在全局前置之后调用</li>
<li>beforeRouterUpdate<br>只能在动态路由参数的情况下 调用</li>
<li>beforeRouterLeave<br>离开组件时调用，在全局前置之前调用</li>
</ol>
</li>
</ul>
<h3 id="路由导航守卫的应用"><a href="#路由导航守卫的应用" class="headerlink" title="路由导航守卫的应用"></a>路由导航守卫的应用</h3><ol>
<li>登录拦截</li>
</ol>
<ul>
<li>单个路由独享钩子函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; path: &apos;/login&apos;, component: Login &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: &apos;/card&apos;,</span><br><span class="line">    component: Card,</span><br><span class="line">    //这里用到 路由独享的钩子函数</span><br><span class="line">    beforeEnter: (to, from, next) =&gt; &#123;</span><br><span class="line">      console.log(&apos;路由独享 做登录拦截&apos;)</span><br><span class="line">      console.log(to)</span><br><span class="line">      // 判断当前是否登录状态</span><br><span class="line">      if (window.isLogin) &#123;</span><br><span class="line">        console.log(&apos;已登录&apos;)</span><br><span class="line">        next()</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        console.log(&apos;跳转登录&apos;)</span><br><span class="line">        // 重定向到登陆页 注意这里的符号不是单引号，而是tab键上面的那个符号</span><br><span class="line">        next(`/login?redirect=$&#123;to.fullPath&#125;`)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>login 脚本</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      heandlerLogin () &#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 将window.isLogin 设置为 true</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.isLogin = <span class="literal">true</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取url地址上的 redirect 参数</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> redirect = <span class="keyword">this</span>.$route.query.redirect || <span class="string">'/'</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(redirect)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 跳回首页 replace重定向</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.$router.replace(redirect)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>全局前置钩子函数</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">router.beforeEach((<span class="keyword">to</span>, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  console.log(<span class="string">'全局 前置'</span>)</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">to</span>.path === <span class="string">'/card'</span> || <span class="keyword">to</span>.path === <span class="string">'/money'</span>)&#123;</span><br><span class="line">    // 判断当前是否登录状态</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">window</span>.isLogin) &#123;</span><br><span class="line">        console.log(<span class="string">'已登录'</span>)</span><br><span class="line">        next()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        console.log(<span class="string">'跳转登录'</span>)</span><br><span class="line">        // 重定向到登陆页 注意这里的符号不是单引号，而是tab键上面的那个符号</span><br><span class="line">        next(`/<span class="keyword">login</span>?redirect=$&#123;<span class="keyword">to</span>.fullPath&#125;`)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>进一步完善，添加路由的元信息 meta: { requiresAuth: true } //记录登录的状态，</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在路由上添加 ==》路由元信息</span></span><br><span class="line"> &#123; <span class="attribute">path</span>: <span class="string">'/money'</span>, <span class="attribute">component</span>: Money,  <span class="attribute">meta</span>: &#123; <span class="attribute">requiresAuth</span>: true &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">router</span><span class="selector-class">.beforeEach</span>((to, from, next) =&gt; &#123;</span><br><span class="line">   <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="string">'全局 前置'</span>)</span><br><span class="line">   <span class="comment">// 如果元信息就需要登录判断</span></span><br><span class="line">   <span class="selector-tag">if</span>(to.meta.requiresAuth)&#123;</span><br><span class="line">     <span class="comment">// 判断当前是否登录状态</span></span><br><span class="line">       <span class="selector-tag">if</span> (window.isLogin) &#123;</span><br><span class="line">         <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="string">'已登录'</span>)</span><br><span class="line">         <span class="selector-tag">next</span>()</span><br><span class="line">       &#125; <span class="selector-tag">else</span> &#123;</span><br><span class="line">         <span class="selector-tag">console</span><span class="selector-class">.log</span>(<span class="string">'跳转登录'</span>)</span><br><span class="line">         <span class="comment">// 重定向到登陆页 注意这里的符号不是单引号，而是tab键上面的那个符号</span></span><br><span class="line">         <span class="selector-tag">next</span>(<span class="built_in">`/login?redirect=$&#123;to.fullPath&#125;`</span>)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; <span class="selector-tag">else</span> &#123;</span><br><span class="line">     <span class="selector-tag">next</span>()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>应用场景：如果有单独一个需要拦截就使用路由独享，多个就使用路由全局前置</li>
</ul>
<h3 id="进度条效果-》过度动效"><a href="#进度条效果-》过度动效" class="headerlink" title="进度条效果==》过度动效"></a>进度条效果==》过度动效</h3><ul>
<li>推荐 github 上进度条效果的插件：<a href="https://github.com/rstacruz/nprogress" target="_blank" rel="noopener">https://github.com/rstacruz/nprogress</a></li>
</ul>
<ul>
<li>安装命令: npm install –save nprogress</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">NProgress</span>.</span></span>start<span class="literal">()</span>; <span class="comment">//加载进度条</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">NProgress</span>.</span></span><span class="keyword">done</span><span class="literal">()</span>;  <span class="comment">//加载结束</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在路由的页面导入插件及其样式</li>
</ul>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Nprogress <span class="keyword">from</span> <span class="string">'nprogress'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'nprogress/nprogress.css'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在全局前置钩子函数中启动进度条效果</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">  / 全局守卫</span><br><span class="line">  router.beforeEach((<span class="keyword">to</span>, from, <span class="keyword">next</span>) =&gt; &#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">to</span>)</span><br><span class="line">    console.<span class="built_in">log</span>(from)</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="keyword">next</span>)</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'全局前置'</span>)</span><br><span class="line">    Nprogress.start()</span><br><span class="line">    <span class="keyword">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>在全局后置钩子函数中结束进度条</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局后置守卫</span></span><br><span class="line">router.after<span class="constructor">Each((<span class="params">to</span>, <span class="params">from</span>)</span> =&gt; &#123;</span><br><span class="line">  console.log('全局后置守卫')</span><br><span class="line">  <span class="module-access"><span class="module"><span class="identifier">Nprogress</span>.</span></span><span class="keyword">done</span><span class="literal">()</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>修改插件的样式<br>只需要覆盖插件的样式即可<br>在 App.vue 可全局覆盖样式</li>
</ul>
]]></content>
      <tags>
        <tag>前端框架VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架VUE基础+slot插槽</title>
    <url>/2020/05/31/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6VUE%E5%9F%BA%E7%A1%80-slot%E6%8F%92%E6%A7%BD/</url>
    <content><![CDATA[<h3 id="slot插槽"><a href="#slot插槽" class="headerlink" title="slot插槽"></a>slot插槽</h3><ul>
<li>介绍：</li>
<li>在父组件中直接插入正常的DOM结构,即在子组件中预留出element元素的位置用<slot>标签标识，在父组件中默认使用子组件时父组件中内容就会替换<slot>标识的这个位置，并且渲染出来。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- //默认会找得到slot的位置，在其位置上显示 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">            <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>插槽<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">em</span>&gt;</span>slot<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">                //组件中有多个元素，会全部显示</span><br><span class="line">            <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 显示默认的slot内容 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myCpn"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>component context<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- //插槽 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 可以在插槽中插入默认值 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            components:&#123;</span><br><span class="line">                cpn:&#123;</span><br><span class="line"><span class="actionscript">                    template:<span class="string">"#myCpn"</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><ul>
<li>具名插槽，听其名知其意，就是有名字的插槽”slot”具有name属性可命名，在父组件中引用的在其元素内部添加slot=”name”即可</li>
<li>注意：一个不带 name 的slot 出口会带有隐含的名字“default”。</li>
<li>在向具名插槽提供内容的时候，我们可以在一个 template 元素上使用 v-slot 指令，并以 v-slot 的参数的形式提供其名称，元素中的所有内容都将会被传入相应的插槽</li>
<li>注意：任何没有被包裹在带有 v-slot 的 template元素中的内容都会被视为默认插槽的内容。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>案例<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 替换那个插槽 slot="left"指定位置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"left"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myCpn"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>component context<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- //插槽 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>左边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>右边<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            components:&#123;</span><br><span class="line">                cpn:&#123;</span><br><span class="line"><span class="actionscript">                    template:<span class="string">"#myCpn"</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="自-2-6-0-起有所更新具名插槽"><a href="#自-2-6-0-起有所更新具名插槽" class="headerlink" title="自 2.6.0 起有所更新具名插槽"></a>自 2.6.0 起有所更新具名插槽</h4></li>
<li>官网案例</li>
<li>v-slot:header 这种语法取代 slot=”header”<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="编译的作用域"><a href="#编译的作用域" class="headerlink" title="编译的作用域"></a>编译的作用域</h4></li>
<li>父级模板里的所有内容都是在父级作用域中编译的；子模板里的所有内容都是在子作用域中编译的。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 官方给出了一条准则：父组件模板的所有东西都会在父级作用域内编译，子组件模板的所有东西都会在子级作用域内编译 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这就是变量的作用域 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这种情况下会使用实例下面的isShow --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- v-show 布尔值 是否被渲染 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>component context<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编译的作用域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                message:<span class="string">'Hello World'</span>,</span></span><br><span class="line"><span class="actionscript">                isShow:<span class="literal">true</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line">                cpn:&#123;</span><br><span class="line"><span class="actionscript">                    template:<span class="string">'#cpn'</span>,</span></span><br><span class="line">                    data()&#123;</span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">                            isShow:<span class="literal">false</span></span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="后备内容"><a href="#后备内容" class="headerlink" title="后备内容"></a>后备内容</h4></li>
<li>官网上说的后备就是：你可以在子组件的的slot这个标识元素中，给其提供默认被渲染的内容，如果父组件中有就会替换掉其内容，<h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4></li>
<li>案例:<ul>
<li>子组件包含一组数据…..</li>
<li>需要在多个界面展示:<ul>
<li>某些界面是以水平方向—展示的,</li>
<li>某些界面是以列表形式展示的,</li>
<li>某些界面直接展示一个数组</li>
</ul>
</li>
<li>内容在子组件,希望父组件告诉我们如何展示,???????<ul>
<li>利用slot作用域插槽就可以了</li>
</ul>
</li>
</ul>
</li>
<li>作用域插槽：父组件替换插槽的标签，但是内容由子组件来提供<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 作用域插槽：父组件替换插槽的标签，但是内容由子组件来提供 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">        案例:</span></span><br><span class="line"><span class="xml">        子组件包含一组数据.....</span></span><br><span class="line"><span class="xml">        需要在多个界面展示:</span></span><br><span class="line"><span class="xml">            某些界面是以水平方向---展示的,</span></span><br><span class="line"><span class="xml">            某些界面是以列表形式展示的,</span></span><br><span class="line"><span class="xml">            某些界面直接展示一个数组</span></span><br><span class="line"><span class="xml">        内容在子组件,希望父组件告诉我们如何展示,???????</span></span><br><span class="line"><span class="xml">            利用slot作用域插槽就可以了</span></span><br><span class="line"><span class="xml">     --&gt;</span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="comment">&lt;!--执行结果</span></span></span><br><span class="line"><span class="xml">              来自子组件的数据....</span></span><br><span class="line"><span class="xml">                Java</span></span><br><span class="line"><span class="xml">                JFinal</span></span><br><span class="line"><span class="xml">                Spring</span></span><br><span class="line"><span class="xml">                JavaScript</span></span><br><span class="line"><span class="xml">                ES6</span></span><br><span class="line"><span class="xml">                Vuejs --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="comment">&lt;!-- slot有属性下面两个span就不会执行 --&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">span</span>&gt;</span>JavaScript-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">span</span>&gt;</span>C++-<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="comment">&lt;!-- 目的是获取子组件的planguage数据 --&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="comment">&lt;!-- slot-scope属性拿到插槽对象,就可以调用,子组件的插槽v-bind:data属性 --&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">'slot'</span>&gt;</span></span></span><br><span class="line"><span class="xml">                 <span class="comment">&lt;!-- 这里2.5以后可以是任何容器 --&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">'item in slot.data'</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml">--<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!--结果: </span></span></span><br><span class="line"><span class="xml">                    来自子组件的数据....</span></span><br><span class="line"><span class="xml">                    Java--JFinal--Spring--JavaScript--ES6--Vuejs-- --&gt;</span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!--join将数组转换成字符串以指定字符拼接--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;slot.data.join(' - ')&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">'cpn'</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>来自子组件的数据....<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- data 可以自由定义 --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- 绑定在 &lt;slot&gt; 元素上的 attribute 被称为插槽 prop --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:data</span>=<span class="string">'planguage'</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!-- 这里与微信小程序的wx-for="</span></span><span class="template-variable">&#123;&#123;&#125;&#125;</span><span class="xml"><span class="comment">"有所其区别 --&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'item in planguage'</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">         const app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">             el:'#app',</span></span><br><span class="line"><span class="xml">             data:&#123;</span></span><br><span class="line"><span class="xml">                 messge:'root组件初始化数据'</span></span><br><span class="line"><span class="xml">             &#125;,</span></span><br><span class="line"><span class="xml">             components:&#123;</span></span><br><span class="line"><span class="xml">                 cpn:&#123;</span></span><br><span class="line"><span class="xml">                     template:'#cpn',</span></span><br><span class="line"><span class="xml">                     data()&#123;</span></span><br><span class="line"><span class="xml">                         return&#123;</span></span><br><span class="line"><span class="xml">                            planguage : ['Java','JFinal','Spring','JavaScript','ES6','Vuejs']</span></span><br><span class="line"><span class="xml">                         &#125;</span></span><br><span class="line"><span class="xml">                     &#125;</span></span><br><span class="line"><span class="xml">                 &#125;</span></span><br><span class="line"><span class="xml">             &#125;</span></span><br><span class="line"><span class="xml">         &#125;)</span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h5 id="在2-6-0-起有所更新。已废弃的使用-slot-scope-attribute-的语法，"><a href="#在2-6-0-起有所更新。已废弃的使用-slot-scope-attribute-的语法，" class="headerlink" title="在2.6.0 起有所更新。已废弃的使用 slot-scope attribute 的语法，"></a>在2.6.0 起有所更新。已废弃的使用 slot-scope attribute 的语法，</h5></li>
<li>用v-slot:default=”slotProps” 这种新语法<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">'slot'</span>&gt;</span></span></span><br><span class="line"><span class="xml">                 <span class="comment">&lt;!-- 这里2.5以后可以是任何容器 --&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">'item in slot.data'</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml">--<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!--结果: </span></span></span><br><span class="line"><span class="xml">                    来自子组件的数据....</span></span><br><span class="line"><span class="xml">                    Java--JFinal--Spring--JavaScript--ES6--Vuejs-- --&gt;</span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!--join将数组转换成字符串以指定字符拼接--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;slot.data.join(' - ')&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">        //下面的这种语法代替上面的语法</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:data</span>=<span class="string">"slot"</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="comment">&lt;!-- 这里2.5以后可以是任何容器 --&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">'item in slot.data'</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml">--<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!--结果: </span></span></span><br><span class="line"><span class="xml">                来自子组件的数据....</span></span><br><span class="line"><span class="xml">             Java--JFinal--Spring--JavaScript--ES6--Vuejs-- --&gt;</span></span><br><span class="line"><span class="xml">         <span class="comment">&lt;!--join将数组转换成字符串以指定字符拼接--&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;slot.data.join(' - ')&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="解构插槽Prop"><a href="#解构插槽Prop" class="headerlink" title="解构插槽Prop"></a>解构插槽Prop</h3></li>
<li>作用域插槽的内部工作原理就是将你插槽的内容包括在一个传入当参数的函数里<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(sotProps)</span></span>&#123;</span><br><span class="line">    <span class="comment">//插槽内容   &#125;</span></span><br></pre></td></tr></table></figure></li>
<li>这样就可以使用 ES2015 解构来传入具体的插槽 prop<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-slot</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;data&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--join将数组转换成字符串以指定字符拼接--&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;data.join(' - ')&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>这样还有一个好处就是可以重命名<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-slot</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;data : planguage&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--join将数组转换成字符串以指定字符拼接--&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;planguage.join(' - ')&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="动态插槽名"><a href="#动态插槽名" class="headerlink" title="动态插槽名"></a>动态插槽名</h3></li>
<li>就是利用动态指令参数的形式<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:</span>[<span class="attr">dynamicSlotName</span>]&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- dynamicSlotName 就是 实例属性data中的值dynamicSlotName --&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="具名插槽的缩写"><a href="#具名插槽的缩写" class="headerlink" title="具名插槽的缩写"></a>具名插槽的缩写</h3></li>
<li>v-slot:data 可以被重写为 #data这样的语法</li>
<li>注意：这些指令的缩写只有在有参数的时候才可使用。</li>
</ul>
]]></content>
      <tags>
        <tag>前端框架VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架VUE基础+组件</title>
    <url>/2020/05/31/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6VUE%E5%9F%BA%E7%A1%80-%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h3><ul>
<li>定义组件 ：调用vue的函数component<br>Vue.component(‘my-component-name’, { /* … */ })</li>
<li>注意：组件的命名规范 如’my-component-name<h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3></li>
<li>在注册之后可以用在任何新创建的 Vue 根实例 (new Vue) 的模板中<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">        //组件化开发 , 必须在vue实例中</span></span><br><span class="line"><span class="xml">        //1. 创建组件构造器 Vue.extend()</span></span><br><span class="line"><span class="xml">       const cpn = Vue.extend(</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">           //注意这里不是单引号，而是tab键上面的那个按键</span></span><br><span class="line"><span class="xquery">            template:`</span></span><br><span class="line"><span class="xquery">             <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xquery">                <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>镖旗<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xquery">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>content内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xquery">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>创建组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xquery">             &lt;/div&gt;</span></span><br><span class="line"><span class="xquery">            `,</span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">        //2. 注册组件(全局组件，可以在多个vue实例中使用)</span></span><br><span class="line"><span class="xml">        Vue.component('my-component',cpn)</span></span><br><span class="line"><span class="xml">        const app = new Vue(</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">            el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="xquery">            data:&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="xquery">            &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">            computed:</span><span class="xquery">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="xquery">            &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">            method:</span><span class="xquery">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="xquery">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="局部注册组件"><a href="#局部注册组件" class="headerlink" title="局部注册组件"></a>局部注册组件</h4></li>
<li>在vue实例中可以使用components属性来定义局部组件</li>
<li>注意：局部注册的组件在其子组件中不可用，<ul>
<li>解决策略：<ol>
<li>脚手架</li>
<li>var ComponentB = {<pre><code> components: {
&apos;component-a&apos;: ComponentA
    },
 // ...</code></pre> }<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">       </span><span class="xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">       </span><span class="xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">       </span><span class="xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">        //创建组件</span></span><br><span class="line"><span class="xml">        const cpnC = Vue.extend(</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">            template:`</span></span><br><span class="line"><span class="xquery">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xquery">                    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>实体View<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xquery">                    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>content内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xquery">                &lt;/div&gt;</span></span><br><span class="line"><span class="xquery">            `,</span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">        const app = new Vue(</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">            el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="xquery">            data:&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="xquery">            &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">            methods:</span><span class="xquery">&#123;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">            components:</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">                //局部注册组件</span></span><br><span class="line"><span class="xquery">                //使用组件时的标签名</span></span><br><span class="line"><span class="xquery">                cpn: cpnC</span></span><br><span class="line"><span class="xquery">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="注册组件的语法糖"><a href="#注册组件的语法糖" class="headerlink" title="注册组件的语法糖"></a>注册组件的语法糖</h4><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">        //注册组件的语法糖(全局组件)</span></span><br><span class="line"><span class="xml">        //省去了调用Vue.extend方法的调用，直接使用一个对象代替</span></span><br><span class="line"><span class="xml">        Vue.component('cpn',</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">            template:`</span></span><br><span class="line"><span class="xquery">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>注意当点击按钮时，每个组件都会各自独立维护它的 count。</span></span></span><br><span class="line"><span class="xquery">            因为你每用一次组件，就会有一个它的新实例被创建。&lt;/div&gt;</span></span><br><span class="line"><span class="xquery">            `,</span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">)</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        //局部</span></span><br><span class="line"><span class="xml">        const app = new Vue(</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">            el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="xquery">            data:&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="xquery">            &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">            //注意写法：components 局部  ==》全局 component</span></span><br><span class="line"><span class="xml">            components:</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">                cpn2:&#123;</span></span><br><span class="line"><span class="xquery">                    template:</span></span><br><span class="line"><span class="xquery">                    `<span class="xml"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>全局注册的组件可以用</span></span></span><br><span class="line"><span class="xquery">                    在其被注册之后的任何 </span></span><br><span class="line"><span class="xquery">                    (通过 new Vue) 新创建的</span></span><br><span class="line"><span class="xquery">                     Vue 根实例，也包括其组件</span></span><br><span class="line"><span class="xquery">                     树中的所有子组件的模板中。&lt;/h5&gt;</span></span><br><span class="line"><span class="xquery">                     `,</span></span><br><span class="line"><span class="xquery">                    &#125;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="组件模板的分离"><a href="#组件模板的分离" class="headerlink" title="组件模板的分离"></a>组件模板的分离</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 第一种方式 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 单独的js部分模板 注意要标注type="text/x-template" id="myCpn" --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;script type="text/x-template" id="myCpn"&gt;</span></span><br><span class="line"><span class="comment">       &lt;div&gt;</span></span><br><span class="line"><span class="comment">           &lt;h5&gt;组件模板的分离&lt;/h5&gt;</span></span><br><span class="line"><span class="comment">       &lt;/div&gt;</span></span><br><span class="line"><span class="comment">   &lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 第二种方式  &lt;template&gt;--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myCpn"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">h5</span>&gt;</span>组件模板的分离<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">       <span class="comment">//注册全局组件</span></span></span><br><span class="line"><span class="actionscript">       Vue.component(<span class="string">'cpn'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">           template:<span class="string">'#myCpn'</span></span></span><br><span class="line">       &#125;)</span><br><span class="line"><span class="actionscript">     <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">         el:<span class="string">'#app'</span>,</span></span><br><span class="line">         components:&#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="组件中的data为啥必须是函数"><a href="#组件中的data为啥必须是函数" class="headerlink" title="组件中的data为啥必须是函数"></a>组件中的data为啥必须是函数</h4></li>
</ol>
</li>
</ul>
</li>
<li>在创建或注册模板的时候传入一个 data 属性作为用来绑定的数据。但是在组件中，data必须是一个函数，因为每一个 vue 组件都是一个 vue 实例，通过 new Vue() 实例化，引用同一个对象，如果 data 直接是一个对象的话，那么一旦修改其中一个组件的数据，其他组件相同数据就会被改变，而 data 是函数的话，每个 vue 组件的 data 都因为函数有了自己的作用域，互不干扰。<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- ?????????????????????????? --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">scrippt</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"myCpn"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- &lt;div&gt;组件。。。。。&lt;/div&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>计数器：</span><span class="template-variable">&#123;&#123;counter&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">scrippt</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">        //注册组件Vue.component()</span></span><br><span class="line"><span class="xml">        Vue.component('cpn',&#123;</span></span><br><span class="line"><span class="xml">            template:'#myCpn',</span></span><br><span class="line"><span class="xml">            data()&#123;</span></span><br><span class="line"><span class="xml">                return&#123;</span></span><br><span class="line"><span class="xml">                    counter:0</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">            methods:&#123;</span></span><br><span class="line"><span class="xml">                increment()&#123;</span></span><br><span class="line"><span class="xml">                    this.counter++</span></span><br><span class="line"><span class="xml">                &#125;,</span></span><br><span class="line"><span class="xml">                decrement()&#123;</span></span><br><span class="line"><span class="xml">                    this.counter--</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        const app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">            el:"#app",</span></span><br><span class="line"><span class="xml">            data:&#123;</span></span><br><span class="line"><span class="xml">                message:'aaaaaa'</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="父组件与子组件"><a href="#父组件与子组件" class="headerlink" title="父组件与子组件"></a>父组件与子组件</h4><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 父传子--props属性实现，自子传父通过事件$emit --&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- </span></span><span class="xml"><span class="comment">&lt;cpn1&gt;&lt;/cpn1&gt;</span></span><span class="xml"><span class="comment"> --&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">cpn2</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">        //创建第一个组件构造器(子组件)</span></span><br><span class="line"><span class="xml">        const cpn1 = Vue.extend(</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">            template:`</span></span><br><span class="line"><span class="xquery">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xquery">                    <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>第一个组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xquery">                &lt;/div&gt;</span></span><br><span class="line"><span class="xquery">            `,</span></span><br><span class="line"><span class="xquery">        &#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">        //创建第二个组件构造器(父组件)</span></span><br><span class="line"><span class="xml">        const cpn2 = Vue.extend(</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">            template:`</span></span><br><span class="line"><span class="xquery">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xquery">                    &lt;!-- 这里使用了cpn1这个组件... --&gt;</span></span><br><span class="line"><span class="xquery">                    <span class="xml"><span class="tag">&lt;<span class="name">cpn1</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn1</span>&gt;</span></span></span></span><br><span class="line"><span class="xquery">                    <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>第二个组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="xquery">                &lt;/div&gt;</span></span><br><span class="line"><span class="xquery">            `,</span></span><br><span class="line"><span class="xquery">            components:&#123;</span></span><br><span class="line"><span class="xquery">                cpn1: cpn1</span></span><br><span class="line"><span class="xquery">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        //root组件</span></span><br><span class="line"><span class="xml">        const app = new Vue(</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">            el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="xquery">            data:&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="xquery">            &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">            components:</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">                cpn2: cpn2</span></span><br><span class="line"><span class="xquery">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;) </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--  --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="父子组件通信-props"><a href="#父子组件通信-props" class="headerlink" title="父子组件通信(props)"></a>父子组件通信(props)</h4></li>
<li>1.通过props向子组件传递数据<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 通信方式： 1.通过props向子组件传递数据  2.通过事件向父组件发送消息--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 通常将Vue实例当作根组件 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-bind:cmovies</span>=<span class="string">'movies'</span> <span class="attr">:cmessage</span>=<span class="string">'message'</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">'item in cmovies'</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;cmessage&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">        //父组件传子组件 </span></span><br><span class="line"><span class="xml">        const cpn =&#123;</span></span><br><span class="line"><span class="xml">            template:`#cpn`,</span></span><br><span class="line"><span class="xml">            //1.数组形式</span></span><br><span class="line"><span class="xml">            props:['cmovies',"cmessage"],</span></span><br><span class="line"><span class="xml">            //2.限制类型</span></span><br><span class="line"><span class="xml">            // props:&#123;</span></span><br><span class="line"><span class="xml">            //     cmovies:Array,</span></span><br><span class="line"><span class="xml">            //     cmessage:String </span></span><br><span class="line"><span class="xml">            // &#125;,</span></span><br><span class="line"><span class="xml">            //3.提供一些默认数据</span></span><br><span class="line"><span class="xml">            // props:&#123;</span></span><br><span class="line"><span class="xml">            //   cmessage:&#123;</span></span><br><span class="line"><span class="xml">            //       type:String,</span></span><br><span class="line"><span class="xml">            //       //默认值</span></span><br><span class="line"><span class="xml">            //       default:'默认值'</span></span><br><span class="line"><span class="xml">            //   &#125;  </span></span><br><span class="line"><span class="xml">            //&#125;,</span></span><br><span class="line"><span class="xml">            data()&#123;</span></span><br><span class="line"><span class="xml">                return&#123;&#125;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        const app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">            el:'#app',</span></span><br><span class="line"><span class="xml">            data:&#123;</span></span><br><span class="line"><span class="xml">                message:'消息',</span></span><br><span class="line"><span class="xml">                movies:['四月一日','四月的谎言','未闻花名']</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">            components:&#123;</span></span><br><span class="line"><span class="xml">                cpn</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 注意：v-bind绑定的时候不能那个用驼峰命名法 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="父组件访问子组件"><a href="#父组件访问子组件" class="headerlink" title="父组件访问子组件"></a>父组件访问子组件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父组件访问子组件：使用$children(数组)或$refs --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子组件访问父组件：使用$parent --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">ref</span>=<span class="string">"aaa"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">'btnClick'</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            methods:&#123;</span><br><span class="line">                btnClick()&#123;</span><br><span class="line"><span class="actionscript">                <span class="comment">//$children</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//打印子组件对象 这里是数组</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children)</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//调用自组件的方法</span></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">this</span>.$children[<span class="number">0</span>].showMessage()</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$children[<span class="number">0</span>].name)</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//遍历</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span>(<span class="keyword">let</span> c <span class="keyword">of</span> <span class="keyword">this</span>.$children)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(c.name);</span></span><br><span class="line">                        c.showMessage()</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"--------------"</span>)</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//$refs  默认是空的对象 必须在组件上添加属性ref=''</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.aaa.name)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line">                cpn:&#123;</span><br><span class="line"><span class="actionscript">                    template:<span class="string">'#cpn'</span>,</span></span><br><span class="line">                    data()&#123;</span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">                            name:<span class="string">'子组件的name==》$children调用'</span></span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    methods:&#123;</span><br><span class="line">                        showMessage()&#123;</span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="string">'showMeaage'</span>)</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="子组件访问父组件"><a href="#子组件访问父组件" class="headerlink" title="子组件访问父组件"></a>子组件访问父组件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- parent root 属性 --&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- 父组件访问子组件：使用$children(数组)或$refs --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子组件访问父组件：使用$parent --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是子组件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btnClick"</span>&gt;</span>子组件按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">            el:<span class="string">'#app'</span>,</span></span><br><span class="line">            data:&#123;</span><br><span class="line"><span class="actionscript">                message:<span class="string">'慕绥绥'</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            components:&#123;</span><br><span class="line">                cpn:&#123;</span><br><span class="line"><span class="actionscript">                    template:<span class="string">'#cpn'</span>,</span></span><br><span class="line">                    methods:&#123;</span><br><span class="line">                        btnClick()&#123;</span><br><span class="line"><span class="actionscript">                            <span class="comment">//$parent访问父组件</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$parent);</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$parent.message);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                            <span class="comment">//$root访问根组件</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="keyword">this</span>.$root);</span></span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="子组件传递数据到父组件"><a href="#子组件传递数据到父组件" class="headerlink" title="子组件传递数据到父组件"></a>子组件传递数据到父组件</h4></li>
<li>2.通过事件向父组件发送消息</li>
<li>说明传递参数的过程：<ul>
<li>子组件中通过点击事件，触发实例的$emit函数发射事件到父组件中，然后父组件自定义点击事件，触发事件从浏览器获得事件对象evevt，在其中找到我们想要的数据调用即可==》 this.message = item.name<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- //父组件模板 --&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-on:itemclick</span>=<span class="string">"cpnClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span></span><span class="xquery">&#123;&#123;message&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- 子组件模板 --&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"myCpn"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-for</span>=<span class="string">'item in categories'</span> @<span class="attr">click</span>=<span class="string">'btnClick(item)'</span>&gt;</span></span><span class="xquery">&#123;&#123;<span class="type">item</span><span class="built_in">.name</span>&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">        //子组件</span></span><br><span class="line"><span class="xml">        const cpn =</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">            template:<span class="string">'#myCpn'</span>,</span></span><br><span class="line"><span class="xquery">            // props:[<span class="string">'parent'</span>],</span></span><br><span class="line"><span class="xquery">            data()&#123;</span></span><br><span class="line"><span class="xquery">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="xquery">                    categories:[</span></span><br><span class="line"><span class="xquery">                        <span class="built_in">&#123;id</span>:<span class="string">'aaa'</span><span class="built_in">,name</span>:<span class="string">'热门推荐'</span>&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">                        </span><span class="xquery"><span class="built_in">&#123;id</span>:<span class="string">'bbb'</span><span class="built_in">,name</span>:<span class="string">'家用家电'</span>&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">                        </span><span class="xquery"><span class="built_in">&#123;id</span>:<span class="string">'ccc'</span><span class="built_in">,name</span>:<span class="string">'手机数码'</span>&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">                        </span><span class="xquery"><span class="built_in">&#123;id</span>:<span class="string">'ddd'</span><span class="built_in">,name</span>:<span class="string">'电脑办公'</span>&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">                    ]</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">            methods:</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">                btnClick(<span class="type">item</span>)&#123;</span></span><br><span class="line"><span class="xquery">                    console.log(<span class="type">item</span>);</span></span><br><span class="line"><span class="xquery">                    //发射事件</span></span><br><span class="line"><span class="xquery">                    &lt;!-- 将事件发射到父组件中，第一个参数是事件名，第二个属性是携带的数据，第三个参数是一些处理机制==》是否事件冒泡，是否捕获事件 --&gt;</span></span><br><span class="line"><span class="xquery">                    this.<span class="variable">$emit</span>(<span class="string">'itemclick'</span>,<span class="type">item</span>,&#123;&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        //父组件</span></span><br><span class="line"><span class="xml">        const app = new Vue(</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">            el:<span class="string">'#app'</span>,</span></span><br><span class="line"><span class="xquery">            data:&#123;</span></span><br><span class="line"><span class="xquery">                message:<span class="string">''</span></span></span><br><span class="line"><span class="xquery">            &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">            components:</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">                cpn</span></span><br><span class="line"><span class="xquery">            &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">            methods:</span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery">                cpnClick(<span class="type">item</span>)&#123;</span></span><br><span class="line"><span class="xquery">                    console.log(<span class="string">"cpnClick"</span>,<span class="type">item</span>)</span></span><br><span class="line"><span class="xquery">                    this.message = <span class="type">item</span><span class="built_in">.name</span></span></span><br><span class="line"><span class="xquery">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4></li>
</ul>
</li>
<li>不同于组件和 prop(属性)，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。举个例子，如果触发一个 camelCase 名字的事件：<h3 id="案例父子组件通信及双向绑定"><a href="#案例父子组件通信及双向绑定" class="headerlink" title="案例父子组件通信及双向绑定"></a>案例父子组件通信及双向绑定</h3><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 注意这个v-bind：=""这里没得大括号不是Musite方法 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:number1</span>=<span class="string">"num1"</span> <span class="attr">:number2</span>=<span class="string">"num2"</span> </span></span></span><br><span class="line"><span class="xml">                @num1change="num1change"</span></span><br><span class="line"><span class="xml">                @num2change="num2change"&gt;<span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- v-model="number1"  双向绑定--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">text</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span> Props:</span><span class="template-variable">&#123;&#123;dnumber1&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- &lt;input type="text" v-model="dnumber1"/&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- 这就是v-model的实质：即v-bind:属性绑定和input事件 --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- &lt;input type="text" v-bind:value="dnumber1" @input="dnumber1=$event.target.value"/&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- 对上面的实现方式进一步简化：用事件处理 --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"dnumber1"</span> @<span class="attr">input</span>=<span class="string">"num1Input"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span> Props:</span><span class="template-variable">&#123;&#123;dnumber2&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- &lt;input type="text" v-model="dnumber2"/&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"dnumber2"</span> @<span class="attr">input</span>=<span class="string">"num2Input"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">        const app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">            el:'#app',</span></span><br><span class="line"><span class="xml">            data:&#123;</span></span><br><span class="line"><span class="xml">                num1:1,</span></span><br><span class="line"><span class="xml">                num2:0</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">            methods:&#123;</span></span><br><span class="line"><span class="xml">                num1change(event)&#123;</span></span><br><span class="line"><span class="xml">                    //这样root页面就可以获取子组件的数据</span></span><br><span class="line"><span class="xml">                    console.log(event);</span></span><br><span class="line"><span class="xml">                    //这里也可以用基本数据类型转换 parseInt(String name);parseFloat(String name);</span></span><br><span class="line"><span class="xml">                    this.num1 = event;</span></span><br><span class="line"><span class="xml">                &#125;,</span></span><br><span class="line"><span class="xml">                num2change(event)&#123;</span></span><br><span class="line"><span class="xml">                    // String 类型</span></span><br><span class="line"><span class="xml">                    console.log(typeof(event));</span></span><br><span class="line"><span class="xml">                    this.num2 = event;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">            components:&#123;</span></span><br><span class="line"><span class="xml">                cpn:&#123;</span></span><br><span class="line"><span class="xml">                    template:'#cpn',</span></span><br><span class="line"><span class="xml">                    // 属性</span></span><br><span class="line"><span class="xml">                    props:&#123;</span></span><br><span class="line"><span class="xml">                        //属性值</span></span><br><span class="line"><span class="xml">                        number1:Number,</span></span><br><span class="line"><span class="xml">                        number2:Number</span></span><br><span class="line"><span class="xml">                    &#125;,</span></span><br><span class="line"><span class="xml">                    //在data函数中初始化返回，然后在子组件中使用v-model双向绑定</span></span><br><span class="line"><span class="xml">                    data()&#123;</span></span><br><span class="line"><span class="xml">                        return&#123;</span></span><br><span class="line"><span class="xml">                            dnumber1:this.number1,</span></span><br><span class="line"><span class="xml">                            dnumber2:this.number2</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    &#125;,</span></span><br><span class="line"><span class="xml">                    methods:&#123;</span></span><br><span class="line"><span class="xml">                        num1Input:function(event)&#123;</span></span><br><span class="line"><span class="xml">                            this.dnumber1 = event.target.value</span></span><br><span class="line"><span class="xml">                            //监听到值改变发射出事件</span></span><br><span class="line"><span class="xml">                            this.$emit("num1change",this.dnumber1)</span></span><br><span class="line"><span class="xml">                        &#125;,</span></span><br><span class="line"><span class="xml">                        num2Input:function(event)&#123;</span></span><br><span class="line"><span class="xml">                            this.dnumber2 = event.target.value</span></span><br><span class="line"><span class="xml">                            //监听到值改变发射出事件</span></span><br><span class="line"><span class="xml">                            this.$emit("num2change",this.dnumber2)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="案例watch监听属性值的改变"><a href="#案例watch监听属性值的改变" class="headerlink" title="案例watch监听属性值的改变"></a>案例watch监听属性值的改变</h4><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- //这种方式是通过 v-model绑定属性，及Vue注册组件构造器中watch属性监听指的改变的方式实现 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 注意这个v-bind：=""这里没得大括号不是Musite方法 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">:number1</span>=<span class="string">"num1"</span> <span class="attr">:number2</span>=<span class="string">"num2"</span> </span></span></span><br><span class="line"><span class="xml">                @num1change="num1change"</span></span><br><span class="line"><span class="xml">                @num2change="num2change"&gt;<span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- v-model="number1"  双向绑定--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">text</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span> Props:</span><span class="template-variable">&#123;&#123;dnumber1&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"dnumber1"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- 这就是v-model的实质：即v-bind:属性绑定和input事件 --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- &lt;input type="text" v-bind:value="dnumber1" @input="dnumber1=$event.target.value"/&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- 对上面的实现方式进一步简化：用事件处理 --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- &lt;input type="text" v-bind:value="dnumber1" @input="num1Input"/&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span> Props:</span><span class="template-variable">&#123;&#123;dnumber2&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"dnumber2"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- &lt;input type="text" v-bind:value="dnumber2" @input="num2Input"/&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">        const app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">            el:'#app',</span></span><br><span class="line"><span class="xml">            data:&#123;</span></span><br><span class="line"><span class="xml">                num1:1,</span></span><br><span class="line"><span class="xml">                num2:0</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">            methods:&#123;</span></span><br><span class="line"><span class="xml">                num1change(event)&#123;</span></span><br><span class="line"><span class="xml">                    //这样root页面就可以获取子组件的数据</span></span><br><span class="line"><span class="xml">                    console.log(event);</span></span><br><span class="line"><span class="xml">                    //这里也可以用基本数据类型转换 parseInt(String name);parseFloat(String name);</span></span><br><span class="line"><span class="xml">                    this.num1 = event;</span></span><br><span class="line"><span class="xml">                &#125;,</span></span><br><span class="line"><span class="xml">                num2change(event)&#123;</span></span><br><span class="line"><span class="xml">                    // String 类型</span></span><br><span class="line"><span class="xml">                    console.log(typeof(event));</span></span><br><span class="line"><span class="xml">                    this.num2 = event;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">            components:&#123;</span></span><br><span class="line"><span class="xml">                cpn:&#123;</span></span><br><span class="line"><span class="xml">                    template:'#cpn',</span></span><br><span class="line"><span class="xml">                    // 属性</span></span><br><span class="line"><span class="xml">                    props:&#123;</span></span><br><span class="line"><span class="xml">                        //属性值</span></span><br><span class="line"><span class="xml">                        number1:Number,</span></span><br><span class="line"><span class="xml">                        number2:Number</span></span><br><span class="line"><span class="xml">                    &#125;,</span></span><br><span class="line"><span class="xml">                    //在data函数中初始化返回，然后在子组件中使用v-model双向绑定</span></span><br><span class="line"><span class="xml">                    data()&#123;</span></span><br><span class="line"><span class="xml">                        return&#123;</span></span><br><span class="line"><span class="xml">                            dnumber1:this.number1,</span></span><br><span class="line"><span class="xml">                            dnumber2:this.number2</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    &#125;,</span></span><br><span class="line"><span class="xml">                    // methods:&#123;</span></span><br><span class="line"><span class="xml">                    //     num1Input:function(event)&#123;</span></span><br><span class="line"><span class="xml">                    //         this.dnumber1 = event.target.value</span></span><br><span class="line"><span class="xml">                    //         //监听到值改变发射出事件</span></span><br><span class="line"><span class="xml">                    //         this.$emit("num1change",this.dnumber1)</span></span><br><span class="line"><span class="xml">                    //     &#125;,</span></span><br><span class="line"><span class="xml">                    //     num2Input:function(event)&#123;</span></span><br><span class="line"><span class="xml">                    //         this.dnumber2 = event.target.value</span></span><br><span class="line"><span class="xml">                    //         //监听到值改变发射出事件</span></span><br><span class="line"><span class="xml">                    //         this.$emit("num2change",this.dnumber2)</span></span><br><span class="line"><span class="xml">                    //     &#125;</span></span><br><span class="line"><span class="xml">                    // &#125;</span></span><br><span class="line"><span class="xml">                    //监听某个属性值的改变</span></span><br><span class="line"><span class="xml">                    watch:&#123;</span></span><br><span class="line"><span class="xml">                        dnumber1(newValue)&#123;</span></span><br><span class="line"><span class="xml">                            this.dnumber2 = newValue * 100;</span></span><br><span class="line"><span class="xml">                            this.$emit("num1change",newValue)</span></span><br><span class="line"><span class="xml">                        &#125;,</span></span><br><span class="line"><span class="xml">                        dnumber2(newValue)&#123;</span></span><br><span class="line"><span class="xml">                            this.dnumber1 = newValue / 100;</span></span><br><span class="line"><span class="xml">                            this.$emit("num1change",newValue)</span></span><br><span class="line"><span class="xml">                        &#125;</span></span><br><span class="line"><span class="xml">                    &#125;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="自定义组件的-v-model"><a href="#自定义组件的-v-model" class="headerlink" title="自定义组件的 v-model"></a>自定义组件的 v-model</h3></li>
<li>一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框等类型的输入控件可能会将 value attribute 用于不同的目的。model 选项可以用来避免这样的冲突：<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">"cpn"</span>,&#123;</span><br><span class="line">    //model 选项可以用来避免这样的冲突</span><br><span class="line">    <span class="keyword">mode</span><span class="variable">l:</span>&#123;</span><br><span class="line">        prop:<span class="string">'checked'</span>,</span><br><span class="line">        even<span class="variable">t:</span><span class="string">'change'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    prop<span class="variable">s:</span>&#123;</span><br><span class="line">        checked:Boolean</span><br><span class="line">    &#125;,</span><br><span class="line">    template:`</span><br><span class="line">        &lt;<span class="built_in">input</span></span><br><span class="line">        <span class="built_in">type</span>=<span class="string">"checkbox"</span></span><br><span class="line">        v-bind:checked=<span class="string">"checked"</span></span><br><span class="line">        v-<span class="keyword">on</span>:<span class="keyword">change</span>=<span class="string">"$emit('change', $event.target.checked)"</span></span><br><span class="line">        &gt;</span><br><span class="line">    `</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>前端框架VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架VUE+基础(一)</title>
    <url>/2020/05/31/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6VUE-%E5%9F%BA%E7%A1%80-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="模板语法-Mustache语法-双大括号"><a href="#模板语法-Mustache语法-双大括号" class="headerlink" title="模板语法+Mustache语法 (双大括号)"></a>模板语法+Mustache语法 (双大括号)</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">- <span class="string">"&#123;&#123;&#125;&#125; "</span>相当于原先<span class="keyword">property</span><span class="title"></span>属性</span><br><span class="line">- Mustache语法不能作用于Html <span class="keyword">attribute</span>上，遇到这种情况应该使用v-bind指令</span><br><span class="line">- 实例</span><br></pre></td></tr></table></figure>
<pre><code>    &lt;div v-bind:id=&quot;msg&quot;&gt;&lt;/div&gt;
    //简写
    &lt;div :id=&quot;msg&quot;&gt;&lt;/div&gt;
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby"> 对于布尔类型(存在即为<span class="literal">true</span>),v-bind会有所不同</span></span><br><span class="line"><span class="ruby">  - 注意编程习惯：布尔类型变量 is开头 如：isButtonDisabled</span></span><br></pre></td></tr></table></figure></code></pre><figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">button</span> v-bind:disabled=<span class="string">"isButtonDisabled"</span>&gt;<span class="keyword">Button</span>&lt;/<span class="keyword">button</span>&gt;</span><br><span class="line"><span class="comment">//isButtonDisabled 值为true时才会渲染</span></span><br><span class="line"><span class="comment">//充分必要条件</span></span><br></pre></td></tr></table></figure>
<ul>
<li>当然在Mustache语法也支持简单的逻辑运算，算数运算，三目运算，这些表达式<ul>
<li>注意：这些表达式会被所属Vue实例的数据作用域下的作为JavaScript被解析,但是每个绑定只能是单个表达式.<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3></li>
</ul>
</li>
<li>指的是以这个v-为前缀的特殊属性</li>
<li>v-if=”seen”:判断seen为真值的时候才会插入/移除其元素</li>
<li>参数：如v-bind：href=”url” 这种形式href就是属性，告知v-bind指令将元素的href attribute与表达式url的值绑定<h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4></li>
<li>v-on：用于监听DOM的事件</li>
<li>如点击事件<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">a</span> v-<span class="keyword">on</span>:<span class="title">click</span>=<span class="string">"doSomething"</span>&gt;...&lt;/<span class="title">a</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="v-bind：属性绑定"><a href="#v-bind：属性绑定" class="headerlink" title="v-bind：属性绑定"></a>v-bind：属性绑定</h4></li>
</ul>
<h4 id="v-once-执行一次指令地插值，插值处的内容不会更新"><a href="#v-once-执行一次指令地插值，插值处的内容不会更新" class="headerlink" title="v-once 执行一次指令地插值，插值处的内容不会更新"></a>v-once 执行一次指令地插值，插值处的内容不会更新</h4><h4 id="v-html-输出原始Html"><a href="#v-html-输出原始Html" class="headerlink" title="v-html 输出原始Html"></a>v-html 输出原始Html</h4><h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><ul>
<li>[]这个里面用JavaScript表达式作为一个指令的参数：</li>
</ul>
<ol>
<li>就是你在data 初始化数据 attributeName,自定义组件的时候你就可以在页面内动态的使用attributeName：赋值<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">"url"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>动态事件：就是可以使用动态参数为一个动态的事件名绑定处理函数<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">a</span> v-<span class="keyword">on</span>:[<span class="title">eventName</span>]=<span class="string">'halderClick'</span>&gt;...&lt;/<span class="title">a</span>&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>注意：<ol>
<li>就是attributeName或者evevtName为null时，这个也就显性的用于移除绑定，也就是说null时不会绑定,其他非String类型的将会触发警告。</li>
<li>attributeName或者evevtName为表达式,会有编译警告，解决方法就是使用计算属性</li>
<li>撰写模板：attributeName或者evevtName要小写<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">在 DOM 中使用模板时这段代码会被转换为 `v-bind:[someattr]`。</span></span><br><span class="line"><span class="comment">除非在实例中有一个名为“someattr”的 property，否则代码不会工作。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">someAttr</span>]=<span class="string">"value"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight htmlbars"><table><tr><td class="code"><pre><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/VUE/Vue初体验/js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">	/* 实现样式 */</span></span><br><span class="line"><span class="xml">	#inner &#123;</span></span><br><span class="line"><span class="xml">		width: 100px;</span></span><br><span class="line"><span class="xml">		height: 100px;</span></span><br><span class="line"><span class="xml">		background-color: rosybrown;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">	#btn &#123;</span></span><br><span class="line"><span class="xml">		width: 200px;</span></span><br><span class="line"><span class="xml">		height: 200px;</span></span><br><span class="line"><span class="xml">		background-color: mediumspringgreen;</span></span><br><span class="line"><span class="xml">	&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">span</span>&gt;</span>Meaage:</span><span class="template-variable">&#123;&#123;message&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>final:</span><span class="template-variable">&#123;&#123;once&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>&gt;</span>Html:</span><span class="template-variable">&#123;&#123;html&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"dynamicId"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		绑定数据样式</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- //disabled，禁用按钮 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">"isButtonDisabled"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		按钮</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- //不显示p元素？？？？ --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>isButtonDisabled:'true'<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"url"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span> /&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 这里写 count + 1 无效--&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count +=1"</span>&gt;</span>计数器：</span><span class="template-variable">&#123;&#123;count&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"geet"</span>&gt;</span>Get<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">v-on:click</span>=<span class="string">"buttonclick"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		测试事件</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"count +=1"</span>&gt;</span>计数器：</span><span class="template-variable">&#123;&#123;count&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 动态参数 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- &lt;a v-bind:[attributeName]= "csdnUrl"&gt;链接到CSDN&lt;/a&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"csdnUrl"</span>&gt;</span>链接到CSDN<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 修饰符 .prevent 阻止系统默认（行为）, 与触发事件调用enent.preventDefault() --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- &lt;form action="" v-on:submit.prevent="onSubmit"&gt;&lt;/form&gt; --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 计算属性 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"comp"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>原数据</span><span class="template-variable">&#123;&#123;message02&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>反转后的数据:</span><span class="template-variable">&#123;&#123;reversemessage02&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><span class="template-variable">&#123;&#123;fullName&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">	var app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">		el: "#box",</span></span><br><span class="line"><span class="xml">		data: &#123;</span></span><br><span class="line"><span class="xml">		message: "模板语法",</span></span><br><span class="line"><span class="xml">		once: "v-once指令==》属性值将不会改变",</span></span><br><span class="line"><span class="xml">		html: "<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>&gt;</span>Html:&#123;&#123;&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>",</span></span><br><span class="line"><span class="xml">		dynamicId: "inner",</span></span><br><span class="line"><span class="xml">		isButtonDisabled: "",</span></span><br><span class="line"><span class="xml">		seen: "false",</span></span><br><span class="line"><span class="xml">		url: "/boke-data/images/APPInstance.png",</span></span><br><span class="line"><span class="xml">		count: 0,</span></span><br><span class="line"><span class="xml">		attributeName: "href",</span></span><br><span class="line"><span class="xml">		csdnUrl: "https://https://www.csdn.net/.com",</span></span><br><span class="line"><span class="xml">		message02: "Hello world",</span></span><br><span class="line"><span class="xml">		firstname: "Foo",</span></span><br><span class="line"><span class="xml">		lastName: "Bar",</span></span><br><span class="line"><span class="xml">		fullName: ""</span></span><br><span class="line"><span class="xml">		&#125;,</span></span><br><span class="line"><span class="xml">		watch: &#123;</span></span><br><span class="line"><span class="xml">		firstName: function (val) &#123;</span></span><br><span class="line"><span class="xml">			console.log(val)</span></span><br><span class="line"><span class="xml">			this.fullName = val + " " + this.lastName;</span></span><br><span class="line"><span class="xml">		&#125;,</span></span><br><span class="line"><span class="xml">		lastName: function (val) &#123;</span></span><br><span class="line"><span class="xml">			console.log(val)</span></span><br><span class="line"><span class="xml">			this.fullName = val + "" + val;</span></span><br><span class="line"><span class="xml">		&#125;,</span></span><br><span class="line"><span class="xml">		&#125;,</span></span><br><span class="line"><span class="xml">		// 事件处理方法必须写在这里</span></span><br><span class="line"><span class="xml">		methods: &#123;</span></span><br><span class="line"><span class="xml">		buttonclick: function (event) &#123;</span></span><br><span class="line"><span class="xml">			console.log(this.$el.textContent);</span></span><br><span class="line"><span class="xml">			console.log(event);</span></span><br><span class="line"><span class="xml">		&#125;,</span></span><br><span class="line"><span class="xml">		doSomething: function () &#123;</span></span><br><span class="line"><span class="xml">			console.log("---------");</span></span><br><span class="line"><span class="xml">		&#125;,</span></span><br><span class="line"><span class="xml">		geet: function () &#123;</span></span><br><span class="line"><span class="xml">			alert(' console.log("---------")');</span></span><br><span class="line"><span class="xml">		&#125;,</span></span><br><span class="line"><span class="xml">		&#125;,</span></span><br><span class="line"><span class="xml">		computed: &#123;</span></span><br><span class="line"><span class="xml">		//计算属性 getter函数</span></span><br><span class="line"><span class="xml">		reversemessage02: function () &#123;</span></span><br><span class="line"><span class="xml">			return this.message02.split("").reverse().join("");</span></span><br><span class="line"><span class="xml">		&#125;,</span></span><br><span class="line"><span class="xml">		&#125;,</span></span><br><span class="line"><span class="xml">	&#125;);</span></span><br><span class="line"><span class="xml">	console.log(app.reversemessage02);</span></span><br><span class="line"><span class="xml">	app.message02 = "GoodBye";</span></span><br><span class="line"><span class="xml">	console.log(app.message02);</span></span><br><span class="line"><span class="xml">	console.log(app.reversemessage02);</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="修饰符-modifier"><a href="#修饰符-modifier" class="headerlink" title="修饰符(modifier)"></a>修饰符(modifier)</h3></li>
</ol>
</li>
<li>修饰符 (modifier) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。</li>
<li>.prevent:就是告诉v-on事件指令对于触发事件调用event.preventDefault()<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">form</span> v-<span class="keyword">on</span>:submit.prevent=<span class="string">"onSubmit"</span>&gt;...&lt;/<span class="keyword">form</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><ul>
<li>v-on:click=””    ==&gt; @cick=””  ==&gt; @[event]=”动态属性”</li>
<li>v-bind:href=””  ==&gt; :bind:href=”” ==&gt; :[key]=’url’<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> @<span class="attr">src</span>=<span class="string">"imgUrl"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">srcset</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">a</span> @<span class="attr">href</span>=<span class="string">"https://baidu.com"</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 插值操作 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">		<span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">			el:<span class="string">'app'</span>,</span></span><br><span class="line">			data:&#123;</span><br><span class="line"><span class="actionscript">				message:<span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">				imgURL:<span class="string">'E:/VScode-data/Flex弹性布局/image/20200520231835.png'</span>,</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;) </span><br><span class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span></span></span><br></pre></td></tr></table></figure>
<h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3></li>
</ul>
</li>
<li><a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">https://github.com/vuejs/vue</a></li>
</ul>
<h3 id="Truthy-真值"><a href="#Truthy-真值" class="headerlink" title="Truthy(真值)"></a>Truthy(真值)</h3><ul>
<li>在JavaScript中，Truthy指的是在布尔值上下文中，转换后的值为真的值。</li>
<li>所有值都是真值，除非它们被定义为 假值（即除 false、0、””、null、undefined 和 NaN 以外皆为真值）。</li>
<li>下面就是详细的真值示例<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">if (<span class="name">true</span>)</span><br><span class="line">if (&#123;&#125;)</span><br><span class="line">if ([])</span><br><span class="line">if (<span class="number">42</span>)</span><br><span class="line">if (<span class="string">"foo"</span>)</span><br><span class="line">if (<span class="name">new</span> Date())</span><br><span class="line">if (<span class="name">-42</span>)</span><br><span class="line">if (<span class="number">3.14</span>)</span><br><span class="line">if (<span class="name">-3</span>.<span class="number">14</span>)</span><br><span class="line">if (<span class="name">Infinity</span>)</span><br><span class="line">if (<span class="name">-Infinity</span>)</span><br></pre></td></tr></table></figure></li>
<li>Vue中的判断成功就是条件Truthy<h3 id="前缀"><a href="#前缀" class="headerlink" title="前缀 $"></a>前缀 $</h3></li>
<li>除了数据的属性property，Vue实例还暴露了一些有用的实例property与方法；</li>
<li>特征：他们都有前缀$,以便与用户定义的属性区分==》Vm.$watch</li>
<li>官网的小案例：<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">data</span> =&#123;a:<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">var</span> vm = <span class="literal">new</span> Vue(&#123;</span><br><span class="line"> el:<span class="string">"#app"</span>,</span><br><span class="line"> <span class="built_in">data</span>:<span class="built_in">data</span></span><br><span class="line">&#125;)</span><br><span class="line">vm.$data === <span class="built_in">data</span> <span class="comment">//true</span></span><br><span class="line">vm.$el === document.getElementById(<span class="string">'app'</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//$watch 实例方法 用来监听值的变化</span></span><br><span class="line">vm.$wtch(<span class="string">'a'</span>,function(newValue,oldValue))&#123;</span><br><span class="line"> <span class="comment">//这里回掉将在‘vm.a’的之变化后调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>官网：实例API的地址:<a href="https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B-property" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#%E5%AE%9E%E4%BE%8B-property</a><h4 id="el"><a href="#el" class="headerlink" title="el"></a>el</h4></li>
<li>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标。可以是 CSS 选择器，也可以是一个 HTMLElement 实例。</li>
<li>不能作用到 <html> 或者 <body> 上</li>
<li>也可以通过 实例.$mount() 手动挂载<h3 id="实例的生命周期钩子"><a href="#实例的生命周期钩子" class="headerlink" title="实例的生命周期钩子"></a>实例的生命周期钩子</h3></li>
<li>Vue的实例的生命周期从生到死…</li>
<li>在每一个小阶段：比如==》需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。</li>
<li>在生命周期钩子函数中，用户就可以在不同的需求下在不同的阶段添加自己的代码执行逻辑单元</li>
<li>在钩子函数中 this 的指向vm的实例</li>
<li>注意：不要在选项 property 或回调上使用箭头函数，this.xxx 的行为未定义。<h4 id="官网图示："><a href="#官网图示：" class="headerlink" title="官网图示："></a>官网图示：</h4><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""><h4 id="钩子函数详解-官网地址：https-cn-vuejs-org-v2-api"><a href="#钩子函数详解-官网地址：https-cn-vuejs-org-v2-api" class="headerlink" title="钩子函数详解  官网地址：https://cn.vuejs.org/v2/api/"></a>钩子函数详解  官网地址：<a href="https://cn.vuejs.org/v2/api/" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/</a></h4></li>
<li>beforeCreate<ul>
<li>在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</li>
</ul>
</li>
<li>created<ul>
<li>在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</li>
</ul>
</li>
<li>beforeMount<ul>
<li>在挂载开始之前被调用：相关的 渲染render 函数首次被调用。</li>
</ul>
</li>
<li>mounted<ul>
<li>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</li>
</ul>
</li>
<li>beforeUpdate<ul>
<li>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。<br>你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</li>
</ul>
</li>
<li>updated<ul>
<li>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</li>
</ul>
</li>
<li>activated</li>
<li>deactivated</li>
<li>beforeDestroy</li>
<li>destroyed</li>
<li>errorCaptured<h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		</span><span class="template-variable">&#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'static'</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">h2</span>  <span class="attr">v-bind:class</span>=<span class="string">"&#123;active:isActive,Line:isLine&#125;"</span>&gt;</span></span><span class="template-variable">&#123;&#123;message&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">''</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass,errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- &lt;div class='active text-danger'&gt;&lt;/div&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 三目运算 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '',errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">'[&#123;active:isActive&#125;,errorClass]'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 调用组件 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">'baz boo'</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 绑定内联样式 对象语法 通过js设置样式--&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;color:activeColor,fontSize:fontSize+'px'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 直接绑定一个 css对象  --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">'[baseStyle,overrideigStyle]'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">		//v-if 判断是否为真值</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">'awesome'</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>success<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 模板 --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">		const app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">			el:'#app',</span></span><br><span class="line"><span class="xml">			data:&#123;</span></span><br><span class="line"><span class="xml">				activeClass:'active',</span></span><br><span class="line"><span class="xml">				errorClass:'text-danger',</span></span><br><span class="line"><span class="xml">				message:"你好呀！-",</span></span><br><span class="line"><span class="xml">				isActive:true,</span></span><br><span class="line"><span class="xml">				hasError:false,</span></span><br><span class="line"><span class="xml">				activeColor:'red',</span></span><br><span class="line"><span class="xml">				fontSize:'30',</span></span><br><span class="line"><span class="xml">				styleObject:&#123;</span></span><br><span class="line"><span class="xml">					color:'yellow',</span></span><br><span class="line"><span class="xml">					fontSize:'30px'</span></span><br><span class="line"><span class="xml">				&#125;</span></span><br><span class="line"><span class="xml">			&#125;,</span></span><br><span class="line"><span class="xml">			// 计算属性</span></span><br><span class="line"><span class="xml">			computed:&#123;</span></span><br><span class="line"><span class="xml">				classObject:function()&#123;</span></span><br><span class="line"><span class="xml">					return&#123;</span></span><br><span class="line"><span class="xml">						active:this.isActive &amp;&amp; !this.error,</span></span><br><span class="line"><span class="xml">						'text-danger':this.error &amp;&amp; this.error.type =='fatal'</span></span><br><span class="line"></span><br><span class="line"><span class="xml">					&#125;</span></span><br><span class="line"><span class="xml">				&#125;,</span></span><br><span class="line"><span class="xml">				</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">			</span></span><br><span class="line"><span class="xml">		//     Vue.component('my-component',&#123;</span></span><br><span class="line"><span class="xml">		//             template:'<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"foo bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>'</span></span><br><span class="line"><span class="xml">		//         &#125;),</span></span><br><span class="line"><span class="xml">		//         Vue.component(</span></span><br><span class="line"><span class="xml">		//             'alert',&#123;</span></span><br><span class="line"><span class="xml">		//                 template:'</span></span><br><span class="line"><span class="xml">		//                 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'demo-alert-box'</span>&gt;</span></span></span><br><span class="line"><span class="xml">		//                     <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Error!<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">		//                     <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>    </span></span><br><span class="line"><span class="xml">		//                 <span class="tag">&lt;/<span class="name">div</span>&gt;</span>'&#125;</span></span><br><span class="line"><span class="xml">		//         &#125;)</span></span><br><span class="line"><span class="xml">		// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="v-bind绑定驼峰命名的转换"><a href="#v-bind绑定驼峰命名的转换" class="headerlink" title="v-bind绑定驼峰命名的转换"></a>v-bind绑定驼峰命名的转换</h3><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 如果组件中的数据变量命已驼峰命名法（cInfo）...再绑定v-bind的时候使用v-bind:c-info=''这种形式 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">cpn</span> <span class="attr">v-bind:c-info</span>=<span class="string">"info"</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cpn"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 注意：如过组件中元素比较多的情况下，要使用根元素将其包裹起来--root element，否则会报错 --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;cInfo&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    const cpn = &#123;</span></span><br><span class="line"><span class="xml">        template: "#cpn",</span></span><br><span class="line"><span class="xml">        props: &#123;</span></span><br><span class="line"><span class="xml">        cInfo: &#123;</span></span><br><span class="line"><span class="xml">            type: Object,</span></span><br><span class="line"><span class="xml">            default() &#123;</span></span><br><span class="line"><span class="xml">            return &#123;&#125;;</span></span><br><span class="line"><span class="xml">            &#125;,</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    const app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">        el: "#app",</span></span><br><span class="line"><span class="xml">        data: &#123;</span></span><br><span class="line"><span class="xml">        info: &#123;</span></span><br><span class="line"><span class="xml">            name:</span></span><br><span class="line"><span class="xml">            "Vue对于驼峰命名法的效验可通过页面的 v-bind:c-info这样(cInfo)",</span></span><br><span class="line"><span class="xml">            age: 88,</span></span><br><span class="line"><span class="xml">            sex: 0,</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">        components: &#123;</span></span><br><span class="line"><span class="xml">        cpn,</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="v-if及v-else"><a href="#v-if及v-else" class="headerlink" title="v-if及v-else"></a>v-if及v-else</h3><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"del"</span>&gt;</span></span><span class="template-variable">&#123;&#123;message&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">style</span>=<span class="string">"text-decoration: line-through;"</span>&gt;</span></span><span class="template-variable">&#123;&#123;message&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">todo-item</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    Vue.Component("todo-item", </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">        props:&#123;</span></span><br><span class="line"><span class="template-variable">          messge:String,</span></span><br><span class="line"><span class="template-variable">          del:&#123;</span></span><br><span class="line"><span class="template-variable">              type:Boolean,</span></span><br><span class="line"><span class="template-variable">              defaule:false</span></span><br><span class="line"><span class="template-variable">          &#125;</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">          template:' <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">"!del"</span>&gt;</span></span><span class="template-variable">&#123;&#123;message&#125;</span><span class="xml">&#125;<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">style</span>=<span class="string">"text-decortion:line-through"</span>&gt;</span></span><span class="template-variable">&#123;&#123;message&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&lt;/<span class="attr">li</span>&gt;</span>',</span></span><br><span class="line"><span class="xml">          </span></span><br><span class="line"><span class="xml">          data: function ()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">              return &#123;&#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml">          &#125;,</span></span><br><span class="line"><span class="xml">          methods: </span><span class="template-variable">&#123;&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">      &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="xml">      var app = new Vue(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">          el: "#app", //指定DOM节点</span></span><br><span class="line"><span class="template-variable">          data: &#123;</span></span><br><span class="line"><span class="template-variable">          message: "我自横刀向天笑",</span></span><br><span class="line"><span class="template-variable">          del: false,</span></span><br><span class="line"><span class="template-variable">          &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="vue实例的数据"><a href="#vue实例的数据" class="headerlink" title="vue实例的数据"></a>vue实例的数据</h3>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件内部不能直接访问Vue实力的数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/x-template"</span> <span class="attr">id</span>=<span class="string">"myCpn"</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件内部访问Vue实例的数据<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;message&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">	<span class="comment">//注册一个全局组件</span></span></span><br><span class="line"><span class="actionscript">	Vue.component(<span class="string">'cpn'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">		template:<span class="string">'#myCpn'</span>,</span></span><br><span class="line"><span class="actionscript">		<span class="comment">//组件中存放数据的位置，此处data必须是个函数，并且这个函数返回一个对象，其对象内部保存着数据           data:function()&#123;</span></span></span><br><span class="line"><span class="actionscript">			data:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">			<span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">				title:<span class="string">'abc'</span>,</span></span><br><span class="line"><span class="actionscript">				message:<span class="string">'组件消息'</span></span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">	  el:<span class="string">'#app'</span>,</span></span><br><span class="line">	  data:&#123;</span><br><span class="line"><span class="actionscript">		message:<span class="string">"消息"</span>,</span></span><br><span class="line"><span class="actionscript">		title:<span class="string">'标题'</span></span></span><br><span class="line">	  &#125;,</span><br><span class="line">	  components:&#123;</span><br><span class="line">		 </span><br><span class="line">	  &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="v-model数据双向绑定"><a href="#v-model数据双向绑定" class="headerlink" title="v-model数据双向绑定"></a>v-model数据双向绑定</h2></li>
</ul>
<h3 id="v-mode表单绑定"><a href="#v-mode表单绑定" class="headerlink" title="v-mode表单绑定"></a>v-mode表单绑定</h3><pre><code><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 这样就实现了数据双向绑定 当input中数据改变的时候message的之也随之改变 --&gt;</span></span></span><br><span class="line"><span class="xml">		描述:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;message&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- v-model的实质就是两个属性 v-bind:value="message" --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- v-on:input="valueInput" 监听事件 --&gt;</span></span></span><br><span class="line"><span class="xml">		v-model的实质:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"message"</span> <span class="attr">v-on:input</span>=<span class="string">"valueInput"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">		第二种写法语法糖：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"message"</span> @<span class="attr">input</span>=<span class="string">"message = $event.target.value"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">	nihao</span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 表单控价在实际开发中是非常常见的，特别是对于用户信息提交需要大量的表单--&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">		const app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">			el:'#app',</span></span><br><span class="line"><span class="xml">			data:&#123;</span></span><br><span class="line"><span class="xml">				message:"Hello world"</span></span><br><span class="line"><span class="xml">			&#125;,</span></span><br><span class="line"><span class="xml">			methods:&#123;</span></span><br><span class="line"><span class="xml">				valueInput:function(event)&#123;</span></span><br><span class="line"><span class="xml">					console.log(event)</span></span><br><span class="line"><span class="xml">					// 绑定事件浏览会返回一个event对象，在event对象中就可以获取target的value</span></span><br><span class="line"><span class="xml">					this.message = event.target.value</span></span><br><span class="line"><span class="xml">				&#125;</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">		&#125;)</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure></code></pre><h3 id="v-model的使用radio单选框"><a href="#v-model的使用radio单选框" class="headerlink" title="v-model的使用radio单选框"></a>v-model的使用radio单选框</h3><pre><code><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- v-model:radio --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">			说明：</span></span><br><span class="line"><span class="xml">			在html中，<span class="tag">&lt;<span class="name">label</span>&gt;</span>标签通常和<span class="tag">&lt;<span class="name">input</span>&gt;</span>标签一起使用，<span class="tag">&lt;<span class="name">label</span>&gt;</span>标签为input元素定义标注（标记）。</span></span><br><span class="line"></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>标签的作用是为鼠标用户改进了可用性，当用户点击<span class="tag">&lt;<span class="name">label</span>&gt;</span>标签中的文本时，浏览器就会自动将焦点转到和该标签相关联的控件上；</span></span><br><span class="line"></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>标签在单选按钮和复选按钮上经常被使用，使用该标签后，你点击单选按钮或复选按钮的文本也是可以选中的。</span></span><br><span class="line"><span class="xml">		 --&gt;</span></span><br><span class="line"><span class="xml">		 <span class="comment">&lt;!-- 即点击文本便可选中 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- &lt;label for="关联控件的id" form="所属表单id列表"&gt;文本内容&lt;/label&gt; --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 在html5中还新增了一个属性form，form属性是用来规定所属的一个或多个表单的 id 列表，以空格隔开； --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"meal"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="comment">&lt;!-- 注意：这里的有v-model  name属性可以省略(互斥)   --&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"meal"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>/&gt;</span>男</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"gril"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"gril"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"sex"</span>/&gt;</span>女</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">		宁选择的性别：<span class="tag">&lt;<span class="name">text</span>&gt;</span></span><span class="template-variable">&#123;&#123;sex&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;sex&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">		const app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">			el:'#app',</span></span><br><span class="line"><span class="xml">			data:&#123;</span></span><br><span class="line"><span class="xml">				message: 'Hello world',</span></span><br><span class="line"><span class="xml">				// 默认选中男</span></span><br><span class="line"><span class="xml">				sex: '男'</span></span><br><span class="line"><span class="xml">			&#125;</span></span><br><span class="line"><span class="xml">		&#125;)</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure></code></pre><h3 id="v-model使用checkbox复选框"><a href="#v-model使用checkbox复选框" class="headerlink" title="v-model使用checkbox复选框"></a>v-model使用checkbox复选框</h3><pre><code><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- 单选 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"agree"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"agree"</span> <span class="attr">v-model</span>=<span class="string">"isAgree"</span> /&gt;</span>同意协议</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">"!isAgree"</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>你选择的是：</span><span class="template-variable">&#123;&#123;isAgree&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  复选框：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- &lt;label for="check"&gt; &lt;/label&gt;  注意一般情况下 一个label与一个input--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"java"</span> <span class="attr">v-model</span>=<span class="string">'hobbies'</span>/&gt;</span>java</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"spring"</span> <span class="attr">v-model</span>=<span class="string">'hobbies'</span>/&gt;</span>spring</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"javaScript"</span> <span class="attr">v-model</span>=<span class="string">'hobbies'</span>/&gt;</span>javaScript</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"springBoot"</span> <span class="attr">v-model</span>=<span class="string">'hobbies'</span>/&gt;</span>springBoot</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"es6"</span> <span class="attr">v-model</span>=<span class="string">'hobbies'</span>/&gt;</span>es6</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;hobbies&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  const app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">	el: "#app",</span></span><br><span class="line"><span class="xml">	data: &#123;</span></span><br><span class="line"><span class="xml">	  message: "v-model双向数据绑定",</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	  isAgree: false,</span></span><br><span class="line"></span><br><span class="line"><span class="xml">	  hobbies:[]</span></span><br><span class="line"><span class="xml">	&#125;,</span></span><br><span class="line"><span class="xml">  &#125;);</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure></code></pre><h3 id="v-model的应用select下拉框"><a href="#v-model的应用select下拉框" class="headerlink" title="v-model的应用select下拉框"></a>v-model的应用select下拉框</h3><pre><code><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="xml">	select标签属性</span></span><br><span class="line"><span class="xml">	autofocus：在页面加载时下拉列表自动获得焦点，值：autofocus（html5新增属性）；</span></span><br><span class="line"><span class="xml">	disabled：属性值为true时，禁用下拉列表；</span></span><br><span class="line"><span class="xml">	form：定义select字段所属的一个或多个表单（html5新增属性）；</span></span><br><span class="line"><span class="xml">	multiple：属性值为true时，可选择多个选项；</span></span><br><span class="line"><span class="xml">	name：下拉列表的名称。</span></span><br><span class="line"><span class="xml">	required：规定用户在提交表单前必须选择一个下拉列表中的选项，值：required（html5新增属性）；</span></span><br><span class="line"><span class="xml">	size：下拉列表中可见选项的数目。</span></span><br><span class="line"><span class="xml">   --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 多选添加multiple="multiple"属性，用数组接收 --&gt;</span></span></span><br><span class="line"><span class="xml">	你可选择(单选)：</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"sel"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"fruit"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"苹果"</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"香蕉"</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"栗子"</span>&gt;</span>栗子<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"仙桃"</span>&gt;</span>仙桃<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"猕猴桃"</span>&gt;</span>猕猴桃<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>你的选择：</span><span class="template-variable">&#123;&#123;fruit&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.11"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  const app = new Vue(&#123;</span></span><br><span class="line"><span class="xml">	el: "#app",</span></span><br><span class="line"><span class="xml">	data: &#123;</span></span><br><span class="line"><span class="xml">	  message: "select标签上v-model应用",</span></span><br><span class="line"><span class="xml">	  fruit: "",</span></span><br><span class="line"><span class="xml">	&#125;,</span></span><br><span class="line"><span class="xml">  &#125;);</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
      <tags>
        <tag>前端框架VUE</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发+基础(behaviors详解+页面调用组件修改数据)</title>
    <url>/2020/05/21/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91-%E5%9F%BA%E7%A1%80-behaviors%E8%AF%A6%E8%A7%A3-%E9%A1%B5%E9%9D%A2%E8%B0%83%E7%94%A8%E7%BB%84%E4%BB%B6%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h3 id="behaviors详解"><a href="#behaviors详解" class="headerlink" title="behaviors详解"></a>behaviors详解</h3><ul>
<li>基本介绍</li>
</ul>
<ol>
<li>behaviors用于组件间代码共享</li>
<li>每个behaviors可以包括 一组属性，数据，生命周期函数和方法</li>
<li>组件调用他是其内容就会加载到组件中</li>
<li>每个组件可以引用多个behavior，同时behavior也可以应用其他behavior<h4 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h4></li>
</ol>
<ul>
<li>Behavior公用数据以及方法 供做所有的组件用</li>
<li>注意：创建组件的位置在组件文件夹下xxx/xxx.js<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">//  这里没有引入其他Behavior公用数据以及方法</span><br><span class="line">module.exports = Behavior(&#123;</span><br><span class="line">behavior:[],</span><br><span class="line">propertie<span class="variable">s:</span>&#123;</span><br><span class="line">    myDataChildrenBehavior<span class="variable">s:</span>&#123;</span><br><span class="line">    <span class="built_in">type</span>:String,</span><br><span class="line">    value:<span class="string">'我是嵌套demoBehaviorJs里面的数据'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">dat<span class="variable">a:</span>&#123;</span><br><span class="line">    myDataOne:<span class="string">'模拟数据'</span>,</span><br><span class="line">    myDataTwo: <span class="string">'模拟数据二'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">method<span class="variable">s:</span>&#123;</span><br><span class="line">    myClickChildBehavior()&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'我是嵌套demoBehaviorJs里面的方法'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>组件中引入Behavior<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// component/component-behaviors/component-behaviors.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myBehavior = <span class="built_in">require</span>(<span class="string">'../myBehavior/my-behavior.js'</span>)</span><br><span class="line">Component(&#123;</span><br><span class="line"></span><br><span class="line">behaviors:[myBehavior],</span><br><span class="line">properties: &#123;</span><br><span class="line">    isTrueOne: &#123;<span class="comment">//这里定义了modalHidden属性，属性值可以在组件使用时指定.写法为modal-hidden </span></span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">    <span class="keyword">default</span>:<span class="literal">false</span></span><br><span class="line">    &#125;, </span><br><span class="line">    isDisableNext:&#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">    value: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">attached: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 组件的初始数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">data: &#123;</span><br><span class="line">    isTrue: <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 组件的方法列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">methods: &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>组件wxml<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">'myDemoBehaviorMethod'</span>&gt;</span></span><span class="template-variable">&#123;&#123;myDemoBehaviorData&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 我是引入在demoBehavior中的公用数据以及方法 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">'myClickChildBehavior'</span>&gt;</span></span><span class="template-variable">&#123;&#123;myDataChildrenBehaviors&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 我是模拟 demoBehavior多个数据与方法 这个会省略但是会在添加在代码解释当中--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">'myDemo'</span>&gt;</span></span><span class="template-variable">&#123;&#123;myDataDemo&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>在页面json中注册组件，数据可以在页面正常使用<h3 id="还有些内置-behaviors"><a href="#还有些内置-behaviors" class="headerlink" title="还有些内置 behaviors"></a>还有些内置 behaviors</h3></li>
<li>请查看官网：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html</a></li>
</ul>
<h3 id="自定义组件，实现案例"><a href="#自定义组件，实现案例" class="headerlink" title="自定义组件，实现案例"></a>自定义组件，实现案例</h3><ul>
<li>页面给组件传值，组件通过定义Array属性</li>
<li>flex实现快速布局</li>
<li>点击事件修改样式==》实现方法：定义一个active类样式，在wxml中通过三目运算比较index与组件的初始化数据currentindex(currentindex:0)相等赋予其active样式</li>
<li>利用data-xx:这种方式将index的值传递该js，js通过点击事件函数获取index的值即<br>【 const index = event.currentTarget.dataset.index】<br>在通过setData方法将值赋予currentindex【this.setData({currentindex:index})】</li>
<li>代码实现</li>
</ul>
<ol>
<li>组件部分<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//wxml</span></span><br><span class="line">    &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">'tab-control'</span>&gt;</span><br><span class="line">    &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">bindtap</span>=<span class="string">"halderstyle"</span>&gt;</span>流行<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">    &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;新款&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">    &lt;view class="item"&gt;精选&lt;/</span>view&gt; --&gt;</span><br><span class="line">    &lt;!-- 注意写逻辑相关的代码，选用block标签 --&gt;</span><br><span class="line">    &lt;block wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;titles&#125;&#125;"</span> wx:key=<span class="string">"&#123;&#123;index&#125;&#125;"</span>&gt;</span><br><span class="line">        &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"item &#123;&#123;currentindex == index ? 'active' : ''&#125;&#125;"</span></span><br><span class="line">            bindtap=<span class="string">"handlerIndex"</span></span><br><span class="line">            data-index=<span class="string">"&#123;&#123;index&#125;&#125;"</span>&gt;</span><br><span class="line">        &lt;text&gt;&#123;&#123;item&#125;&#125;&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>view&gt;</span><br><span class="line">    &lt;<span class="regexp">/block&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>view&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//wxss flex布局</span></span><br><span class="line">    .tab-control&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    background: rosybrown;</span><br><span class="line">    color: white;</span><br><span class="line">    margin-top: <span class="number">5</span>rpx;</span><br><span class="line">    line-height: <span class="number">88</span>rpx;</span><br><span class="line">    &#125;</span><br><span class="line">    .item&#123;</span><br><span class="line">    flex: <span class="number">1</span>;</span><br><span class="line">    text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过语法+三目运算+样式+js的赋值实现样式的点击变化效果</span></span><br><span class="line">    .active&#123;</span><br><span class="line">    color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 文字下面的下划线 padding内边距顺时针这种结构让其突出显示</span></span><br><span class="line">    .active text&#123;</span><br><span class="line">    border-bottom: <span class="number">6</span>rpx solid aqua;</span><br><span class="line">    padding: <span class="number">10</span>rpx <span class="number">25</span>rpx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//js</span></span><br><span class="line">    <span class="comment">// component/w-tab-control/w-tab-control.js</span></span><br><span class="line">    Component(&#123;</span><br><span class="line">        options：&#123;</span><br><span class="line">            <span class="comment">//配置组件的配置选项</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 组件的属性列表</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    properties: &#123;</span><br><span class="line">        titles:&#123;</span><br><span class="line">            type: <span class="built_in">Array</span>,</span><br><span class="line">            value:[<span class="string">'流行'</span>,<span class="string">'新款'</span>,<span class="string">'品牌'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 组件的初始数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    data: &#123;</span><br><span class="line">        currentindex: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 组件的方法列表</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">        handlerIndex:<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(event)</span><br><span class="line">        <span class="comment">//取出index的值</span></span><br><span class="line">        <span class="keyword">const</span> index = event.currentTarget.dataset.index</span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">            currentindex:index</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//通知事件内部的点击事件</span></span><br><span class="line">        <span class="keyword">this</span>.triggerEvent(<span class="string">'handlerIndex'</span>,&#123;index,<span class="attr">title</span>:<span class="keyword">this</span>.properties.titles[index]&#125;,&#123;&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//外部组件传入额外的样式</span></span><br><span class="line">    externalClasses:[]</span><br><span class="line">    &#125;),</span><br><span class="line">    observer:&#123;</span><br><span class="line">        <span class="comment">//监听属性properties或者data初始值的改变</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>页面使用<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">  <span class="symbol">&lt;view&gt;</span></span><br><span class="line">  &lt;<span class="keyword">w</span>-<span class="keyword">tab</span>-control/&gt;</span><br><span class="line">  &lt;/<span class="keyword">view</span>&gt;</span><br><span class="line">  <span class="symbol">&lt;view&gt;</span></span><br><span class="line">  &lt;<span class="keyword">w</span>-<span class="keyword">tab</span>-control titles=<span class="string">"&#123;&#123;['衣服','鞋子','裤子']&#125;&#125;"</span></span><br><span class="line">                  bind:handlerIndex=<span class="string">"handlerIndex"</span>/&gt;</span><br><span class="line">  &lt;/<span class="keyword">view</span>&gt;</span><br><span class="line"></span><br><span class="line">  //js中通过组件的事件triggerEvent传递组件的数据</span><br><span class="line">    handlerIndex:<span class="function"><span class="keyword">function</span><span class="params">(event)</span>&#123;</span></span><br><span class="line">  console.<span class="built_in">log</span>(event)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="页面直接调用组件修改数据"><a href="#页面直接调用组件修改数据" class="headerlink" title="页面直接调用组件修改数据"></a>页面直接调用组件修改数据</h3></li>
<li>this.selectComponent()</li>
<li>代码实现<h4 id="第一种实现方式：在页面js中通过setData设值"><a href="#第一种实现方式：在页面js中通过setData设值" class="headerlink" title="第一种实现方式：在页面js中通过setData设值"></a>第一种实现方式：在页面js中通过setData设值</h4><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//构建一个组件myself，计数器，初始化count为0</span></span><br><span class="line"> <span class="comment">//在页面调用组件 ==》 通过绑定的事件中 this.selectComponent("id选择器/class选择器") = my_self --》组件对象</span></span><br><span class="line"> <span class="comment">//然后通过组件对象my_self调用setData设置数据 </span></span><br><span class="line"> <span class="comment">//控制台打印my_self,在其data属性项就可以看到组件的初始化数据</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//组件</span></span><br><span class="line"> &lt;<span class="keyword">view</span>&gt;组件内计数器：&#123;&#123;<span class="keyword">count</span>&#125;&#125;&lt;/<span class="keyword">view</span>&gt;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//页面wxml</span></span><br><span class="line">    &lt;<span class="keyword">view</span>&gt;</span><br><span class="line">        &lt;button size=<span class="string">"mini"</span> bindtap=<span class="string">"handlertap"</span>&gt;修改组件内的样式&lt;/button&gt;</span><br><span class="line">        &lt;myself id=<span class="string">"self"</span>/&gt;</span><br><span class="line">    &lt;/<span class="keyword">view</span>&gt;</span><br><span class="line"><span class="comment">//页面js</span></span><br><span class="line">   handlertap:function()&#123;</span><br><span class="line">    <span class="comment">//修改组件中myself的数据</span></span><br><span class="line">    <span class="keyword">const</span> my_self = this.selectComponent('#self') <span class="comment">//拿到组件的初始化数据</span></span><br><span class="line">    <span class="comment">//数据位于my_self对象的data中</span></span><br><span class="line">    console.<span class="built_in">log</span>(my_self)</span><br><span class="line">    <span class="comment">//设置值</span></span><br><span class="line">    my_self.setData(&#123;</span><br><span class="line">      <span class="keyword">count</span>: my_self.data.<span class="keyword">count</span>+1</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="第二种方式：方法实现页面直接调用组件修改数据"><a href="#第二种方式：方法实现页面直接调用组件修改数据" class="headerlink" title="第二种方式：方法实现页面直接调用组件修改数据"></a>第二种方式：方法实现页面直接调用组件修改数据</h4></li>
<li>一般情况下对于页面直接调用组件修改数据，采用在组件js文件中method属性向外暴露出一个方法/接口</li>
<li>在页面 const my_self = this.selectComponent(‘#self’) //拿到组件的初始化数据对象</li>
<li>通过my_self调用方法传值，在组件内部方法值实现具体的代码逻辑单元<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"> * 组件的方法列表</span><br><span class="line"> */</span><br><span class="line">methods: &#123;</span><br><span class="line">  incrementCount:<span class="function"><span class="keyword">function</span><span class="params">(num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      count: <span class="keyword">this</span>.data.count + num</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//页面js</span></span><br><span class="line">  handlertap:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//修改组件中myself的数据</span></span><br><span class="line">  <span class="keyword">const</span> my_self = <span class="keyword">this</span>.selectComponent(<span class="string">'#self'</span>) <span class="comment">//拿到组件的初始化数据</span></span><br><span class="line">  <span class="comment">//数据位于my_self对象的data中</span></span><br><span class="line">  console.log(my_self)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//调用特定的自定义方法</span></span><br><span class="line">  my_self.incrementCount(<span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <tags>
        <tag>微信小程序开发</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序+基础(API+页面+登录)</title>
    <url>/2020/05/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80-API-%E9%A1%B5%E9%9D%A2-%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h3 id="网络请求的基本使用"><a href="#网络请求的基本使用" class="headerlink" title="网络请求的基本使用"></a>网络请求的基本使用</h3><ul>
<li>wx.request(Object object)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//发送网络请求</span></span><br><span class="line">      wx.request(&#123;</span><br><span class="line">        <span class="comment">//默认get请求方式</span></span><br><span class="line">        <span class="comment">//http://httpbin.org 测试url的开放地址</span></span><br><span class="line">        url: <span class="string">'http://httpbin.org/post'</span>,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">          <span class="comment">//成功</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"--------"</span>,res)</span><br><span class="line">        &#125;,</span><br><span class="line">        fail:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="comment">//失败</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data:&#123;</span><br><span class="line">          <span class="comment">//url上的参数</span></span><br><span class="line">          name: <span class="string">'codename'</span>,</span><br><span class="line">          age: <span class="number">18</span></span><br><span class="line">        &#125;,</span><br><span class="line">        method: <span class="string">'post'</span>,</span><br><span class="line">        header:&#123;</span><br><span class="line">          <span class="string">'context-type'</span>:<span class="string">'application/json'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        dataType:&#123;</span><br><span class="line">          <span class="string">'context-type'</span>:<span class="string">'application/json'</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="网络请求-–请求封装"><a href="#网络请求-–请求封装" class="headerlink" title="网络请求 –请求封装"></a>网络请求 –请求封装</h3></li>
<li>优点：<ul>
<li>降低网络请求的和wx.request的耦合度</li>
<li>使用Promise的方法获取回调结果</li>
</ul>
</li>
<li>使用<ul>
<li>请求封装js文件<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对外暴露默认的方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    wx.request(&#123;</span><br><span class="line">        url:options.url,</span><br><span class="line">        method: options.method || <span class="string">'get'</span>,</span><br><span class="line">        data:options.data || &#123;&#125;,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        fail:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入Promise</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">        url: options.url,</span><br><span class="line">        method: options.method || <span class="string">'get'</span>,</span><br><span class="line">        data:options.data || &#123;&#125;,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">            resolve(res)</span><br><span class="line">        &#125;,</span><br><span class="line">        fail:<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            reject(err)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//简洁写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">        wx.request(&#123;</span><br><span class="line">        url: options.url,</span><br><span class="line">        method: options.method || <span class="string">'get'</span>,</span><br><span class="line">        data:options.data || &#123;&#125;,</span><br><span class="line">        success:resolve,</span><br><span class="line">        fail:reject</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面中导入的方法</span></span><br><span class="line"><span class="keyword">import</span> request form <span class="string">'相对路径'</span>  </span><br><span class="line">page(&#123;</span><br><span class="line">    onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//封装的方法</span></span><br><span class="line">        request(&#123;</span><br><span class="line">            <span class="comment">//使用封装的request</span></span><br><span class="line">            <span class="comment">//Promise最大的好处就是防止出现回调地狱</span></span><br><span class="line">                url:<span class="string">"http://httpbin.org/post"</span>,</span><br><span class="line">                method:<span class="string">"post"</span></span><br><span class="line">                &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//成功回调</span></span><br><span class="line">                <span class="built_in">console</span>.log(res)</span><br><span class="line">                &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">//失败回调</span></span><br><span class="line">                <span class="built_in">console</span>.log(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="展示弹窗"><a href="#展示弹窗" class="headerlink" title="展示弹窗"></a>展示弹窗</h3></li>
</ul>
</li>
<li>小程序中展示弹窗有四种方式：showToast，showModel,showLoading,showActiveSheet(抽屉式的弹窗)</li>
<li>官网地址 ：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/api/ui/interaction/wx.showToast.html</a></li>
</ul>
<h3 id="页面分享"><a href="#页面分享" class="headerlink" title="页面分享"></a>页面分享</h3><ul>
<li><p>两种方式：</p>
<ol>
<li>点击右上角的菜单按钮，之后转发</li>
<li>点击某一按钮，直接转发</li>
</ol>
</li>
<li><p>通过onShareAppMessage这个生命周期函数 属性：title，path(必须以/开始的路径开始，默认首页)，imageUrl(支持PNG和JPG)</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">page</span>(&#123;</span><br><span class="line">    <span class="comment">//页面右上角的分享</span></span><br><span class="line">    <span class="selector-tag">onShareAppMessage</span>：<span class="selector-tag">function</span>(options)&#123;</span><br><span class="line">        <span class="attribute">return</span>: &#123;</span><br><span class="line">            <span class="attribute">title</span>: <span class="string">'标题'</span>,</span><br><span class="line">            path：<span class="string">"默认首页"</span>, <span class="comment">//想到那个页面填其路径 /pages/home/home</span></span><br><span class="line">            <span class="attribute">imageUrl</span>:<span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="分享按钮"><a href="#分享按钮" class="headerlink" title="分享按钮"></a>分享按钮</h4><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//与上面的效果的一样的</span></span><br><span class="line">&lt;button size=<span class="string">"mini"</span> <span class="keyword">open</span>-<span class="class"><span class="keyword">type</span></span>=<span class="string">"share"</span>&gt;分享&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<h3 id="小程序登录"><a href="#小程序登录" class="headerlink" title="小程序登录"></a>小程序登录</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//编码规范token用常量表示</span></span><br><span class="line">   <span class="keyword">const</span> <span class="keyword">TOKEN</span> = '<span class="keyword">token</span>'</span><br><span class="line">   <span class="keyword">App</span>(&#123;</span><br><span class="line">   <span class="comment">//保存在对象中，小程序关闭会被回收 s所以在回调函数中利用wx.setStorageSync('token',token)保存在storage中</span></span><br><span class="line">   globalData:&#123;</span><br><span class="line">       <span class="keyword">token</span>:<span class="string">""</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   onLaunch: function () &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1. 先从缓存中获取token，如果没得在登陆</span></span><br><span class="line">       <span class="keyword">const</span> <span class="keyword">token</span> = wx.getStorageSync(<span class="keyword">TOKEN</span>)</span><br><span class="line">       <span class="keyword">if</span>(<span class="keyword">token</span> != null)&#123;</span><br><span class="line">       console.<span class="built_in">log</span>(<span class="string">"-----------"</span>,<span class="keyword">TOKEN</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">token</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="comment">//登录</span></span><br><span class="line">       wx.login(&#123;</span><br><span class="line">       <span class="comment">//code 5分钟有效</span></span><br><span class="line">       success: (res) =&gt;&#123;</span><br><span class="line">           console.<span class="built_in">log</span>(res)</span><br><span class="line">           <span class="comment">//获取code</span></span><br><span class="line">           <span class="keyword">const</span> code = res.code</span><br><span class="line">           <span class="comment">//将code发送到开发服务器</span></span><br><span class="line">           wx.request(&#123;</span><br><span class="line">           url:'http:<span class="comment">//123.207.32.32:3000/login',</span></span><br><span class="line">           method: '<span class="keyword">post</span>',</span><br><span class="line">           data:&#123;</span><br><span class="line">               code</span><br><span class="line">           &#125;,</span><br><span class="line">           success:(res) =&gt;&#123;</span><br><span class="line">               console.<span class="built_in">log</span>(res)</span><br><span class="line">               <span class="comment">//取出token</span></span><br><span class="line">               <span class="keyword">const</span> <span class="keyword">token</span> = res.data.<span class="keyword">token</span></span><br><span class="line">               <span class="comment">//将token保存在全局变量中</span></span><br><span class="line">               this.globalData.<span class="keyword">token</span> = <span class="keyword">token</span>;</span><br><span class="line">               console.<span class="built_in">log</span>(this.globalData.<span class="keyword">token</span>)</span><br><span class="line">               <span class="comment">//进行本地存储 同步存储</span></span><br><span class="line">               wx.setStorageSync(<span class="keyword">TOKEN</span>,<span class="keyword">token</span>)</span><br><span class="line">               <span class="comment">//异步</span></span><br><span class="line">               <span class="comment">// wx.setStorage(&#123;</span></span><br><span class="line">               <span class="comment">//   data: data,</span></span><br><span class="line">               <span class="comment">//   key: 'key',</span></span><br><span class="line">               <span class="comment">// &#125;)</span></span><br><span class="line">           &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;,</span><br><span class="line">       complete: (res) =&gt; &#123;&#125;,</span><br><span class="line"></span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>完善的小程序登录即token效验</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">/编码规范<span class="keyword">token</span>用常量表示</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">TOKEN</span> = '<span class="keyword">token</span>'</span><br><span class="line"><span class="keyword">App</span>(&#123;</span><br><span class="line">  <span class="comment">//保存在对象中，小程序关闭会被回收</span></span><br><span class="line">  globalData:&#123;</span><br><span class="line">    <span class="keyword">token</span>:<span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onLaunch: function () &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 先从缓存中获取token，如果没得在登陆</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">token</span> = wx.getStorageSync(<span class="keyword">TOKEN</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">token</span> != null &amp;&amp; <span class="keyword">token</span>.length != 0)&#123;</span><br><span class="line">      console.<span class="built_in">log</span>(<span class="string">"-----------"</span>,<span class="keyword">TOKEN</span>)</span><br><span class="line">      <span class="comment">//验证token是否过期</span></span><br><span class="line">      this.check_token(<span class="keyword">token</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//登录</span></span><br><span class="line">    this.login()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  check_token(<span class="keyword">token</span>)&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">"执行了验证操作！"</span>)</span><br><span class="line">    <span class="comment">//用于判断token是否过期</span></span><br><span class="line">    <span class="comment">//注意后台:是通过header头信息的方式传递token的</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: 'http:<span class="comment">//123.207.32.32:3000/auth',</span></span><br><span class="line">      method:'<span class="keyword">post</span>',</span><br><span class="line">      header:&#123;</span><br><span class="line">        <span class="keyword">token</span></span><br><span class="line">      &#125;,</span><br><span class="line">      success:(res) =&gt;&#123;</span><br><span class="line">        console.<span class="built_in">log</span>(res)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail:(<span class="keyword">err</span>) =&gt;&#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="keyword">err</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  login()&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">"执行了登录操作！"</span>)</span><br><span class="line">    wx.login(&#123;</span><br><span class="line">      <span class="comment">//code 5分钟有效</span></span><br><span class="line">      success: (res) =&gt;&#123;</span><br><span class="line">        console.<span class="built_in">log</span>(res)</span><br><span class="line">        <span class="comment">//获取code</span></span><br><span class="line">        <span class="keyword">const</span> code = res.code</span><br><span class="line">        <span class="comment">//将code发送到开发服务器</span></span><br><span class="line">        wx.request(&#123;</span><br><span class="line">          url:'http:<span class="comment">//123.207.32.32:3000/login',</span></span><br><span class="line">          method: '<span class="keyword">post</span>',</span><br><span class="line">          data:&#123;</span><br><span class="line">            code</span><br><span class="line">          &#125;,</span><br><span class="line">          success:(res) =&gt;&#123;</span><br><span class="line">            console.<span class="built_in">log</span>(res)</span><br><span class="line">            <span class="comment">//取出token</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">token</span> = res.data.<span class="keyword">token</span></span><br><span class="line">            <span class="comment">//将token保存在全局变量中</span></span><br><span class="line">            this.globalData.<span class="keyword">token</span> = <span class="keyword">token</span>;</span><br><span class="line">            console.<span class="built_in">log</span>(this.globalData.<span class="keyword">token</span>)</span><br><span class="line">            <span class="comment">//进行本地存储 同步存储</span></span><br><span class="line">            wx.setStorageSync(<span class="keyword">TOKEN</span>,<span class="keyword">token</span>)</span><br><span class="line">            <span class="comment">//异步</span></span><br><span class="line">            <span class="comment">// wx.setStorage(&#123;</span></span><br><span class="line">            <span class="comment">//   data: data,</span></span><br><span class="line">            <span class="comment">//   key: 'key',</span></span><br><span class="line">            <span class="comment">// &#125;)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      complete: (res) =&gt; &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>进一步完善，完成成功回调</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编码规范token用常量表示</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">TOKEN</span> = '<span class="keyword">token</span>'</span><br><span class="line"><span class="keyword">App</span>(&#123;</span><br><span class="line">  <span class="comment">//保存在对象中，小程序关闭会被回收</span></span><br><span class="line">  globalData:&#123;</span><br><span class="line">    <span class="keyword">token</span>:<span class="string">""</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onLaunch: function () &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 先从缓存中获取token，如果没得在登陆</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">token</span> = wx.getStorageSync(<span class="keyword">TOKEN</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">token</span> != null &amp;&amp; <span class="keyword">token</span>.length != 0)&#123;</span><br><span class="line">      console.<span class="built_in">log</span>(<span class="string">"-----------"</span>,<span class="keyword">TOKEN</span>)</span><br><span class="line">      <span class="comment">//验证token是否过期</span></span><br><span class="line">      this.check_token(<span class="keyword">token</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//登录</span></span><br><span class="line">    this.login()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  check_token(<span class="keyword">token</span>)&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">"执行了验证操作！"</span>)</span><br><span class="line">    <span class="comment">//用于判断token是否过期</span></span><br><span class="line">    <span class="comment">//注意后台:是通过header头信息的方式传递token的</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: 'http:<span class="comment">//123.207.32.32:3000/auth',</span></span><br><span class="line">      method:'<span class="keyword">post</span>',</span><br><span class="line">      header:&#123;</span><br><span class="line">        <span class="keyword">token</span></span><br><span class="line">      &#125;,</span><br><span class="line">      success:(res) =&gt;&#123;</span><br><span class="line">        <span class="comment">//有errcode表示验证不成功</span></span><br><span class="line">        <span class="keyword">if</span>(res.data.errcode == null)&#123;</span><br><span class="line">          this.globalData.<span class="keyword">token</span> = <span class="keyword">token</span>;</span><br><span class="line">          console.<span class="built_in">log</span>(this.globalData.<span class="keyword">token</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            this.login()</span><br><span class="line">        &#125;</span><br><span class="line">        console.<span class="built_in">log</span>(res)</span><br><span class="line">      &#125;,</span><br><span class="line">      fail:(<span class="keyword">err</span>) =&gt;&#123;</span><br><span class="line">        console.<span class="built_in">log</span>(<span class="keyword">err</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  login()&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">"执行了登录操作！"</span>)</span><br><span class="line">    wx.login(&#123;</span><br><span class="line">      <span class="comment">//code 5分钟有效</span></span><br><span class="line">      success: (res) =&gt;&#123;</span><br><span class="line">        console.<span class="built_in">log</span>(res)</span><br><span class="line">        <span class="comment">//获取code</span></span><br><span class="line">        <span class="keyword">const</span> code = res.code</span><br><span class="line">        <span class="comment">//将code发送到开发服务器</span></span><br><span class="line">        wx.request(&#123;</span><br><span class="line">          url:'http:<span class="comment">//123.207.32.32:3000/login',</span></span><br><span class="line">          method: '<span class="keyword">post</span>',</span><br><span class="line">          data:&#123;</span><br><span class="line">            code</span><br><span class="line">          &#125;,</span><br><span class="line">          success:(res) =&gt;&#123;</span><br><span class="line">            console.<span class="built_in">log</span>(res)</span><br><span class="line">            <span class="comment">//取出token</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">token</span> = res.data.<span class="keyword">token</span></span><br><span class="line">            <span class="comment">//将token保存在全局变量中</span></span><br><span class="line">            this.globalData.<span class="keyword">token</span> = <span class="keyword">token</span>;</span><br><span class="line">            console.<span class="built_in">log</span>(this.globalData.<span class="keyword">token</span>)</span><br><span class="line">            <span class="comment">//进行本地存储 同步存储</span></span><br><span class="line">            wx.setStorageSync(<span class="keyword">TOKEN</span>,<span class="keyword">token</span>)</span><br><span class="line">            <span class="comment">//异步</span></span><br><span class="line">            <span class="comment">// wx.setStorage(&#123;</span></span><br><span class="line">            <span class="comment">//   data: data,</span></span><br><span class="line">            <span class="comment">//   key: 'key',</span></span><br><span class="line">            <span class="comment">// &#125;)</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      complete: (res) =&gt; &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h3></li>
<li><p>页面跳转详细查看官网：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html</a></p>
</li>
<li><p>页面的跳转方式有两种：通过navigator组件和通过wx的API跳转</p>
<h4 id="navigator组件主要就是用于界面的跳转的："><a href="#navigator组件主要就是用于界面的跳转的：" class="headerlink" title="navigator组件主要就是用于界面的跳转的："></a>navigator组件主要就是用于界面的跳转的：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 默认navigator 没关闭当前页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"/page/detail/detail"</span>&gt;</span>跳到详情页<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- open-type="redirect" 重定向的跳转方式，不会关闭页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"/page/detail/detail"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">open-type</span>=<span class="string">"redirect"</span>&gt;</span>重定向跳到详情页<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 页面内跳转到tabber 的位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意这里的url路径必须以/开头 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  只有页面在tabBar中注册才能在，其注册的页面显示，也就是说没注册的不会在显示底部的tabbar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"/page/about/aabout"</span> <span class="attr">open-type</span>=<span class="string">"switchTab"</span>&gt;</span>页面内跳转switchTab<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- relaunch 这种跳转方式会关闭所有的页面，只显示当前跳转的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">url</span>=<span class="string">"/page/detail/detail"</span> <span class="attr">open-type</span>=<span class="string">"reLaunch"</span>&gt;</span>页面内跳转reLaunch<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //返回</span><br><span class="line">    <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">open-type</span>=<span class="string">"navigateBack"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line">    //多层页面返回首页 2层</span><br><span class="line">    <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">open-type</span>=<span class="string">"navigateBack"</span> <span class="attr">delta</span>=<span class="string">"2"</span>&gt;</span>返回首页<span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">##### 跳转过程中的数据传递</span><br></pre></td></tr></table></figure>
<p>  <navigator url="/page/detail/detail?name=张翰&age=18&height=1.80" open-type="reLaunch">页面内跳转reLaunch</navigator></p>
<p>  //页面获取<br>  page({</p>
<pre><code>  /*
  * 生命周期函数--监听页面加载
  */
onLoad: function (options) {
  console.log(options)
}</code></pre><p>  })</p>
<pre><code>//控制台console打印效果
{name: &quot;张翰&quot;, age: &quot;18&quot;, sex: &quot;男&quot;}
age: &quot;18&quot;
name: &quot;张翰&quot;
sex: &quot;男&quot;
__proto__: Object</code></pre><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">##### 使用页面onunload()==》<span class="string">"页面退出"</span> 生命周期函数传递数据</span><br><span class="line">* onunload()没法先上面的方式传递数据</span><br><span class="line">* 实现方式：使用全局方法 getCurrentPages()当前所有的活跃的页面 数组结构</span><br><span class="line">* 代码实现</span><br></pre></td></tr></table></figure>
<p>  // page/index/index</p>
<pre><code>&lt;!-- 默认navigator 没关闭当前页面 --&gt;
&lt;navigator url=&quot;/page/detail/detail&quot;&gt;跳到详情页&lt;/navigator&gt;
&lt;view&gt;{{title}}&lt;/view&gt;</code></pre><p>  //js</p>
<pre><code>    /**
 * 页面的初始数据
 */
data: {
  title:&apos;哈哈啊哈&apos;
},</code></pre><p>  //page/detail/detail<br>   /**</p>
<pre><code> * 生命周期函数--监听页面卸载
 */
onUnload: function () {
    //获取当前页面的对象
    const pages = getCurrentPages()
    console.log(pages)
    console.log(pages[0])
    //由于这里的索引值不能写死 所以采用 pages.length - 2这种方式
    //const home = pages[0]
    const home = pages[pages.length - 2]
    home.setData({
      title: &apos;呵呵二号&apos;
    })
}
//这样就完成一进一出修改title的目的</code></pre><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 通过wx的API跳转实现页面的跳转</span><br></pre></td></tr></table></figure>
<pre><code>&lt;!-- 通过代码进行页面跳转 --&gt;
&lt;button size=&quot;mini&quot; bind:tap=&quot;handlertap&quot;&gt;跳转&lt;/button&gt;

handlertap:function(){
    wx.redirectTo({
    url: &apos;/page/detail/detail&apos;
    })
}</code></pre><pre><code></code></pre></li>
</ul>
<p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html" target="_blank" rel="noopener">官网跳转详解</a></p>
]]></content>
      <tags>
        <tag>微信小程序开发</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发+基础(组件+WXS+自定义组件1)</title>
    <url>/2020/05/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91-%E5%9F%BA%E7%A1%80-%E7%BB%84%E4%BB%B6-WXS-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B61/</url>
    <content><![CDATA[<h3 id="组件官网地址："><a href="#组件官网地址：" class="headerlink" title="组件官网地址："></a>组件官网地址：</h3><p><a href="https://developers.weixin.qq.com/miniprogram/dev/component/" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/component/</a></p>
<h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><ul>
<li>Text组件用于显示文本，类似于span标签，是行内元素</li>
<li>属性： selecttable 文本是否可选中 默认false， <pre><code>space String类型 显示连续空格 其合法值：ensp-&gt;中文字符空格一半大小，emsp-&gt;中文字符空格大小，nbsp-根据字体设置的空格大小， 
decode 是否解码</code></pre><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>text组件的使用<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span>小程序，行内元素<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 2.属性 selecttable：true --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 默认情况下text中的文本长按是不会选中的 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">text</span> <span class="attr">selectable</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;true&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 简单写法 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">text</span> <span class="attr">selectable</span> <span class="attr">space</span>=<span class="string">"emsp"</span>&gt;</span>Hello world<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- decode 是否解码 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">text</span> <span class="attr">decode</span>&gt;</span>5 &amp;gt; 3<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="容器scroll-view可以实现局部滚动"><a href="#容器scroll-view可以实现局部滚动" class="headerlink" title="容器scroll-view可以实现局部滚动"></a>容器scroll-view可以实现局部滚动</h3><ul>
<li>在页面中只要容器的高度高于页面的高度，自动滚动<h4 id="水平滚动-scroll-x"><a href="#水平滚动-scroll-x" class="headerlink" title="水平滚动 scroll-x"></a>水平滚动 scroll-x</h4><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">//wxml</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 水平滚动 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">scroll-x</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;10&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span></span><span class="template-variable">&#123;&#123;item&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//wxss样式</span></span><br><span class="line"><span class="xml">.container&#123;</span></span><br><span class="line"><span class="xml">background: burlywood;</span></span><br><span class="line"><span class="xml">white-space: nowrap; /* 不换行 */</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">.item1&#123;</span></span><br><span class="line"><span class="xml">width: 100px;</span></span><br><span class="line"><span class="xml">height: 100px;</span></span><br><span class="line"><span class="xml">background: darkblue;</span></span><br><span class="line"><span class="xml">margin: 10px;</span></span><br><span class="line"><span class="xml">display: inline-block; //块级元素转换为行内元素</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="垂直滚动-scroll-y"><a href="#垂直滚动-scroll-y" class="headerlink" title="垂直滚动 scroll-y"></a>垂直滚动 scroll-y</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;scroll-view</span> <span class="string">class="container2"</span> <span class="string">scroll-y</span> <span class="string">bindscroll="handleScroll"&gt;</span></span><br><span class="line">    <span class="string">&lt;view</span> <span class="string">wx:for="&#123;&#123;10&#125;&#125;"</span> <span class="string">class="item2"&gt;&#123;&#123;item&#125;&#125;&lt;/view&gt;</span></span><br><span class="line"><span class="string">&lt;/scroll-view&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">//wxss</span></span><br><span class="line"><span class="string">.container2&#123;</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">darkgoldenrod;</span></span><br><span class="line"><span class="attr">height:</span> <span class="string">200px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.item2&#123;</span></span><br><span class="line"><span class="attr">height:</span> <span class="string">100px;</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">blueviolet;</span></span><br><span class="line"><span class="attr">margin:</span> <span class="string">10px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">//js</span></span><br><span class="line"> <span class="string">handleScroll:function(event)&#123;</span></span><br><span class="line">      <span class="string">console.log(event)</span></span><br><span class="line">  <span class="string">&#125;</span></span><br><span class="line">                                                           <span class="string">a/</span></span><br><span class="line">  <span class="string">event对象包含以下信息</span></span><br><span class="line">  <span class="string">&#123;type:</span> <span class="string">"scroll"</span><span class="string">,</span> <span class="attr">timeStamp:</span> <span class="number">341412</span><span class="string">,</span> <span class="attr">target:</span> <span class="string">&#123;…&#125;,</span> <span class="attr">currentTarget:</span> <span class="string">&#123;…&#125;,</span> <span class="attr">detail:</span> <span class="string">&#123;…&#125;&#125;</span></span><br><span class="line">    <span class="attr">currentTarget:</span> <span class="string">&#123;id:</span> <span class="string">""</span><span class="string">,</span> <span class="attr">offsetLeft:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">offsetTop:</span> <span class="number">325</span><span class="string">,</span> <span class="attr">dataset:</span> <span class="string">&#123;…&#125;&#125;</span></span><br><span class="line">    <span class="attr">detail:</span></span><br><span class="line">    <span class="attr">deltaX:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">deltaY:</span> <span class="number">-10</span></span><br><span class="line">    <span class="attr">scrollHeight:</span> <span class="number">1110</span></span><br><span class="line">    <span class="attr">scrollLeft:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">scrollTop:</span> <span class="number">499</span></span><br><span class="line">    <span class="attr">scrollWidth:</span> <span class="number">320</span></span><br></pre></td></tr></table></figure>
<h3 id="补充知识点wxml权重的修改"><a href="#补充知识点wxml权重的修改" class="headerlink" title="补充知识点wxml权重的修改"></a>补充知识点wxml权重的修改</h3></li>
<li>!important 将其权重调整到最大</li>
<li>案例<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">backgroud</span>: red <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="wxss的扩展-尺寸单位"><a href="#wxss的扩展-尺寸单位" class="headerlink" title="wxss的扩展-尺寸单位"></a>wxss的扩展-尺寸单位</h3></li>
<li>rpc：可以根据屏幕宽度进行自适应。规定屏幕宽度为750rpx。</li>
<li>如果在ipone6上，屏幕宽度为375px，共有750个物理像素，则750rpx = 375px = 750物理像素，1rpx=0.5px=1物理像素<h3 id="样式导入-提取公共的样式到一个目录下在app-wcss中导入"><a href="#样式导入-提取公共的样式到一个目录下在app-wcss中导入" class="headerlink" title="样式导入 提取公共的样式到一个目录下在app.wcss中导入"></a>样式导入 提取公共的样式到一个目录下在app.wcss中导入</h3></li>
<li>@import ‘./style/content.wxss’  //引号中添加路径即可<h3 id="官方提供样式库"><a href="#官方提供样式库" class="headerlink" title="官方提供样式库"></a>官方提供样式库</h3></li>
<li>地址：<a href="https://github.com/Tencent/weui-wxss" target="_blank" rel="noopener">https://github.com/Tencent/weui-wxss</a><h3 id="WXS模块"><a href="#WXS模块" class="headerlink" title="WXS模块"></a>WXS模块</h3></li>
<li>weixin Script 是小程序的一套脚本语言，结合WXML语法，可以构建出页面的结构</li>
<li>为什么设计WXS语言呢？？？？？<ul>
<li>在WXML中不能直接调用Page/Component中定义的函数</li>
<li>但是某些情况，我们希望使用函数来处理Wxml中的数据(类似Vue中的过滤器)，这个时候就使用WXS了<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--page/wxs/wxs.wxml--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span>page/wxs/wxs.wxml<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- wxs定义方式 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 第一种方式，直接在WXML中定义 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 注意代码缩进格式否则会报错 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- &lt;wxs module="info"&gt;</span></span></span><br><span class="line"><span class="xml">//JS代码 ES5的语法</span></span><br><span class="line"><span class="xml">var message = "Hello World";</span></span><br><span class="line"><span class="xml">var name = "coderwhy";</span></span><br><span class="line"></span><br><span class="line"><span class="xml">var sum = function(num1,num2)&#123;</span></span><br><span class="line"><span class="xml">    return num1 + num2;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">//这里是的wxs中的内容是私有的所以必须提供对外暴露的module.exports()</span></span><br><span class="line"><span class="xml">module.exports = &#123;</span></span><br><span class="line"><span class="xml">    message: message,</span></span><br><span class="line"><span class="xml">    name: name,</span></span><br><span class="line"><span class="xml">    sum: sum</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">wxs</span>&gt;</span> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 第二种方式：定义在单独的wxs文件，导入方式 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 注意这里必须是相对路径，否则会报错 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">wxs</span> <span class="attr">src</span>=<span class="string">"../../info/info.wxs"</span> <span class="attr">module</span>=<span class="string">"info"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;info.message&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;info.name&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;info.sum(20,20)&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3></li>
</ul>
</li>
<li>基本介绍<ul>
<li>小程序需要经常和用户进行某种交互，比如点击界面上某个按钮或者区域，比如滑动了某个区域；</li>
<li>这些交互都会产生各种各样的事件；</li>
</ul>
</li>
<li>事件处理？？？？？<ul>
<li>事件是通过bind/catch这个属性绑定在组件上(和普通的属性写法很相似，以key=”value”的形式);</li>
<li>key已bind或catch开发，可以在bind/catch后加一个冒号：</li>
<li>同时在当前页面的Page构造器中定义对应的事件处理处理函数tapName，如果没有对应的函数，触发事件会报错</li>
<li>当用户点击该button区域时，达到触发条件生成事件tap，该事件处理函数tapName会被执行，同时还会收到一个事件对象event。</li>
</ul>
</li>
<li>回顾事件小案例<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>事件处理回顾<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bindtap</span>=<span class="string">"bindButton"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 1.5之后的写法 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">bind:tap</span>=<span class="string">"bindButton"</span> <span class="attr">size</span>=<span class="string">"mini"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">catch:tap</span>=<span class="string">"bindButton"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//js</span></span><br><span class="line"><span class="xml">Page(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">data: &#123;</span></span><br><span class="line"><span class="template-variable">    </span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">bindButton:function()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">    console.log("点击事件发生了")</span></span><br><span class="line"><span class="template-variable">&#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure>
<h3 id="常见的事件类型"><a href="#常见的事件类型" class="headerlink" title="常见的事件类型"></a>常见的事件类型</h3></li>
<li>某些事件会有自己的特性事件类型，<ul>
<li>比如input有bindinput/bindblur/bindfouces等</li>
<li>scroll-view有bindscrolltowapper/bindscrolltolower等</li>
</ul>
</li>
<li>几个组件都有比较常见的事件类型</li>
</ul>
<table>
<thead>
<tr>
<th>类型</th>
<th align="center">出发条件</th>
</tr>
</thead>
<tbody><tr>
<td>touchstart</td>
<td align="center">手指触摸动作开始</td>
</tr>
<tr>
<td>touchmove</td>
<td align="center">手指触摸后移动</td>
</tr>
<tr>
<td>touchcancel</td>
<td align="center">手指触摸动作被打断，如来电提醒，弹窗</td>
</tr>
<tr>
<td>touchend</td>
<td align="center">手指触摸动作结束</td>
</tr>
<tr>
<td>tap</td>
<td align="center">手指触摸后马上离开(点击)</td>
</tr>
<tr>
<td>longpress</td>
<td align="center">手指触摸后，超过350ms在离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发</td>
</tr>
<tr>
<td>longtap</td>
<td align="center">手指触摸后，超过350ms在离开，</td>
</tr>
<tr>
<td>* 案例</td>
<td align="center"></td>
</tr>
<tr>
<td><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 常见事件 --&gt;</span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"box"</span> </span><br><span class="line">    bind:touchstart=<span class="string">"halderTouchstart"</span></span><br><span class="line">    bindtouchmove=<span class="string">"handlerTouchmove"</span></span><br><span class="line">    bindtouchend=<span class="string">"handlertouchend"</span></span><br><span class="line">    bindtouchcancel=<span class="string">"handlertouchcancel"</span></span><br><span class="line">    bindtap=<span class="string">"handlertap"</span></span><br><span class="line">    bindlongtap=<span class="string">"handlerlongtap"</span></span><br><span class="line">    bindlongpress=<span class="string">"handlerpress"</span>&gt;常见事件类型&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/js</span></span><br><span class="line"><span class="regexp">halderTouchstart:function(event)&#123;</span></span><br><span class="line"><span class="regexp">    console.log("手指触摸动作开始",event)</span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">handlerTouchmove:function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log("手指触摸后移动")</span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">handlertouchend:function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log("手指触摸动作结束")</span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">handlertouchcancel:function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log("手指触摸动作被打断，如来电提醒，弹窗")</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">handlertap:function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log("点击事件")</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">handlerlongtap:function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log("手指触摸后，超过350ms在离开，")</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;,</span></span><br><span class="line"><span class="regexp">handlerpress:function()&#123;</span></span><br><span class="line"><span class="regexp">    console.log("手指触摸后，超过350ms在离开，如果指定了事件回调函数并触发了这个事件，tap事件将不被触发")</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
</tr>
<tr>
<td>#### 注意：</td>
<td align="center"></td>
</tr>
<tr>
<td>* Touchcancle：在某些特定的场景下才会触发(比如来电打断等)</td>
<td align="center"></td>
</tr>
<tr>
<td>* tap事件和longpress事件通常只会触发其中一个</td>
<td align="center"></td>
</tr>
<tr>
<td>### 事件对象的介绍</td>
<td align="center"></td>
</tr>
<tr>
<td>* 当某个事件触发时，会产生一个事件对象，并且这个对象被传入到回调函数中，事件对象有哪些常见的属性？？？？</td>
<td align="center"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>属性</th>
<th align="left">类型</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>type</td>
<td align="left">String</td>
<td align="center">事件类型</td>
</tr>
<tr>
<td>timeStamp</td>
<td align="left">integer</td>
<td align="center">页面打开到触发事件所经过的毫秒数</td>
</tr>
<tr>
<td>target</td>
<td align="left">Object</td>
<td align="center">触发事件的组件的一些属性值集合</td>
</tr>
<tr>
<td>currentTarget</td>
<td align="left">Object</td>
<td align="center">当前组件的一些属性值集合</td>
</tr>
<tr>
<td>detail</td>
<td align="left">Object</td>
<td align="center">额外的信息对象的坐标距离</td>
</tr>
<tr>
<td>touches</td>
<td align="left">Array</td>
<td align="center">触摸事件，当前停留在屏幕中的触发点信息的数组</td>
</tr>
<tr>
<td>changedTouches</td>
<td align="left">Array</td>
<td align="center">触发事件，当前变化的触摸点信息的数组</td>
</tr>
<tr>
<td>#### touches和changedTouches的区别</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>* touches：用来记录当前有几根手指在小程序中触摸的以及对应的触摸点信息</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>* changedTouches：用来记录变化的，比如你用一根手指触摸，然后在加一根手指触摸，那么他会记录第二根手指触摸点的信息</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>1. 在touchend中的不同</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>2. 多手指触摸时不同</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>#### target和currentTarget区别</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>* 效果截图</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td><img src="%5Cimages%5Ctarger%E4%B8%8Ecurrenttarget%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A%E5%86%92%E6%B3%A1.png" alt=""></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>* 测试代码</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view id=<span class="string">"outer"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"outer"</span> bindtap=<span class="string">"handlerOuter"</span>&gt;</span><br><span class="line">  &lt;view id=<span class="string">"inner"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"inner"</span> bindtap=<span class="string">"handlerInner"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">handlerInner:function(event)&#123;</span></span><br><span class="line"><span class="regexp">    console.log(event)</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  handlerOuter:function(event)&#123;</span></span><br><span class="line"><span class="regexp">    console.log(event)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br></pre></td></tr></table></figure></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>* 事件区域叠加的时候会产生冒泡效果</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>### 事件的参数传递</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>* 补充知识点： <a href="https://www.jianshu.com/p/4290522e1560" target="_blank">flex 布局</a></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    titles:[<span class="string">'flex布局'</span>,<span class="string">'组件'</span>,<span class="string">'动力'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"con"</span>&gt;</span><br><span class="line">  &lt;block wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;titles&#125;&#125;"</span> wx:key=<span class="string">"&#123;&#123;index&#125;&#125;"</span>&gt;</span><br><span class="line">    &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span>&gt;</span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>block&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/wxss</span></span><br><span class="line"><span class="regexp">.con&#123;</span></span><br><span class="line"><span class="regexp">  display: flex;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">.item&#123;</span></span><br><span class="line"><span class="regexp">  flex: 1;</span></span><br><span class="line"><span class="regexp">  text-align: center;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>* 参数传递案例</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>* 当视图发生跳转时，某些情况需要事件携带一些参数到执行函数中，这个时候就可以通过data-属性来完成；</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>* 格式：data-属性的名称</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>* 获取event.currentTarget.dataset.属性的名称</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"con"</span>&gt;</span><br><span class="line">&lt;block wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;titles&#125;&#125;"</span> wx:key=<span class="string">"&#123;&#123;index&#125;&#125;"</span>&gt;</span><br><span class="line">    &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"item"</span> </span><br><span class="line">    <span class="comment">//重点 传递属性</span></span><br><span class="line">        data-index=<span class="string">"&#123;&#123;index&#125;&#125;"</span></span><br><span class="line">        data-item=<span class="string">"&#123;&#123;item&#125;&#125;"</span></span><br><span class="line">        bindtap=<span class="string">"handler"</span>&gt;</span><br><span class="line">        &#123;&#123;item&#125;&#125;</span><br><span class="line">    &lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>block&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/js</span></span><br><span class="line"><span class="regexp">  handler:function(event)&#123;</span></span><br><span class="line"><span class="regexp">    console.log(event)</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/事件参数传递 wxml组件属性 格式：data-属性名称 </span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/在调试窗口console 输出的event对象中的currentTarget和target中的dataset就可以看到</span></span><br><span class="line"><span class="regexp">    const itemName = event.currentTarget.dataset.item</span></span><br><span class="line"><span class="regexp">    const index = event.currentTarget.dataset.index</span></span><br><span class="line"><span class="regexp">    console.log(itemName,index)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br></pre></td></tr></table></figure></td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td>* 效果图</td>
<td align="left"></td>
<td align="center"></td>
</tr>
<tr>
<td><img src="%5Cimages%5C%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92.png" alt=""></td>
<td align="left"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="事件捕获和冒泡"><a href="#事件捕获和冒泡" class="headerlink" title="事件捕获和冒泡"></a>事件捕获和冒泡</h3><ul>
<li><p>当界面产生一个事件时，事件分为了捕获阶段和冒泡阶段。</p>
</li>
<li><p>事件捕获是从外向内，事件冒泡是从内向外</p>
</li>
<li><p>案例</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 事件冒泡bindtap="handlerBindView1"和事件捕获 capture-bind:tap=""--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- bind: 一层层传递 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- catch：阻止事件一层层传递 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"view1"</span> <span class="attr">capture-bind:tap</span>=<span class="string">"handlerCaptureView1"</span> <span class="attr">bindtap</span>=<span class="string">"handlerBindView1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"view2"</span> <span class="attr">capture-bind:tap</span>=<span class="string">"handlerCaptureView2"</span> <span class="attr">bindtap</span>=<span class="string">"handlerBindView2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"view3"</span> <span class="attr">capture-bind:tap</span>=<span class="string">"handlerCaptureView3"</span> <span class="attr">bindtap</span>=<span class="string">"handlerBindView3"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>阻止事件冒泡 catch<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"view1"</span> <span class="attr">capture-bind:tap</span>=<span class="string">"handlerCaptureView1"</span> <span class="attr">bindtap</span>=<span class="string">"handlerBindView1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"view2"</span> <span class="attr">capture-catch:tap</span>=<span class="string">"handlerCaptureView2"</span> <span class="attr">bindtap</span>=<span class="string">"handlerBindView2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"view3"</span> <span class="attr">capture-bind:tap</span>=<span class="string">"handlerCaptureView3"</span> <span class="attr">bindtap</span>=<span class="string">"handlerBindView3"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 事件捕获--》冒泡是有顺序的，某一位置用catch就会捕获到其 --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//js</span></span><br><span class="line"><span class="xml">handlerCaptureView1:function()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  console.log("捕获1")</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">handlerCaptureView2:function()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  console.log("捕获2")</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">handlerCaptureView3:function()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  console.log("捕获3")</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">handlerBindView1:function()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  console.log("冒泡1")</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">handlerBindView2:function()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  console.log("冒泡2")</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">handlerBindView3:function()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  console.log("冒泡3")</span></span><br><span class="line"><span class="template-variable">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3></li>
<li><p>我们将一个完整的页面分成很多个组件。</p>
</li>
<li><p>每个组件都用于实现页面的的一个功能块。</p>
</li>
<li><p>而每一个组件又可以进行分析</p>
<h4 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h4></li>
<li><p>命名：标签名只能是小写字母，中划线，下划线的组合，所以自定义组件的标签名也只能包含这些字符</p>
</li>
<li><p>在根目录下创建一个目录在其中创建一个页面，在这其中写这个组件</p>
</li>
<li><p>导入就是在你想用到的页面的json文件中导入</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">  <span class="attr">"usingComponents"</span>: &#123;</span><br><span class="line">    <span class="attr">"my-cpn"</span>:<span class="string">"/cpn/my-cpn/my-cpn"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>然后直接就可以使用自定义标签</p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul>
<li>自定义组件也可以引入自定义组件，引入方法类似于页面引入自定义组件的方式</li>
<li>全局注册app.json中”usingComponents”: {“my-cpn”:”/cpn/my-cpn/my-cpn”}，即可</li>
<li>组件内的class样式，只能对组件Wxml内的节点生效，对于引用组件的page页面不会生效；</li>
<li>组件内不能使用id选择器，属性选择器，标签选择器</li>
<li>外部使用标签选择器，会对组件内产生影响。<h4 id="如何让class可以相互影响"><a href="#如何让class可以相互影响" class="headerlink" title="如何让class可以相互影响"></a>如何让class可以相互影响</h4></li>
</ul>
</li>
<li><p>在Component对象中，可以传入一个options属性，options其中有一个stylesolation(隔离)属性。</p>
</li>
<li><p>stylesolation有三个取值：</p>
<ul>
<li><p>isolated表示启用样式隔离。在自定义组件内外，使用class指定的样式将不会相互影响(默认取值);</p>
</li>
<li><p>apply-shared表示页面wxss样式将影响到自定义组件，但自定义组件wxss中指定的样式不会影响页面;</p>
</li>
<li><p>shared表示页面wxss样式将影响到自定义组件，自定义组件wxss中的指定的样式也会影响页面和其他设置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Component</span>(&#123;</span><br><span class="line">  <span class="attribute">options</span>:&#123;</span><br><span class="line">      styleIsolation:<span class="string">"isolated"</span> //属性隔离</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h3></li>
<li><p>组件间的基本通信方式有以下几种。</p>
</li>
<li><p>WXML 数据绑定：用于父组件向子组件的指定属性设置数据，仅能设置 JSON 兼容数据（自基础库版本 2.0.9 开始，还可以在数据中包含函数）。具体在 组件模板和样式 章节中介绍。</p>
<ul>
<li>数据绑定：在js文件中data域中设置一些初始化数据，后者空的数组等类型的数据，然后通过事件，生命周期中event对象获取数据，然后通过this.setData:()=&gt;{this.data.name = this.event.currentTarget.dataset.name} 这样的方式赋值，进行数据交互</li>
</ul>
</li>
<li><p>事件：用于子组件向父组件传递数据，可以传递任意数据。<br>？？？？？？？？？？？？？？？？？？？？？？<br>如果以上两种方式不足以满足需要，父组件还可以通过 this.selectComponent 方法获取子组件实例对象，这样就可以直接访问组件的任意数据和方法。</p>
<h3 id="组件和页面之间的通信"><a href="#组件和页面之间的通信" class="headerlink" title="组件和页面之间的通信"></a>组件和页面之间的通信</h3></li>
<li><p>官网对这块描述：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/events.html</a></p>
</li>
<li><p>页面传递该组件</p>
<ul>
<li><p>数据：properties</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 组件的属性列表</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="symbol">  properties:</span> &#123;</span><br><span class="line"><span class="symbol">    title:</span>&#123;</span><br><span class="line"><span class="symbol">        type:</span> String,</span><br><span class="line"><span class="symbol">        value:</span> <span class="string">"默认标题"</span></span><br><span class="line">        <span class="comment">//监听值得改变,即观察title值得变化</span></span><br><span class="line"><span class="symbol">        observer:</span>function(newVal,oldVal)&#123;</span><br><span class="line">          console.log(newVal,oldVal)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="params">&lt;view&gt;</span>该自定义组件传递数据<span class="params">&lt;/view&gt;</span></span><br><span class="line"><span class="params">&lt;component-scan title="哈哈哈"&gt;</span><span class="params">&lt;/component-scan&gt;</span></span><br><span class="line"><span class="params">&lt;component-scan title="好好好"&gt;</span><span class="params">&lt;/component-scan&gt;</span></span><br><span class="line"><span class="params">&lt;component-scan &gt;</span><span class="params">&lt;/component-scan&gt;</span></span><br><span class="line"><span class="comment">//这样页面的数据就可以传递该组件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>样式：externalClasses  </p>
</li>
<li><p>组件可以指定它所在节点的默认样式，使用 :host 选择器,即在组件的wxss文件中可以使用:host{}这个选择器该组件全局配置样式</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组件的wxml</span></span><br><span class="line">&lt;view class=<span class="string">"title titleclass"</span>&gt;&#123;&#123;title&#125;&#125;&lt;/view&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组件的js</span></span><br><span class="line">  <span class="comment">//页面改变组件的样式</span></span><br><span class="line">  externalClasses:[<span class="string">'titleclass'</span>] <span class="comment">//注意这里是数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//页面。</span></span><br><span class="line">&lt;component-scan title=<span class="string">"哈哈哈"</span> titleclass=<span class="string">"red"</span>&gt;&lt;/component-scan&gt;</span><br><span class="line">&lt;component-scan title=<span class="string">"好好好"</span> titleclass=<span class="string">"green"</span>&gt;&lt;/component-scan&gt;</span><br><span class="line">&lt;component-scan titleclass=<span class="string">"yellow"</span>&gt;&lt;/component-scan&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//页面的wxss样式</span></span><br><span class="line">  .<span class="built_in">red</span>&#123;</span><br><span class="line">  <span class="built_in">color</span>: <span class="built_in">red</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  .<span class="built_in">green</span>&#123;</span><br><span class="line">    <span class="built_in">color</span>: <span class="built_in">green</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  .yellow&#123;</span><br><span class="line">    <span class="built_in">color</span>: yellow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//通过这种方式就可以实现对样式的渲染</span></span><br></pre></td></tr></table></figure></li>
<li><p>标签：slot<br>？？？？？？？？？？？？？？？？？？？？</p>
<ul>
<li>slot表示插槽，插入数据的位置</li>
<li>在组件的wxml中可以包含 slot 节点，用于承载组件使用者提供的wxml结构。</li>
<li>默认情况下，一个组件的wxml中只能有一个slot。需要使用多slot时，可以在组件js中声明启用。<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">//1. 组件js文件中启用多slot插槽支持</span></span><br><span class="line"><span class="xml">Component(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable"> options:&#123;</span></span><br><span class="line"><span class="template-variable">     multipleSlots: true //启用多slot插槽支持</span></span><br><span class="line"><span class="template-variable"> &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//2. 组件的页面对其的支持</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"before"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是组件的内部节点<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"propa propb"</span>&gt;</span></span><span class="template-variable">&#123;&#123;propa&#125;</span><span class="xml">&#125;++++++++</span><span class="template-variable">&#123;&#123;propb&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"after"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//页面wxml</span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- slot插槽 --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">component-tag-name</span> <span class="attr">propa</span>=<span class="string">"dataFileA"</span> <span class="attr">propb</span>=<span class="string">"dataFileB"</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="comment">&lt;!-- 这部分内容将被放置在组件 &lt;slot&gt; 的位置上 --&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">view</span>&gt;</span>这里是插入到组件slot中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="comment">&lt;!-- 这里也就是说再多个slot插槽时，组件中使用name属性辨别在在页面中使用，其出现渲染屏幕的位置 --&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">"before"</span>&gt;</span>这里是插入到组件slot name="before"中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">view</span> <span class="attr">slot</span>=<span class="string">"after"</span>&gt;</span>这里是插入到组件slot name="after"中的内容<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">component-tag-name</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>组件传递该页面</p>
<ul>
<li>自定义事件<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">//组件wxml</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">bindtap</span>=<span class="string">"handlerCount"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//组件js</span></span><br><span class="line"><span class="xml"> /**</span></span><br><span class="line"><span class="xml">  * 组件的方法列表</span></span><br><span class="line"><span class="xml">  */</span></span><br><span class="line"><span class="xml">  methods: </span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">    handlerCount:function()&#123;</span></span><br><span class="line"><span class="template-variable">      //这里要把发生在组件内部的事件传出去</span></span><br><span class="line"><span class="template-variable">      //console.log("-----------")</span></span><br><span class="line"><span class="template-variable">      //triggerEvent时组件和页面之间通信的桥梁</span></span><br><span class="line"><span class="template-variable">      //第一个参数为事件名，第二个参数为数据，第三个为额外的选项</span></span><br><span class="line"><span class="template-variable">      this.triggerEvent("count",&#123;name:"mimi",age:18&#125;</span><span class="xml">,</span><span class="template-variable">&#123;&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">      /*</span></span><br><span class="line"><span class="xml">      * 对第三个参数说明</span></span><br><span class="line"><span class="xml">      * bubbles	Boolean	否	false	事件是否冒泡</span></span><br><span class="line"><span class="xml">      * composed	Boolean	否	false	事件是否可以穿越组件边界，为false时，事件将只能在引用组件的节点树上触发，不进入其他任何组件内部</span></span><br><span class="line"><span class="xml">      * capturePhase	Boolean	否	false	事件是否拥有捕获阶段</span></span><br><span class="line"><span class="xml">      **/</span></span><br><span class="line"><span class="xml">       <span class="comment">&lt;!-- this.triggerEvent('customevent', </span></span><span class="template-variable">&#123;&#125;</span><span class="xml"><span class="comment">, </span></span><span class="template-variable">&#123; bubbles: true &#125;</span><span class="xml"><span class="comment">) // 会依次触发事件冒泡</span></span></span><br><span class="line"><span class="xml">       this.triggerEvent('customevent', </span><span class="template-variable">&#123;&#125;</span><span class="xml">, </span><span class="template-variable">&#123; bubbles: true, composed: true &#125;</span><span class="xml">) // 会依次触发 </span></span><br><span class="line"><span class="xml">    &#125; --&gt;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">  //页面wxml</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- 自定义事件++组件内部发生 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>当前计数：</span><span class="template-variable">&#123;&#123;count&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- 事件 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">component-bind</span>  <span class="attr">bind:count</span>=<span class="string">"handlerCount"</span>&gt;</span><span class="tag">&lt;/<span class="name">component-bind</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- 传递的参数 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;name&#125;</span><span class="xml">&#125;:</span><span class="template-variable">&#123;&#123;age&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  //页面js</span></span><br><span class="line"><span class="xml">  Page(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">    /**</span></span><br><span class="line"><span class="template-variable">    * 页面的初始数据</span></span><br><span class="line"><span class="template-variable">    */</span></span><br><span class="line"><span class="template-variable">    data: &#123;</span></span><br><span class="line"><span class="template-variable">      count:0</span></span><br><span class="line"><span class="template-variable">      nmae:"",</span></span><br><span class="line"><span class="template-variable">      age:0</span></span><br><span class="line"><span class="template-variable">    &#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">    handlerCount:function()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">      console.log("--------")</span></span><br><span class="line"><span class="template-variable">      this.setData(&#123;</span></span><br><span class="line"><span class="template-variable">        count:this.data.count+1,</span></span><br><span class="line"><span class="template-variable">         //获取组件中传递过来的数据，</span></span><br><span class="line"><span class="template-variable">        name:event.detail.name,</span></span><br><span class="line"><span class="template-variable">        age:event.detail.age</span></span><br><span class="line"><span class="template-variable">      &#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="xml">  //通过这种方式就可以实现组件内部的事件为页面所用</span></span><br></pre></td></tr></table></figure>
<h4 id="注意：在自定义小程序的的属性的时候-属性名必须要小写字母，否则不会显示前端渲染的场景，也不会报错"><a href="#注意：在自定义小程序的的属性的时候-属性名必须要小写字母，否则不会显示前端渲染的场景，也不会报错" class="headerlink" title="注意：在自定义小程序的的属性的时候,属性名必须要小写字母，否则不会显示前端渲染的场景，也不会报错"></a>注意：在自定义小程序的的属性的时候,属性名必须要小写字母，否则不会显示前端渲染的场景，也不会报错</h4><h3 id="自定义组件触发事件时提供的detail对象-gt-e-detail"><a href="#自定义组件触发事件时提供的detail对象-gt-e-detail" class="headerlink" title="自定义组件触发事件时提供的detail对象 ==&gt;e.detail"></a>自定义组件触发事件时提供的detail对象 ==&gt;e.detail</h3><h3 id="Component构造器"><a href="#Component构造器" class="headerlink" title="Component构造器"></a>Component构造器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// component/component-tag-name/component-tag-name.js</span></span><br><span class="line">Component(&#123;</span><br><span class="line">  options:&#123;</span><br><span class="line">      multipleSlots: <span class="literal">true</span> <span class="comment">//启用多slot插槽支持</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 组件的属性列表</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  properties: &#123;</span><br><span class="line">    propa: &#123;</span><br><span class="line">      type:<span class="built_in">String</span>,</span><br><span class="line">      vallue:<span class="string">"默认值prop-a值"</span>,</span><br><span class="line">      observer:<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(newVal,oldVal)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    propb:&#123;</span><br><span class="line">      type:<span class="built_in">String</span>,</span><br><span class="line">      vallue:<span class="string">"默认值prop-b的值"</span>,</span><br><span class="line">      observer:<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(newVal,oldVal)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 组件的初始数据</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">  <span class="comment">//私有数据，用于模板的渲染</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 组件的方法列表</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    lifetimes:&#123;</span><br><span class="line">      <span class="comment">//定义方法名</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onMyButtonTap:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line"></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//组件内部的方法在name前添加_下划线</span></span><br><span class="line">    _myPrivateMethod:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        <span class="string">"A[0].B"</span>:<span class="string">"myProvateDate"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//有参</span></span><br><span class="line">    _myPrivateChange:<span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)</span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  lifetimes:&#123;</span><br><span class="line">    <span class="comment">//生命周期函数，可以为函数定义函数名</span></span><br><span class="line">    attached:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">    moved:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//注意这里定义的函数会被lifetimes中定义的函数覆盖</span></span><br><span class="line">  attached:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  pageLifetimes:&#123;</span><br><span class="line">    <span class="comment">//组件所在页面的生命周期函数</span></span><br><span class="line">    <span class="comment">//特殊的生命周期，它们并非与组件有很强的关联，但有时组件需要获知，</span></span><br><span class="line">    <span class="comment">//以便组件内部处理。这样的生命周期称为“组件所在页面的生命周期”，在 pageLifetimes 定义段中定义</span></span><br><span class="line">    show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//组件所在页面被展示时调用</span></span><br><span class="line">    &#125;,</span><br><span class="line">    hide:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//组件所在的页面被隐藏时调用</span></span><br><span class="line">    &#125;,</span><br><span class="line">    resize:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">//组件所在的页面变化是调用</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Component构造器构造页面"><a href="#Component构造器构造页面" class="headerlink" title="Component构造器构造页面"></a>Component构造器构造页面</h3></li>
</ul>
</li>
</ul>
</li>
<li><p>注意：</p>
<ol>
<li>页面也可以使用 Component 构造器构造，拥有与普通组件一样的定义段与实例方法，但是它必须包含对应的json文件包含的usingComponent的定义段</li>
<li>同时，组件的属性可以用于接收页面的参数，如访问页面 /pages/index/index?paramA=123&amp;paramB=xyz ，如果声明有属性 paramA 或 paramB ，则它们会被赋值为 123 或 xyz 。</li>
<li>页面的生命周期方法（即 on 开头的方法），应写在 methods 定义段中。<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// page/index/index.js</span></span><br><span class="line">  <span class="selector-tag">Page</span>(&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 页面的初始数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attribute">data</span>: &#123;</span><br><span class="line">      <span class="attribute">count</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="attribute">name</span>:<span class="string">""</span>,</span><br><span class="line">      <span class="attribute">age</span>:<span class="number">0</span>,</span><br><span class="line">      <span class="attribute">dataFileA</span>:<span class="string">""</span>,</span><br><span class="line">      <span class="attribute">dataFileB</span>:<span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attribute">handlerCount</span>:function(event)&#123;</span><br><span class="line">      console.log(event)</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        <span class="attribute">count</span>:this.data.count+<span class="number">1</span>,</span><br><span class="line">        <span class="comment">//获取组件中传递过来的数据，</span></span><br><span class="line">        <span class="attribute">name</span>:event.detail.name,</span><br><span class="line">        <span class="attribute">age</span>:event.detail.age</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">Component</span>(&#123;</span><br><span class="line">    <span class="attribute">properties</span>: &#123;</span><br><span class="line">      <span class="attribute">paramA</span>: Number,</span><br><span class="line">      <span class="attribute">paramB</span>: String,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attribute">methods</span>: &#123;</span><br><span class="line">      <span class="comment">//注意页面的生命周期函数必须写在这里面</span></span><br><span class="line">      <span class="attribute">onLoad</span>: function() &#123;</span><br><span class="line">        this.data.paramA <span class="comment">// 页面参数 paramA 的值</span></span><br><span class="line">        this.data.paramB <span class="comment">// 页面参数 paramB 的值</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>这样做的优点：就是可以使用behavoirs来提取页面的公共代码</li>
<li>官网地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/component.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/component.html</a></li>
</ul>
<ol>
<li>提取到一个js文件中，module.exports({//提供该外部使用})</li>
<li>那个页面要用到在js文件中以下方式引入即可：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pageCommonBehavior = <span class="built_in">require</span>(<span class="string">"相对路径"</span>)</span><br><span class="line">Component(&#123;</span><br><span class="line">  behaviors:[pageCommonBehavior],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3></li>
</ol>
</li>
<li><p>created ：组建的实例被创建完成时调用，注意，这个生命周期只应该用于给组件 this 添加一些自定义属性字段，不能调用setData方法设置数据</p>
</li>
<li><p>attached ：组件初始化完成，进入页面节点数时被调用，“绝大多数初始化工作可以在这个时机进行”</p>
</li>
<li><p>datached ：离开这个节点数时触发，注意，页面退出，组件还在这个节点树，会触发</p>
</li>
<li><p>component构造器中</p>
<figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">lifetimes:&#123;</span><br><span class="line">     <span class="comment">//生命周期函数，可以为函数定义函数名</span></span><br><span class="line">     attached:<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span>&#125;,</span><br><span class="line">     moved:<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span>&#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">//注意这里定义的函数会被lifetimes中定义的函数覆盖</span></span><br><span class="line">   attached:<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span>&#125;,</span><br><span class="line">   pageLifetimes:&#123;</span><br><span class="line">     <span class="comment">//组件所在页面的生命周期函数</span></span><br><span class="line">     <span class="comment">//特殊的生命周期，它们并非与组件有很强的关联，但有时组件需要获知，</span></span><br><span class="line">     <span class="comment">//以便组件内部处理。这样的生命周期称为“组件所在页面的生命周期”，在 pageLifetimes 定义段中定义</span></span><br><span class="line">     show:<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">       <span class="comment">//组件所在页面被展示时调用</span></span><br><span class="line">     &#125;,</span><br><span class="line">     hide:<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">       <span class="comment">//组件所在的页面被隐藏时调用</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="built_in">resize</span>:<span class="function"><span class="keyword">function</span><span class="params">()</span>&#123;</span></span><br><span class="line">       <span class="comment">//组件所在的页面变化是调用</span></span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>微信小程序开发</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发+基础</title>
    <url>/2020/05/16/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<ul>
<li><p>学习材料</p>
<ul>
<li><p>微信的官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/getstart.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/framework/quickstart/getstart.html</a></p>
</li>
<li><p>uni-api前端框架：<a href="https://uniapp.dcloud.io/README" target="_blank" rel="noopener">https://uniapp.dcloud.io/README</a></p>
</li>
<li><p>Vue：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p>
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li><p>申请账号，地址：<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" target="_blank" rel="noopener">https://mp.weixin.qq.com/wxopen/waregister?action=step1</a></p>
</li>
<li><p>登录小程序后台：<a href="https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&amp;token=511828739" target="_blank" rel="noopener">https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&amp;token=511828739</a><br>完成相关初始化，及获取AppId(开发–》开发设置)</p>
</li>
<li><p>微信开发工具的安装</p>
<h3 id="小程序的代码构成"><a href="#小程序的代码构成" class="headerlink" title="小程序的代码构成"></a>小程序的代码构成</h3></li>
<li><p>JSON配置文件<br>app.json:全局配置，【页面路径，界面表现，网络超时，底部tab】</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//页面路径</span></span><br><span class="line">  <span class="attr">"pages"</span>:[</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/logs"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 全局的默认窗口表现，</span></span><br><span class="line">  <span class="comment">//用于设置小程序的状态栏、导航条、标题、窗口背景色。</span></span><br><span class="line">  <span class="attr">"window"</span>:&#123;</span><br><span class="line">    <span class="comment">//下拉 loading 的样式，仅支持 dark / light</span></span><br><span class="line">    <span class="attr">"backgroundTextStyle"</span>:<span class="string">"light"</span>,</span><br><span class="line">    <span class="comment">//导航栏背景颜色</span></span><br><span class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#fff"</span>,</span><br><span class="line">    <span class="comment">//导航栏标题文字内容	</span></span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"WeChat"</span>,</span><br><span class="line">    <span class="comment">//导航栏标题颜色，仅支持 black / white</span></span><br><span class="line">    <span class="attr">"navigationBarTextStyle"</span>:<span class="string">"black"</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定使用升级后的weui样式,不是必填项</span></span><br><span class="line">  <span class="attr">"style"</span>: <span class="string">"v2"</span>,</span><br><span class="line">  <span class="comment">// 指明 sitemap.json 的位置 ，必选项</span></span><br><span class="line">  <span class="attr">"sitemapLocation"</span>: <span class="string">"sitemap.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>全局配置文件详解参考官网：<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html</a></p>
</li>
<li><p>工具配置 project.config.json 开发工具相关设计</p>
</li>
<li><p>page.json  pages/logs 目录下的 logs.json 这类和小程序页面相关的配置</p>
<h3 id="创建页面快捷的方式"><a href="#创建页面快捷的方式" class="headerlink" title="创建页面快捷的方式"></a>创建页面快捷的方式</h3><p>在项目母板json配置文件page字段(type String[])<br>“/page/index/index”之前添加相对路径即可，如”/page/wxpt/wxpt”,要刷新或者编译项目。</p>
<h3 id="WXML模板文件"><a href="#WXML模板文件" class="headerlink" title="WXML模板文件"></a>WXML模板文件</h3></li>
<li><p>其中 WXML 充当的就是类似 HTML 的角色</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--index.wxml--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"userinfo"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">wx:if</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;!hasUserInfo &amp;&amp; canIUse&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> <span class="attr">bindgetuserinfo</span>=<span class="string">"getUserInfo"</span>&gt;</span> 获取头像昵称 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:else</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">bindtap</span>=<span class="string">"bindViewTap"</span> <span class="attr">class</span>=<span class="string">"userinfo-avatar"</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;userInfo.avatarUrl&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">mode</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"userinfo-nickname"</span>&gt;</span></span><span class="template-variable">&#123;&#123;userInfo.nickName&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"usermotto"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"user-motto"</span>&gt;</span></span><span class="template-variable">&#123;&#123;motto&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>WXML全称是WeiXin Markup language，是小程序设计的一套标签语言，结合小程序的基础组件，事件系统，可以构建出页面的结构。</p>
</li>
<li><p>注意：在WXML中的属性是大小写敏感的；</p>
</li>
</ul>
<h4 id="用户数据绑定"><a href="#用户数据绑定" class="headerlink" title="用户数据绑定"></a>用户数据绑定</h4></li>
<li><p>wxml</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- 注释：数据绑定 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>当前时间：</span><span class="template-variable">&#123;&#123;time&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>js</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Page</span>(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 页面的初始数据</span></span><br><span class="line"><span class="comment">  * 字段的值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="attribute">data</span>: &#123;</span><br><span class="line">    time:(new <span class="built_in">Date</span>()).<span class="built_in">toString</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  ...)</span><br></pre></td></tr></table></figure></li>
<li><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 数据绑定 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>年龄：</span><span class="template-variable">&#123;&#123;age&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 列表展示 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;student[0].name&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;student[2].id&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><span class="template-variable">&#123;&#123;student[1].age&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 列表展示 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;student&#125;</span><span class="xml"><span class="tag"><span class="string">&#125;"</span>&gt;</span></span><span class="template-variable">&#123;&#123;index&#125;</span><span class="xml">&#125;--</span><span class="template-variable">&#123;&#123;item.name&#125;</span><span class="xml">&#125;--</span><span class="template-variable">&#123;&#123;item.id&#125;</span><span class="xml">&#125;--</span><span class="template-variable">&#123;&#123;item.age&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 事件监听改变data --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span>当前计数：</span><span class="template-variable">&#123;&#123;counter&#125;</span><span class="xml">&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">bindtap</span>=<span class="string">"handleBanClick"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">bindtap</span>=<span class="string">"handleSubClick"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">//js脚本</span></span><br><span class="line"><span class="xml">Page(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable"></span></span><br><span class="line"><span class="template-variable">    /**</span></span><br><span class="line"><span class="template-variable">    * 页面的初始数据</span></span><br><span class="line"><span class="template-variable">    */</span></span><br><span class="line"><span class="template-variable">    data: &#123;</span></span><br><span class="line"><span class="template-variable">      title: 'Hello World',</span></span><br><span class="line"><span class="template-variable">      age: 18,</span></span><br><span class="line"><span class="template-variable">      counter: 0,</span></span><br><span class="line"><span class="template-variable">      student: [</span></span><br><span class="line"><span class="template-variable">        &#123;id: 10, name: 'keke',age:18&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;id: 1, name: 'keke0',age:18&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;id: 0, name: 'keke1',age:18&#125;</span><span class="xml">,</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;id: 20, name: 'keke2',age:18&#125;</span></span><br><span class="line"><span class="xml">      ]</span></span><br><span class="line"><span class="xml">  &#125;,</span></span><br><span class="line"><span class="xml">    handleBanClick()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">      console.log('按钮发生点击点击事件')</span></span><br><span class="line"><span class="template-variable">      this.data.counter += 1</span></span><br><span class="line"><span class="template-variable">      console.log(this.data.counter)</span></span><br><span class="line"><span class="template-variable">      this.setData(&#123;</span></span><br><span class="line"><span class="template-variable">        counter: this.data.counter</span></span><br><span class="line"><span class="template-variable">      &#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    handleSubClick()</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">      this.setData(&#123;</span></span><br><span class="line"><span class="template-variable">        counter: this.data.counter -1</span></span><br><span class="line"><span class="template-variable">      &#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>条件逻辑<br>使用wx:if = ““ 来判断是否需要渲染该代码<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 逻辑语法 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">&#123;&#123;a+b&#125;&#125;</span><span class="xml"> + </span><span class="template-variable">&#123;&#123;c&#125;&#125;</span><span class="xml"> + d </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">text</span>&gt;</span></span><span class="template-variable">&#123;&#123;[1,2,3]&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><span class="template-variable">&#123;&#123;"hello world"&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 条件逻辑 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span> = <span class="string">"</span></span></span><span class="template-variable">&#123;&#123;condition&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>True<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;length &gt; 5&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;length &gt;2&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>&gt;</span>3<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>由于wx:if是一个控制属性，须要将他添加到一个标签上。如果要一次性判断多个标签，可以使用一个<block/>标签将多个组件包装起来，并在上面使用wx:if控制属性。</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:if</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;true&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> 哈西德了<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> 马哈麻哈<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>数组遍历</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 列表的渲染 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;array&#125;</span><span class="xml"><span class="tag"><span class="string">&#125;"</span>&gt;</span></span></span><br><span class="line"><span class="template-variable">&#123;&#123;index&#125;</span><span class="xml">&#125;:</span><span class="template-variable">&#123;&#123;item.message&#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">/*</span></span><br><span class="line"><span class="xml">* 说明：</span></span><br><span class="line"><span class="xml">* index与item是默认的变量值</span></span><br><span class="line"><span class="xml">* 可通过下面这种方式编程</span></span><br><span class="line"><span class="xml">* <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;array&#125;</span><span class="xml"><span class="tag"><span class="string">&#125;"</span> <span class="attr">wx:for-index</span>=<span class="string">"idx"</span> <span class="attr">wx:for-item</span>=<span class="string">"itemName"</span>&gt;</span></span></span><br><span class="line"><span class="xml">*    </span><span class="template-variable">&#123;&#123;idx&#125;</span><span class="xml">&#125;: </span><span class="template-variable">&#123;&#123;itemName.message&#125;</span><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">* <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">*/</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//js脚本</span></span><br><span class="line"><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  array:[&#123;</span></span><br><span class="line"><span class="template-variable">  message:'foo',</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml">,</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  message:'bar'</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="xml">]</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="WXSS样式文件"><a href="#WXSS样式文件" class="headerlink" title="WXSS样式文件"></a>WXSS样式文件</h4><ul>
<li>相当于css样式<h4 id="JS脚本文件"><a href="#JS脚本文件" class="headerlink" title="JS脚本文件"></a>JS脚本文件</h4><ul>
<li>JavaScript脚本</li>
</ul>
</li>
</ul>
<h4 id="有关wx：key来指定列表中项目的唯一的标识符。"><a href="#有关wx：key来指定列表中项目的唯一的标识符。" class="headerlink" title="有关wx：key来指定列表中项目的唯一的标识符。"></a>有关wx：key来指定列表中项目的唯一的标识符。</h4><ul>
<li>提供两种形式：<ol>
<li>字符串，代表在for循环的array中变量的某个属性，该属性的值需要是列表中唯一的字符串或数字，且不能动态改变。</li>
<li>保留关键字this代表在for循环中的item本身是唯一的字符串或者数字，<br>如：当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。</li>
</ol>
<ul>
<li>小案例：<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">&lt;!-- wx:<span class="keyword">for</span>的应用 --&gt;</span><br><span class="line">&lt;switch wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;objectArray&#125;&#125;"</span> wx:key=<span class="string">"unique"</span>&gt;&#123;&#123;item&#125;&#125;&lt;/switch&gt;</span><br><span class="line">&lt;button bindtap=<span class="string">"switch"</span>&gt;Switch&lt;/button&gt;</span><br><span class="line">&lt;button bindtap=<span class="string">"addToFront"</span>&gt; Add Nummber tothe front&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;switch wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;numberArray&#125;&#125;"</span> wx:key=<span class="string">"*this"</span>&gt;&#123;&#123;item&#125;&#125;&lt;/switch&gt;</span><br><span class="line">&lt;button bindtap=<span class="string">"addNumberToFront"</span>&gt;Add Number to the front&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// js脚本</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">data</span>: &#123;</span><br><span class="line">    time:(new Date()).toString(),</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span>,</span><br><span class="line">    c:<span class="number">3</span>,</span><br><span class="line">    array:[&#123;</span><br><span class="line">      message:<span class="string">'foo'</span>,</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      message:<span class="string">'bar'</span></span><br><span class="line">    &#125;],</span><br><span class="line">    objectArray:[</span><br><span class="line">      &#123;id:<span class="number">5</span>,unique:<span class="string">'unique_5'</span>&#125;,</span><br><span class="line">      &#123;id:<span class="number">4</span>,unique:<span class="string">'unique_4'</span>&#125;,</span><br><span class="line">      &#123;id:<span class="number">3</span>,unique:<span class="string">'unique_3'</span>&#125;,</span><br><span class="line">      &#123;id:<span class="number">2</span>,unique:<span class="string">'unique_2'</span>&#125;,</span><br><span class="line">      &#123;id:<span class="number">1</span>,unique:<span class="string">'unique_1'</span>&#125;,</span><br><span class="line">      &#123;id:<span class="number">0</span>,unique:<span class="string">'unique_0'</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    numberArray:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  switch:function(e) &#123;</span><br><span class="line">      <span class="keyword">const</span> length = <span class="keyword">this</span>.<span class="keyword">data</span>.objectArray.length</span><br><span class="line">      <span class="keyword">for</span>(let i = <span class="number">0</span>; i &lt; length; ++i)&#123;</span><br><span class="line">          <span class="keyword">const</span> x = Math.floor(Math.random * length)</span><br><span class="line">          <span class="keyword">const</span> y = Math.floor(Math.random() * length)</span><br><span class="line">          <span class="keyword">const</span> temp = <span class="keyword">this</span>.<span class="keyword">data</span>.objectArray[x]</span><br><span class="line">          <span class="keyword">this</span>.<span class="keyword">data</span>.objectArray[x] = <span class="keyword">this</span>.<span class="keyword">data</span>.objectArray[y]</span><br><span class="line">          <span class="keyword">this</span>.<span class="keyword">data</span>.objectArray[y] = temp </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        objectArray:<span class="keyword">this</span>.<span class="keyword">data</span>.objectArray</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  addToFront:function(e)&#123;</span><br><span class="line">    <span class="keyword">const</span> length =  <span class="keyword">this</span>.<span class="keyword">data</span>.objectArray.length</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">data</span>.objectArray = [&#123;id:length,unique:<span class="string">'unique'</span>+length&#125;].concat(<span class="keyword">this</span>.<span class="keyword">data</span>.onjectArray)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      numberArray:<span class="keyword">this</span>.<span class="keyword">data</span>.numberArray</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  addNumberToFront:function(e)&#123;</span><br><span class="line">      <span class="keyword">this</span>.<span class="keyword">data</span>.numberArray = [<span class="keyword">this</span>.<span class="keyword">data</span>.number.lenght +<span class="number">1</span>].concat(<span class="keyword">this</span>.<span class="keyword">data</span>.numberArray)</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        numberArray:<span class="keyword">this</span>.<span class="keyword">data</span>.numberArray</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><ul>
<li><p>WXML提供模板(template),可以在模板中定义代码片段，然后在不同的地方调用。使用name属性作为模板的名字。</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><span class="template-variable">&#123;&#123;index&#125;&#125;</span><span class="xml">::</span><span class="template-variable">&#123;&#123;mag&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">text</span>&gt;</span>Time:</span><span class="template-variable">&#123;&#123;time&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">// 使用is属性，声明需要使用的模板，然后将模板需要的data数据传入即可。</span></span><br></pre></td></tr></table></figure>
<h3 id="wxml中的容器"><a href="#wxml中的容器" class="headerlink" title="wxml中的容器"></a>wxml中的容器</h3><ul>
<li>swiper：</li>
<li>swiper-item:swiper的子标签</li>
</ul>
<p>css样式==》box-sizing:broder-box;宽高包括外边距和边框(默认情况下是不包括)</p>
</li>
</ul>
<h3 id="小程序的MVVM架构"><a href="#小程序的MVVM架构" class="headerlink" title="小程序的MVVM架构"></a>小程序的MVVM架构</h3><ul>
<li>小程序MVVM：<ol>
<li>逻辑层(AppService,–js): 内部提供MINA框架实现绑定</li>
<li>视图层(View – wxml，wxss)</li>
</ol>
</li>
<li>Vue(声明式编程)的MVVM： M-&gt;Model(数据),V-&gt;View,VM-&gt;ViewModel<ol>
<li>将model的数据通过ViewModel中DataBinding绑定到view</li>
<li>View通过事件监听——》DOM listeners</li>
</ol>
</li>
</ul>
<h3 id="配置小程序"><a href="#配置小程序" class="headerlink" title="配置小程序"></a>配置小程序</h3><ul>
<li><p>小程序把很多开发需求被规定在了配置文件中。</p>
</li>
<li><p>常见配置文件</p>
<ol>
<li><p>project.config.json:项目配置文件，比如项目名称，appid等，比如别人导入会优先读取这个文件生成相关配置，如版本等;</p>
</li>
<li><p>sitemap.json:小程序搜索相关</p>
<ul>
<li>补充知识点：<br>sitemap 的索引提示是默认开启的，如需要关闭 sitemap 的索引提示，可在小程序项目配置文件 //project.config.json 的 setting 中配置字段 checkSiteMap 为 false<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">  <span class="attr">"setting":</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">"urlCheck":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"es6":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"postcss":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"preloadBackgroundData":</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"minified":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"newFeature":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"autoAudits":</span> <span class="literal">false</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"coverView":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line"></span><br><span class="line">  <span class="string">//</span> <span class="string">sitemap</span> <span class="string">的索引提示是默认开启的，如需要关闭</span> <span class="string">sitemap</span> <span class="string">的索引提示，可在小程序项目配置文件</span> </span><br><span class="line">  <span class="string">//project.config.json</span> <span class="string">的</span> <span class="string">setting</span> <span class="string">中配置字段</span> <span class="string">checkSiteMap</span> <span class="string">为</span> <span class="literal">false</span></span><br><span class="line">  <span class="string">"checkSiteMap"</span><span class="string">:false,</span> </span><br><span class="line">  <span class="attr">"showShadowRootInWxmlPanel":</span> <span class="literal">true</span><span class="string">,</span></span><br><span class="line">  <span class="attr">"scopeDataCheck":</span> <span class="literal">false</span></span><br><span class="line"><span class="string">&#125;,</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>app.json:全局配置</p>
<ul>
<li>page  string[] 必填  页面路径列表<br>小程序所有的页面必须都在pages中进行注册，其中每一项都对应一个页面的路径信息</li>
<li>window Object  NO 全局默认的窗口表现<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">  <span class="string">"window"</span>: &#123;</span><br><span class="line">  <span class="string">"navigationBarBackgroundColor"</span>: <span class="string">"#ff5777"</span>, <span class="string">//</span>导航栏的背景颜色 注意这里只能以这种形式<span class="comment">#ff5777</span></span><br><span class="line">  <span class="string">"navigationBarTextStyle"</span>: <span class="string">"white"</span>,   <span class="string">//</span>导航栏text的颜色 有两个值黑 black/白white</span><br><span class="line">  <span class="string">"navigationBarTitleText"</span>: <span class="string">"小程序"</span>,</span><br><span class="line">  <span class="string">"backgroundColor"</span>: <span class="string">"#eeeeee"</span>, <span class="string">//</span>下拉刷新时下拉的部分的背景色</span><br><span class="line">  <span class="string">"backgroundTextStyle"</span>: <span class="string">"light"</span>, <span class="string">//</span>下拉时小圈的颜色</span><br><span class="line">  <span class="string">"enablePullDownRefresh"</span>: <span class="literal">true</span> <span class="string">//</span>刷新页面 默认<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>tabBar Object 否  底部tab栏的表现<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"tabBar"</span>: &#123;</span><br><span class="line">  <span class="string">"selectedColor"</span>: <span class="string">"#ff5777"</span>, <span class="comment">//选中tab时的颜色</span></span><br><span class="line">  <span class="string">"list"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"pagePath"</span>: <span class="string">"page/index/index"</span>,</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"首页"</span>,</span><br><span class="line">      <span class="string">"iconPath"</span>: <span class="string">"resoure/u=2643618211,3343688702&amp;fm=26&amp;gp=0.jpg"</span>,</span><br><span class="line">      <span class="string">"selectedIconPath"</span>: <span class="string">"resoure/u=2643618211,3343688702&amp;fm=26&amp;gp=0.jpg"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"pagePath"</span>: <span class="string">"page/home/home"</span>,</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"家"</span>,</span><br><span class="line">      <span class="string">"iconPath"</span>: <span class="string">"resoure/u=1834539365,2214630371&amp;fm=26&amp;gp=0.jpg"</span>,</span><br><span class="line">      <span class="string">"selectedIconPath"</span>: <span class="string">"resoure/u=1834539365,2214630371&amp;fm=26&amp;gp=0.jpg"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"pagePath"</span>: <span class="string">"page/logs/logs"</span>,</span><br><span class="line">      <span class="string">"text"</span>: <span class="string">"日志"</span>,</span><br><span class="line">      <span class="string">"iconPath"</span>: <span class="string">"resoure/下载.jpg"</span>,</span><br><span class="line">      <span class="string">"selectedIconPath"</span>: <span class="string">"resoure/下载.jpg"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>page.json:页面配置</p>
<ul>
<li>配置单个页面的表现</li>
<li>覆盖全局配置<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"usingComponents"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"navigationBarTitleText"</span>: <span class="string">"家庭日志"</span>,</span><br><span class="line">  <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#000000"</span>,</span><br><span class="line">  <span class="attr">"enablePullDownRefresh"</span>: <span class="literal">true</span> <span class="comment">//开启页面刷新</span></span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="小程序的双线程模型"><a href="#小程序的双线程模型" class="headerlink" title="小程序的双线程模型"></a>小程序的双线程模型</h3></li>
<li>页面渲染的过程</li>
</ul>
<ol>
<li>初始化渲染：WXML可以先转成JS对象，在渲染出真正的DOM树</li>
<li>数据发生变化：(不会刷新整个页面)<br>通过setData把msg数据从”Hello World”变成”Goodbye”<br>产生的JS对象对应的节点就会发生变化，<br>此时可以(通过diff算法)对比前后两个JS对象得到的变化的部分，<br>然后把这个差异应用到原来的DOM树上，<br>从而达到更新UI的目的，这就是”数据驱动”的原理。<h3 id="小程序启动流程"><a href="#小程序启动流程" class="headerlink" title="小程序启动流程"></a>小程序启动流程</h3>(当你第一次点击某个小程序)<br>下载小程序 –&gt;启动小程序–&gt;加载解析app.json –&gt; 注册App()– 执行App的声明周期<br>通过注册App() –&gt;加载自定义组件代码注册自定义组件 –&gt;加载解析page.json<pre><code>--&gt;渲染层加载渲染page.wxml
--&gt;逻辑层注册Page() --&gt;执行Page生命周期</code></pre><h3 id="App生命周期"><a href="#App生命周期" class="headerlink" title="App生命周期"></a>App生命周期</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小程序初始化成功！"</span>)</span><br><span class="line">    <span class="comment">//获取用户信息</span></span><br><span class="line">    <span class="comment">//发送网络请求</span></span><br><span class="line">    <span class="comment">// wx.getUserInfo(&#123;</span></span><br><span class="line">    <span class="comment">//   success: function(res)&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(res)</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"设置过期时间"</span>)</span><br><span class="line">      <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>()</span><br><span class="line">      <span class="comment">//抛出异常</span></span><br><span class="line">      <span class="keyword">throw</span> err</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 当小程序启动，或从后台进入前台显示，会触发 onShow</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"小程序启动后或者后进入前台：onShow"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 当小程序从前台进入后台，会触发 onHide</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"界面被隐藏时会执行：onHide"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 当小程序发生脚本错误，或者 api 调用失败时，会触发 onError 并带上错误信息</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  onError: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"发生异常！"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="思考：注册App时做什么？？？？？"><a href="#思考：注册App时做什么？？？？？" class="headerlink" title="思考：注册App时做什么？？？？？"></a>思考：注册App时做什么？？？？？</h3></li>
</ol>
</li>
</ol>
</li>
</ul>
<ol>
<li>判断小程序的进入场景</li>
</ol>
<ul>
<li>场景值:描述用户进入小程序的路径<ul>
<li>对于小程序，可以在 App 的 onLaunch 和 onShow，或wx.getLaunchOptionsSync 中获取上述场景值。</li>
<li>对于小游戏，可以在 wx.getLaunchOptionsSync 和 wx.onShow 中获取上述场景值</li>
<li>在onLaunch和onShow生命周期回调函数中，会有options参数，其中有scene(场景)值<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//js</span></span><br><span class="line"> onShow: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"小程序启动后或者后进入前台：onShow"</span>)</span><br><span class="line">     <span class="comment">//判断小程序进入场景</span></span><br><span class="line">     <span class="built_in">console</span>.log(options)</span><br><span class="line">     <span class="comment">//场景值</span></span><br><span class="line">     <span class="keyword">switch</span> (options.scene) &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">1001</span>:</span><br><span class="line">         <span class="comment">//执行某些操作</span></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">1002</span>:</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"判断其场景值，做出相应的操作..."</span>)</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ol start="2">
<li>监听生命周期函数，在生命周期中执行对应的业务逻辑<ul>
<li>获取用户信息<ol>
<li>通过用户授权即按钮的方式，获得用户信息</li>
</ol>
<ul>
<li>案例<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">//wxml</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 授权获取用户信息 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">size</span>=<span class="string">"mini"</span> <span class="attr">open-type</span>=<span class="string">'getUserInfo'</span> </span></span></span><br><span class="line"><span class="xml">bindgetuserinfo="handleGetUserInfo"&gt;</span></span><br><span class="line"><span class="xml">  获取授权</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//js 注册一个页面</span></span><br><span class="line"><span class="xml">page(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  handleGetUserInfo(e)&#123;</span></span><br><span class="line"><span class="template-variable">    console.log(e)</span></span><br><span class="line"><span class="template-variable">  &#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br></pre></td></tr></table></figure></li>
<li>只能展示用户的信息<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只能展示用户的信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">open-data</span> <span class="attr">type</span>=<span class="string">"userNickName"</span>&gt;</span><span class="tag">&lt;/<span class="name">open-data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">open-data</span> <span class="attr">type</span>=<span class="string">"userAvatarUrl"</span>&gt;</span><span class="tag">&lt;/<span class="name">open-data</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>由于App的实力只有一个，且全局共享的(单例对象)，因此可以将一些共享数据放在这里<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以在里面定义全局变量</span></span><br><span class="line">globalData：&#123;</span><br><span class="line">  name:'coderwhy',</span><br><span class="line">  age: 18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以在page/下面的js中获取</span></span><br><span class="line"><span class="comment">//调用APP 一般叫 --》注册一个小程序</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">app</span> = getApp()</span><br><span class="line"><span class="keyword">const</span> name = <span class="keyword">app</span>.globalData.name</span><br><span class="line"><span class="keyword">const</span> age = <span class="keyword">app</span>.globalData.age</span><br></pre></td></tr></table></figure>
<h3 id="注册Page页面时，需要做什么？？？？？"><a href="#注册Page页面时，需要做什么？？？？？" class="headerlink" title="注册Page页面时，需要做什么？？？？？"></a>注册Page页面时，需要做什么？？？？？</h3></li>
<li>在生命周期中发送网络请求，从服务器获取数据；</li>
<li>初始化一些数据，以方便被wxml引用展示</li>
<li>监听wxml中的事件，绑定对应的事件函数<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//------------1.监听页面的生命周期函数--------------</span></span><br><span class="line">onLoad: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//生命周期回调—监听页面加载</span></span><br><span class="line">  wx.request(&#123;</span><br><span class="line">  url: <span class="string">'url'</span>,</span><br><span class="line">  success: <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">      <span class="keyword">const</span> data = res.data.data.list;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        list: data</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">onShow()&#123;</span><br><span class="line">  <span class="comment">// 生命周期回调—监听页面显示</span></span><br><span class="line">&#125;,</span><br><span class="line">onReady()&#123;</span><br><span class="line">  <span class="comment">// 生命周期回调—监听页面初次渲染完成</span></span><br><span class="line">&#125;,</span><br><span class="line">onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 生命周期回调—监听页面隐藏</span></span><br><span class="line">&#125;,</span><br><span class="line">onUnload()&#123;</span><br><span class="line">  <span class="comment">// 生命周期回调—监听页面卸载,页面跳转</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>其它的一些监听(比如页面滚动，上拉刷新，下拉加载更多)</li>
</ol>
<ul>
<li>官方文档地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html</a></li>
</ul>
</li>
</ol>
]]></content>
      <tags>
        <tag>微信小程序开发</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud分布式微服务框架+基础环境搭建</title>
    <url>/2020/05/10/SpringCloud%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="SpringCloud的常用组件"><a href="#SpringCloud的常用组件" class="headerlink" title="SpringCloud的常用组件"></a>SpringCloud的常用组件</h3><ul>
<li>服务注册中心：Eureka 停更不停用&gt;,Zookeeper,Consul,Nacos(SpringCloud alibaba 百万级并发量);</li>
<li>服务和调用：Rabbon，LoadBalancer</li>
<li>服务调用2：Feign停更不停用&gt;，OpenFeign(推荐)</li>
<li>服务降级(熔断/限流)：Hystrix停更不停用&gt;，resiliencej，sentienl(alibaba，推荐)</li>
<li>服务网关：Zuul停更不停用&gt;，gateway（spring）</li>
<li>服务配置：Config停更不停用&gt;，Nacos</li>
<li>服务总线：Bus停更不停用&gt;，Nacos(重点)<h3 id="关于微服务的架构编码构建"><a href="#关于微服务的架构编码构建" class="headerlink" title="关于微服务的架构编码构建"></a>关于微服务的架构编码构建</h3></li>
<li>约定 &gt; 配置 &gt; 编码</li>
<li>创建父工程 –聚合总父工程–jar版本<h4 id="支付微服务"><a href="#支付微服务" class="headerlink" title="支付微服务"></a>支付微服务</h4></li>
<li>pom文件<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span></span><br><span class="line"><span class="xml">  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhao.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--工程优化--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">inceptionYear</span>&gt;</span>2001<span class="tag">&lt;/<span class="name">inceptionYear</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">site</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>website<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>scp://webhost.company.com/www/website<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--统一管理jar包版本--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子模块不用写groupId和version--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!--spring boot 2.2.2--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!--spring cloud Hoxton.SR1--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span> Hoxton.SR1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!--spring cound alibaba--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!--mysql--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;mysql.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!--Datasource durid 数据源--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!--mybatis spring boot--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;mybatis.spring.boot.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!--junit--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;junit.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!--lombok--&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;lombok.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>之后关闭测试</li>
<li>父工程创建完成执行Maven：install将父工程发布到仓库方便子工程继承<h3 id="微服务模块"><a href="#微服务模块" class="headerlink" title="微服务模块"></a>微服务模块</h3></li>
<li>建module，改pom,写YML,主启动，业务类</li>
<li>rest微服务工程构建<ul>
<li>构建步骤：<ol>
<li>cloud-provider-payment8001；微服务提供支付model模块  </li>
<li>pom文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhao.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>写YML配置，如端口，数据源，mybatis的mapper映射文件路径等<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">server</span>:</span><br><span class="line">    <span class="attribute">port</span>: <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">spring</span>:</span><br><span class="line">    <span class="attribute">application</span>:</span><br><span class="line">        <span class="attribute">name</span>: cloud-payment-service</span><br><span class="line">    <span class="attribute">datasource</span>:</span><br><span class="line">        <span class="attribute">type</span>: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">        <span class="attribute">driver-class-name</span>: com.mysql.jdbc.Driver</span><br><span class="line">        <span class="attribute">url</span>: <span class="attribute">jdbc</span>:<span class="attribute">mysql</span>:<span class="comment">//localhost:3306/db2020?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false.</span></span><br><span class="line">        <span class="attribute">username</span>: root</span><br><span class="line">        <span class="attribute">password</span>: zhao1314520</span><br><span class="line"></span><br><span class="line"><span class="attribute">mybatis</span>:</span><br><span class="line">    <span class="attribute">mapperLocations</span>: <span class="attribute">classpath</span>:mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">    type-aliases-package: com.zhao.springcloud.entities  #所有Entity别名类所在的包</span></span><br></pre></td></tr></table></figure></li>
<li>主启动类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.springcloud;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>业务类</li>
</ol>
<ul>
<li>建表SQL</li>
<li>实体类lombok<ul>
<li>主实体类Payment<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> lombok.AllArgsConstructor;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> lombok.Data;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> lombok.NoArgsConstructor;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.Serializable;</span></span><br><span class="line"></span><br><span class="line">@Data</span><br><span class="line">@AllArgsConstructor <span class="comment">//全参</span></span><br><span class="line">@NoArgsConstructor  <span class="comment">//空参</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;<span class="comment">//序列化</span></span><br><span class="line">    <span class="keyword">private</span> Long id; <span class="comment">//数据库bigint</span></span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Json封装体CommmonResult(成功失败时返回的code如200，提示消息)<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//全参</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  <span class="comment">//空参</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResoult</span>&lt;<span class="type">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回前端通用的json实体串</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CommonResoult(Integer code,String message)&#123;</span><br><span class="line">        <span class="keyword">this</span>(code,message,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>dao数据持久层<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.ibatis</span><span class="selector-class">.annotations</span><span class="selector-class">.Mapper</span>;</span><br><span class="line"><span class="selector-tag">import</span> <span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.ibatis</span><span class="selector-class">.annotations</span><span class="selector-class">.Param</span>;</span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">Mapper</span></span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">interface</span> <span class="selector-tag">PaymentDao</span> &#123;</span><br><span class="line">    <span class="comment">//增删改查，分页</span></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">int</span> <span class="selector-tag">create</span>(Payment payment);</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">Payment</span> <span class="selector-tag">getpaymentById</span>(<span class="variable">@Param</span>(<span class="string">"id"</span>) Long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>mapper映射文件<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper</span></span></span><br><span class="line"><span class="xml">        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="xml">        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.zhao.springcloud.dao.PaymentDao"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseresultMap"</span> <span class="attr">type</span>=<span class="string">"com.zhao.springcloud.dao.PaymentDao"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--实现字段的一一映射--&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"serial"</span> <span class="attr">property</span>=<span class="string">"serial"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--useGeneratedKeys="true" 执行成功返回&gt;1，失败0--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"create"</span> <span class="attr">parameterType</span>=<span class="string">"Payment"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        insert into payment(serial) values(#</span><span class="template-variable">&#123;serial&#125;</span><span class="xml">);</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getPaymentById"</span> <span class="attr">parameterType</span>=<span class="string">"Pament"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    select * from payment where id=#</span><span class="template-variable">&#123;id&#125;</span><span class="xml">;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>业务逻辑层sevice<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增删改查，分页</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line">    <span class="keyword">public</span> Payment getpaymentById(<span class="meta">@Param</span>(<span class="string">"id"</span>) Long id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceImpl</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> paymentDao.<span class="title">create</span><span class="params">(payment)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Payment <span class="title">getpaymentById</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> paymentDao.<span class="title">getpaymentById</span><span class="params">(id)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>控制层<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">//日志</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = <span class="meta-string">"/payment/create"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResoult create(Payment payment)&#123;</span><br><span class="line">        int result = paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">"*****插入结果****："</span>+result);</span><br><span class="line">        <span class="keyword">if</span>(result &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> new CommonResoult(<span class="number">200</span>,<span class="string">"插入数据库成功！"</span>,result);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> new CommonResoult(<span class="number">444</span>,<span class="string">"插入数据库失败！"</span>,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = <span class="meta-string">"/payment/getPayment"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResoult getPaymentById(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> <span class="built_in">Long</span> id)&#123;</span><br><span class="line">        Payment result = paymentService.getpaymentById(id);</span><br><span class="line">        log.info(<span class="string">"*****插入结果****："</span>+result);</span><br><span class="line">        <span class="keyword">if</span>(result != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> new CommonResoult(<span class="number">200</span>,<span class="string">"查询数据库成功！"</span>,result);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> new CommonResoult(<span class="number">444</span>,<span class="string">"查询数据库失败！没有对应的记录，查询ID："</span>+id,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>postman工具测试 localhost:8001/payment/get/1;localhost:8001/payment/create?serial=jkkjjk<h3 id="热部署Devtools-修改代码不用重启项目"><a href="#热部署Devtools-修改代码不用重启项目" class="headerlink" title="热部署Devtools(修改代码不用重启项目)"></a>热部署Devtools(修改代码不用重启项目)</h3></li>
<li>添加jar包<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spting-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>父工程添加插件maven-plugin<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>工程名字<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">addPesources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>开启自动编译选项 在IDEA中Settsing–build–compiler选择</li>
<li>快捷键ctrl+shift+alt+/， 选中runnig和*…Edt</li>
<li>重启IDEA</li>
</ul>
<h3 id="订单微服务-调用支付微服务"><a href="#订单微服务-调用支付微服务" class="headerlink" title="订单微服务(调用支付微服务)"></a>订单微服务(调用支付微服务)</h3><ul>
<li>知识点：RestTemplate<ul>
<li>RestTemplate提供了多种便捷访问远程Http服务的方法，是一种简单便捷地访问restful服务模板类，是Spring提供的用于访问Rest服务的客户端模板工具集。</li>
<li>使用<ul>
<li>使用restTemplate访问restful接口</li>
<li>(url,requestMap,ResponseBean.class)这三个参数分别代表REST请求地址，请求参数，HTTP相应转换的对象类型。</li>
<li>config配置类(ApplicationContextConfig)，将其注入到spring容器中</li>
<li>官网地址：<br><a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html" target="_blank" rel="noopener">https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a></li>
</ul>
</li>
</ul>
</li>
<li>建module，改pom,写YML,主启动，业务类<ul>
<li>pom文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-consumer-order80<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>写YML<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br></pre></td></tr></table></figure></li>
<li>主启动类</li>
<li>业务类（实体类(与支付实体一样略)，controller控制性，RestTempleate模板注入spring容器）<ul>
<li>RestTempleate<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate getRestTemplate()&#123;</span><br><span class="line">        <span class="keyword">return</span> new RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//applicationContext.xml  &lt;bean id="" class=''&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>controller<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">import org.springframework.web.bind.<span class="keyword">annotation</span>.<span class="title">PathVariable</span>;</span><br><span class="line">import org.springframework.web.bind.<span class="keyword">annotation</span>.<span class="title">RestController</span>;</span><br><span class="line">import org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line">import javax.<span class="keyword">annotation</span>.<span class="title">Resource</span>;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@Slf4j</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    public static final String  PAYMENT_URL = <span class="string">"http://localhost:8001"</span>;</span><br><span class="line">    @Resource</span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = <span class="string">"/consumer/payment/create"</span>)</span><br><span class="line">    public CommonResult&lt;Payment&gt; create(Payment payment)&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL+<span class="string">"/payment/create"</span>,payment,CommonResult<span class="class">.<span class="keyword">class</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">    @GetMapping(value = <span class="string">"/consumer/payment/get/&#123;id&#125;"</span>)</span><br><span class="line">    public CommonResult&lt;Payment&gt; getPaymentById(@PathVariable(<span class="string">"id"</span>)Long id)&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL+<span class="string">"/payment/get/"</span>+id,CommonResult<span class="class">.<span class="keyword">class</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>分布式微服务搭建：开启services<ul>
<li>在项目的.idea中找到workspace.xml,<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// 在其中"&lt;component name="RunDashboard"&gt;"下添加以下配置：</span><br><span class="line">  &lt;<span class="keyword">option</span> <span class="type">name</span>="configurationTypes"&gt;</span><br><span class="line">    &lt;<span class="keyword">set</span>&gt;</span><br><span class="line">      &lt;<span class="keyword">option</span> <span class="keyword">value</span>="SpringBootApplicationConfigurationType" /&gt;</span><br><span class="line">    &lt;/<span class="keyword">set</span>&gt;</span><br><span class="line">  &lt;/<span class="keyword">option</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="工程重构"><a href="#工程重构" class="headerlink" title="工程重构"></a>工程重构</h3></li>
</ul>
<ol>
<li>观察问题 — 项目中有重复的部分，重构</li>
<li>新建module— cloud-api-commons</li>
<li>pom中添加依赖包</li>
<li>加入重复部分 entities</li>
<li>打包发布到本地Maven仓库 clean install</li>
<li>订单和支付的分别改造<ul>
<li>删除重复entities，引入maven install的jar包坐标即可使用。<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--引入自己定义的api通用包，可以使用Payment支付Entity--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commoms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;project.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>SpringCloud分布式微服务框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud分布式微服务框架+服务注册中心Eureka</title>
    <url>/2020/05/10/SpringCloud%E5%88%86%E5%B8%83%E5%BC%8F%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83Eureka/</url>
    <content><![CDATA[<h3 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h3><ul>
<li>什么是服务治理？？？？<ul>
<li>Spring Cloud封装了Netfix公司开发的Eureka模块来实现服务治理；</li>
<li>在传统的rpc远程调用框架中，管理每个服务与服务之间依赖关系比较复杂，管理比较复杂，所以需要使用服务治理，管理服务于服务之间的依赖关系，可以实现调用，负载均衡，容错等，实现服务发现与注册。</li>
</ul>
</li>
<li>什么是服务注册与发现？？？？<ul>
<li>Eureka采用CS的设计架构，Eureka server 作为服务注册功能的服务器，他是服务注册中心。而系统中的其他微服务，使用Eureka server并维护心跳连接。这样系统的维护人员就可以通过Eureka Server 来监控系统中各个微服务是否正常运行。</li>
<li>在服务注册与发现中，有一个注册中心，当服务启动时，会把当前自己的服务器信息比如：服务器的地址通讯地址等以别名的方式注册到注册中心上，另一方面(消费者|服务器提供者)，以别名的方式去注册中心上获取到实际的服务通讯地址，然后在实现本地RPC调用RPC远程调用框架核心设计思想：在于注册中心，因为使用注册中心管理每个服务与服务之间的一个依赖关系(服务治理策略)。在任何rpc远程框架中，都会有一个注册中心(存放注册相关的信息(接口地址))；</li>
</ul>
</li>
<li>Eureka包含两个主键：Eureka Server和Eureka Client<ol>
<li>Eureka Server提供服务注册服务<br>各个微服务节点通过配置启动后，会在EurekaServer中进行注册，这样EurekaServer的服务注册表中将会存储所有可用服务节点的信息，服务节点的信息可以在界面中直接看到。</li>
<li>EurekaClient通过注册中心进行访问<br>是一个Java客户端，用于简化Eureka Server的交互，客户端同时也具备内置的，使用轮询(round-robin)负载均衡器。在应用程序启动后，将会向EurekaServer发送心跳(默认周期为30秒)。如果EurekaServer在多个心跳周期内没有接受到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除(默认90秒)。<h4 id="单机版Eureka构建步骤"><a href="#单机版Eureka构建步骤" class="headerlink" title="单机版Eureka构建步骤"></a>单机版Eureka构建步骤</h4></li>
</ol>
</li>
<li>IDEA生成EurekaServer端的注册中心：默认端口7001<br>建moudle，pom，写yml，主启动，业务类</li>
</ul>
<ol>
<li>建moudle cloud-eureka-server</li>
<li>改pom<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span></span><br><span class="line"><span class="xml">         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="xml">         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud2020<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-enreka-server7001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--引入自己定义的api通用包，可以使用Payment支付Entity--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commoms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;project.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--一般为通用配置--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>写yml<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#eureka.instance.hostname: 应用的主机名称</span></span><br><span class="line">  <span class="comment">#eureka.client.registerWithEureka: 值为false意味着自身仅作为服务器，不作为客户端</span></span><br><span class="line">  <span class="comment">#eureka.client.fetchRegistry: 值为false意味着无需注册自身</span></span><br><span class="line">  <span class="comment">#eureka.client.serviceUrl.defaultZone: 指明了应用的URL</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>主启动<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span>  <span class="comment">//@EnableEurekaServer的主要作用是启动EurekaServer运行环境和上下文。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnrekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EnrekaMain7001<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>以上Eureka Server环境就Ok</li>
<li>测试 localhost:7001 就可看到UC界面<h4 id="EurekaClient端-cloud-provider-payment8001"><a href="#EurekaClient端-cloud-provider-payment8001" class="headerlink" title="EurekaClient端 cloud-provider-payment8001"></a>EurekaClient端 cloud-provider-payment8001</h4></li>
<li>将其注册到EurekaServer成为服务提供者provider</li>
<li>改pom添加依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>写yml<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>      <span class="comment">#当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>      <span class="comment">#mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2020?useUnicode=true&amp;characterEncoding-utr-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">zhao1314520</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.springcloud.entities</span>       <span class="comment">#所有Entity别名类所在包</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注入进EurekaServer默认true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认true，单节点无所谓，集群必须设置true，才能配置ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure></li>
<li>主启动<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>OK 测试Eureka UC界面就会显示次微服务的名称，url等<h4 id="EurekaClient端cloud-consumer-order80"><a href="#EurekaClient端cloud-consumer-order80" class="headerlink" title="EurekaClient端cloud-consumer-order80"></a>EurekaClient端cloud-consumer-order80</h4></li>
<li>将其注册进EurekaServer成为服务消费者consumer</li>
<li>pom<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>YML<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-sevice</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure></li>
<li>主配置类<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableEurekaClient</span></span><br><span class="line">public class OrderMain80 &#123;</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(OrderMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>OK 单机版Eureka完成<h4 id="Eureka集群"><a href="#Eureka集群" class="headerlink" title="Eureka集群"></a>Eureka集群</h4></li>
<li>Eureka Server：服务注册，就是将消息注册进注册中心；服务发现，就是从注册中心上获取服务信息；实质，存key服务命令，取value调用地址；</li>
</ul>
<ol>
<li>先启动eureka注册中心</li>
<li>启动服务提供者payment支付服务</li>
<li>支付服务启动后会把自身信息(比如服务地址以别名的方式注入进eureka)</li>
<li>消费者order服务再需要调用接口时，使用服务别名去注册中心获取实际的RPC远程调用地址</li>
<li>消费者获取调用地址后，底层实际是利用HttpClient技术实现远程调用</li>
<li>消费者获得服务地址后会缓存在本地JVM内存中，默认每间隔30秒更新一次服务调用地址</li>
</ol>
<ul>
<li><p>问题：微服务RPC远程服务调用最核心的是什么？？？？</p>
<ul>
<li>高可用</li>
<li>搭建Eureka注册中心集群，实现负载均衡+故障容错</li>
</ul>
</li>
<li><p>Euteka集群环境搭建步骤</p>
<ol>
<li>参考cloud-eureka-server7001</li>
<li>参考cloud-eureka-server7003</li>
<li>改POM</li>
<li>修改映射配置</li>
<li>写YML(以前单机)</li>
<li>主启动</li>
</ol>
</li>
<li><p>相互注册，互相守望</p>
</li>
<li><p>yml文件 7001</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span> <span class="comment"># 集群eureka服务端的实例名称</span></span><br><span class="line">  <span class="comment">#    hostname: localhost  单机</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line"><span class="comment">#eureka.instance.hostname: 应用的主机名称</span></span><br><span class="line">  <span class="comment">#eureka.client.registerWithEureka: 值为false意味着自身仅作为服务器，不作为客户端</span></span><br><span class="line">  <span class="comment">#eureka.client.fetchRegistry: 值为false意味着无需注册自身</span></span><br><span class="line">  <span class="comment">#eureka.client.serviceUrl.defaultZone: 指明了应用的URL</span></span><br></pre></td></tr></table></figure></li>
<li><p>7003</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7003.com</span> <span class="comment"># 集群eureka服务端的实例名称</span></span><br><span class="line">  <span class="comment">#    hostname: localhost  单机</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetchRegistry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="comment">#      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改 80和8001的yml配置，Eureka集群</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span>      <span class="comment">#当前数据源操作类型</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>      <span class="comment">#mysql驱动包</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db2020?useUnicode=true&amp;characterEncoding-utr-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">zhao1314520</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.atguigu.springcloud.entities</span>       <span class="comment">#所有Entity别名类所在包</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#表示是否将自己注入进EurekaServer默认true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认true，单节点无所谓，集群必须设置true，才能配置ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:7001/eureka 单机版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7003.com:7003/eureka</span> <span class="comment">#Eureka集群</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-sevice</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:7001/eureka 单机版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7003.com:7003/eureka</span> <span class="comment">#集群版</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>SpringCloud分布式微服务框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8的特性+Lambda表达式</title>
    <url>/2020/05/10/Java8%E7%9A%84%E7%89%B9%E6%80%A7-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="Lambda的语法"><a href="#Lambda的语法" class="headerlink" title="Lambda的语法"></a>Lambda的语法</h3><ul>
<li>特点：简洁 匿名 可传值 有返回值<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="constructor">Thread(<span class="params">new</span> Runnable()</span> &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void run<span class="literal">()</span> &#123;</span><br><span class="line">               <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).start<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//Lambda表达式的写法</span></span><br><span class="line">       <span class="comment">//这里不加花括号是可以省略return的</span></span><br><span class="line">       <span class="comment">//lambda表达式一个参数可省略括号，两个及两个以上不能省略参数，参数类型可通过类型推导得到</span></span><br><span class="line">       <span class="keyword">new</span> <span class="constructor">Thread(()</span>-&gt;<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>)).start<span class="literal">()</span>;</span><br></pre></td></tr></table></figure></li>
<li>lambda表达式可分为 参数列表-&gt;逻辑代码块</li>
<li>合法的lambda表达式</li>
</ul>
<ol>
<li><p>Function&lt;String,Integer&gt; flamdba = s -&gt; s.length();</p>
</li>
<li><p>Predicate<Apple> p = a -&gt; a.getColor().equals(“green”);</p>
</li>
<li><p>(int x, int y)-&gt;{</p>
<pre><code>System.out.println(x);
System.out.println(y);</code></pre><p> }</p>
<p>  @FuncationlInterfaces<br> public interface Test{</p>
<pre><code>public int fun(int x,int y);</code></pre><p>}</p>
</li>
<li><p>() -&gt; 44;<br> @FuncationlInterfaces<br>public interface Test{</p>
<pre><code>public int fun();</code></pre><p>}</p>
</li>
</ol>
<h3 id="在那里使用Lambda"><a href="#在那里使用Lambda" class="headerlink" title="在那里使用Lambda"></a>在那里使用Lambda</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.Comparator;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> LambdaExpression &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//java.util.Comparator;包下的比较器，相等返回0，小于返回负数，大于返回正数</span></span><br><span class="line">        Comparator&lt;Apple&gt; byColor = <span class="keyword">new</span> Comparator&lt;Apple&gt;<span class="literal">()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public <span class="built_in">int</span> compare(Apple o1, Apple o2) &#123;</span><br><span class="line">                <span class="comment">/*String.compareTo()</span></span><br><span class="line"><span class="comment">                * 如果参数字符串等于此字符串，则值为0 ;</span></span><br><span class="line"><span class="comment">                * 如果这个字符串的字典比字符串参数小，一个值小于0; </span></span><br><span class="line"><span class="comment">                * 如果此字符串的字典大小超过字符串参数，则值大于0 。 </span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                return o1.get<span class="constructor">Color()</span>.compare<span class="constructor">To(<span class="params">o2</span>.<span class="params">getColor</span>()</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">new</span> Runnable()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run<span class="literal">()</span> &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式的写法</span></span><br><span class="line">        <span class="comment">//这里不加花括号是可以省略return的</span></span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">Thread(()</span>-&gt;<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>)).start<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Apple&gt; <span class="built_in">list</span> = <span class="module-access"><span class="module"><span class="identifier">Collections</span>.</span></span>empty<span class="constructor">List()</span>;</span><br><span class="line">        <span class="built_in">list</span>.sort(byColor);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="execute-around-pattern（围绕模式执行）"><a href="#execute-around-pattern（围绕模式执行）" class="headerlink" title="execute around pattern（围绕模式执行）"></a>execute around pattern（围绕模式执行）</h3><h3 id="Funcationl-interface-函数式接口"><a href="#Funcationl-interface-函数式接口" class="headerlink" title="Funcationl interface 函数式接口"></a>Funcationl interface 函数式接口</h3><h3 id="Method-references-方法引用"><a href="#Method-references-方法引用" class="headerlink" title="Method references 方法引用"></a>Method references 方法引用</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.zhao.Java8.Lambda;</span><br><span class="line"></span><br><span class="line">import com.zhao.Java8.Apple;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.<span class="keyword">function</span>.Consumer;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> LambdaExpression2 &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; consumer = <span class="keyword">new</span> Consumer&lt;String&gt;<span class="literal">()</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void accept(String s) &#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambda表达式写法 Consumer这是一个函数式接口</span></span><br><span class="line">        Consumer&lt;String&gt; consumer1 = s -&gt; <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(s);  <span class="comment">//简洁方便</span></span><br><span class="line"></span><br><span class="line">        use<span class="constructor">Consumer(<span class="params">consumer1</span>,<span class="string">"consumer1"</span>)</span>;</span><br><span class="line">        use<span class="constructor">Consumer(<span class="params">consumer</span>,<span class="string">"String"</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名函数+lambda表达式</span></span><br><span class="line">        use<span class="constructor">Consumer(<span class="params">s</span>-&gt; System.<span class="params">out</span>.<span class="params">println</span>(<span class="params">s</span>)</span>,<span class="string">"consumer3"</span>);<span class="comment">//相比上面更加简洁</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法推到</span></span><br><span class="line">        use<span class="constructor">Consumer(System.<span class="params">out</span>::<span class="params">println</span>,<span class="string">"consumer4"</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//对Apple进行排序  字典顺序</span></span><br><span class="line">        List&lt;Apple&gt; <span class="built_in">list</span> = <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">new</span> Apple(<span class="string">"yellow"</span>,150)</span>,<span class="keyword">new</span> <span class="constructor">Apple(<span class="string">"Red"</span>,100)</span>,<span class="keyword">new</span> <span class="constructor">Apple(<span class="string">"Green"</span>,110)</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">list</span>.sort((a1,a2)-&gt;a1.get<span class="constructor">Color()</span>.compare<span class="constructor">To(<span class="params">a2</span>.<span class="params">getColor</span>()</span>));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合转换成流的形式，循环遍历输出</span></span><br><span class="line">        <span class="built_in">list</span>.stream<span class="literal">()</span>.for<span class="constructor">Each(<span class="params">a</span>-&gt; System.<span class="params">out</span>.<span class="params">println</span>(<span class="params">a</span>)</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"************方法推导*************"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法推导</span></span><br><span class="line">        <span class="built_in">list</span>.stream<span class="literal">()</span>.for<span class="constructor">Each(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//常用形式</span></span><br><span class="line">        <span class="built_in">int</span> value = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="string">"123"</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//lambad表达式的形式</span></span><br><span class="line">        Function&lt;String,Integer&gt; <span class="keyword">function</span> = Integer::parseInt;</span><br><span class="line">        Integer result = <span class="keyword">function</span>.apply(<span class="string">"123"</span>);<span class="comment">//将此参数应用于给定的函数</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static &lt;T&gt; void use<span class="constructor">Consumer(Consumer&lt;T&gt; <span class="params">consumer</span>,T <span class="params">t</span>)</span>&#123;</span><br><span class="line">        consumer.accept(t);</span><br><span class="line">        consumer.accept(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Type-interence-类型推导"><a href="#Type-interence-类型推导" class="headerlink" title="Type interence    类型推导"></a>Type interence    类型推导</h3><h3 id="Composing-Lambda-组合Lambda表达式"><a href="#Composing-Lambda-组合Lambda表达式" class="headerlink" title="Composing Lambda  组合Lambda表达式"></a>Composing Lambda  组合Lambda表达式</h3>]]></content>
      <tags>
        <tag>Java8的特性</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8的特性+让方法参数具备行为能力</title>
    <url>/2020/05/10/Java8%E7%9A%84%E7%89%B9%E6%80%A7-%E8%AE%A9%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E5%85%B7%E5%A4%87%E8%A1%8C%E4%B8%BA%E8%83%BD%E5%8A%9B/</url>
    <content><![CDATA[<h3 id="让方法参数具备行为能力"><a href="#让方法参数具备行为能力" class="headerlink" title="让方法参数具备行为能力"></a>让方法参数具备行为能力</h3><ul>
<li>案例代码<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterApple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 需要绿色的苹果  FilterApple</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 需求的变化就是 参数的变化</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 如果需求增加 如用户要苹果的重量 常用的解决方法：策略模式</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//方案三  策略模式</span></span><br><span class="line">    <span class="comment">//定义策略接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AppleFilter</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> filter(Apple apple);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">List</span>&lt;Apple&gt; findApple(<span class="keyword">List</span>&lt;Apple&gt; apples,AppleFilter appleFilter)&#123;</span><br><span class="line">        <span class="keyword">List</span>&lt;Apple&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Apple apple : apples)&#123;</span><br><span class="line">            <span class="keyword">if</span> (appleFilter.filter(apple)) &#123;</span><br><span class="line">                <span class="keyword">list</span>.add(apple);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//策略接口的实现类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenAnd100Wight</span> <span class="keyword">implements</span> <span class="title">AppleFilter</span></span>&#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> filter(Apple apple) &#123;</span><br><span class="line">            <span class="keyword">return</span> (apple.getColor().equals(<span class="string">"green"</span>) &amp;&amp; apple.getWeight() &gt;=<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">YellowAnd100Wight</span> <span class="keyword">implements</span> <span class="title">AppleFilter</span></span>&#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">boolean</span> filter(Apple apple) &#123;</span><br><span class="line">            <span class="keyword">return</span> (apple.getColor().equals(<span class="string">"yellow"</span>) &amp;&amp; apple.getWeight() &gt;=<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方案一 单一参数 需求简单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">List</span>&lt;Apple&gt; findGreenApplen(<span class="keyword">List</span>&lt;Apple&gt; apples)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">List</span>&lt;Apple&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Apple apple : apples)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"green"</span>.equals(apple.getColor()))&#123;</span><br><span class="line">                <span class="keyword">list</span>.add(apple);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方案二  获得不同颜色的苹果  --》增加参数或添加方法  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">List</span>&lt;Apple&gt; findApple(<span class="keyword">List</span>&lt;Apple&gt; apples,String color)&#123;</span><br><span class="line">        <span class="keyword">List</span>&lt;Apple&gt; <span class="keyword">list</span> = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Apple apple : apples)&#123;</span><br><span class="line">            <span class="keyword">if</span> (color.equals(apple.getColor()))&#123;</span><br><span class="line">                <span class="keyword">list</span>.add(apple);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(String[] args)&#123;</span><br><span class="line">        <span class="keyword">List</span>&lt;Apple&gt; <span class="keyword">list</span> = Arrays.asList(<span class="keyword">new</span> Apple(<span class="string">"green"</span>,<span class="number">170</span>),<span class="keyword">new</span> Apple(<span class="string">"green"</span>,<span class="number">150</span>),<span class="keyword">new</span> Apple(<span class="string">"yellow"</span>,<span class="number">120</span>),<span class="keyword">new</span> Apple(<span class="string">"red"</span>,<span class="number">100</span>));</span><br><span class="line">        <span class="keyword">List</span>&lt;Apple&gt; greenApplen = findGreenApplen(<span class="keyword">list</span>);</span><br><span class="line">        assert greenApplen.size() == <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">List</span>&lt;Apple&gt; green = findApple(<span class="keyword">list</span>, <span class="string">"red"</span>);</span><br><span class="line">        System.out.println(green);</span><br><span class="line">        <span class="keyword">for</span> (Apple apple:greenApplen) &#123;</span><br><span class="line">            System.out.println(apple);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">List</span>&lt;Apple&gt; apple = findApple(<span class="keyword">list</span>, <span class="keyword">new</span> GreenAnd100Wight());</span><br><span class="line">        System.out.println(apple);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方案四：匿名内部类</span></span><br><span class="line">        <span class="keyword">List</span>&lt;Apple&gt; yellowApplen = findApple(<span class="keyword">list</span>, <span class="keyword">new</span> AppleFilter() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">boolean</span> filter(Apple apple) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"yellow"</span>.equals(apple.getColor());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(yellowApplen);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方案五 lambda 表达式</span></span><br><span class="line">        <span class="keyword">List</span>&lt;Apple&gt; lambdaResult = findApple(<span class="keyword">list</span>, (Apple apple2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> apple2.getColor().equals(<span class="string">"green"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(lambdaResult);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>pojo<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.Java8;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 需求总是变化的，如何让应对这些变化</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> class Apple &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> <span class="built_in">color</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Apple() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Apple(<span class="keyword">String</span> <span class="built_in">color</span>, <span class="keyword">long</span> weight) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">color</span> = <span class="built_in">color</span>;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Apple&#123;"</span> +</span><br><span class="line">                <span class="string">"color='"</span> + <span class="built_in">color</span> + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", weight="</span> + weight +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getColor() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">color</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setColor(<span class="keyword">String</span> <span class="built_in">color</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">color</span> = <span class="built_in">color</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> getWeight() &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setWeight(<span class="keyword">long</span> weight) &#123;</span><br><span class="line">        <span class="keyword">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="DOC查参JVM内存的方法"><a href="#DOC查参JVM内存的方法" class="headerlink" title="DOC查参JVM内存的方法"></a>DOC查参JVM内存的方法</h3><p><img src="images%5Cjava8-jvm%E5%86%85%E5%AD%98.png" alt=""></p>
<h3 id="Lambda表达式详解"><a href="#Lambda表达式详解" class="headerlink" title="Lambda表达式详解"></a>Lambda表达式详解</h3><ul>
<li>特点：简洁，匿名，可以传值</li>
</ul>
]]></content>
      <tags>
        <tag>Java8的特性</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高并发编程+ClassLoader类加载器机制</title>
    <url>/2020/05/10/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-ClassLoader%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="JVM-Class-Loader"><a href="#JVM-Class-Loader" class="headerlink" title="JVM Class Loader"></a>JVM Class Loader</h3><ul>
<li>结束JVM的生命周期的方式：<ol>
<li>System.exit()<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> *终止当前运行的Java虚拟机。这个</span><br><span class="line"></span><br><span class="line"> *参数用作状态代码；按照惯例，为非零状态</span><br><span class="line"> *代码表示异常终止。</span><br><span class="line"> *&lt;p&gt;</span><br><span class="line"> *此方法调用类中的&lt;code&gt;exit&lt;/code&gt;方法</span><br><span class="line"> *&lt;code&gt;运行时&lt;/code&gt;。此方法从不正常返回。</span><br><span class="line"> *&lt;p&gt;</span><br><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">  * </span></span>the<span class="markdown"> call:</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">  * </span><span class="xml"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">  * </span>Runtime.getRuntime().exit(n)</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">  * </span><span class="xml"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown">  *</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">  * </span>@param      status   exit status.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">  * </span>@throws  SecurityException</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">  *        </span>if </span>a<span class="markdown"> security manager exists and its <span class="xml"><span class="tag">&lt;<span class="name">code</span>&gt;</span></span>checkExit<span class="xml"><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span></span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">  *        </span>method </span>doesn't<span class="markdown"> allow exit with </span>the<span class="markdown"> specified status.</span></span></span><br><span class="line"><span class="comment"><span class="markdown"><span class="bullet">  * </span>@see        java.lang.Runtime#exit(int)</span></span></span><br><span class="line"><span class="comment"><span class="markdown">  */</span></span></span><br><span class="line"> public <span class="keyword">static</span> <span class="keyword">void</span> exit(<span class="built_in">int</span> status) &#123;</span><br><span class="line">     Runtime.getRuntime().exit(status);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>正常结束 Normal finish done</li>
<li>Encounter the error or expression 遇到异常和错误</li>
<li>Crash JVM出错</li>
<li>OS problems and others 系统问题，或硬件问题</li>
</ol>
</li>
<li>Class Loader 简介：<br><img src="images%5CclassLoader.webp" alt=""></li>
<li>这个类的作用就是根据一个指定的类的全限定名,找到对应的Class字节码文件,然后加载它转化成一个java.lang.Class类的一个实例.</li>
</ul>
<h3 id="类加载的三个阶段"><a href="#类加载的三个阶段" class="headerlink" title="类加载的三个阶段"></a>类加载的三个阶段</h3><ol>
<li>加载：查找(类放在ClassPath下由系统类加载器决定的)并且加载类的二进制数据</li>
<li>链接：<ul>
<li>验证：确保被加载的类的正确性</li>
<li>准备：为类的静态变量分配内存，并将其初始化为默认值</li>
<li>解析：把类中的符号引入转换为直接引用</li>
</ul>
</li>
<li>初始化:为默认的静态变量赋予正确的初始值</li>
</ol>
<ul>
<li>案例<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">package com.zhao.class<span class="class">Loader;</span></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* classloader 主动加载案例</span><br><span class="line">*</span><br><span class="line">* */</span><br><span class="line">public class SingletonThread &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> SingletonThread<span class="built_in"> instance </span>=<span class="built_in"> new </span>SingletonThread();</span><br><span class="line">//  创建实例的位置在这个   结果x=0 y=1</span><br><span class="line">    /*</span><br><span class="line">    * 分析：</span><br><span class="line">    * 1.<span class="built_in"> instance </span>= null; 准备阶段</span><br><span class="line">    * 2. x = 0;</span><br><span class="line">    * 3. y = 0;</span><br><span class="line">    * 4. 初始化:为默认的静态变量赋予正确的初始值</span><br><span class="line">    * new</span><br><span class="line">    *<span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton();</span><br><span class="line">    * x++;--&gt;x = 1;</span><br><span class="line">    * y++;--&gt;y = 1;</span><br><span class="line">    *</span><br><span class="line">    * 5.重新把x赋值为 0; y是默认值=1;</span><br><span class="line">    *</span><br><span class="line">    * */</span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span><span class="built_in"> int </span>x = 0;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span><span class="built_in"> int </span>y;</span><br><span class="line"></span><br><span class="line">//  <span class="keyword"> private</span><span class="keyword"> static</span> SingletonThread<span class="built_in"> instance </span>=<span class="built_in"> new </span>SingletonThread();</span><br><span class="line">// 创建实例的位置在这个   结果x=1, y=1</span><br><span class="line">    /*</span><br><span class="line">    * 分析：</span><br><span class="line">    * 第一步：int x 创建地址，开辟内存空间  赋予默认值 0</span><br><span class="line">    * y也同x</span><br><span class="line">    * * 准备：为类的静态变量分配内存，并将其初始化为默认值</span><br><span class="line">    *<span class="built_in"> instance </span>= null;  默认值为空</span><br><span class="line">    *<span class="built_in"> new </span>的过程调用构造方法 xy分别加1</span><br><span class="line">    * */</span><br><span class="line">   <span class="keyword"> private</span> SingletonThread()&#123;</span><br><span class="line">        x++;</span><br><span class="line">        y++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> SingletonThread getInstance()&#123;</span><br><span class="line">       <span class="built_in"> return </span>instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> public</span> <span class="keyword"> static</span> void main(String[] args)&#123;</span><br><span class="line">        SingletonThread<span class="built_in"> instance </span>= getInstance();</span><br><span class="line">        System.out.println(instance.x);</span><br><span class="line">        System.out.println(instance.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>类加载阶段详解<br>类的加载简单来说，就是将class文件的二进制数据读取到内存中，将其放在方法区中，然后在堆区中创建一个java.lang.Class对象，用来封装在方法区的数据结构</li>
</ul>
</li>
<li>案例<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.zhao.classLoader;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> classloader &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        MyObject myObject1 = <span class="keyword">new</span> <span class="constructor">MyObject()</span>;</span><br><span class="line">        MyObject myObject2 = <span class="keyword">new</span> <span class="constructor">MyObject()</span>;</span><br><span class="line">        MyObject myObject3 = <span class="keyword">new</span> <span class="constructor">MyObject()</span>;</span><br><span class="line">        MyObject myObject4 = <span class="keyword">new</span> <span class="constructor">MyObject()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 分析：</span></span><br><span class="line"><span class="comment">        * 他们四个创建之后，在堆内存中会有这样四个实例</span></span><br><span class="line"><span class="comment">        * 但是，他们对应的Class是一个；</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(myObject1.get<span class="constructor">Class()</span><span class="operator"> == </span>myObject2.get<span class="constructor">Class()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(myObject2.get<span class="constructor">Class()</span><span class="operator"> == </span>myObject3.get<span class="constructor">Class()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(myObject3.get<span class="constructor">Class()</span><span class="operator"> == </span>myObject4.get<span class="constructor">Class()</span>);</span><br><span class="line">        <span class="comment">//当然这里用不同的类加载器加载，结果就不同了  路径：classloader名+全限定类名</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 结果:</span></span><br><span class="line"><span class="comment">        * true</span></span><br><span class="line"><span class="comment">        * true</span></span><br><span class="line"><span class="comment">        * true</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类加载的最终产物"><a href="#类加载的最终产物" class="headerlink" title="类加载的最终产物"></a>类加载的最终产物</h3><ul>
<li>类加载的最终产品是位于堆区中的Class对象(真实的数据)</li>
<li>class对象是访问二进制数据的入口,</li>
<li>方法区：存放二进制的数据结构（类型），静态变量，常量池<h3 id="链接阶段"><a href="#链接阶段" class="headerlink" title="链接阶段"></a>链接阶段</h3></li>
<li>在加载阶段完成之后，虚拟机外部的二进制数据量就会按照虚拟机所需要的格式存储在方法区中(数据结构)，然后在堆区中创建一个Class对象，这个对象作为程序访问方法区中这些数据结构的外部接口</li>
<li>加载阶段与链接阶段的部分内容可以是交叉进行的，比如一部分代码加载完成就可以进行验证，提高效率;<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><ul>
<li>验证主要目的是确保Class文件中的字节流中包含的信息符合虚拟机的要求，并且不会损害到JVM的自身安全</li>
<li>VerifyError 验证不通过产生的异常</li>
<li>文件格式验证：<ul>
<li>魔术因子是否正确，OxCAFEBABE</li>
<li>主从版本号是否符合当前虚拟机</li>
<li>常量池中的常量类型是不是不支持</li>
<li>etc</li>
</ul>
</li>
<li>元数据的验证：<ul>
<li>是否有父类</li>
<li>父类是不是允许继承</li>
<li>是否实现覆盖了的final字段</li>
<li>其他的语义检索</li>
</ul>
</li>
<li>字节码的验证：<ul>
<li>主要进行数据流和控制流的分析，不会出现这样的情况，在操作栈中放置了一个int类型，但是却给了一个long类型的数据</li>
</ul>
</li>
<li>符号验证:<ul>
<li>调用了一个不存在的方法，字段等等</li>
<li>符号引用验证的目的是确保解析动作正常执行，如果无法通过符号引用验证，将会抛出一个java.lang.IncompatibleClassChangeError异常的子类，如java.lang.IllgalAccessError，java.lang.NoSuchFieldError,java.lang.NoSuchMethodError等;<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4></li>
</ul>
</li>
</ul>
</li>
<li>准备阶段就是给类变量分配初始值<table>
<thead>
<tr>
<th>数据类型</th>
<th align="center">初始值</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td align="center">0</td>
</tr>
<tr>
<td>long</td>
<td align="center">0L</td>
</tr>
<tr>
<td>short</td>
<td align="center">(short)0</td>
</tr>
<tr>
<td>char</td>
<td align="center"><code>\u0000</code></td>
</tr>
<tr>
<td>byte</td>
<td align="center">(byte)0</td>
</tr>
<tr>
<td>boolean</td>
<td align="center">false</td>
</tr>
<tr>
<td>float</td>
<td align="center">0.0f</td>
</tr>
<tr>
<td>double</td>
<td align="center">0.0d</td>
</tr>
<tr>
<td>reference</td>
<td align="center">null</td>
</tr>
<tr>
<td>#### 解析（把符号引用变成直接引用的方式）</td>
<td align="center"></td>
</tr>
<tr>
<td>* 类或者接口的解析</td>
<td align="center"></td>
</tr>
<tr>
<td>* 字段解析</td>
<td align="center"></td>
</tr>
<tr>
<td>* 类方法解析</td>
<td align="center"></td>
</tr>
<tr>
<td>* 接口方法解析</td>
<td align="center"></td>
</tr>
<tr>
<td>* 虚拟机规范之中并未指定解析解析阶段发生的具体时间，只要求了在执行anewarray，checkcase，getfield，getstatic，instanceof，invokeinterface，incokeaecial，invokestatic，invokevirtual，multianewarray，new，putfield和putstatic这13个用于操作符号引用的字节码指令之前，先对他们所使用的符号引用进行解析，所以虚拟机实现会根据需要来判断，到底是在类被加载器加载时就对常量池中的符号进行解析，还是等到一个符号引用将要被使用前才去解析它。</td>
<td align="center"></td>
</tr>
<tr>
<td>### 初始化（执行构造函数 clinit是class Init）</td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
<li>类加载过程的最后一步</li>
<li>初始化阶段是执行构造器函数<clinit>()方法的过程</li>
<li><clinit>()方法是由编译器自动收集类中的所有变量的赋值动作和静态语句块中的语句合并产生的。</li>
<li>静态语句块中只能访问到定义在静态语句块之前的变量，定义在他之后的变量，只能赋值不能访问</li>
<li><clinit>()方法与类的构造函数有点区别，它不需要显示的调用父类的构造函数，虚拟机会保证在子类的<clinit>执行之前，先执行父类的<clinit>,因此在虚拟机中首先被执行的是Object的<clinit>()方法</li>
<li>由于父类的<clinit>()方法要先执行，也就意味者父类中定义的静态语句块，要优先于子类</li>
<li>注意：</li>
</ul>
<ol>
<li><clinit>()方法对于一个类来说并不是必须的，</li>
<li>接口中照样存在<clinit>()方法</li>
<li>虚拟机有义务保证<clinit>()方法的线程安全<h3 id="类加载的方式"><a href="#类加载的方式" class="headerlink" title="类加载的方式"></a>类加载的方式</h3></li>
</ol>
<ul>
<li>本地磁盘中直接加载 –&gt;classpath,根加载器加载的目录/扩展类加载器加载的地方</li>
<li>内存中直接加载 –&gt;在程序运行时通过动态代理…产生的二进制数据加载成.calss;不通过硬盘直接调用</li>
<li>通过网络加载.class</li>
<li>从zip，jar等归档文件中加载.class文件</li>
<li>数据库中提取.class文件</li>
<li>动态编译 –&gt;和内存中直接加载差不多，可以加载到硬盘中<h3 id="Java程序对类的使用方式"><a href="#Java程序对类的使用方式" class="headerlink" title="Java程序对类的使用方式"></a>Java程序对类的使用方式</h3></li>
</ul>
<ol>
<li>主动加载</li>
</ol>
<ul>
<li>new，直接使用</li>
<li>访问某个类或者接口的静态变量，或者对该变量进行赋值操作(1.对某个静态变量进行读写；2.对接口中静态变量进行读public final static)</li>
<li>调用静态方法</li>
<li>反射某个类</li>
<li>初始化一个子类</li>
<li>启动类，比如：java HelloWold</li>
<li>除了上述六个以外，其余的都是被动使用，不会导致类的初始化</li>
<li>注意：<br> a.在子类调用父类的静态变量时，父类会被初始化，子类不会初始化，属于被动加载<br> 子类.父类static变量；<br> b.通过数组引用，不会初始化（obj[] arrays = new obj[10];）<br> c.引用常量类型（static final）：不会初始化;<br> final修饰的常量会在编译期间放到常量池中，不会初始化<br> d.特殊情况：<br> final修饰的复杂类型，在编译期间无法计算得出，会初始化<br> （public static final int x = new Random().nextInt(100);）这个会被初始化；<br> 原因：x是常量，但是它的值不是常量，上面引用常量在编译器加载进内存方法区的常量池中，而x的值需要计算…</li>
</ul>
<ol start="2">
<li>被动加载</li>
</ol>
<ul>
<li>所有的java虚拟机实现必须在每个类或者接口被java程序首次主动使用时才初始化他们，当然现代JVM有可能根据程序的上下文语意推断出接下来可能初始化谁<h3 id="JVM类加载器详细介绍"><a href="#JVM类加载器详细介绍" class="headerlink" title="JVM类加载器详细介绍"></a>JVM类加载器详细介绍</h3></li>
<li>启动/根类加载器(Bootstrap ClassLoader):<br>这个类加载器负责将\lib目录下的类库加载到虚拟机内存中,用来加载java的核心库,此类加载器并不继承于java.lang.ClassLoader,不能被java程序直接调用,代码是使用C++编写的.是虚拟机自身的一部分.<br>根类加载器从系统属性sun.boot.class.path所指定的目录中加载类库。<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">package com.zhao.classLoader1;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BootClassLoader</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(System.getProperty(<span class="string">"sun.boot.class.path"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/<span class="regexp">/结果：</span></span><br><span class="line"><span class="regexp">C:\Program Files\Java\jdk1.8.0_231\jre\lib\resources.jar;</span></span><br><span class="line"><span class="regexp">C:\Program Files\Java\jdk1.8.0_231\jre\lib\rt.jar;</span></span><br><span class="line"><span class="regexp">C:\Program Files\Java\jdk1.8.0_231\jre\lib\sunrsasign.jar;</span></span><br><span class="line"><span class="regexp">C:\Program Files\Java\jdk1.8.0_231\jre\lib\jsse.jar;</span></span><br><span class="line"><span class="regexp">C:\Program Files\Java\jdk1.8.0_231\jre\lib\jce.jar;</span></span><br><span class="line"><span class="regexp">C:\Program Files\Java\jdk1.8.0_231\jre\lib\charsets.jar;</span></span><br><span class="line"><span class="regexp">C:\Program Files\Java\jdk1.8.0_231\jre\lib\jfr.jar;</span></span><br><span class="line"><span class="regexp">C:\Program Files\Java\jdk1.8.0_231\jre\classes</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<ul>
<li><p>扩展类加载器(Extendsion ClassLoader):<br>  它的父加载器为根加载器。<br>  它从java.ext.dirs系统属性所指的目录中加载类库<br>  这个类加载器负责加载jre\lib\ext目录(扩展目录)下的类库,用来加载java的扩展库,开发者可以直接使用这个类加载器.<br>  如果把用户创建的JAR文件放在这个目录下，也会自动由扩展类加载器加载，扩展类加载器是纯Java类，是java.lang.ClassLoader类的子类</p>
  <figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BootClassLoader</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">/<span class="regexp">/        System.out.println(System.getProperty("sun.boot.class.path"));</span></span><br><span class="line"><span class="regexp">        System.out.println(System.getProperty("java.ext.dirs"));</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/执行结果</span></span><br><span class="line"><span class="regexp">C:\Program Files\Java\jdk1.8.0_231\jre\lib\ext;C:\Windows\Sun\Java\lib\ext</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>应用程序类加载器(Application ClassLoader):<br>  这个类加载器负责加载用户类路径(CLASSPATH)下的类库,一般我们编写的java类都是由这个类加载器加载,这个类加载器是CLassLoader中的getSystemClassLoader()方法的返回值,所以也称为系统类加载器.一般情况下这就是系统默认的类加载器.<br>  它的父加载器为扩展类加载器；<br>  它从环境变量classpath或者系统属性java.class.path所指的目录中加载类；<br>  系统类加载器是纯Java类，是java.lang.ClassLoader类的子类</p>
</li>
<li><p>除此之外,我们还可以加入自己定义的类加载器,以满足特殊的需求,需要继承java.lang.ClassLoader类.</p>
<h3 id="双亲委托原则"><a href="#双亲委托原则" class="headerlink" title="双亲委托原则"></a>双亲委托原则</h3></li>
<li><p>基本介绍：<br>一个类加载器查找class和resource时，是通过“委托模式”进行的，<br>它首先判断这个class是不是已经加载成功，如果没有的话它并不是自己进行查找，<br>而是先通过父加载器，然后递归下去，直到Bootstrap ClassLoader(启动类加载器)，<br>如果Bootstrap classloader找到了，直接返回，如果没有找到，则一级一级返回，<br>最后到达自身去查找这些对象。这种机制就叫做双亲委托。</p>
</li>
<li><p>详细说明：</p>
<ol>
<li>一个AppClassLoader查找资源时，先看看缓存是否有，缓存有从缓存中获取，否则委托给父加载器。</li>
<li>递归，重复第1步的操作。 </li>
<li>如果ExtClassLoader也没有加载过，则由Bootstrap ClassLoader出面，它首先查找缓存，如果没有找到的话，<br>就去找自己的规 定的路径下，也就是sun.mic.boot.class下面的路径。<br>找到就返回，没有找到，让子加载器自己去找。</li>
<li>Bootstrap ClassLoader如果没有查找成功，则ExtClassLoader自己在java.ext.dirs路径中去查找，查找成功就返回，查找不成功，再向下让子加载器找。</li>
<li>ExtClassLoader查找不成功，AppClassLoader就自己查找，在java.class.path路径下查找。找到就返回。如果没有找到就让子类找，如果没有子类会怎么样？抛出各种异常。<h4 id="类加载重要方法-loadClass-、findLoadedClass-、findClass-、defineClass-。"><a href="#类加载重要方法-loadClass-、findLoadedClass-、findClass-、defineClass-。" class="headerlink" title="类加载重要方法 loadClass()、findLoadedClass()、findClass()、defineClass()。"></a>类加载重要方法 loadClass()、findLoadedClass()、findClass()、defineClass()。</h4></li>
</ol>
</li>
<li><p>loadClass()</p>
</li>
<li><p>源码</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">java.lang.ClassLoader的源码</span><br><span class="line">protected Class&lt;?&gt; load<span class="constructor">Class(String <span class="params">name</span>, <span class="params">boolean</span> <span class="params">resolve</span>)</span></span><br><span class="line">       throws ClassNotFoundException</span><br><span class="line">   &#123;</span><br><span class="line">       synchronized (get<span class="constructor">ClassLoadingLock(<span class="params">name</span>)</span>) &#123;</span><br><span class="line">           <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">           <span class="comment">// 首先，检测是否已经检测</span></span><br><span class="line">           Class&lt;?&gt; c = find<span class="constructor">LoadedClass(<span class="params">name</span>)</span>;</span><br><span class="line">           <span class="keyword">if</span> (c<span class="operator"> == </span>null) &#123;</span><br><span class="line">               long t0 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>nano<span class="constructor">Time()</span>;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (parent != null) &#123;</span><br><span class="line">                     <span class="comment">//父类加载器不为空则调用父加载器的loadClass</span></span><br><span class="line">                       c = parent.load<span class="constructor">Class(<span class="params">name</span>, <span class="params">false</span>)</span>;</span><br><span class="line">                   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="comment">//父类加载器为空则调用BootstrapClassLoader 启动/根类加载器</span></span><br><span class="line">                       c = find<span class="constructor">BootstrapClassOrNull(<span class="params">name</span>)</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">                   <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                   <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (c<span class="operator"> == </span>null) &#123;</span><br><span class="line">                   <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                   <span class="comment">// to find the class.</span></span><br><span class="line">                   long t1 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>nano<span class="constructor">Time()</span>;</span><br><span class="line">                   <span class="comment">//父类加载器还没有找到，则调用findclass</span></span><br><span class="line">                   c = find<span class="constructor">Class(<span class="params">name</span>)</span>;</span><br><span class="line"></span><br><span class="line">                   <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                   sun.misc.<span class="module-access"><span class="module"><span class="identifier">PerfCounter</span>.</span></span>get<span class="constructor">ParentDelegationTime()</span>.add<span class="constructor">Time(<span class="params">t1</span> - <span class="params">t0</span>)</span>;</span><br><span class="line">                   sun.misc.<span class="module-access"><span class="module"><span class="identifier">PerfCounter</span>.</span></span>get<span class="constructor">FindClassTime()</span>.add<span class="constructor">ElapsedTimeFrom(<span class="params">t1</span>)</span>;</span><br><span class="line">                   sun.misc.<span class="module-access"><span class="module"><span class="identifier">PerfCounter</span>.</span></span>get<span class="constructor">FindClasses()</span>.increment<span class="literal">()</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">               resolve<span class="constructor">Class(<span class="params">c</span>)</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           return c;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java.net.URLClassLoader源码</span><br><span class="line">public final Class&lt;?&gt; load<span class="constructor">Class(String <span class="params">name</span>, <span class="params">boolean</span> <span class="params">resolve</span>)</span></span><br><span class="line">       throws ClassNotFoundException</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="comment">// First check if we have permission to access the package. This</span></span><br><span class="line">       <span class="comment">// should go away once we've added support for exported packages.</span></span><br><span class="line">       SecurityManager sm = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>get<span class="constructor">SecurityManager()</span>;</span><br><span class="line">       <span class="keyword">if</span> (sm != null) &#123;</span><br><span class="line">           <span class="built_in">int</span> i = name.last<span class="constructor">IndexOf('.')</span>;</span><br><span class="line">           <span class="keyword">if</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">               sm.check<span class="constructor">PackageAccess(<span class="params">name</span>.<span class="params">substring</span>(0, <span class="params">i</span>)</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       return super.load<span class="constructor">Class(<span class="params">name</span>, <span class="params">resolve</span>)</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>说明</p>
<ol>
<li>通过指定的全限定类名加载class，它通过同名的loadClass(String,boolean)方法。</li>
<li>上面是方法原型，一般实现这个方法的步骤是<ul>
<li>执行findLoadedClass(String)去检测这个class是不是已经加载过了。</li>
<li>执行父加载器的loadClass方法。如果父加载器为null，则jvm内置的加载器去替代，也就是Bootstrap ClassLoader。这也解释了ExtClassLoader的parent为null,但仍然说Bootstrap ClassLoader是它的父加载器。</li>
<li>如果向上委托父加载器没有加载成功，则通过findClass(String)查找。</li>
<li>如果class在上面的步骤中找到了，参数resolve又是true的话，那么loadClass()又会调用resolveClass(Class)这个方法来生成最终的Class对象。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="创建自定义的类加载器"><a href="#创建自定义的类加载器" class="headerlink" title="创建自定义的类加载器"></a>创建自定义的类加载器</h3><ul>
<li>加载器<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.CustomClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 自定义类加载器</span></span><br><span class="line"><span class="comment">* 本地磁盘加载</span></span><br><span class="line"><span class="comment">* * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">customClassLoader</span> <span class="title">extends</span> <span class="title">ClassLoader</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> <span class="keyword">String</span> DEFAULT_DIR =<span class="string">"E:\\ClassLoader"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> dir = DEFAULT_DIR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> classLoaderName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">customClassLoader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">customClassLoader</span><span class="params">(<span class="keyword">String</span> classLoaderName)</span></span>&#123;</span><br><span class="line">        super();</span><br><span class="line">        <span class="keyword">this</span>.classLoaderName = classLoaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">customClassLoader</span><span class="params">(<span class="keyword">String</span> classLoaderName,ClassLoader parent)</span></span>&#123;</span><br><span class="line">        <span class="comment">//可以指定父加载器</span></span><br><span class="line">        super(parent);</span><br><span class="line">        <span class="keyword">this</span>.classLoaderName = classLoaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 重写父类的findClass()方法</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(<span class="keyword">String</span> name) throws ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">String</span> classPath = name.replace(<span class="string">"."</span>,<span class="string">"/"</span>);</span><br><span class="line">        <span class="built_in">File</span> classFile = <span class="keyword">new</span> <span class="built_in">File</span>(dir,classPath+<span class="string">".class"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!classFile.<span class="built_in">exists</span>())&#123;</span><br><span class="line">            <span class="comment">//判断文件存在否</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"The class"</span>+ name +<span class="string">"not found under:"</span>+dir);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = loadClassBytes(classFile);</span><br><span class="line">        <span class="keyword">if</span> (null == classBytes || classBytes.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"load the class"</span>+ name + <span class="string">"failed.加载这个类是空的！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.defineClass(name,classBytes,<span class="number">0</span>,classBytes.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassBytes(<span class="built_in">File</span> classFile) &#123;</span><br><span class="line">        <span class="keyword">try</span>(</span><br><span class="line">                ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(classFile);</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.<span class="built_in">read</span>(<span class="built_in">buffer</span>)) != <span class="number">-1</span>)&#123;</span><br><span class="line">                baos.<span class="built_in">write</span>(<span class="built_in">buffer</span>,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            baos.<span class="built_in">flush</span>();<span class="comment">//刷新</span></span><br><span class="line">            <span class="comment">//toByteArray()</span></span><br><span class="line">            <span class="comment">//创建一个新分配的字节数组。返回值byte[]</span></span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDir</span><span class="params">(<span class="keyword">String</span> dir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dir = dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getClassLoaderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classLoaderName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>被加载的类，首先编译成二进制文件放到硬盘指定目录下<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span>&#123;</span></span><br><span class="line">  ststic&#123;</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"My object static block."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package com.zhao.CustomClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.<span class="keyword">Method</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 测试</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> CustomClassLoaderTest &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        customClassLoader myClassLoader = <span class="built_in">new</span> customClassLoader("MyClassLoader");</span><br><span class="line">        <span class="keyword">Class</span>&lt;?&gt; aClass = myClassLoader.loadClass("com.zhao.CustomClassLoader.MyObject");</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(aClass);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(aClass.getClassLoader());</span><br><span class="line"></span><br><span class="line">        //拿到这个类的实例</span><br><span class="line">        <span class="keyword">Object</span> o = aClass.newInstance();</span><br><span class="line">        <span class="keyword">Method</span> <span class="keyword">method</span> = aClass.getMethod("hello",<span class="built_in">new</span> <span class="keyword">Class</span>&lt;?&gt;[]&#123;&#125;);</span><br><span class="line">        <span class="keyword">Object</span> result = <span class="keyword">method</span>.invoke(o,<span class="built_in">new</span> <span class="keyword">Object</span>[]&#123;&#125;);</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> //执行结果：</span><br><span class="line">  <span class="keyword">class</span> com.zhao.CustomClassLoader.MyObject</span><br><span class="line">  com.zhao.CustomClassLoader.customClassLoader@<span class="number">4554617</span>c</span><br><span class="line">  My <span class="keyword">object</span> static block.</span><br><span class="line">  Hello World</span><br><span class="line">  </span><br><span class="line">  Process finished <span class="keyword">with</span> <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
<li>注意：</li>
<li>一个ClassLoader创建时如果没有指定parent，那么它的parent默认就是AppClassLoader。</li>
<li>上面说的是，如果自定义一个ClassLoader，默认的parent父加载器是AppClassLoader，因为这样就能够保证它能访问系统内置加载器加载成功的class文件。</li>
<li>必须重写父类的findClass()方法否则会抛类找不到的异常</li>
<li>内部类或匿名内部类 :<br>  “java.lang.String”<br>  “javax.swing.JSpinner$DefaultEditor”<br>  “java.security.KeyStore$Builder$FileBuilder$1”<br>  “java.net.URLClassLoader$3$1”</li>
<li>我们在findClass()方法中定义了查找class的方法，然后数据通过defineClass()生成了Class对象。</li>
</ul>
<h3 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h3><ul>
<li><p>通过异或操作</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.jiami;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleEnvrypt</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">String</span> plain = <span class="string">"Hello ClassLoder"</span>;</span><br><span class="line">    <span class="comment">//因子可以随便取</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">byte</span> ENCRYPT_FFACTOR = (<span class="keyword">byte</span>) <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*加密*/</span></span><br><span class="line">        <span class="comment">//获取字符串默认的字节码</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = plain.getBytes();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] encrypt = <span class="keyword">new</span> <span class="keyword">byte</span>[bytes.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            <span class="comment">//^异或操作 拿同一字符异或会变成另为一个字符，再一次异或会变回去</span></span><br><span class="line">            encrypt[i] =(<span class="keyword">byte</span>) (bytes[i] ^ ENCRYPT_FFACTOR);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="keyword">new</span> <span class="keyword">String</span>(encrypt));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        <span class="keyword">byte</span>[] decrypt = <span class="keyword">new</span> <span class="keyword">byte</span>[encrypt.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">            <span class="comment">//^异或操作 拿同一字符异或会变成另为一个字符，再一次异或会变回去</span></span><br><span class="line">            decrypt[i] =(<span class="keyword">byte</span>) (encrypt[i] ^ ENCRYPT_FFACTOR);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="keyword">new</span> <span class="keyword">String</span>(decrypt));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>异或操作封装成工具类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.jiami;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.utils.res.XResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 加密工具包</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">//这里还可以用抽象类的方式</span></span><br><span class="line"><span class="keyword">public</span> final <span class="class"><span class="keyword">class</span> <span class="title">EncryptUtils</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">byte</span> ECCRYPT_FACTOR = (<span class="keyword">byte</span>) <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Util规范 不能new 不能构造</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">EncryptUtils</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//empty</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doEncypt</span><span class="params">(<span class="keyword">String</span> source,<span class="keyword">String</span> target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(FileInputStream fis = <span class="keyword">new</span> FileInputStream(source);</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(target))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span> ((data = fis.<span class="built_in">read</span>())  != <span class="number">-1</span>)&#123;</span><br><span class="line">                fos.<span class="built_in">write</span>(data ^ ECCRYPT_FACTOR);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//路径</span></span><br><span class="line">        <span class="keyword">String</span> resouce =<span class="string">"绝对路径"</span>;</span><br><span class="line">        <span class="keyword">String</span> target =<span class="string">"绝对路径"</span>;</span><br><span class="line">        doEncypt(resouce,target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ClassLoder加载文件的时候加密</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.jiami;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecryptClassLoader</span> <span class="title">extends</span> <span class="title">ClassLoader</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> <span class="keyword">String</span> DEFAULT_DIR = <span class="string">"默认路径"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> dir = DEFAULT_DIR;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecryptClassLoader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * super( ) ( 这种形式指的是：调用父类没有参数的构造方法（也叫构造函数）</span></span><br><span class="line"><span class="comment">        * 注意： 这里super( ) 只能放在子类的构造方法里面，并且只能放在构造方法的首句)</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecryptClassLoader</span><span class="params">(ClassLoader parent)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * super( x,y,z...)</span></span><br><span class="line"><span class="comment">        * （此形式指：调用父类有参数的构造方法，</span></span><br><span class="line"><span class="comment">        * 也必须放在子类的构造方法（成员方法不可以）</span></span><br><span class="line"><span class="comment">        * 里面，并且只能放在构造方法的首句。</span></span><br><span class="line"><span class="comment">        * 其中x,y,z是指的与父类此有参构造方法中参数数据类型</span></span><br><span class="line"><span class="comment">        * 相对应的子类中的参数）</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        super(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(<span class="keyword">String</span> name)</span><br><span class="line">            throws ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> classPath = name.replace(<span class="string">"."</span>,<span class="string">"/"</span>);</span><br><span class="line">        <span class="built_in">File</span> classFile = <span class="keyword">new</span> <span class="built_in">File</span>(dir,classPath + <span class="string">".class"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!classFile.<span class="built_in">exists</span>())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"这个类"</span> + name + <span class="string">"找不到，路径【"</span>+ dir +<span class="string">"】。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = loadClassBytes(classFile);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (null == classBytes || classBytes.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"加载个类"</span> + name + <span class="string">"失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ClassLoader的方法</span></span><br><span class="line">        <span class="comment">//defineClass(String name, byte[] b, int off, int len)</span></span><br><span class="line">        <span class="comment">//将字节数组转换为类别 类的实例。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.defineClass(name,classBytes,<span class="number">0</span>,classBytes.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassBytes(<span class="built_in">File</span> classFile) &#123;</span><br><span class="line">        <span class="keyword">try</span>(ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(classFile))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> data;</span><br><span class="line">            <span class="keyword">while</span>((data = fis.<span class="built_in">read</span>()) != <span class="number">-1</span>)&#123;</span><br><span class="line">                baos.<span class="built_in">write</span>(data^EncryptUtils.ECCRYPT_FACTOR);</span><br><span class="line">            &#125;</span><br><span class="line">            baos.<span class="built_in">flush</span>();</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            <span class="keyword">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDir</span><span class="params">(<span class="keyword">String</span> dir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dir = dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        EncryptUtils.doEncypt(<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>注意：其他的类加载器加载就会报错</p>
<h3 id="打破双亲委派规则"><a href="#打破双亲委派规则" class="headerlink" title="打破双亲委派规则"></a>打破双亲委派规则</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.ObjectClassloader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 打破双亲委派原则</span></span><br><span class="line"><span class="comment">* 但是Java里面对这个做了很多的限制，比如自己写个java.lang.String 让自定义类加载器加载会抛出安全异常</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleClassLoaderText</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws ClassNotFoundException </span>&#123;</span><br><span class="line">        SimpleClassLoader simpleClassLoader = <span class="keyword">new</span> SimpleClassLoader();</span><br><span class="line">        Class&lt;?&gt; aClass = simpleClassLoader.loadClass(<span class="string">"com.zhao.ObjectClassloader.SimpleObject"</span>);</span><br><span class="line">        <span class="comment">//这里会是它的父类加载器去加载 --系统类加载器</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(aClass.getClassLoader());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写loadClass()方法之后，执行结果：com.zhao.ObjectClassloader.SimpleClassLoader@4554617c</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//那么如何打破这种双亲委派</span></span><br><span class="line">        <span class="comment">// 规则呢？？？？？</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 分析：ClassLoader源代码</span></span><br><span class="line"><span class="comment">        * loadClass()加载逻辑</span></span><br><span class="line"><span class="comment">        * 也就是说自定义时重写loadClass（）</span></span><br><span class="line"><span class="comment">        *     @Override</span></span><br><span class="line"><span class="comment">    protected Class&lt;?&gt; loadClass(String name, boolean resolve)</span></span><br><span class="line"><span class="comment">            throws ClassNotFoundException &#123;</span></span><br><span class="line"><span class="comment">        Class&lt;?&gt; clazz = null;</span></span><br><span class="line"><span class="comment">        //过滤Java的原始的方法</span></span><br><span class="line"><span class="comment">        if (name.startsWith("java."))&#123;</span></span><br><span class="line"><span class="comment">            try&#123;</span></span><br><span class="line"><span class="comment">                ClassLoader system = ClassLoader.getSystemClassLoader();</span></span><br><span class="line"><span class="comment">                //这就是一层一层 加载</span></span><br><span class="line"><span class="comment">                clazz = system.loadClass(name);</span></span><br><span class="line"><span class="comment">                if (clazz != null)&#123;</span></span><br><span class="line"><span class="comment">                    if (resolve)&#123;//解析</span></span><br><span class="line"><span class="comment">                        resolveClass(clazz);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        clazz = findClass(name);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        if(clazz == null &amp;&amp; getParent() != null)&#123;</span></span><br><span class="line"><span class="comment">            getParent().loadClass(name);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return clazz;</span></span><br><span class="line"><span class="comment">    &#125;这样就打破双亲委派规则</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义类加载器loadClass()方法</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.ObjectClassloader;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.<span class="built_in">File</span>;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 自定义类加载器</span></span><br><span class="line"><span class="comment">* 本地磁盘加载</span></span><br><span class="line"><span class="comment">* * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleClassLoader</span> <span class="title">extends</span> <span class="title">ClassLoader</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> <span class="keyword">String</span> DEFAULT_DIR =<span class="string">"E:\\ClassLoader\\revert"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> dir = DEFAULT_DIR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> classLoaderName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleClassLoader</span><span class="params">()</span></span>&#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleClassLoader</span><span class="params">(<span class="keyword">String</span> classLoaderName)</span></span>&#123;</span><br><span class="line">        super();</span><br><span class="line">        <span class="keyword">this</span>.classLoaderName = classLoaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleClassLoader</span><span class="params">(<span class="keyword">String</span> classLoaderName, ClassLoader parent)</span></span>&#123;</span><br><span class="line">        <span class="comment">//可以指定父加载器</span></span><br><span class="line">        super(parent);</span><br><span class="line">        <span class="keyword">this</span>.classLoaderName = classLoaderName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 重写父类的findClass()方法</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(<span class="keyword">String</span> name) throws ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">String</span> classPath = name.replace(<span class="string">"."</span>,<span class="string">"/"</span>);</span><br><span class="line">        <span class="built_in">File</span> classFile = <span class="keyword">new</span> <span class="built_in">File</span>(dir,classPath + <span class="string">".class"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!classFile.<span class="built_in">exists</span>())&#123;</span><br><span class="line">            <span class="comment">//判断文件存在否</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"The class"</span>+ name +<span class="string">"not found under:"</span>+dir);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] classBytes = loadClassBytes(classFile);</span><br><span class="line">        <span class="keyword">if</span> (null == classBytes || classBytes.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(<span class="string">"load the class"</span>+ name + <span class="string">"failed.加载这个类是空的！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.defineClass(name,classBytes,<span class="number">0</span>,classBytes.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] loadClassBytes(<span class="built_in">File</span> classFile) &#123;</span><br><span class="line">        <span class="keyword">try</span>(</span><br><span class="line">                ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(classFile);</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] <span class="built_in">buffer</span> = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.<span class="built_in">read</span>(<span class="built_in">buffer</span>)) != <span class="number">-1</span>)&#123;</span><br><span class="line">                baos.<span class="built_in">write</span>(<span class="built_in">buffer</span>,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            baos.<span class="built_in">flush</span>();<span class="comment">//刷新</span></span><br><span class="line">            <span class="comment">//toByteArray()</span></span><br><span class="line">            <span class="comment">//创建一个新分配的字节数组。返回值byte[]</span></span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(<span class="keyword">String</span> name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">            throws ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = null;</span><br><span class="line">        <span class="comment">//过滤Java的原始的方法</span></span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">"java."</span>))&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                ClassLoader system = ClassLoader.getSystemClassLoader();</span><br><span class="line">                <span class="comment">//这就是一层一层 加载</span></span><br><span class="line">                clazz = system.loadClass(name);</span><br><span class="line">                <span class="keyword">if</span> (clazz != null)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (resolve)&#123;<span class="comment">//解析</span></span><br><span class="line">                        resolveClass(clazz);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            clazz = findClass(name);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(clazz == null &amp;&amp; getParent() != null)&#123;</span><br><span class="line">            getParent().loadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDir</span><span class="params">(<span class="keyword">String</span> dir)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dir = dir;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getClassLoaderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classLoaderName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类加载的命名空间与运行时包"><a href="#类加载的命名空间与运行时包" class="headerlink" title="类加载的命名空间与运行时包"></a>类加载的命名空间与运行时包</h3></li>
<li><p>类加载的命名空间</p>
<ul>
<li>每个类加载器都有子的命名空间，命名空间由该加载器及其所有父类加载器所加载的类组成</li>
<li>在同一个命名空间中，不会出现完成的名字</li>
</ul>
</li>
<li><p>运行时包</p>
<ul>
<li>父类加载器看不到子类加载器加载的类</li>
<li>不同命名空间下的类加载器之间的类互相不可访问即运行时包名会加上ClassLoader命名空间</li>
<li>如Boot.Ext.App.com.XXX.XXX…(安全作用)</li>
</ul>
</li>
<li><p>类的卸载以及classLoader的卸载</p>
<ul>
<li>JVM中Class只有满足以下条件，才能被GC回收，也就是说该Class被加载(unload):</li>
<li>该类的所有实例都已经被GC。</li>
<li>加载该类的ClassLoader实例已经被GC。</li>
<li>该类的java.lang.Class对象没有在任何地方被引用。</li>
<li>GC的时机我们是不可控的，那么同样的我们对于Class的卸载也是不可控的。<h3 id="线程上下文类加载器"><a href="#线程上下文类加载器" class="headerlink" title="线程上下文类加载器"></a>线程上下文类加载器</h3><img src="images%5C%E7%BA%BF%E7%A8%8B%E4%B8%8A%E4%B8%8B%E6%96%87%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png" alt=""> <pre><code>ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
System.out.println(contextClassLoader);//系统加载器
</code></pre></li>
</ul>
</li>
</ul>
<p>Thread.currentThread().setContextClassLoader(new MyClassLoader()); //自定义的类加载器</p>
<p>```<br>————————————————<br>参考资料：<a href="https://blog.csdn.net/briblue/java/article/details/54973413" target="_blank" rel="noopener">https://blog.csdn.net/briblue/java/article/details/54973413</a></p>
]]></content>
      <tags>
        <tag>Java高并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高并发编程+volatile关键字详解</title>
    <url>/2020/05/10/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-volatile%E5%85%B3%E9%94%AE%E5%AD%97%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<ul>
<li>大家都知道volatile关键字，修饰的是变量，保证其内存的的可见性，有序性，不能保证其原子性，还有就是禁止指令重排(在编译期间JVM为提高application的性能，重排序，在JVM内存结构中的运行时数据区–&gt;程序计数器记录)</li>
<li>下面写个案例，多线程下看有无volatile关键字分别是什么情况：</li>
</ul>
<ol>
<li>有volatile修饰的变量<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package com.zhao.TwoThread.<span class="keyword">Volatile</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* volatile 关键字详解</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> VolatileTest &#123;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">volatile</span> static <span class="type">int</span> INIT_VALUE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    private final static <span class="type">int</span> MAX_LIMIT = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> localValue = INIT_VALUE;</span><br><span class="line">            <span class="keyword">while</span>(localValue &lt; MAX_LIMIT)&#123;</span><br><span class="line">                //第一次进来判断 <span class="keyword">false</span>，没任何输出</span><br><span class="line">                第二次 <span class="keyword">update</span>线程localValue = <span class="number">1</span></span><br><span class="line">                所以执行以下语句</span><br><span class="line">                <span class="keyword">if</span> (localValue != INIT_VALUE)&#123;</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.printf("The value update to [%d]\n",INIT_VALUE);</span><br><span class="line">                    localValue = INIT_VALUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,"READER").<span class="keyword">start</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> localValue = INIT_VALUE;</span><br><span class="line">            <span class="keyword">while</span> (INIT_VALUE &lt; MAX_LIMIT)&#123;</span><br><span class="line">                //所以控制台输出以下的结果</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.printf("update to the value [%d]\n",++localValue);</span><br><span class="line">                INIT_VALUE = localValue;</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,"UPDATE").<span class="keyword">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//执行结果</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">to</span> the <span class="keyword">value</span> [<span class="number">1</span>]</span><br><span class="line">The <span class="keyword">value</span> <span class="keyword">update</span> <span class="keyword">to</span> [<span class="number">1</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">to</span> the <span class="keyword">value</span> [<span class="number">2</span>]</span><br><span class="line">The <span class="keyword">value</span> <span class="keyword">update</span> <span class="keyword">to</span> [<span class="number">2</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">to</span> the <span class="keyword">value</span> [<span class="number">3</span>]</span><br><span class="line">The <span class="keyword">value</span> <span class="keyword">update</span> <span class="keyword">to</span> [<span class="number">3</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">to</span> the <span class="keyword">value</span> [<span class="number">4</span>]</span><br><span class="line">The <span class="keyword">value</span> <span class="keyword">update</span> <span class="keyword">to</span> [<span class="number">4</span>]</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">to</span> the <span class="keyword">value</span> [<span class="number">5</span>]</span><br><span class="line">The <span class="keyword">value</span> <span class="keyword">update</span> <span class="keyword">to</span> [<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>无volatile修饰<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package com.zhao.TwoThread.<span class="keyword">Volatile</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* volatile 关键字详解</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> VolatileTest &#123;</span><br><span class="line"></span><br><span class="line">    private static <span class="type">int</span> INIT_VALUE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    private final static <span class="type">int</span> MAX_LIMIT = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> localValue = INIT_VALUE;</span><br><span class="line">            <span class="keyword">while</span>(localValue &lt; MAX_LIMIT)&#123;</span><br><span class="line">                //这里始终感知不到<span class="keyword">update</span>中localValue的变化</span><br><span class="line">                <span class="keyword">if</span> (localValue != INIT_VALUE)&#123;</span><br><span class="line">                    <span class="keyword">System</span>.<span class="keyword">out</span>.printf("The value update to [%d]\n",INIT_VALUE);</span><br><span class="line">                    localValue = INIT_VALUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,"READER").<span class="keyword">start</span>();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> localValue = INIT_VALUE;</span><br><span class="line">            <span class="keyword">while</span> (INIT_VALUE &lt; MAX_LIMIT)&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.printf("update to the value [%d]\n",++localValue);</span><br><span class="line">                INIT_VALUE = localValue;</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,"UPDATE").<span class="keyword">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    //执行结果</span><br><span class="line">    <span class="keyword">update</span> <span class="keyword">to</span> the <span class="keyword">value</span> [<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">update</span> <span class="keyword">to</span> the <span class="keyword">value</span> [<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">update</span> <span class="keyword">to</span> the <span class="keyword">value</span> [<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">update</span> <span class="keyword">to</span> the <span class="keyword">value</span> [<span class="number">4</span>]</span><br><span class="line">    <span class="keyword">update</span> <span class="keyword">to</span> the <span class="keyword">value</span> [<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">update</span>线程执行完，reader线程进入死循环的状态</span><br></pre></td></tr></table></figure></li>
<li>在计算机里所有的运算都在CPU的寄存器里</li>
<li>内存：<pre><code>RAM：随机访问，写程序用到这个
ROM：只读的部分，嵌入式开发用得到</code></pre></li>
<li>CPU指令<br><img src="images%5CCPU%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E5%9B%BE%E7%A4%BA.png" alt=""></li>
<li>说明：读数据从CPU高速缓存区读，写数据写Cache中然后刷新到主内存中。<br>同时高速缓冲区分3各级别l1(靠进CPU 分为la指令级Cache和li数据级的Cache),l2,l3</li>
<li>当程序运行时会把数据复制到CPU高速缓存中一份，<h3 id="缓存不一致问题"><a href="#缓存不一致问题" class="headerlink" title="缓存不一致问题"></a>缓存不一致问题</h3></li>
<li>给数据总线加锁：<br>总线:数据总线，地址总线，控制总线；<br>加锁之后，其他的CPU不能访问这条总线对应的内存的地址，从而使一个能访问这个数据，但是这样会串行化效率低</li>
<li>CPU高速缓存一致性协议：(主要使用)<br>轻量级，Intel提出的协议MESI–》保证了Cache中共享数据的副本是完全一样的<ul>
<li>核心思想</li>
</ul>
<ol>
<li>当CPU写入数据的时候，如果发现该变量如果被共享(在其他CPU中也存在该变量的副本)，会发出一个信号，通知其他cpu该变量的缓存无效了</li>
<li>当其他cpu访问该变量的时候，重新到主内存中进行获取<h3 id="并发编程中三个比较重要的概念："><a href="#并发编程中三个比较重要的概念：" class="headerlink" title="并发编程中三个比较重要的概念："></a>并发编程中三个比较重要的概念：</h3></li>
</ol>
</li>
</ul>
<ol>
<li><p>原子性：一个或多个操作要么执行成功，要么执行失败；中间不能由于任何因素中断</p>
<ul>
<li>对基本数据类型的变量读取和赋值是保证原子性的，要么成功，要么失败；这些操作不可被中段</li>
</ul>
</li>
<li><p>可见性: 在多个线程访问一个数据，其中一个线程修改了数据，其他线程都可以看到</p>
<ul>
<li>使用volatile关键字保证可见性 </li>
</ul>
</li>
<li><p>有序性：</p>
<ul>
<li><p>程序执行的顺序按照代码的先后顺序执行，禁止进行指令重排序。看似理所当然的事情，其实并不是这样，指令重排序是JVM为了优化指令，提高程序运行效率，在不影响单线程程序执行结果的前提下，尽可能地提高并行度。但是在多线程环境下，有些代码的顺序改变，有可能引发逻辑上的不正确。</p>
<ul>
<li>而 volatile 做实现了两个特性，可见性和有序性。所以说在多线程环境中，需要保证这两个特性的功能，可以使用 volatile 关键字。<br>{<br>int i = 0;<br>boolean flag = false;<br>i =  1;<br>flag = true;<br>}<br>重排序：只要求最终的一致性（但是有依赖关系的数据不能调换位置），不会影响单个线程的执行情况，但是会影响多线程的执行 </li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="happens-before（先行发生）规则"><a href="#happens-before（先行发生）规则" class="headerlink" title="happens-before（先行发生）规则"></a>happens-before（先行发生）规则</h3><ul>
<li>在Java内存模型中，happens-before 应该翻译成：前一个操作的结果可以被后续的操作获取。讲白点就是前面一个操作把变量a赋值为1，那后面一个操作肯定能知道a已经变成了1。</li>
<li>volatile修饰的变量，对一个变量的写操作先于对变量的读操作</li>
<li>传递规则，操作A先于B，B先于C，那么A肯定先于C;</li>
<li>线程的启动规则：stater方法肯定先于线程run方法</li>
<li>线程中断规则：interrupt这个动作，必须发生在捕获该动作之前<h3 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a>Volatile关键字</h3></li>
<li>一旦一个共享变量被volatile修饰，具备两层语义<ol>
<li>保证了不同线程间的可见性</li>
<li>禁止对其进行重排序，也就是保证了有序性</li>
<li>并未保证原子性</li>
</ol>
</li>
<li>保证重排序是不会把后面的指令放到内存屏障的前面，也不会把前面的放到后面</li>
<li>强制对缓存的修改操作立刻写入主存。</li>
<li>如果是写操作，它会导致其他CPU中的缓存失效</li>
</ul>
<h3 id="内存屏障-Memory-Fence"><a href="#内存屏障-Memory-Fence" class="headerlink" title="内存屏障(Memory Fence)"></a>内存屏障(Memory Fence)</h3><ul>
<li>这部分包括了loadFence、storeFence、fullFence等方法。</li>
<li>这是在Java 8新引入的，用于定义内存屏障，避免代码重排序。</li>
<li>loadFence() 表示该方法之前的所有load操作在内存屏障之前完成。</li>
<li>同理storeFence()表示该方法之前的所有store操作在内存屏障之前完成。</li>
<li>fullFence()表示该方法之前的所有load、store操作在内存屏障之前完成。</li>
</ul>
]]></content>
      <tags>
        <tag>Java高并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高并发编程+自定义线程池</title>
    <url>/2020/05/10/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 创建线程池</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 线程是比较重的，创建它需要开辟虚拟机栈，分配内存....</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 为啥有线程池？？？？？？</span></span><br><span class="line"><span class="comment">* 例如：</span></span><br><span class="line"><span class="comment">* 并发处理任务，创建多个线程，但是它的时间消耗是比较大的，</span></span><br><span class="line"><span class="comment">* 等你创建完之后生命周期结束(逻辑单元即run方法结束)</span></span><br><span class="line"><span class="comment">* 然后你有不需要使用线程，就会垃圾回收（VM...包括栈，或者栈帧之类的），</span></span><br><span class="line"><span class="comment">* 但是执行N步之后，到达逻辑分支又要创建大量线程（此时线程又要从生到死），比较耗费资源</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 2.通讯程序</span></span><br><span class="line"><span class="comment">* server端要接受client端的无数个请求，</span></span><br><span class="line"><span class="comment">* 每个请求分配一个线程去做任务，</span></span><br><span class="line"><span class="comment">* 每个线程都要经历从生到死的，这样的话服务器压力比较大</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 3.池技术</span></span><br><span class="line"><span class="comment">* 在服务器启动时，就创建线程池在等待</span></span><br><span class="line"><span class="comment">* 一次请求过来，就从线程池拿线程执行任务，任务跑完之后不让线程死掉，回归线程池</span></span><br><span class="line"><span class="comment">* 这样一个线程可以处理多个任务</span></span><br><span class="line"><span class="comment">* 等到这个服务器真正结束之后，线程池才会消亡</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 4. 线程池中常见的概念：</span></span><br><span class="line"><span class="comment">*    1. 任务队列：提交n个任务，但是线程池中只有10个线程，其他都放到队列中</span></span><br><span class="line"><span class="comment">*    2. 拒绝策略：提交任务，不能无限多，超出程序的处理范围（抛出异常：其实它有时也是对你程序的保护，直接丢弃，阻塞blocked，</span></span><br><span class="line"><span class="comment">*       临时队列：任务队列满了，就放在临时队列，任务队列减少，就加入到任务队列）</span></span><br><span class="line"><span class="comment">*    3.初始化值init(min)：线程池的大小</span></span><br><span class="line"><span class="comment">*    4. active：比如 init初始大小，给线程池开了两个，但是某一时刻活跃的请求7个8个，这样创建7个8个不会对application有什么影响</span></span><br><span class="line"><span class="comment">*    5. max：线程池的最大值</span></span><br><span class="line"><span class="comment">*    min =《 active =《 max :比如，初始化创建2个，此时2个够用，就不会增加线程；2个不够用，就尝试扩充到active这个值；</span></span><br><span class="line"><span class="comment">*    如果active值还是不够，就用max最大值，如果max不够用就入任务队列，任务对列满，就执行拒绝策略</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*    某一时刻，即访问最活跃的阶段达到500个Thread，但是过了活跃阶段，就要降下来，不然对你application上下文的切换也是不小的损失。</span></span><br><span class="line"><span class="comment">*    6. 异步任务</span></span><br><span class="line"><span class="comment">*    7. 批量任务</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ThreadPoolCreate &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="keyword">size</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> queueSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里把默认大小值抽出来</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认任务队列的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_TASK_QUEUE_SIZE = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义线程池的时候让其自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> seq = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String THREAD_PREFIX = <span class="string">"SIMPLE_THREAD_POOL"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ThreadGroup <span class="keyword">GROUP</span> = <span class="keyword">new</span> ThreadGroup(<span class="string">"POOL_GROUP"</span>);</span><br><span class="line">    <span class="comment">//任务队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> LinkedList&lt;Runnable&gt; TASK_QUEUE = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//管理线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> List&lt;WorkerTask&gt; THREAD_QUEUE = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认拒绝策略</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DiscardPolicy discardPolicy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拒绝策略给外部调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> DiscardPolicy DEFAULT_DISCARD_POLICY = ()-&gt;&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> DiscardException(<span class="string">"Discard This Task!"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认线程池的状态 false 未关闭</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> destroy = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolCreate() &#123;</span><br><span class="line">        <span class="comment">//可能初始化不给size，这是设置默认值（线程池的大小）</span></span><br><span class="line">        <span class="keyword">this</span>(DEFAULT_SIZE,DEFAULT_TASK_QUEUE_SIZE,DEFAULT_DISCARD_POLICY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolCreate(<span class="keyword">int</span> <span class="keyword">size</span>,<span class="keyword">int</span> queueSize,DiscardPolicy discardPolicy) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">size</span> = <span class="keyword">size</span>;</span><br><span class="line">        <span class="keyword">this</span>.queueSize = queueSize;</span><br><span class="line">        <span class="keyword">this</span>.discardPolicy = discardPolicy;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> init()&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">size</span> ; i++) &#123;</span><br><span class="line">            createWorkTask();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停止线程池的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> shutdown() <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (!TASK_QUEUE.isEmpty())&#123;</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> initVal = THREAD_QUEUE.<span class="keyword">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(initVal &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (WorkerTask <span class="keyword">task</span> : THREAD_QUEUE)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">task</span>.getTaskState() == TaskState.BLOCKED)&#123;</span><br><span class="line">                    <span class="keyword">task</span>.interrupt();</span><br><span class="line">                    <span class="keyword">task</span>.close();</span><br><span class="line">                    initVal--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.destroy = <span class="keyword">true</span>;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"线程池关闭了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交任务，该外部提供的接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> submit(Runnable runnable)&#123;</span><br><span class="line">        <span class="keyword">if</span> (destroy)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"线程池已关闭不能提交任务！"</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (TASK_QUEUE) &#123;</span><br><span class="line">            <span class="comment">//拒绝策略</span></span><br><span class="line">            <span class="keyword">if</span> (TASK_QUEUE.<span class="keyword">size</span>() &gt; queueSize)</span><br><span class="line">                discardPolicy.discard();</span><br><span class="line">            TASK_QUEUE.addLast(runnable);</span><br><span class="line">            TASK_QUEUE.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> createWorkTask()&#123;</span><br><span class="line">        WorkerTask <span class="keyword">task</span> = <span class="keyword">new</span> WorkerTask(<span class="keyword">GROUP</span>,THREAD_PREFIX + (seq++));</span><br><span class="line">        <span class="keyword">task</span>.start();</span><br><span class="line">        THREAD_QUEUE.add(<span class="keyword">task</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> DiscardException <span class="keyword">extends</span> RuntimeException&#123;</span><br><span class="line">            <span class="keyword">public</span> DiscardException(String messsage)&#123;</span><br><span class="line">                <span class="keyword">super</span>(messsage);</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拒绝策略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> DiscardPolicy&#123;</span><br><span class="line">        <span class="comment">//interface 中默认是public</span></span><br><span class="line">        <span class="keyword">void</span> discard() <span class="keyword">throws</span> DiscardException;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> getQueueSize() &#123;</span><br><span class="line">        <span class="keyword">return</span> queueSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> getSize() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">size</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> destroy()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.destroy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//状态</span></span><br><span class="line">    <span class="keyword">private</span> enum TaskState&#123;</span><br><span class="line">        FREE,RUNNING,BLOCKED,DEAD</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//封装JDK提供的Thread</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> WorkerTask <span class="keyword">extends</span> Thread&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> TaskState taskState = TaskState.FREE; <span class="comment">// 默认Free什么都不干</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取父类线程组</span></span><br><span class="line">        <span class="keyword">public</span> WorkerTask(ThreadGroup <span class="keyword">group</span>,String name)&#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="keyword">group</span>,name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> TaskState getTaskState()&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.taskState;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> run()&#123;</span><br><span class="line">            OUTER:</span><br><span class="line">            <span class="comment">//线程不要结束</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">this</span>.taskState != TaskState.DEAD)&#123;</span><br><span class="line">                Runnable runnable;</span><br><span class="line">                <span class="keyword">synchronized</span> (TASK_QUEUE) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(TASK_QUEUE.isEmpty()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                taskState = TaskState.BLOCKED;</span><br><span class="line">                                TASK_QUEUE.wait();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                <span class="keyword">break</span> OUTER;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        runnable = TASK_QUEUE.removeFirst();</span><br><span class="line">                        <span class="comment">/*if(runnable != null)&#123;</span></span><br><span class="line"><span class="comment">                            taskState = TaskState.RUNNING;</span></span><br><span class="line"><span class="comment">                            runnable.run();</span></span><br><span class="line"><span class="comment">                            taskState =TaskState.FREE;</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="keyword">if</span> (runnable != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    taskState = TaskState.RUNNING;</span><br><span class="line">                    runnable.run();</span><br><span class="line">                    taskState = TaskState.FREE;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> close()&#123;</span><br><span class="line">            <span class="keyword">this</span>.taskState = TaskState.DEAD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">            <span class="comment">//如果任务队列已满执行拒绝策略  线程池大小size   queueSize任务线程的大小  默认的拒绝策略 ThreadPoolCreate.DEFAULT_DISCARD_POLICY</span></span><br><span class="line"><span class="comment">//            ThreadPoolCreate threadPool = new ThreadPoolCreate(6,10,ThreadPoolCreate.DEFAULT_DISCARD_POLICY);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*停止程序*/</span></span><br><span class="line">            ThreadPoolCreate threadPool = <span class="keyword">new</span> ThreadPoolCreate();</span><br><span class="line">           <span class="comment">/* IntStream.rangeClosed(0,40)</span></span><br><span class="line"><span class="comment">                    .forEach(i -&gt;</span></span><br><span class="line"><span class="comment">                        threadPool.submit(()-&gt; &#123;</span></span><br><span class="line"><span class="comment">                            System.out.println("The Rannable" + i + "be serviced by" + Thread.currentThread()+"stater");</span></span><br><span class="line"><span class="comment">                            try &#123;</span></span><br><span class="line"><span class="comment">                                Thread.sleep(10_000);</span></span><br><span class="line"><span class="comment">                            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">                                e.printStackTrace();</span></span><br><span class="line"><span class="comment">                            &#125;</span></span><br><span class="line"><span class="comment">                            System.out.println("The Rannable" + i + "be serviced by" + Thread.currentThread() +"finished.");</span></span><br><span class="line"><span class="comment">                        &#125;)</span></span><br><span class="line"><span class="comment">                    );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                threadPool.submit(()-&gt; &#123;</span><br><span class="line">                    System.out.<span class="keyword">println</span>(<span class="string">"The Rannable be serviced by"</span> + Thread.currentThread() + <span class="string">"stater"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.<span class="keyword">println</span>(<span class="string">"The Rannable be serviced by"</span> + Thread.currentThread() + <span class="string">"finished."</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>_000);</span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">            threadPool.submit(()-&gt; System.out.<span class="keyword">println</span>(<span class="string">"============="</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="对上面自定义线程池进一步完善-–》给线程池自动扩充线程数量，以及闲时自动回收的功能"><a href="#对上面自定义线程池进一步完善-–》给线程池自动扩充线程数量，以及闲时自动回收的功能" class="headerlink" title="对上面自定义线程池进一步完善 –》给线程池自动扩充线程数量，以及闲时自动回收的功能"></a>对上面自定义线程池进一步完善 –》给线程池自动扩充线程数量，以及闲时自动回收的功能</h4><ul>
<li>代码实现：<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.FirstThread.threadPool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 创建线程池</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 线程是比较重的，创建它需要开辟虚拟机栈，分配内存....</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 为啥有线程池？？？？？？</span></span><br><span class="line"><span class="comment">* 例如：</span></span><br><span class="line"><span class="comment">* 并发处理任务，创建多个线程，但是它的时间消耗是比较大的，</span></span><br><span class="line"><span class="comment">* 等你创建完之后生命周期结束(逻辑单元即run方法结束)</span></span><br><span class="line"><span class="comment">* 然后你有不需要使用线程，就会垃圾回收（VM...包括栈，或者栈帧之类的），</span></span><br><span class="line"><span class="comment">* 但是执行N步之后，到达逻辑分支又要创建大量线程（此时线程又要从生到死），比较耗费资源</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 2.通讯程序</span></span><br><span class="line"><span class="comment">* server端要接受client端的无数个请求，</span></span><br><span class="line"><span class="comment">* 每个请求分配一个线程去做任务，</span></span><br><span class="line"><span class="comment">* 每个线程都要经历从生到死的，这样的话服务器压力比较大</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 3.池技术</span></span><br><span class="line"><span class="comment">* 在服务器启动时，就创建线程池在等待</span></span><br><span class="line"><span class="comment">* 一次请求过来，就从线程池拿线程执行任务，任务跑完之后不让线程死掉，回归线程池</span></span><br><span class="line"><span class="comment">* 这样一个线程可以处理多个任务</span></span><br><span class="line"><span class="comment">* 等到这个服务器真正结束之后，线程池才会消亡</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 4. 线程池中常见的概念：</span></span><br><span class="line"><span class="comment">*    1. 任务队列：提交n个任务，但是线程池中只有10个线程，其他都放到队列中</span></span><br><span class="line"><span class="comment">*    2. 拒绝策略：提交任务，不能无限多，超出程序的处理范围（抛出异常：其实它有时也是对你程序的保护，直接丢弃，阻塞blocked，</span></span><br><span class="line"><span class="comment">*       临时队列：任务队列满了，就放在临时队列，任务队列减少，就加入到任务队列）</span></span><br><span class="line"><span class="comment">*    3.初始化值init(min)：线程池的大小</span></span><br><span class="line"><span class="comment">*    4. active：比如 init初始大小，给线程池开了两个，但是某一时刻活跃的请求7个8个，这样创建7个8个不会对application有什么影响</span></span><br><span class="line"><span class="comment">*    5. max：线程池的最大值</span></span><br><span class="line"><span class="comment">*    min =《 active =《 max :比如，初始化创建2个，此时2个够用，就不会增加线程；2个不够用，就尝试扩充到active这个值；</span></span><br><span class="line"><span class="comment">*    如果active值还是不够，就用max最大值，如果max不够用就入任务队列，任务对列满，就执行拒绝策略</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*    某一时刻，即访问最活跃的阶段达到500个Thread，但是过了活跃阶段，就要降下来，不然对你application上下文的切换也是不小的损失。</span></span><br><span class="line"><span class="comment">*    6. 异步任务</span></span><br><span class="line"><span class="comment">*    7. 批量任务</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolCreate</span> <span class="title">extends</span> <span class="title">Thread</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//由于线程池的大小要变化，所以不能用final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">int</span> queueSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里把默认大小值抽出来</span></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_SIZE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认任务队列的大小</span></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_TASK_QUEUE_SIZE = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义线程池的时候让其自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> seq = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义前缀</span></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> <span class="keyword">String</span> THREAD_PREFIX = <span class="string">"SIMPLE_THREAD_POOL"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程组</span></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> ThreadGroup GROUP = <span class="keyword">new</span> ThreadGroup(<span class="string">"POOL_GROUP"</span>);</span><br><span class="line">    <span class="comment">//任务队列</span></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> LinkedList&lt;Runnable&gt; TASK_QUEUE = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//管理线程</span></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> List&lt;WorkerTask&gt; THREAD_QUEUE = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认拒绝策略</span></span><br><span class="line">    <span class="keyword">private</span> final DiscardPolicy discardPolicy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拒绝策略给外部调用</span></span><br><span class="line">    <span class="keyword">public</span> final <span class="keyword">static</span> DiscardPolicy DEFAULT_DISCARD_POLICY = ()-&gt;&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> DiscardException(<span class="string">"Discard This Task!"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认线程池的状态 false 未关闭</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> destroy = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动扩充线程数量，闲时回收</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="built_in">min</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="built_in">max</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> active;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可能初始化不给size，这是设置默认值（线程池的大小）</span></span><br><span class="line">        <span class="keyword">this</span>(<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,DEFAULT_TASK_QUEUE_SIZE,DEFAULT_DISCARD_POLICY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认初始化线程4个，如果不够用再到8个，在不够用到12个</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolCreate</span><span class="params">(<span class="keyword">int</span> <span class="built_in">min</span>,<span class="keyword">int</span> active,<span class="keyword">int</span> <span class="built_in">max</span>,<span class="keyword">int</span> queueSize,DiscardPolicy discardPolicy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">min</span> = <span class="built_in">min</span>;</span><br><span class="line">        <span class="keyword">this</span>.active = active;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">max</span> = <span class="built_in">max</span>;</span><br><span class="line">        <span class="keyword">this</span>.queueSize = queueSize;</span><br><span class="line">        <span class="keyword">this</span>.discardPolicy = discardPolicy;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.<span class="built_in">min</span> ; i++) &#123;</span><br><span class="line">            createWorkTask();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">size</span> = <span class="built_in">min</span>;</span><br><span class="line">        <span class="keyword">this</span>.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停止线程池的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> throws InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!TASK_QUEUE.isEmpty())&#123;</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        synchronized (THREAD_QUEUE) &#123;</span><br><span class="line">            <span class="keyword">int</span> initVal = THREAD_QUEUE.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (initVal &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (WorkerTask task : THREAD_QUEUE) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (task.getTaskState() == TaskState.BLOCKED) &#123;</span><br><span class="line">                        task.interrupt();</span><br><span class="line">                        task.<span class="built_in">close</span>();</span><br><span class="line">                        initVal--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.destroy = <span class="literal">true</span>;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"线程池关闭了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交任务，该外部提供的接口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(Runnable runnable)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (destroy)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"线程池已关闭不能提交任务！"</span>);</span><br><span class="line">        synchronized (TASK_QUEUE) &#123;</span><br><span class="line">            <span class="comment">//拒绝策略</span></span><br><span class="line">            <span class="keyword">if</span> (TASK_QUEUE.<span class="built_in">size</span>() &gt; queueSize)</span><br><span class="line">                discardPolicy.discard();</span><br><span class="line">            TASK_QUEUE.addLast(runnable);</span><br><span class="line">            TASK_QUEUE.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!destroy)&#123;</span><br><span class="line">            System.out.<span class="built_in">printf</span>(<span class="string">"pool#Min:%d,Active:%d,Max:%d,Current:%d,QueueSize:%d\n"</span>,</span><br><span class="line">                    <span class="keyword">this</span>.<span class="built_in">min</span>,<span class="keyword">this</span>.active,<span class="keyword">this</span>.<span class="built_in">max</span>,<span class="keyword">this</span>.<span class="built_in">size</span>,TASK_QUEUE.<span class="built_in">size</span>());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>_000L);</span><br><span class="line">                <span class="comment">//线程池扩容</span></span><br><span class="line">                <span class="keyword">if</span> (TASK_QUEUE.<span class="built_in">size</span>() &gt; active &amp;&amp; <span class="built_in">size</span> &lt; active)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span>; i &lt; active; i++) &#123;</span><br><span class="line">                        createWorkTask();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"线程池以扩容到 ==》active"</span>);</span><br><span class="line">                    <span class="built_in">size</span> = active;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(TASK_QUEUE.<span class="built_in">size</span>() &gt; <span class="built_in">max</span> &amp;&amp; <span class="built_in">size</span> &lt; <span class="built_in">max</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">size</span>; i &lt; <span class="built_in">max</span>; i++) &#123;</span><br><span class="line">                        createWorkTask();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"线程池以扩容到 ==》max"</span>);</span><br><span class="line">                    <span class="built_in">size</span> = <span class="built_in">max</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//回收线程池--》缩小线程池容量</span></span><br><span class="line">                synchronized (THREAD_QUEUE)&#123;</span><br><span class="line">                <span class="keyword">if</span> (TASK_QUEUE.isEmpty() &amp;&amp; <span class="built_in">size</span> &gt; active)&#123;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"========Reduce========"</span>);</span><br><span class="line">                        <span class="keyword">int</span> resultSize = <span class="built_in">size</span> - active;</span><br><span class="line">                        <span class="comment">//这里用Iterator迭代，因为Iterator在迭代的时候可以 做remove删除操作</span></span><br><span class="line">                        <span class="keyword">for</span> (Iterator&lt;WorkerTask&gt; it = THREAD_QUEUE.iterator();it.hasNext();)&#123;</span><br><span class="line">                            <span class="keyword">if</span> (resultSize &lt;= <span class="number">0</span>)</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                            WorkerTask task = it.next();</span><br><span class="line">                            task.<span class="built_in">close</span>();</span><br><span class="line">                            task.interrupt();</span><br><span class="line">                            it.<span class="built_in">remove</span>();</span><br><span class="line">                            resultSize--;</span><br><span class="line">                        &#125;</span><br><span class="line">                        System.out.<span class="built_in">println</span>(<span class="string">"回收线程池到 ==》active"</span>);</span><br><span class="line">                        <span class="built_in">size</span> = active;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> active;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建线程</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createWorkTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WorkerTask task = <span class="keyword">new</span> WorkerTask(GROUP,THREAD_PREFIX + (seq++));</span><br><span class="line">        task.start();</span><br><span class="line">        THREAD_QUEUE.add(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardException</span> <span class="title">extends</span> <span class="title">RuntimeException</span>&#123;</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">DiscardException</span><span class="params">(<span class="keyword">String</span> messsage)</span></span>&#123;</span><br><span class="line">                super(messsage);</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拒绝策略</span></span><br><span class="line">    <span class="keyword">public</span> interface DiscardPolicy&#123;</span><br><span class="line">        <span class="comment">//interface 中默认是public</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">discard</span><span class="params">()</span> throws DiscardException</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueueSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queueSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.destroy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> TaskState&#123;</span><br><span class="line">        FREE,RUNNING,BLOCKED,DEAD</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//封装JDK提供的Thread</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerTask</span> <span class="title">extends</span> <span class="title">Thread</span>&#123;</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> TaskState taskState = TaskState.FREE; <span class="comment">// 默认Free什么都不干</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取线程组</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WorkerTask</span><span class="params">(ThreadGroup group,<span class="keyword">String</span> name)</span></span>&#123;</span><br><span class="line">            super(group,name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> TaskState <span class="title">getTaskState</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.taskState;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            OUTER:</span><br><span class="line">            <span class="comment">//线程不要结束</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">this</span>.taskState != TaskState.DEAD)&#123;</span><br><span class="line">                Runnable runnable;</span><br><span class="line">                synchronized (TASK_QUEUE) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(TASK_QUEUE.isEmpty()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                taskState = TaskState.BLOCKED;</span><br><span class="line">                                TASK_QUEUE.wait();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                System.out.<span class="built_in">println</span>(<span class="string">"Closed."</span>);</span><br><span class="line">                                <span class="keyword">break</span> OUTER;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    runnable = TASK_QUEUE.removeFirst();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">/*if(runnable != null)&#123;</span></span><br><span class="line"><span class="comment">                            taskState = TaskState.RUNNING;</span></span><br><span class="line"><span class="comment">                            runnable.run();</span></span><br><span class="line"><span class="comment">                            taskState =TaskState.FREE;</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                <span class="keyword">if</span> (runnable != null) &#123;</span><br><span class="line">                    taskState = TaskState.RUNNING;</span><br><span class="line">                    runnable.<span class="built_in">run</span>();</span><br><span class="line">                    taskState = TaskState.FREE;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.taskState = TaskState.DEAD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">//如果任务队列已满执行拒绝策略  线程池大小size   queueSize任务线程的大小  默认的拒绝策略 ThreadPoolCreate.DEFAULT_DISCARD_POLICY</span></span><br><span class="line"><span class="comment">//            ThreadPoolCreate threadPool = new ThreadPoolCreate(6,10,ThreadPoolCreate.DEFAULT_DISCARD_POLICY);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*停止程序*/</span></span><br><span class="line">            ThreadPoolCreate threadPool = <span class="keyword">new</span> ThreadPoolCreate();</span><br><span class="line">           <span class="comment">/* IntStream.rangeClosed(0,40)</span></span><br><span class="line"><span class="comment">                    .forEach(i -&gt;</span></span><br><span class="line"><span class="comment">                        threadPool.submit(()-&gt; &#123;</span></span><br><span class="line"><span class="comment">                            System.out.println("The Rannable" + i + "be serviced by" + Thread.currentThread()+"stater");</span></span><br><span class="line"><span class="comment">                            try &#123;</span></span><br><span class="line"><span class="comment">                                Thread.sleep(10_000);</span></span><br><span class="line"><span class="comment">                            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">                                e.printStackTrace();</span></span><br><span class="line"><span class="comment">                            &#125;</span></span><br><span class="line"><span class="comment">                            System.out.println("The Rannable" + i + "be serviced by" + Thread.currentThread() +"finished.");</span></span><br><span class="line"><span class="comment">                        &#125;)</span></span><br><span class="line"><span class="comment">                    );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                threadPool.submit(()-&gt; &#123;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"The Rannable be serviced by"</span> + Thread.currentThread() + <span class="string">"stater"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"The Rannable be serviced by"</span> + Thread.currentThread() + <span class="string">"finished."</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>_000);</span><br><span class="line">            threadPool.<span class="built_in">shutdown</span>();</span><br><span class="line">           <span class="comment">// threadPool.submit(()-&gt; System.out.println("============="));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Java高并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高并发编程+观察者模式</title>
    <url>/2020/05/10/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="案例观察者模式"><a href="#案例观察者模式" class="headerlink" title="案例观察者模式"></a>案例观察者模式</h3><ul>
<li>主题<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">package com.zhao.TwoThread.ThreadObservePattern.ObserverPattern;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Subject &#123;</span><br><span class="line"></span><br><span class="line">    private List<span class="variable">&lt;Observer&gt;</span>  observers = new ArrayList<span class="variable">&lt;&gt;</span>();</span><br><span class="line"></span><br><span class="line">    private int <span class="keyword">state</span>;</span><br><span class="line"></span><br><span class="line">    public int getState() &#123;</span><br><span class="line">        return <span class="keyword">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void <span class="built_in">set</span>State(int <span class="keyword">state</span>) &#123;</span><br><span class="line">        if (<span class="keyword">state</span> == this.<span class="keyword">state</span>)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        this.<span class="keyword">state</span> = <span class="keyword">state</span>;</span><br><span class="line">        notifyAllObserver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void attach(Observer observer)&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void notifyAllObserver()&#123;</span><br><span class="line">        //</span><br><span class="line">        observers.stream().<span class="keyword">for</span>Each(Observer::update);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>抽象类观察者<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.TwoThread.ThreadObservePattern.ObserverPattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Subject subject;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observer</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">        <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>子类<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.<span class="type">TwoThread</span>.<span class="type">ThreadObservePattern</span>.<span class="type">ObserverPattern</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BinaryObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">BinaryObserver</span>(<span class="type">Subject</span> subject) &#123;</span><br><span class="line">        <span class="keyword">super</span>(subject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void update() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"Binary String:"</span>+<span class="type">Integer</span>.toBinaryString(subject.getState()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.<span class="type">TwoThread</span>.<span class="type">ThreadObservePattern</span>.<span class="type">ObserverPattern</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">OctalObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">OctalObserver</span>(<span class="type">Subject</span> subject) &#123;</span><br><span class="line">        <span class="keyword">super</span>(subject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void update() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"Octal String:"</span>+<span class="type">Integer</span>.toOctalString(subject.getState()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.zhao.TwoThread.ThreadObservePattern.ObserverPattern;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> Client &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line"></span><br><span class="line">        final Subject subject = <span class="keyword">new</span> <span class="constructor">Subject()</span>;</span><br><span class="line"></span><br><span class="line">        BinaryObserver binaryObserver = <span class="keyword">new</span> <span class="constructor">BinaryObserver(<span class="params">subject</span>)</span>;</span><br><span class="line">        OctalObserver octalObserver = <span class="keyword">new</span> <span class="constructor">OctalObserver(<span class="params">subject</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"++++++++++++++++"</span>);</span><br><span class="line">        subject.set<span class="constructor">State(10)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"++++++++++++++++"</span>);</span><br><span class="line">        subject.set<span class="constructor">State(10)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"++++++++++++++++"</span>);</span><br><span class="line">        subject.set<span class="constructor">State(15)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="多线程下的观察者模式"><a href="#多线程下的观察者模式" class="headerlink" title="多线程下的观察者模式"></a>多线程下的观察者模式</h3><ul>
<li>观察者接口<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>LifeCyleListener &#123;</span><br><span class="line">    void onEvent(ObserverRunnable.RunnableEvent event);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>子类<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.zhao.TwoThread.ThreadObservePattern.ThreadObserverPattern1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> ThreadLifeCyObserver implements LifeCyleListener &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> static final Object LOCK = <span class="keyword">new</span> <span class="constructor">Object()</span>;</span><br><span class="line"></span><br><span class="line">    public void concurrent<span class="constructor">Query(List&lt;String&gt; <span class="params">ids</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ids<span class="operator"> == </span>null<span class="operator"> || </span>ids.is<span class="constructor">Empty()</span>)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        ids.stream<span class="literal">()</span>.for<span class="constructor">Each(<span class="params">id</span> -&gt;<span class="params">new</span> Thread(<span class="params">new</span> ObserverRunnable(<span class="params">this</span>)</span> &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run<span class="literal">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    notify<span class="constructor">Change(<span class="params">new</span> RunnableEvent(RunnableState.RUNNING,Thread.<span class="params">currentThread</span>()</span>,null));</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"gurey for the id"</span> + id);</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">1000L</span>);</span><br><span class="line">                    <span class="built_in">int</span> x = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">                    notify<span class="constructor">Change(<span class="params">new</span> RunnableEvent(RunnableState.DONE,Thread.<span class="params">currentThread</span>()</span>,null));</span><br><span class="line">                &#125;catch(Exception e)&#123;</span><br><span class="line">                    notify<span class="constructor">Change(<span class="params">new</span> RunnableEvent(RunnableState.ERROR,Thread.<span class="params">currentThread</span>()</span>,e));</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,id).start<span class="literal">()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void on<span class="constructor">Event(ObserverRunnable.RunnableEvent <span class="params">event</span>)</span> &#123;</span><br><span class="line">        synchronized (LOCK)&#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"The runnable ["</span>+ event.get<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>+<span class="string">"] data change and state is ["</span>+event.get<span class="constructor">State()</span>);</span><br><span class="line">            <span class="keyword">if</span> (event.get<span class="constructor">Cause()</span> != null)&#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"The runnable ["</span>+event.get<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>+<span class="string">"] process failed"</span>);</span><br><span class="line">                event.get<span class="constructor">Cause()</span>.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>主题<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.TwoThread.ThreadObservePattern.ThreadObserverPattern1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">protected</span> LifeCyleListener listener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObserverRunnable</span><span class="params">(<span class="keyword">final</span> LifeCyleListener listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span>  <span class="title">notifyChange</span><span class="params">(<span class="keyword">final</span> RunnableEvent event)</span></span>&#123;</span><br><span class="line">        listener.onEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> RunnableState&#123;</span><br><span class="line">        RUNNING,ERROR,DONE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableEvent</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> RunnableState state;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Thread thread;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Throwable cause;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RunnableEvent</span><span class="params">(RunnableState state, Thread thread, Throwable cause)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.state = state;</span><br><span class="line">            <span class="keyword">this</span>.thread = thread;</span><br><span class="line">            <span class="keyword">this</span>.cause = cause;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> RunnableState <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">getThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> thread;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Throwable <span class="title">getCause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cause;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.zhao.TwoThread.ThreadObservePattern.ThreadObserverPattern1;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> ThreadLifeCycleClient &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="constructor">ThreadLifeCyObserver()</span>.concurrent<span class="constructor">Query(Arrays.<span class="params">asList</span>(<span class="string">"1"</span>,<span class="string">"2"</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果 观察者模式如果run方法产生异常会打印到控制台 正常情况不调用特定方法是不会有异常输出的；</span></span><br><span class="line">The runnable <span class="literal">[<span class="number">2</span>]</span> data change <span class="keyword">and</span> state is <span class="literal">[RUNNING</span></span><br><span class="line"><span class="literal"><span class="identifier">gurey</span> <span class="identifier">for</span> <span class="identifier">the</span> <span class="identifier">id2</span></span></span><br><span class="line"><span class="literal">T<span class="identifier">he</span> <span class="identifier">runnable</span> [<span class="number">1</span>]</span> data change <span class="keyword">and</span> state is <span class="literal">[RUNNING</span></span><br><span class="line"><span class="literal"><span class="identifier">gurey</span> <span class="identifier">for</span> <span class="identifier">the</span> <span class="identifier">id1</span></span></span><br><span class="line"><span class="literal">T<span class="identifier">he</span> <span class="identifier">runnable</span> [<span class="number">2</span>]</span> data change <span class="keyword">and</span> state is <span class="literal">[ERROR</span></span><br><span class="line"><span class="literal">T<span class="identifier">he</span> <span class="identifier">runnable</span> [<span class="number">2</span>]</span> process failed</span><br><span class="line">java.lang.ArithmeticException:<span class="operator"> / </span>by zero</span><br><span class="line">	at com.zhao.<span class="module-access"><span class="module"><span class="identifier">TwoThread</span>.</span><span class="module"><span class="identifier">ThreadObservePattern</span>.</span><span class="module"><span class="identifier">ThreadObserverPattern1</span>.</span><span class="module"><span class="identifier">ThreadLifeCyObserver$1</span>.</span></span>run(<span class="module-access"><span class="module"><span class="identifier">ThreadLifeCyObserver</span>.</span></span>java:<span class="number">21</span>)</span><br><span class="line">	at java.lang.<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>run(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>java:<span class="number">748</span>)</span><br><span class="line">The runnable <span class="literal">[<span class="number">1</span>]</span> data change <span class="keyword">and</span> state is <span class="literal">[ERROR</span></span><br><span class="line"><span class="literal">T<span class="identifier">he</span> <span class="identifier">runnable</span> [<span class="number">1</span>]</span> process failed</span><br><span class="line">java.lang.ArithmeticException:<span class="operator"> / </span>by zero</span><br><span class="line">	at com.zhao.<span class="module-access"><span class="module"><span class="identifier">TwoThread</span>.</span><span class="module"><span class="identifier">ThreadObservePattern</span>.</span><span class="module"><span class="identifier">ThreadObserverPattern1</span>.</span><span class="module"><span class="identifier">ThreadLifeCyObserver$1</span>.</span></span>run(<span class="module-access"><span class="module"><span class="identifier">ThreadLifeCyObserver</span>.</span></span>java:<span class="number">21</span>)</span><br><span class="line">	at java.lang.<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>run(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>java:<span class="number">748</span>)</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Java高并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高并发编程+单线程设计模式</title>
    <url>/2020/05/10/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%8D%95%E7%BA%BF%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="单线程设计模式，有一个门，始终只有一个通过；"><a href="#单线程设计模式，有一个门，始终只有一个通过；" class="headerlink" title="单线程设计模式，有一个门，始终只有一个通过；"></a>单线程设计模式，有一个门，始终只有一个通过；</h3><ul>
<li>案例<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.TwoThread.ThreadObservePattern.SingletThread;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Gate是多线程的共享资源要加锁实现同步机制</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gate</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name = <span class="string">"Nobody"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> address = <span class="string">"NoWhere"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">void</span> <span class="title">pass</span><span class="params">(<span class="keyword">String</span> name,<span class="keyword">String</span> address)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.counter++;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        verify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verify</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        /*返回 char指定索引处的值 charAt(int indx)*/</span></span><br><span class="line"><span class="comment">//这里如果不加锁，多个线程抢占执行，比如：beilao和shanghai相遇就会执行toString()方法</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.name.charAt(<span class="number">0</span>) != <span class="keyword">this</span>.address.charAt(<span class="number">0</span>))&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"******BROKEN*******"</span>+toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> synchronized <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"NO."</span>+counter+<span class="string">":"</span>+name+<span class="string">","</span>+address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.zhao.TwoThread.ThreadObservePattern.SingletThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="title">extends</span> <span class="title">Thread</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> myName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> myAddress;</span><br><span class="line">    <span class="keyword">private</span> Gate gate;  <span class="comment">//聚合关系</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">String</span> myName, <span class="keyword">String</span> myAddress,Gate gate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.myName = myName;</span><br><span class="line">        <span class="keyword">this</span>.myAddress = myAddress;</span><br><span class="line">        <span class="keyword">this</span>.gate = gate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(myName+<span class="string">"BEGIN"</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.gate.pass(myName,myAddress);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">package com.zhao.TwoThread.ThreadObservePattern.SingletThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Gate gate = <span class="keyword">new</span> Gate();</span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">"Beilao"</span>,<span class="string">"BeiJing"</span>,gate);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">"Shanglao"</span>,<span class="string">"ShangHai"</span>,gate);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="string">"Chonglao"</span>,<span class="string">"ChongQing"</span>,gate);</span><br><span class="line"></span><br><span class="line">        user1.start();</span><br><span class="line">        user2.start();</span><br><span class="line">        user3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Java高并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高并发编程+单例模式多线程情况下分析</title>
    <url>/2020/05/10/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%83%85%E5%86%B5%E4%B8%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 单例设计模式</span><br><span class="line">* 饿汉式</span><br><span class="line">* */</span><br><span class="line">public class SingletObject &#123;</span><br><span class="line"></span><br><span class="line">    //类主动加载，占用内存</span><br><span class="line">    //不能懒加载</span><br><span class="line">    //当然类很小的时候没啥问题</span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span><span class="keyword"> final</span> SingletObject<span class="built_in"> instance </span>=<span class="built_in"> new </span>SingletObject();</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> private</span> SingletObject()&#123;</span><br><span class="line">        //empty</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> SingletObject getInstance()&#123;</span><br><span class="line">       <span class="built_in"> return </span>instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 单例设计模式  懒加载 懒汉式</span><br><span class="line">* */</span><br><span class="line">public class SingletObject2 &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> SingletObject2 instance;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> private</span> SingletObject2() &#123;</span><br><span class="line">        //empty</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //懒加载 你用到它才去加载他，不用不加载</span><br><span class="line"></span><br><span class="line">    //但是这里若在多线程的情况下会出现多个实例情况，线程不安全</span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> SingletObject2 getInstance()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="built_in"> if </span>(null == instance) &#123;</span><br><span class="line">           <span class="built_in"> instance </span>=<span class="built_in"> new </span>SingletObject2();</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="built_in"> return </span>instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 单例设计模式  懒加载 懒汉式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletObject3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletObject3 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletObject3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//empty</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//懒加载 你用到它才去加载他，不用不加载</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//但是这里若在多线程的情况下会出现多个实例情况</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 解决方法：</span></span><br><span class="line"><span class="comment">    * 1.synchronized 加class锁  问题：每次调用都要synchronized，</span></span><br><span class="line"><span class="comment">    * 第二次调用是读操作，不会修改数据，这样做会影响其性能</span></span><br><span class="line"><span class="comment">    * 加锁：都会串行化</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> SingletObject3 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletObject3();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h4><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 单例设计模式  双重检查</span><br><span class="line">* */</span><br><span class="line">public class SingletObject4 &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> SingletObject4 instance;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> private</span> SingletObject4() &#123;</span><br><span class="line">        //empty</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //懒加载 你用到它才去加载他，不用不加载</span><br><span class="line"></span><br><span class="line">    //但是这里若在多线程的情况下会出现多个实例情况</span><br><span class="line">    /*</span><br><span class="line">    * 解决方法：</span><br><span class="line">    * 1.synchronized 加class锁  问题：每次调用都要synchronized，</span><br><span class="line">    * 第二次调用是读操作，不会修改数据，这样做会影响其性能</span><br><span class="line">    * 加锁：都会串行化</span><br><span class="line">    *</span><br><span class="line">    * 2.双重检查<span class="built_in"> double </span>check</span><br><span class="line">    * 解决了懒加载，1中影响性能的问题，实现单例</span><br><span class="line">    * 问题：可能出现空指针异常，如果有属性引入 在jvm编译器的优化原因 可能return instance</span><br><span class="line">    * 但是 引用属性初始化没完成 出现空指针异常</span><br><span class="line">    * */</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> SingletObject4 getInstance()&#123;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        * 比如此时有两个线程</span><br><span class="line">        * 都判断 null ==<span class="built_in"> instance </span>然后枪锁</span><br><span class="line">        * 之后在判断null == instance</span><br><span class="line">        * 如果为空，就执行 创建实例</span><br><span class="line">        * */</span><br><span class="line">       <span class="built_in"> if </span>(null == instance)&#123;</span><br><span class="line">            synchronized (SingletObject4.class)&#123;</span><br><span class="line">               <span class="built_in"> if </span>(null == instance) &#123;</span><br><span class="line">                   <span class="built_in"> instance </span>=<span class="built_in"> new </span>SingletObject4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       <span class="built_in"> return </span>instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="volatile关键字双重检查"><a href="#volatile关键字双重检查" class="headerlink" title="volatile关键字双重检查"></a>volatile关键字双重检查</h4><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 单例设计模式  双重检查</span><br><span class="line">* */</span><br><span class="line">public class SingletObject5 &#123;</span><br><span class="line"></span><br><span class="line">    //volatile 不能保障原子性，可保证内存可见性--》多个线程看到的数据是同一份，保证有序性</span><br><span class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> volatile SingletObject5 instance;</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> private</span> SingletObject5() &#123;</span><br><span class="line">        //empty</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //懒加载 你用到它才去加载他，不用不加载</span><br><span class="line"></span><br><span class="line">    //但是这里若在多线程的情况下会出现多个实例情况</span><br><span class="line">    /*</span><br><span class="line">    * 解决方法：</span><br><span class="line">    * 1.synchronized 加class锁  问题：每次调用都要synchronized，</span><br><span class="line">    * 第二次调用是读操作，不会修改数据，这样做会影响其性能</span><br><span class="line">    * 加锁：都会串行化</span><br><span class="line">    *</span><br><span class="line">    * 2.双重检查<span class="built_in"> double </span>check</span><br><span class="line">    * 解决了懒加载，1中影响性能的问题，实现单例</span><br><span class="line">    * 问题：可能出现空指针异常，如果有属性引入 在jvm编译器的优化原因 可能return instance</span><br><span class="line">    * 但是 引用属性初始化没完成 出现空指针异常</span><br><span class="line">    *</span><br><span class="line">    * 3.解决方法 引用属性加入volatile关键字</span><br><span class="line">    * */</span><br><span class="line"></span><br><span class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> SingletObject5 getInstance()&#123;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        * 比如此时有两个线程</span><br><span class="line">        * 都判断 null ==<span class="built_in"> instance </span>然后枪锁</span><br><span class="line">        * 之后在判断null == instance</span><br><span class="line">        * 如果为空，就执行 创建实例</span><br><span class="line">        * */</span><br><span class="line">       <span class="built_in"> if </span>(null == instance)&#123;</span><br><span class="line">            synchronized (SingletObject5.class)&#123;</span><br><span class="line">               <span class="built_in"> if </span>(null == instance) &#123;</span><br><span class="line">                   <span class="built_in"> instance </span>=<span class="built_in"> new </span>SingletObject5();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       <span class="built_in"> return </span>instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="静态内部类-–最优雅的方式"><a href="#静态内部类-–最优雅的方式" class="headerlink" title="静态内部类 –最优雅的方式"></a>静态内部类 –最优雅的方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Holder方式：</span></span><br><span class="line"><span class="comment">* 创建静态内部类的方式：</span></span><br><span class="line"><span class="comment">* 常用方式；优雅简洁明了</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonObject6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonObject6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span>  SingletonObject6 instane = <span class="keyword">new</span> SingletonObject6();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonObject6 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InstanceHolder.instane;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="枚举实现"><a href="#枚举实现" class="headerlink" title="枚举实现"></a>枚举实现</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 枚举的方式：</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">SingletonObject7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SingletonObject7()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//枚举类型的构造函数只会被装载一次</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> SingletonObject7 instance;</span><br><span class="line"></span><br><span class="line">        Singleton()&#123;</span><br><span class="line">            instance = new SingletonObject7();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> SingletonObject7 getInstance()&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static SingletonObject7 getInstance()&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        IntStream.rangeClosed(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">                .forEach(i -&gt;new Thread()&#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="keyword">public</span> <span class="built_in">void</span> run() &#123;</span><br><span class="line">                        System.<span class="keyword">out</span>.println(SingletonObject7.getInstance());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;.start());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    执行结果：</span><br><span class="line">    com.zhao.TwoThread.Singleton.<span class="symbol">SingletonObject7@</span><span class="number">46</span>d2ba9f</span><br><span class="line">    com.zhao.TwoThread.Singleton.<span class="symbol">SingletonObject7@</span><span class="number">46</span>d2ba9f</span><br><span class="line">    com.zhao.TwoThread.Singleton.<span class="symbol">SingletonObject7@</span><span class="number">46</span>d2ba9f</span><br><span class="line">    com.zhao.TwoThread.Singleton.<span class="symbol">SingletonObject7@</span><span class="number">46</span>d2ba9f</span><br><span class="line">    com.zhao.TwoThread.Singleton.<span class="symbol">SingletonObject7@</span><span class="number">46</span>d2ba9f</span><br><span class="line">    com.zhao.TwoThread.Singleton.<span class="symbol">SingletonObject7@</span><span class="number">46</span>d2ba9f</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java高并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高并发编程+多线程的休息室waitSet详细介绍</title>
    <url>/2020/05/10/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%BC%91%E6%81%AF%E5%AE%A4waitSet%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h3 id="多线程的休息室waitSet"><a href="#多线程的休息室waitSet" class="headerlink" title="多线程的休息室waitSet"></a>多线程的休息室waitSet</h3><ul>
<li>wait Set 是一个虚的概念，你从那个拿不出任何东西，内存结构中也不存在，但是他是真实存在的 <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package com.zhao.FirstThread.WaitSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.runtime.regexp.joni.constants.OPCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 多线程的休息室waitSet</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> waitSet &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //定义显示的锁</span><br><span class="line">    private static final <span class="keyword">Object</span> <span class="keyword">LOCK</span> = <span class="built_in">new</span> <span class="keyword">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 1，所有的对象都会有一个wait set，用来存放调用了该对象wait方法之后进入block状态线程</span></span><br><span class="line"><span class="comment">    * 2. 线程被notify之后，不一定立即执行</span></span><br><span class="line"><span class="comment">    * 3. 线程从wait set中唤醒，顺序不一定是FILO</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        IntStream.rangeClosed(<span class="number">1</span>,<span class="number">10</span>).<span class="keyword">forEach</span>(i -&gt;</span><br><span class="line">                <span class="built_in">new</span> Thread(String.valueOf(i))&#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="built_in">public</span> <span class="type">void</span> run() &#123;</span><br><span class="line">                        synchronized(<span class="keyword">LOCK</span>)&#123;</span><br><span class="line">                            try &#123;</span><br><span class="line">                                Optional.<span class="keyword">of</span>(Thread.currentThread().getName()+"进入线程的休息室").ifPresent(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">                                <span class="keyword">LOCK</span>.wait();</span><br><span class="line">                                Optional.<span class="keyword">of</span>(Thread.currentThread().getName()+"走出线程的休息室").ifPresent(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">                            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;.<span class="keyword">start</span>());</span><br><span class="line"></span><br><span class="line">        IntStream.rangeClosed(<span class="number">1</span>,<span class="number">10</span>).<span class="keyword">forEach</span>(i-&gt;&#123;</span><br><span class="line">            synchronized (<span class="keyword">LOCK</span>)&#123;</span><br><span class="line">                <span class="keyword">LOCK</span>.<span class="keyword">notify</span>();</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1</span>_000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 执行结果：</span></span><br><span class="line"><span class="comment">        *   1进入线程的休息室</span></span><br><span class="line"><span class="comment">            7进入线程的休息室</span></span><br><span class="line"><span class="comment">            6进入线程的休息室</span></span><br><span class="line"><span class="comment">            5进入线程的休息室</span></span><br><span class="line"><span class="comment">            4进入线程的休息室</span></span><br><span class="line"><span class="comment">            3进入线程的休息室</span></span><br><span class="line"><span class="comment">            2进入线程的休息室</span></span><br><span class="line"><span class="comment">            1走出线程的休息室</span></span><br><span class="line"><span class="comment">            10进入线程的休息室</span></span><br><span class="line"><span class="comment">            9进入线程的休息室</span></span><br><span class="line"><span class="comment">            8进入线程的休息室</span></span><br><span class="line"><span class="comment">            6走出线程的休息室</span></span><br><span class="line"><span class="comment">            7走出线程的休息室</span></span><br><span class="line"><span class="comment">            8走出线程的休息室</span></span><br><span class="line"><span class="comment">            9走出线程的休息室</span></span><br><span class="line"><span class="comment">            10走出线程的休息室</span></span><br><span class="line"><span class="comment">            2走出线程的休息室</span></span><br><span class="line"><span class="comment">            3走出线程的休息室</span></span><br><span class="line"><span class="comment">            4走出线程的休息室</span></span><br><span class="line"><span class="comment">            5走出线程的休息室</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            Process finished with exit code 0</span></span><br><span class="line"><span class="comment">        * </span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="在线程唤醒notfily的时后，会重新竞争锁-那么他的执行顺序是自上而下依次执行的吗？？？？？"><a href="#在线程唤醒notfily的时后，会重新竞争锁-那么他的执行顺序是自上而下依次执行的吗？？？？？" class="headerlink" title="在线程唤醒notfily的时后，会重新竞争锁,那么他的执行顺序是自上而下依次执行的吗？？？？？"></a>在线程唤醒notfily的时后，会重新竞争锁,那么他的执行顺序是自上而下依次执行的吗？？？？？</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package com.zhao.FirstThread.WaitSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 在线程唤醒notfily的时后，会重新竞争锁</span></span><br><span class="line"><span class="comment">* 那么他的执行顺序是自上而下依次执行的吗？？？？？</span></span><br><span class="line"><span class="comment">* 答案：不是的，在wait等待的时候，jvm虚拟机会记住这个地址，</span></span><br><span class="line"><span class="comment">* notfily唤醒的时候竞争锁，然后恢复这个地址然后执行</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 案例如下：</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Wait &#123;</span><br><span class="line"></span><br><span class="line">    private static final <span class="keyword">Object</span> <span class="keyword">LOCK</span> = <span class="built_in">new</span> <span class="keyword">Object</span>();</span><br><span class="line"></span><br><span class="line">    private static <span class="type">void</span> <span class="keyword">work</span>()&#123;</span><br><span class="line">        synchronized (<span class="keyword">LOCK</span>)&#123;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("Begin....");</span><br><span class="line">            try &#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println("Thread will coming!");</span><br><span class="line">                <span class="keyword">LOCK</span>.wait();  //线程阻塞(假休眠)，JVM虚拟机会记住wait的地址，进入 <span class="keyword">LOCK</span> Wait <span class="keyword">Set</span>队列中  等待notfily唤醒（从等待地址处唤醒）</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("Thread will out!");</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        <span class="built_in">new</span> Thread()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="built_in">public</span> <span class="type">void</span> run() &#123;</span><br><span class="line">                <span class="keyword">work</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.<span class="keyword">start</span>();</span><br><span class="line">        Thread.sleep(<span class="number">1</span>_000);</span><br><span class="line">        synchronized (<span class="keyword">LOCK</span>)&#123;</span><br><span class="line">            <span class="keyword">LOCK</span>.<span class="keyword">notify</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        * 执行结果</span></span><br><span class="line"><span class="comment">        * Begin....</span></span><br><span class="line"><span class="comment">        * Thread will coming!</span></span><br><span class="line"><span class="comment">        * Thread will out!</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Java高并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高并发编程+多线程API</title>
    <url>/2020/05/10/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8BAPI/</url>
    <content><![CDATA[<h3 id="守护线程（Demeon）"><a href="#守护线程（Demeon）" class="headerlink" title="守护线程（Demeon）"></a>守护线程（Demeon）</h3><ul>
<li>在Java.lang.Thread 类中有一个setDaemon()方法参数为true时，可设置线程为守护线程(又称后台线程); </li>
<li>当运行的唯一线程都是守护进程线程时，Java虚拟机将退出，其他线程运行结束，守护线程立即结束。 </li>
<li>注意：线程启动前必须调用此方法,即在调用stater()方法之前调用。</li>
<li>Java线程分为用户线程和守护线程，线程的daemon属性为true表示是守护线程，false表示是用户线程。 </li>
<li></li>
<li>代码测试：—》当主线程运行结束，守护线程立即结束<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> DeamonThread &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) throws InterruptedException &#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> <span class="constructor">Thread()</span>&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run<span class="literal">()</span> &#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>+<span class="string">" runing"</span>);</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">100000</span>);</span><br><span class="line">                    <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span></span><br><span class="line">                    .get<span class="constructor">Name()</span>+<span class="string">" done."</span>);</span><br><span class="line">                &#125;catch (InterruptedException e)&#123;</span><br><span class="line">                    e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;<span class="comment">//new stauts</span></span><br><span class="line">        <span class="comment">//将线程设置为守护线程</span></span><br><span class="line">        thread.set<span class="constructor">Daemon(<span class="params">true</span>)</span>;</span><br><span class="line">        thread.start<span class="literal">()</span>; <span class="comment">//runable(可执行) status --&gt; running -&gt; blocked</span></span><br><span class="line">    <span class="comment">// 这如果main线程不休眠，main执行完，Java虚拟机将退出，thread线程没执行完</span></span><br><span class="line">    <span class="comment">// Thread.sleep(10_000);</span></span><br><span class="line">    <span class="comment">//休眠10秒，thread线程就之行结束了</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="获取线程栈的跟踪信息"><a href="#获取线程栈的跟踪信息" class="headerlink" title="获取线程栈的跟踪信息"></a>获取线程栈的跟踪信息</h3><ul>
<li><p>日志的形式一样</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Thread.getStackTrace(): 获取线程栈的跟踪信息</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">public <span class="keyword">class</span> text2 &#123;</span><br><span class="line"></span><br><span class="line">    public void test<span class="literal">()</span>&#123;</span><br><span class="line">        StackTraceElement<span class="literal">[]</span> stackTrace = <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>current<span class="constructor">Thread()</span>.get<span class="constructor">StackTrace()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">stackTrace</span>)</span>.stream<span class="literal">()</span></span><br><span class="line">                .filter(e-&gt; !e.is<span class="constructor">NativeMethod()</span>)</span><br><span class="line">                .for<span class="constructor">Each(<span class="params">e</span>-&gt; Optional.<span class="params">of</span>(<span class="params">e</span>.<span class="params">getClassName</span>()</span> +<span class="string">":"</span> + e.get<span class="constructor">MethodName()</span> +<span class="string">":"</span>+ e.get<span class="constructor">LineNumber()</span>)</span><br><span class="line">                        .<span class="keyword">if</span><span class="constructor">Present(System.<span class="params">out</span>::<span class="params">println</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  text2 t2 = <span class="keyword">new</span> text2();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        t2.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-pseudo">:getStackTrace</span><span class="selector-pseudo">:1559</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.zhao</span><span class="selector-class">.FirstThread</span><span class="selector-class">.stackTrace</span><span class="selector-class">.text2</span><span class="selector-pseudo">:test</span><span class="selector-pseudo">:13</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.zhao</span><span class="selector-class">.FirstThread</span><span class="selector-class">.stackTrace</span><span class="selector-class">.test</span><span class="selector-pseudo">:test</span><span class="selector-pseudo">:8</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.zhao</span><span class="selector-class">.FirstThread</span><span class="selector-class">.stackTrace</span><span class="selector-class">.test</span><span class="selector-pseudo">:cate</span><span class="selector-pseudo">:13</span></span><br><span class="line">...略</span><br></pre></td></tr></table></figure>
<h3 id="线程组ThreadGroup"><a href="#线程组ThreadGroup" class="headerlink" title="线程组ThreadGroup"></a>线程组ThreadGroup</h3></li>
<li><p>在Thread创建线程的构造方法中参数ThreadGroup 不写时默认为父类的ThereadGroup</p>
</li>
<li><p>线程组代表一组线程。 此外，线程组还可以包括其他线程组。 线程组形成一个树，除了初始线程组之外，每个线程组都有一个父进程。 </p>
</li>
<li><p>允许线程访问有关其线程组的信息，但不能访问有关其线程组的父线程组或任何其他线程组的信息</p>
</li>
<li><p>创建线程组的方法</p>
<ol>
<li>一个参数，ThreadGroupName</li>
<li>两个参数，父线程组，ThreadGroupName<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* ThreadGroup:线程组</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* ThreadGroup 是一组 Thread，可以包含ThreadGroup ，Tree树结构</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* ThreadGroup：可以访问当前Thread的信息</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">public <span class="keyword">class</span> ThreadGroupCreate &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ThreadGroup的创建</span></span><br><span class="line">        <span class="comment">// 1. use the name 定义一个名字</span></span><br><span class="line">        <span class="comment">// 2. use the parent and group name 父类的ThreadGroup</span></span><br><span class="line"></span><br><span class="line">        ThreadGroup threadGroup = <span class="keyword">new</span> <span class="constructor">ThreadGroup(<span class="string">"TG1"</span>)</span>;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> <span class="constructor">Thread(<span class="params">threadGroup</span>,<span class="string">"t1"</span>)</span>&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run<span class="literal">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(get<span class="constructor">ThreadGroup()</span>.get<span class="constructor">Name()</span>);</span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(get<span class="constructor">ThreadGroup()</span>.get<span class="constructor">Parent()</span>);</span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(get<span class="constructor">ThreadGroup()</span>.get<span class="constructor">MaxPriority()</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">10_000</span>);<span class="comment">//sleep方法不会释放cpu的执行权</span></span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        thread.start<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public abstract <span class="keyword">class</span> Threadapi &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * activeCount(): 大概评估当前有多少个活动ThreadGroup及其子类</span></span><br><span class="line"><span class="comment">    * --》返回此线程组及其子组中活动线程数的估计 评</span></span><br><span class="line"><span class="comment">    * 估指活动线程数量不一定准确 ，比如：拿到消亡的线程</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line"></span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="comment">//创建线程组</span></span><br><span class="line">        ThreadGroup tg1 = <span class="keyword">new</span> <span class="constructor">ThreadGroup(<span class="string">"TG1"</span>)</span>;</span><br><span class="line"></span><br><span class="line">        Thread t1 =<span class="keyword">new</span> <span class="constructor">Thread(<span class="params">tg1</span>,<span class="string">"t1"</span>)</span>&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run<span class="literal">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">10_000</span>);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">//捕捉异常</span></span><br><span class="line">                        e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t1.start<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//thread1与thread2是父子关系h</span></span><br><span class="line">        ThreadGroup tg2 = <span class="keyword">new</span> <span class="constructor">ThreadGroup(<span class="params">tg1</span>, <span class="string">"TG2"</span>)</span>;</span><br><span class="line">        Thread t2 =<span class="keyword">new</span> <span class="constructor">Thread(<span class="params">tg2</span>,<span class="string">"t2"</span>)</span>&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run<span class="literal">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">10_000</span>);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        <span class="comment">//捕捉异常</span></span><br><span class="line">                        e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t2.start<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(tg1.active<span class="constructor">Count()</span>);<span class="comment">//线程数</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(tg1.active<span class="constructor">GroupCount()</span>);<span class="comment">//Tnreadgroup的数量</span></span><br><span class="line">        t2.check<span class="constructor">Access()</span>;<span class="comment">//确定当前运行的线程是否有权限修改此线程组。//SecurityException - 如果当前线程不能修改此线程组  安全异常</span></span><br><span class="line">        <span class="comment">//tg1.destroy(); //销毁此线程组及其所有子组。  注意：在线程组空的情况下才能销毁，否则会报异常java.lang.IllegalThreadStateException</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//enumerate(Thread[] list)</span></span><br><span class="line">        <span class="comment">//将此线程组及其子组中的每个活动线程复制到指定的数组中。</span></span><br><span class="line">        Thread<span class="literal">[]</span> ts1 = <span class="keyword">new</span> Thread<span class="literal">[<span class="identifier">tg1</span>.<span class="identifier">activeCount</span>()]</span>;</span><br><span class="line">        tg1.enumerate(ts1);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">ts1</span>)</span>.for<span class="constructor">Each(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        tg1.enumerate(ts1,<span class="literal">false</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">ts1</span>)</span>.for<span class="constructor">Each(System.<span class="params">out</span>::<span class="params">println</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="如何扑捉线程运行时的异常"><a href="#如何扑捉线程运行时的异常" class="headerlink" title="如何扑捉线程运行时的异常"></a>如何扑捉线程运行时的异常</h3></li>
</ol>
</li>
<li><p>线程的执行逻辑单元，方法签名，不能抛出异常即run()方法</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*32. 如何扑捉线程运行时的异常</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* application：释放一些资源，应用程序的资源是比较珍贵的</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 线程是不能抛出异常的</span></span><br><span class="line"><span class="comment">* 由于线程的逻辑代码是放在run方法里面的，而run方法的签名是不允许抛出异常的，</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Thread runtime Expresion：如果有异常线程，应用程序正常，如何在application中</span></span><br><span class="line"><span class="comment">* 知道，那种异常</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadException</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义常量</span></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> <span class="keyword">int</span> A = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> <span class="keyword">int</span> B = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//java8的新特性lambda表达式   Runable --》FunctionInterface函数式接口 常见的函数式接口有四大类  位于java.util.function中</span></span><br><span class="line">            <span class="comment">//特点：简洁</span></span><br><span class="line">            <span class="comment">//这里只需写run方法的逻辑代码即可</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">5</span>_000);<span class="comment">//休眠5秒</span></span><br><span class="line">                <span class="keyword">int</span> result = A / B; <span class="comment">//此处异常抛不出去，IDE只有警告没得报错</span></span><br><span class="line">                System.out.<span class="built_in">println</span>(result);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread.setUncaughtExceptionHandler(<span class="keyword">new</span> Thread.UncaughtExceptionHandler() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> uncaughtException(Thread t, Throwable e) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"异常："</span>+e);</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"异常线程："</span>+t);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);<span class="comment">//未捕获的异常处理</span></span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>通过上面Thread.setUncaughtExceptionHandler可在线程执行逻辑代码之外，查看异常</p>
</li>
<li><p>结果：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">异常：java.lang.ArithmeticException: / <span class="keyword">by</span> zero</span><br><span class="line">异常线程：<span class="keyword">Thread</span><span class="meta">[</span><span class="keyword">Thread</span><span class="number">-0</span>,<span class="number">5</span>,main<span class="meta">]</span></span><br></pre></td></tr></table></figure>
<h3 id="线程安全与非线程安全的类"><a href="#线程安全与非线程安全的类" class="headerlink" title="线程安全与非线程安全的类"></a>线程安全与非线程安全的类</h3></li>
<li><p>某些线程安全的类：StringBuffer、Vector、HashTable，虽然线程安全，但是效率较低，我们一般不用，<br>而用Collections工具类解决线程安全的问题。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span> = Colletions.syncrinizedList(<span class="literal">new</span> ArrayList&lt;<span class="built_in">String</span>&gt;()); <span class="comment">// 获取线程安全的List集合</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java高并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高并发编程+多线程</title>
    <url>/2020/05/10/Java%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<ul>
<li>多线程同步内部如何实现<ul>
<li>wait/notify，synckronized,ReentrantLock…</li>
</ul>
</li>
</ul>
<h3 id="synckronized"><a href="#synckronized" class="headerlink" title="synckronized"></a>synckronized</h3><ul>
<li>实现同步是一个重量级的锁<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">public synchronized void <span class="keyword">start</span>() &#123;</span><br><span class="line">        /**</span><br><span class="line">         * This method <span class="literal">is</span><span class="built_in"> not</span> invoked <span class="keyword">for</span> the main method thread <span class="keyword">or</span> <span class="string">"system"</span></span><br><span class="line">         * <span class="keyword">group</span> threads created/set up <span class="keyword">by</span> the VM. Any new functionality added</span><br><span class="line">         * <span class="keyword">to</span> this method <span class="keyword">in</span> the future may have <span class="keyword">to</span> also be added <span class="keyword">to</span> the VM.</span><br><span class="line">         *</span><br><span class="line">         * A zero status <span class="keyword">value</span> corresponds <span class="keyword">to</span> state <span class="string">"NEW"</span>.</span><br><span class="line">         */</span><br><span class="line">          </span><br><span class="line">通用领域</span><br><span class="line">生物医药</span><br><span class="line">/**</span><br><span class="line">* This method <span class="literal">is</span><span class="built_in"> not</span> invoked <span class="keyword">for</span> the main method thread <span class="keyword">or</span> <span class="string">"system"</span></span><br><span class="line">* <span class="keyword">group</span> threads created/set up <span class="keyword">by</span> the VM. Any new functionality added</span><br><span class="line">* <span class="keyword">to</span> this method <span class="keyword">in</span> the future may have <span class="keyword">to</span> also be added <span class="keyword">to</span> the VM.</span><br><span class="line">*</span><br><span class="line">* A zero status <span class="keyword">value</span> corresponds <span class="keyword">to</span> state <span class="string">"NEW"</span>.</span><br><span class="line">*/</span><br><span class="line">   /**</span><br><span class="line">         * This method <span class="literal">is</span><span class="built_in"> not</span> invoked <span class="keyword">for</span> the main method thread <span class="keyword">or</span> <span class="string">"system"</span></span><br><span class="line">         * <span class="keyword">group</span> threads created/set up <span class="keyword">by</span> the VM. Any new functionality added</span><br><span class="line">         * <span class="keyword">to</span> this method <span class="keyword">in</span> the future may have <span class="keyword">to</span> also be added <span class="keyword">to</span> the VM.</span><br><span class="line">         *</span><br><span class="line">         * A zero status <span class="keyword">value</span> corresponds <span class="keyword">to</span> state <span class="string">"NEW"</span>.</span><br><span class="line">         */</span><br><span class="line">    /**</span><br><span class="line">    *主方法线程或“系统”不调用此方法</span><br><span class="line">    由虚拟机创建/设置的组线程。添加的任何新功能</span><br><span class="line">    *在将来，这个方法可能还必须添加到VM中。</span><br><span class="line">    *</span><br><span class="line">    *零状态值对应于状态“NEW”。</span><br><span class="line">    */</span><br><span class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">            throw new IllegalThreadStateException();</span><br><span class="line"></span><br><span class="line">        /* Notify the <span class="keyword">group</span> that this thread <span class="literal">is</span> about <span class="keyword">to</span> be started</span><br><span class="line">         * so that it can be added <span class="keyword">to</span> the <span class="keyword">group</span><span class="string">'s list of threads</span></span><br><span class="line"><span class="string">         * and the group'</span>s unstarted<span class="built_in"> count</span> can be decremented. */</span><br><span class="line">        <span class="keyword">group</span>.add(this);</span><br><span class="line"></span><br><span class="line">       <span class="built_in"> boolean</span> started =<span class="built_in"> false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">start</span><span class="number">0</span>();</span><br><span class="line">            started =<span class="built_in"> true</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    <span class="keyword">group</span>.threadStartFailed(this);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                /* do nothing. If <span class="keyword">start</span><span class="number">0</span> threw a Throwable <span class="keyword">then</span></span><br><span class="line">                  it will be passed up the call stack */</span><br><span class="line">                  /*什么都不做。如果开始扔了一个异常它将在调用堆栈中被传递*/</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private native void <span class="keyword">start</span><span class="number">0</span>();==》此方法会调用openjdk下C语言写的操作系统函数，启动</span><br><span class="line">    JVM --t1 == OS--t1</span><br><span class="line">    所以：CPU 内核态 ---》用户态</span><br><span class="line">    <span class="number">1.6</span>之前</span><br></pre></td></tr></table></figure></li>
<li>native 本地方法，C语言写的</li>
</ul>
]]></content>
      <tags>
        <tag>Java高并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>restful入门</title>
    <url>/2020/05/10/restful%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><ul>
<li>REST 是一套理论架构风格</li>
<li>rest –Resource Representational State Transfer（资源表述性状态转移）的缩写；<ul>
<li>Resource：资源，可以用URL(统一资源定位符)指向它，每种资源对应一个特定的URL。<ol>
<li>在网络上一切皆资源</li>
<li>每种资源对应一个特定的URL指向</li>
</ol>
</li>
<li>Representation：资源表现层<ol>
<li>“资源”是一种信息的实体，它可以有多种外在的表现形式。我们把“资源”呈现的形式，叫做他的“表现层”（Representation）</li>
<li>URL只代表资源的的实体，不代表它的形式。他的具体表现形式，应该在Http请求的头信息中用Accept和Content-type字段指定，这两个字段才是对“表现层”的描述。</li>
</ol>
</li>
<li>State Transfer：状态转移<ol>
<li>访问一个网站，就代表了客户端和服务器的一个互动过程，在这个过程中，在这个过程中势必涉及到数据和状态的变化</li>
<li>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有状态都保存在服务端。因此，如果客户端想要操作服务器，必须通过某种手段（AJAX，form表单），让服务器发生”状态转移”（state Transfer）。而这种转化是建立在表现层之上的，所以就是“表现层状态转化”。</li>
<li>改变服务器端资源的状态<ul>
<li>新增：从无到有状态的变化</li>
<li>更新：从某个状态变成另一种状态的转化</li>
<li>删除：从有到无状态的变化 </li>
</ul>
</li>
</ol>
</li>
<li>Uniform Interface 统一接口<ol>
<li>统一接口：<br>REST要求，必须通过统一接口来对资源执行各种操作。对于每种资源只能执行一组有限的操作。</li>
<li>Http1.1协议为例：<br>7个HTTP方法：GET(查询)/post(新增)/put(修改)/delete（删除）/patch（修改相关）/head/options<br>HTTP的头信息（可自定义）<br>HTTP响应状态码（可自定义）<br>这就是HTTP1.1协议的统一接口</li>
<li>REST还有要求，对于资源执行的操作，其操作语义必须由HTTP消息体之前的部分完全表达，不能将操作语义封装在HTTP消息体内部。</li>
</ol>
</li>
</ul>
</li>
<li>主流是http1.1协议</li>
<li>先有REST这套理论，在设计出来http1.1协议<h4 id="关于应用接口"><a href="#关于应用接口" class="headerlink" title="关于应用接口"></a>关于应用接口</h4></li>
<li>系统的接口：很多情况下，需要把系统的功能作为服务暴露该外部的其他应用使用或者给移动端使用，就需要把系统中的服务作为接口暴露出去，一般分为公共接口(发短信，天气预报)和私用接口(公司内部使用的)；<h3 id="RESTFUL"><a href="#RESTFUL" class="headerlink" title="RESTFUL"></a>RESTFUL</h3></li>
<li>restful是对rest这套理论应用的实现<h4 id="RESTFUL设计："><a href="#RESTFUL设计：" class="headerlink" title="RESTFUL设计："></a>RESTFUL设计：</h4></li>
</ul>
<ol>
<li>资源设计：<ul>
<li>路径：<br>以前路径上拼接参数：这种方式的问题是大量的接口设计，url地址设计复杂，需要在URL里面表示出资源及其操作</li>
<li>路径又称终点（endpoint），表示API的具体网址</li>
<li>在RESTful架构中，每个网络代表一种资源(resource),所以网络中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的“集合”(collection),所以URL中的名词也应该是用复数。</li>
</ul>
</li>
<li>动作设计：<ul>
<li>HTTP动作<br>GET（select）：从服务器取出资源(一项或多项)。<br>Post（create）：在服务器新建一个资源。<br>put ( update): 在服务器更新资源(客户端提供改变后的完整资源)，PUT更新整个对象<br>patch（update）：在服务器更新资源(客户端提供改变的属性[补丁])，patch更新个别属性<br>delete（delete）：从服务器删除资源。<br>head：获得一个资源的元数据，比如一个资源的hash值或者最后修改日期；<br>options：获得客户端针对一个资源能够实施操作：（获得该资源的api（能够对资源做什么操作的描述））</li>
<li>返回结果：<br>200 OK -[GET]:服务器成功呢返回用户请求的的数据<br>201 CREATE -[post/put/patch]:用户新建或者修改数据成功<br>202 Accepted -[<em>]:表示一个请求已经进入一个后台排队（异步任务）<br>204 NO CONTENT -[delete]:用户删除数据成功<br>400 INVALID REQUEST -[post/put/patch]:用户发出请求有错误，服务器没有进行新建或者修改数据的操作。<br>401 Unauthorized -[</em>]:表示用户没有权限(令牌，用户名，密码错误等)；<br>403 Forbidden -[<em>]:表示用户得到授权(与401错误相对)但是访问被禁止<br>404 NOT FOUND -[</em>]:用户发出的请求是针对不存在的记录，服务器没有进行操作<br>406 NOT Acceptable -[GET]:用户请求格式不可得（比如用户请求的JSON格式，但是只有xml格式）<br>401 Gone -[GEI]:用户请求的资源被永久删除，且不会在得到的<br>422 Unprocesable entity -[post/put/patch]:当创建一个对象时，发生验证错误<br>500 INTERNAL SERVER ERROR -[*]:服务器发生错误，用户将无法判断发出的请求是否成功。</li>
<li>content Type<ol>
<li>Accept属于请求头，content-Type属于实体头</li>
<li>Accept代表发送端（客户端）希望接收的数据类型，比如：application/json==》json类型，后台返回json类型数据</li>
<li>context-Type代表发送端(客户端/服务端)发送的实体数据的数据类型，比如：application/json，代表发送端发送的数据格式json，后台就要以这种格式来接受前台的发送过来的数据<h3 id="RESTful服务开发"><a href="#RESTful服务开发" class="headerlink" title="RESTful服务开发"></a>RESTful服务开发</h3></li>
</ol>
</li>
</ul>
</li>
</ol>
<ul>
<li>java中常见的Restful开发框架，jersey，play，SpringMVC</li>
<li>设计restful接口步骤：<ol>
<li>确定资源</li>
<li>确定请求方式</li>
<li>确定返回值（结果，如：类型，头信息，状态码）</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>REST</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构和算法+链表</title>
    <url>/2020/05/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h3 id="LeetCode练习题："><a href="#LeetCode练习题：" class="headerlink" title="LeetCode练习题："></a>LeetCode练习题：</h3><h4 id="找出两个链表的交点"><a href="#找出两个链表的交点" class="headerlink" title="找出两个链表的交点"></a>找出两个链表的交点</h4><ul>
<li>160.intersection(交点) of Two Linked Lists(Easy)<br>例如以下示例中 A 和 B 两个链表相交于 c1：<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">A:          <span class="built_in">a1</span> → <span class="built_in">a2</span></span><br><span class="line">                    ↘</span><br><span class="line">                      <span class="built_in">c1</span> → <span class="built_in">c2</span> → <span class="built_in">c3</span></span><br><span class="line">                    ↗</span><br><span class="line"><span class="keyword">B: </span>   <span class="keyword">b1 </span>→ <span class="keyword">b2 </span>→ <span class="keyword">b3</span></span><br></pre></td></tr></table></figure></li>
<li>因为链表节点的next域只有一个指针，指向下一个节点地址 </li>
<li>解题思路：<ol>
<li>遍历A链表到最后即，tempA.next == null的时候,让tempA.next指向B链表的b1；<br>即 A：a1-&gt;a2-&gt;c1-&gt;c2-&gt;c3-&gt;b1-&gt;b2-&gt;b3-&gt;c1-&gt;c2-&gt;c3</li>
<li>同理可得B：b1-&gt;b2-&gt;b3-&gt;c1-&gt;c2-&gt;c3-&gt;a1-&gt;a2-&gt;c1-&gt;c2-&gt;c3</li>
<li>lenA + lenB = lenB + lenA</li>
<li>while(tempA != termpA)不同节点<br>tempA == null ? headB : tempA.next<br>tempB == null ? headA : tempB.next<br>否则return tempA;<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123;</span><br><span class="line">    ListNode <span class="attr">l1</span> = headA, <span class="attr">l2</span> = headB;</span><br><span class="line">    while (l1 != l2) &#123;</span><br><span class="line">        <span class="attr">l1</span> = (<span class="attr">l1</span> == <span class="literal">null</span>) ? headB : l1.next;</span><br><span class="line">        <span class="attr">l2</span> = (<span class="attr">l2</span> == <span class="literal">null</span>) ? headA : l2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    return l1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>+链表增删节点 leetCode744<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ListNode &#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode <span class="keyword">next</span>;</span><br><span class="line">    <span class="keyword">public</span> ListNode(<span class="keyword">int</span> x)&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> String toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ListNode&#123;"</span> +</span><br><span class="line">                <span class="string">"val="</span> + val +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.zhao.linckList.leetCode.singLinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> MyLinkedList &#123;</span><br><span class="line">    <span class="keyword">private</span> ListNode head;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MyLinkedList() &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">this</span>.length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回索引处的节点的data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> get(<span class="keyword">int</span> index)&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode node = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            node = node.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="keyword">println</span>(node.<span class="keyword">next</span>.val);</span><br><span class="line">        <span class="keyword">return</span> node.<span class="keyword">next</span>.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾插法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addAtTail(<span class="keyword">int</span> val)&#123;</span><br><span class="line">        <span class="comment">//创建辅助指针</span></span><br><span class="line">        ListNode node = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(node.<span class="keyword">next</span> != <span class="keyword">null</span>)&#123;<span class="comment">//判断是否到链表最后</span></span><br><span class="line">            node = node.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">        <span class="keyword">this</span>.length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 头节点插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addAtHead(<span class="keyword">int</span> val)&#123;</span><br><span class="line">        <span class="comment">//创建辅助节点</span></span><br><span class="line">        ListNode node = <span class="keyword">this</span>.head.<span class="keyword">next</span>;</span><br><span class="line">        <span class="comment">//创建一个节点，head头结点的next域指向这个节点</span></span><br><span class="line">        <span class="keyword">this</span>.head.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">        <span class="comment">//第二个节点移到第三个节点的位置</span></span><br><span class="line">        <span class="keyword">this</span>.head.<span class="keyword">next</span>.<span class="keyword">next</span> = node;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定索引位置插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addAtIndex(<span class="keyword">int</span> index, <span class="keyword">int</span> val)&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode node = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            node = node.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode <span class="keyword">next</span> = node.<span class="keyword">next</span>;</span><br><span class="line">        node.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">        node.<span class="keyword">next</span>.<span class="keyword">next</span> = <span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">this</span>.length++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定索引位置删除节点</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> deleteAtIndex(<span class="keyword">int</span> index)&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>.length)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode node = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            node = node.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node.<span class="keyword">next</span> = node.<span class="keyword">next</span>.<span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">this</span>.length--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示链表 遍历打印</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> showList()&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.<span class="keyword">next</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.<span class="keyword">println</span>(<span class="string">"链表为空。。。。"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建辅助指针</span></span><br><span class="line">        ListNode node = <span class="keyword">this</span>.head.<span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (node == <span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.<span class="keyword">println</span>(<span class="string">"以到链表最后...."</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.<span class="keyword">println</span>(<span class="string">"节点信息："</span>+node);</span><br><span class="line">            node = node.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">package</span> com.zhao.linckList.leetCode.singLinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Client &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        MyLinkedList myLinkedList = <span class="keyword">new</span> MyLinkedList();</span><br><span class="line">        myLinkedList.addAtTail(<span class="number">2</span>);</span><br><span class="line">        myLinkedList.addAtTail(<span class="number">3</span>);</span><br><span class="line">        myLinkedList.addAtTail(<span class="number">4</span>);</span><br><span class="line">        myLinkedList.addAtTail(<span class="number">5</span>);</span><br><span class="line">        myLinkedList.addAtTail(<span class="number">6</span>);</span><br><span class="line">        myLinkedList.addAtTail(<span class="number">7</span>);</span><br><span class="line">        myLinkedList.addAtTail(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        myLinkedList.showList();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        myLinkedList.get(<span class="number">5</span>);</span><br><span class="line">        myLinkedList.addAtHead(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        myLinkedList.showList();</span><br><span class="line"></span><br><span class="line">        myLinkedList.addAtIndex(<span class="number">1</span>,<span class="number">22</span>);</span><br><span class="line">        myLinkedList.showList();</span><br><span class="line"></span><br><span class="line">        myLinkedList.deleteAtIndex(<span class="number">3</span>);</span><br><span class="line">        myLinkedList.showList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构和算法+排序算法</title>
    <url>/2020/05/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h3 id="排序算法介绍："><a href="#排序算法介绍：" class="headerlink" title="排序算法介绍："></a>排序算法介绍：</h3><ul>
<li><p>排序算法(sort Algorrihm),排序是将一组数据，以指定的顺序进行排列的过程。</p>
</li>
<li><p>排序的分类：</p>
<ol>
<li>内部排序：指将需要处理的所有数据都加载到内部存储器中进行排序；<ul>
<li>插入排序：直接插入排序，希尔排序</li>
<li>选择排序：简单选择排序，堆排序</li>
<li>交换排序：冒泡排序，快速排序</li>
<li>归并排序</li>
<li>基数排序</li>
</ul>
</li>
<li>外部排序：使用内存和外存的结合，数据量过大，无法全部加载内存中，需要借助外部存储进行排序。<h3 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h3></li>
</ol>
</li>
<li><p>度量一个程序（算法）执行的时间：</p>
<ul>
<li>事后统计法</li>
<li>事前估值的方法：通过分析某个算法时间复杂度来判断那个算法更优；</li>
<li>时间频度T(n)<br>常数项，低次项，系数==可以忽略</li>
</ul>
</li>
<li><p>时间复杂度：</p>
<ul>
<li><p>一般情况下，算法中的基本操作语句的重复执行次数是问题规模n的某个函数，用T(n)表示，若有某个辅助函数f(n),使你无限趋近于无穷大时，T(n)/f(n)的极限值为不等于0的常数，则称f(n)是T(n)的同数量级函数,记作T(n)=O(f(n)),称O(f(n))为算法渐进时间复杂度，简称时间复杂度。</p>
</li>
<li><p>说明：<br>T(n) = n+1   f(n) = n<br>T(n)/f(n) = 1 即：T(n)=O(n)</p>
</li>
<li><p>T(n)不同，但时间复杂度可能相同。</p>
</li>
<li><p>计算时间复杂度的方法：</p>
<ol>
<li>用常数1代替运行时间中的所有加法常数</li>
<li>修改后的运行次数函数中，只保留最高级项</li>
<li>去除最高级项的系数 </li>
</ol>
</li>
<li><p>说明:常见的算法时间复杂度由小到大依次是：O(1) &lt; O(log2n) &lt; O(n) &lt; O(nlog2n) &lt; O(n^2) &lt; O(n^3) &lt; O(n^K) &lt; O(2^n),随着问题规模n不断增大，上述时间复杂度不断增大，算法的执行效率越低</p>
</li>
<li><p>常见时间复杂度</p>
<ol>
<li><p>常数阶O(1):无论代码执行多少行，只要是没得循环等复杂的结构，那么这代码的时间复杂度就是O(1);如：int i=1, i++等</p>
</li>
<li><p>对数阶O(log2n)以2为底n的对数</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">    i = i * <span class="number">2</span>;<span class="comment">//以2为底</span></span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line"><span class="number">3.</span> 线性阶O(n)</span><br></pre></td></tr></table></figure>
<p>for(int i=1;i&lt;=n;i++){<br>j=1;<br>j++;<br>}</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="number">4.</span> 线性对数阶<span class="constructor">O(<span class="params">nlog</span>?N)</span>:就是将时间复杂度为<span class="constructor">O(<span class="params">log2n</span>)</span>的代码循环N遍</span><br></pre></td></tr></table></figure>
<p>for(int m=1;m&lt;=n;m++){<br>int i = 1;<br>while(i&lt;n){<br>   i = i * 2;//以2为底<br>}<br>}</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">5.</span> 平方阶O(n^<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>for(int j=1;j&lt;=n;j++){<br>for(int i=1;i&lt;=n;i++){<br>j=1;<br>j++;<br>}<br>}</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>平均时间复杂度和最坏时间复杂度</span><br><span class="line"><span class="bullet">  1. </span>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间</span><br><span class="line"><span class="bullet">  2. </span>最坏时间复杂度，最坏情况下，一般讨论都是它；原因：最坏情况下的时间复杂度是算法在任何输出实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况最长。</span><br><span class="line"><span class="bullet">  3. </span>平均时间复杂度和最坏时间复杂度是否一致与算法有关</span><br><span class="line"><span class="section">#### 冒泡排序</span></span><br><span class="line"><span class="bullet">* </span>基本介绍：</span><br><span class="line"><span class="bullet">  1. </span>冒泡排序(Bubble Sorting)的基本思想是：通过对待排序序列从前向后(从下标较小的元素开始)，依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就像水底的气泡逐渐向上冒。</span><br><span class="line"><span class="bullet">  2. </span>因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下来没有进行过交换，就说明序列有序，因此要在排序过程中设置一个标志flag判断元素是否进行过交换。从而减少不必要的比较。</span><br><span class="line"><span class="bullet">  * </span>代码实现：</span><br></pre></td></tr></table></figure>
<p>import java.util.Arrays;<br>public class MaoPao {<br>public static void main(String[] args) {<br>   int[] arr = {3,9,-1,10,-2};</p>
<p>   //冒泡的演变过程<br>   //第一趟就是把最大的数排在最后面<br>   int temp = 0;<br>   for (int j = 0; j &lt; arr.length-1; j++) {</p>
<pre><code>for (int i = 0; i &lt; arr.length-1-j; i++) {
    //如果前面的数比后面的数大就交换
    if (arr[i] &gt; arr[i+1]){
        temp = arr[i];
        arr[i] = arr[i+1];
        arr[i+1] =temp;
    }
}
System.out.println(&quot;第&quot;+j+1+&quot;趟:&quot;);
System.out.println(Arrays.toString(arr));</code></pre><p>   }<br>}<br>}</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>优化：没有进行过交换，就说明序列有序，因此要在排序过程中设置一个标志flag判断元素是否进行过交换。从而减少不必要的比较。</span><br></pre></td></tr></table></figure>
<p>public class MaoPao {<br>public static void main(String[] args) {<br>   int[] arr = {3,9,-1,10,20};</p>
<p>   //冒泡的演变过程<br>   //第一趟就是把最大的数排在最后面<br>   int temp = 0;<br>   boolean flag = false; //标识符，表示是否进行过交换<br>   for (int j = 0; j &lt; arr.length-1; j++) {</p>
<pre><code>for (int i = 0; i &lt; arr.length-1-j; i++) {
    //如果前面的数比后面的数大就交换
    if (arr[i] &gt; arr[i+1]){
        flag = true;
        temp = arr[i];
        arr[i] = arr[i+1];
        arr[i+1] =temp;
    }
}
System.out.println(&quot;第&quot;+(j+1)+&quot;趟:&quot;);
System.out.println(Arrays.toString(arr));
if (!flag){//在一次排序中，一次交换都没有发生过
    break;
}else{
flag = false;//重置flag，进行下次判断
}</code></pre><p>   }<br>}<br>}</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>事后统计法</span><br></pre></td></tr></table></figure>
<p>package com.zhao.sort;<br>import java.text.SimpleDateFormat;<br>import java.util.Arrays;<br>import java.util.Date;</p>
</li>
</ol>
</li>
</ul>
<p>public class MaoPao {</p>
<pre><code>public static void main(String[] args) {
    int[] arr = new int[8000000];
    for (int i = 0; i &lt; arr.length-1; i++) {
        arr[i] = (int)(Math.random() * 8000000);
    }

    Date date1 = new Date();
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH-mm-ss&quot;);
    String format = simpleDateFormat.format(date1);
    System.out.println(&quot;排序前的时间是：&quot;+format);

    //测试冒泡排序
    bublesort(arr);

    Date date2 = new Date();
    String format1 = simpleDateFormat.format(date2);
    System.out.println(&quot;排序前的时间是：&quot;+format1);

}
public static void bublesort(int[] arr){
    //冒泡的演变过程
    //第一趟就是把最大的数排在最后面
    int temp = 0;
    boolean flag = false; //标识符，表示是否进行过交换
    for (int j = 0; j &lt; arr.length-1; j++) {

        for (int i = 0; i &lt; arr.length-1-j; i++) {
            //如果前面的数比后面的数大就交换
            if (arr[i] &gt; arr[i+1]){
                flag = true;
                temp = arr[i];
                arr[i] = arr[i+1];
                arr[i+1] =temp;
            }
        }
        //System.out.println(&quot;第&quot;+(j+1)+&quot;趟:&quot;);
        //System.out.println(Arrays.toString(arr));
        if (!flag){//在一次排序中，一次交换都没有发生过
            break;
        }else{
            flag = false;//重置flag，进行下次判断
        }
    }
}</code></pre><p>}</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">#### 选择排序</span><br><span class="line">* 基本介绍:</span><br><span class="line">  选择排序也属于内部排序法，是从预排序的数据中，按指定的规则选出某一元素，在依规定交换位置后达到排序的目的。</span><br><span class="line">* 排序思想：</span><br><span class="line">  选择排序(select sorting)也是一种简单的排序方法。它的基本思想是：第一次从arr[<span class="number">0</span>]~arr[n<span class="number">-1</span>]中选取最小值，与arr[<span class="number">0</span>]交换，第二次从arr[<span class="number">1</span>]~arr[n<span class="number">-1</span>]中选取最小值，与arr[<span class="number">1</span>]交换,....,第i次是从arr[i<span class="number">-1</span>]~arr[n<span class="number">-1</span>]中选取最小值，与arr[i-]交换,...,第n<span class="number">-1</span>次是从arr[n<span class="number">-2</span>]~arr[n<span class="number">-1</span>]中选取最小值，与arr[n<span class="number">-2</span>]交换，总共n<span class="number">-1</span>次，得到一个按排序码从小到大排列的有序序列。</span><br><span class="line"> *  逐步推到</span><br></pre></td></tr></table></figure>
<p> public class XuanZe {</p>
<pre><code>public static void main(String[] args) {
    int[] arr = {101,34,119,1};

    selectSort(arr);
}

//选择排序方法
public static void selectSort(int[] arr){

    //使用逐步推到的方式
    //第一轮
    int minIndex = 0;
    int min = arr[minIndex]; //假设最小数的缩影为0

    for (int i = 0 + 1; i &lt; arr.length; i++) {
        if(min &gt; arr[i]){//即假设的数不是最小值
            min = arr[i]; //重置min
            minIndex = i; //重置minIndex
        }
    }
     if(minIndex != 0) {
      //交换位置
      arr[minIndex] = arr[0];
      arr[0] = min;
  }

    System.out.println(&quot;第一轮之后：&quot;);
    System.out.println(Arrays.toString(arr));

    //第二轮
    minIndex = 1;
    min = arr[minIndex]; //假设最小数的缩影为0

    for (int i = 1 + 1; i &lt; arr.length; i++) {
        if(min &gt; arr[i]){//即假设的数不是最小值
            min = arr[i]; //重置min
            minIndex = i; //重置minIndex
        }
    }
     if(minIndex != 1) {
      //交换位置
      arr[minIndex] = arr[1];
      arr[1] = min;
  }

    System.out.println(&quot;第二轮之后：&quot;);
    System.out.println(Arrays.toString(arr));
}</code></pre><p>}</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>代码优化：</span><br></pre></td></tr></table></figure>
<p>public class XuanZe {</p>
<p>  public static void main(String[] args) {</p>
<pre><code>int[] arr = {101,34,119,1};

selectSort(arr);</code></pre><p>  }</p>
<p>  //选择排序方法<br>  public static void selectSort(int[] arr){</p>
<pre><code>//使用逐步推到的方式
//第一轮
for (int j = 0; j &lt; arr.length-1; j++) {
    int minIndex = j;
    int min = arr[minIndex]; //假设最小数的缩影为0

    for (int i = j + 1; i &lt; arr.length; i++) {
        if(min &gt; arr[i]){//即假设的数不是最小值
            min = arr[i]; //重置min
            minIndex = i; //重置minIndex
        }
    }
    if(minIndex != j) {
        //交换位置
        arr[minIndex] = arr[j];
        arr[j] = min;
    }
    System.out.println(&quot;第&quot;+(j+1)+&quot;轮之后：&quot;);
    System.out.println(Arrays.toString(arr));
}</code></pre><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>逆序只需要修改</span><br></pre></td></tr></table></figure>
<p>  if(max &lt; arr[i]){//即假设的数不是最大值</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">  * 选择排序执行时间要比冒泡少，算法更优。</span><br><span class="line">  #### 插入排序</span><br><span class="line">  * 基本介绍：</span><br><span class="line">    插入排序属于内部排序法，是对于排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。</span><br><span class="line">  * 插入排序算法思想：</span><br><span class="line">    插入排序(Insertion Sorting)的基本思想是：把n个待排序的元素看成为一个有序表和一个无序表，开始时有序表中只包含一个元素，无序表中包含有n<span class="number">-1</span>个元素，排序过程中每次从无序表中取出第一个元素，把他的排序码依次与有序元素的排序吗进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。</span><br><span class="line">* 代码实现： -- 使用逐步推到</span><br></pre></td></tr></table></figure>
<p>public class InsertSort {<br>  public static void main(String[] args) {</p>
<pre><code>int[] arr = {101,34,119,1};
insertSort(arr);</code></pre><p>  }</p>
<p>  //插入排序<br>  public static void insertSort(int[] arr) {</p>
<pre><code>//使用逐步推到
//第一轮

//定义待插入的数
int insertVal = arr[1];
int insertIndex = 1 - 1; //即前面这个数的下标

//给insertVal找到插入的位置
//insertIndex &gt;= 0 保障在给insertVal 找到插入位置，下标不越界
//insertVal &lt; arr[insertIndex] 待插入的数，还没有找到插入的位置
while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) {
    arr[insertIndex + 1] = arr[insertIndex]; //后移
    insertIndex--;
}
//当退出while循环时，说明插入的位置找到，insertIndex+1；
//就是说如果不满足 insertVal &lt; arr[insertIndex]  34是334时，334&gt;101 就插入到有序列表的后面索引+1
arr[insertIndex+1] = insertVal;
System.out.println(&quot;第一轮结果 ：&quot;);
System.out.println(Arrays.toString(arr));</code></pre></li>
</ul>
<pre><code>    //第二轮
    //定义待插入的数
    insertVal = arr[2];
    insertIndex = 2 - 1; //即前面这个数的下标

    //给insertVal找到插入的位置
    //insertIndex &gt;= 0 保障在给insertVal 找到插入位置，下标不越界
    //insertVal &lt; arr[insertIndex] 待插入的数，还没有找到插入的位置
    while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) {
        arr[insertIndex + 1] = arr[insertIndex]; //后移
        insertIndex--;
    }
    //当退出while循环时，说明插入的位置找到，insertIndex+1；
    //就是说如果不满足 insertVal &lt; arr[insertIndex]  34是334时，334&gt;101 就插入到有序列表的后面索引+1
    arr[insertIndex+1] = insertVal;
    System.out.println(&quot;第二轮结果 ：&quot;);
    System.out.println(Arrays.toString(arr));

    //第三轮

    //定义待插入的数
    insertVal = arr[3];
    insertIndex = 3 - 1; //即前面这个数的下标

    //给insertVal找到插入的位置
    //insertIndex &gt;= 0 保障在给insertVal 找到插入位置，下标不越界
    //insertVal &lt; arr[insertIndex] 待插入的数，还没有找到插入的位置
    while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) {
        arr[insertIndex + 1] = arr[insertIndex]; //后移
        insertIndex--;
    }
    //当退出while循环时，说明插入的位置找到，insertIndex+1；
    //就是说如果不满足 insertVal &lt; arr[insertIndex]  34是334时，334&gt;101 就插入到有序列表的后面索引+1
    arr[insertIndex+1] = insertVal;
    System.out.println(&quot;第三轮结果 ：&quot;);
    System.out.println(Arrays.toString(arr));
}
}</code></pre><p>}</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>代码实现：for循环实现</span><br></pre></td></tr></table></figure>
<p>//使用for循环<br>        for (int i = 0; i &lt; arr.length; i++) {<br>            //定义待插入的数<br>            int insertVal = arr[i];<br>            int insertIndex = i - 1; //即前面这个数的下标</p>
<pre><code>//给insertVal找到插入的位置
//insertIndex &gt;= 0 保障在给insertVal 找到插入位置，下标不越界
//insertVal &lt; arr[insertIndex] 待插入的数，还没有找到插入的位置
while (insertIndex &gt;= 0 &amp;&amp; insertVal &lt; arr[insertIndex]) {
    arr[insertIndex + 1] = arr[insertIndex]; //后移
    insertIndex--;
}
//当退出while循环时，说明插入的位置找到，insertIndex+1；
//就是说如果不满足 insertVal &lt; arr[insertIndex]  34是334时，334&gt;101 就插入到有序列表的后面索引+1
arr[insertIndex+1] = insertVal;
System.out.println(&quot;第&quot;+i+&quot;结果 ：&quot;);
System.out.println(Arrays.toString(arr));</code></pre><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>代码优化：</span><br></pre></td></tr></table></figure>
<pre><code>//此处添加判断，代码优化
 if (insertIndex+1 != i) {  //334&gt;101 位置不需要改变 insertIndex+1 == i
        arr[insertIndex + 1] = insertVal; 
    }</code></pre><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#### 希尔排序算法介绍：</span></span><br><span class="line"><span class="bullet">* </span>希尔排序是希尔(Donald Shell)于1959年提出的一种排序算法。排序算法也是一种插入排序，它是简单插入排序经过改进的一个更有效的版本，也称为缩小增量排序。</span><br><span class="line"><span class="bullet">* </span>希尔排序法基本思想</span><br><span class="line"><span class="bullet">  * </span>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序，随着增量逐渐减少，每组包含的关键词越来越多，当增量减少至1时，整个文件恰被分成一组，算法便终止</span><br><span class="line"><span class="bullet">* </span>代码实现：--希尔交换式(效率低)--逐步推到</span><br></pre></td></tr></table></figure>
<p>public class ShellSort {</p>
<pre><code>public static void main(String[] args) {
    int[] arr = {8,9,1,7,2,3,5,4,6,0};
    shellsort(arr);

}

//使用逐步推到
//交换法
public static void shellsort(int[] arr){

    int temp = 0;
    //第一轮
    //是将10个数据分成5组 10/2=5
    //i 表示步长
    for (int i = 5; i &lt; arr.length; i++) {
        //遍历个组中的元素(共5组，每组两个元素)，步长为5
        for (int j = i - 5; j &gt;= 0 ; j -= 5) {
            //j -= 5 遍历每组第一个元素后，在遍历第二个元素时会向后移动5步
            //如果当前元素大于加上步长后的那个元素，说明交换
            if(arr[j] &gt; arr[j +5]){
                temp = arr[j];
                arr[j] = arr[j+5];
                arr[j+5] = temp;
            }
        }
    }
    System.out.println(&quot;第一轮结果：&quot;+ Arrays.toString(arr));

    //第二轮
    //是将10个数据分成2组
    for (int i = 2; i &lt; arr.length; i++) {
        //遍历个组中的元素(共2组，每组5个元素)，步长为2
        for (int j = i - 2; j &gt;= 0 ; j -= 2) {
            //j -= 5 遍历每组第一个元素后，在遍历第二个元素时会向后移动5步
            //如果当前元素大于加上步长后的那个元素，说明交换
            if(arr[j] &gt; arr[j +2]){
                temp = arr[j];
                arr[j] = arr[j+2];
                arr[j+2] = temp;
            }
        }
    }
    System.out.println(&quot;第二轮结果：&quot;+ Arrays.toString(arr));


    //第三轮
    //是将10个数据分成一组
    for (int i = 1; i &lt; arr.length; i++) {
        //遍历个组中的元素(共1组，)，步长为1
        for (int j = i - 1; j &gt;= 0 ; j -= 1) {
            //j -= 1 遍历每组第一个元素后，在遍历第二个元素时会向后移动1步
            //如果当前元素大于加上步长后的那个元素，说明交换
            if(arr[j] &gt; arr[j +1]){
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
    System.out.println(&quot;第三轮结果：&quot;+ Arrays.toString(arr));

}</code></pre><p>}</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">* 优化：<span class="comment">--for循环</span></span><br></pre></td></tr></table></figure>
<p> int temp = 0;-<br> int count =1;</p>
<pre><code>//代码优化
 for (int step = arr.length / 2; step &gt; 0; step /= 2) {
     for (int i = step; i &lt; arr.length; i++) {
         //遍历个组中的元素(共2组，每组5个元素)，步长为2
         for (int j = i - step; j &gt;= 0 ; j -= step) {
             //j -= 5 遍历每组第一个元素后，在遍历第二个元素时会向后移动5步
             //如果当前元素大于加上步长后的那个元素，说明交换
             if(arr[j] &gt; arr[j + step]){
                 temp = arr[j];
                 arr[j] = arr[j+step];
                 arr[j+step] = temp;
             }
         }
     }
     System.out.println(&quot;第&quot;+ count++ +&quot;轮结果：&quot;+ Arrays.toString(arr));</code></pre><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">*</span> <span class="comment">代码实现：</span>--<span class="comment">希尔移位式(效率高)</span>--<span class="comment">逐步推到</span>  <span class="comment">时间短</span></span><br></pre></td></tr></table></figure>
<p> //移位式<br>    public static void shellSort2(int[] arr){<br>        int  count = 1;<br>        //增量步长step，并逐步缩小增量<br>        for (int step = arr.length / 2; step &gt; 0; step /= 2) {</p>
<pre><code>        //从step个元素，逐个对其所在的组进行直接插入排序
        for (int i = step; i &lt; arr.length; i++) {
            int j = i;
            int temp = arr[j];
            if (arr[j] &lt; arr[j -step]){
                while(j-step &gt;= 0 &amp;&amp; temp &lt; arr[j - step]){
                    //移动
                    arr[j] = arr[j - step];
                    j -= step;
                }
                //退出循环就表示找到位置
                arr[j] = temp;
            }
        }
       //System.out.println(&quot;第&quot;+ count++ +&quot;轮结果：&quot;+ Arrays.toString(arr));
    }
}</code></pre><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### 快速排序</span><br><span class="line">* 基本介绍：</span><br><span class="line">  * 快速排序(Quicksort)是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两部份，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按照此方法对这两部分数据分别进行快速排序，整个排序过程可以是递归进行，以此达到整个数据变成有序序列</span><br><span class="line">  * 代码实现</span><br></pre></td></tr></table></figure>
<p>  public class QuickSort {<br>    public static void main(String[] args) {<br>        int[] arr ={-9,78,0,23,-567,70,-1,900,4561};<br>        quicksort(arr,0,arr.length-1);</p>
<pre><code>    System.out.println(Arrays.toString(arr));
}

//快速排序
public static void quicksort(int[] arr,int left,int right){
    int l = left;  //左下标
    int r = right; //右下标

    int privot = arr[(right + left)/2];  //中轴值
    int temp = 0; //辅助变量，作为交换时使用
    //while目的 是让比privot 值小的放到左边  值大放到右边
    while (r &gt; l){
        //在privot的左边一直找，找到大于等于privot的值，才退出
        while(arr[l] &lt; privot){
            l += 1;
        }

        //在privot的右边一直找，找到小于等于privot的值，才退出
        while(arr[r] &gt; privot){
            r -= 1;
        }
        /*
        * 如果l &gt;= r 说明privot的左右两边的值，已经按照左边全部是小于等于peivot的值
        * 右边全部是大于等于privot的值
        * */
        if (l &gt;= r){
            break;
        }

        //交换
        temp = arr[l];
        arr[l] = arr[r];
        arr[r] = temp;

        //如果交换后，发现这个arr[l] == privot值 r--；前移
        if (arr[l] == privot){
            r -= 1;
        }
        //如果交换后，发现这个arr[r] == privot值 l--；后移
        if (arr[r] == privot){
            l += 1;
        }
    }

    //如果l==r，必须l++，r--，否则会出现栈溢出
    if (l==r){
        l += 1;
        r -= 1;
   }
    //向左递归
    if (left &lt; r){
        quicksort(arr,left,r);
    }

    //向右递归
    if (right &gt; l){
        quicksort(arr,l,right);
    }
}</code></pre><p>  }<br>  <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### 归并排序</span><br><span class="line">* 归并排序介绍：</span><br><span class="line">  归并排序(MERGE-SORT)是利用归并的思想实现的排序方法，该算法采用经典的分治(divide-and-conquer)策略(分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的个答案“修补”在一起，即分而治之)。 </span><br><span class="line">  * 代码实现：</span><br></pre></td></tr></table></figure><br>  package com.zhao.sort;</p>
<pre><code>import java.util.Arrays;

public class MergetSort {
    public static void main(String[] args) {
        int[] arr = {8,4,5,7,1,3,6,2,0,23};
        int[] temp = new int[arr.length];
        mergetsort(arr,0,arr.length-1,temp);

        System.out.println(&quot;归并排序：&quot;+ Arrays.toString(arr));
    }


    //分
    public static void mergetsort(int[] arr,int left,int right,int[] temp){
        if(left &lt; right){
            int mid = (left + right)/2;//中间索引
            //向左递归进行分解
            mergetsort(arr,left,mid,temp);
            //向右递归进行分解
            mergetsort(arr,mid+1,right,temp);
            //到合并
            merget(arr,left,mid,right,temp);
        }
    }

    //合并，即治的过程
    /*
    * int[] arr, 排序的原始数组
    * int left,  左边的有序序列的初始缩影
    * int mid,   中间索引
    * int right,  右边索引
    * int[] temp  中转，辅助数组
    * */
    public static void merget(int[] arr,int left,int mid,int right,int[] temp){
        for (int m = 1; m &lt; arr.length; m++) {
            System.out.println(&quot;次数：&quot;+ (m++));
        }
        int i = left; //初始化i，左边有序序列的初始索引
        int j = mid + 1; //初始化j，右边有序序列的初始索引
        int t = 0; //指向辅助数组的当前索引

        //先把左右两边的数据按规则填充到temp，直到左右有序序列有一边结束
        while(i &lt;= mid &amp;&amp; j &lt;= right){//表示还没到一边结束
            if(arr[i] &lt;= arr[j]){
                temp[t] = arr[i];
                t++;
                i++;
            }else{
                temp[t] = arr[j];
                t++;
                j++;
            }
        }
        //把剩余数据的一边的剩余数据依次全部填充到temp
        while(i &lt;= mid){
            temp[t] = arr[i];
            t++;
            i++;
        }
        while (j &lt;= right){
            temp[t] = arr[j];
            t++;
            j++;
        }
        //将temp中元素copy到arr
        //并不是每次都copy所有的
        t = 0;
        int tempLeft = left;
        //注意：第一次合并tempLeft = 0，right =1
        //最后一次tempLeft = 0，right = 7；
        while(tempLeft &lt;= right){
            arr[tempLeft] = temp[t];
            t++;
            tempLeft++;
        }
    }
}</code></pre>  <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">  * 注意：归并排序是线性增长的，时间复杂度线性对数阶O(nlog?N)，速度跟快速排序差不多</span></span><br><span class="line">### 基数排序</span><br><span class="line"><span class="comment">  * 基数排序(桶排序)介绍：</span></span><br><span class="line">    1. 基数排序(radix <span class="keyword">sort</span>)属于<span class="string">"分派式排序"</span>(distribution <span class="keyword">sort</span>),又称<span class="string">"桶子法"</span>(bucket <span class="keyword">sort</span>)或bin <span class="keyword">sort</span>，故名思义，他是通过键值的各个位的值，将要排序的元素分配至某些<span class="string">"桶"</span>中，达到排序作用</span><br><span class="line">    2. 基数排序法是属于稳定性的排序，基数排序法是效率高稳定性的排序法</span><br><span class="line">    3. 基数排序(Radix <span class="keyword">sort</span>)是桶排序的扩展</span><br><span class="line">    4. 基数排序是1887年赫尔曼.何乐礼发明的。他是这样实现的：将整数按位数切成不同的的数字，然后按每个位数分别比较</span><br><span class="line"><span class="comment">  * 基数排序基本思想：</span></span><br><span class="line">    1. 将所有待比较数值统一为同样的数位长度，数位较短的数前面补零，然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列</span><br><span class="line">    2. 有10个桶每个桶就是一个一维数组，整体就是二维数组，第一轮排序个位起按个位数值入桶，然后重新按桶中元素顺序取出入数列，依次迭代，迭代次数位最大数的位数 </span><br><span class="line"><span class="comment">  * 代码实现：逐步推导</span></span><br></pre></td></tr></table></figure>
<pre><code>import java.lang.reflect.Array;
import java.util.Arrays;

/*
* 基数排序
* */
public class RadixSort {
    public static void main(String[] args) {
        int[] arr = {53,3,542,748,14,214};
        radixSort(arr);
    }
    //基数排序
    public static void radixSort(int[] arr){

        //逐步推导
        //第一轮排序

        //定义一个二维数组(包含10个一维数组，即桶)表示桶
        //防止在放入数的时候，数据溢出，每个桶大小为arr.length,空间换时间
        int[][] bucket = new int[10][arr.length];

        //为了记录每个桶中，实际存放了多少个数据，我们定义一个一维数组来记录各个桶每次放入的数据个数
        //可以理解
        //比如：bucketElementCounts[0],记录的就是bucket[0][0]桶中放入元素的个数
        int[] bucketElementCounts = new int[10];

        //第一轮(针对每个元素的个位进行排序处理)
        for (int j = 0; j &lt; arr.length; j++) {
            //去除每个元素的个数
            int digitOfDlement = arr[j] % 10;
            //放入到对应的桶中
            bucket[digitOfDlement][bucketElementCounts[digitOfDlement]] = arr[j];
            bucketElementCounts[digitOfDlement]++;
        }
        //按照这个桶顺序依次取出数据放入原来的数组。
        int index = 0;
        //遍历每一个桶并将桶中的数据 ，放入到原数组
        for (int k = 0; k &lt; bucket.length; k++) {
            //如果桶种有数据，我们才放入原数组。
            if (bucketElementCounts[k] != 0){
                //循环该桶即第K个桶(即第k个一维数组)
                for (int l = 0; l &lt; bucketElementCounts[k]; l++) {
                    //取出元素，放入到arr
                    arr[index++] = bucket[k][l];

                }
            }
            //第一轮处理后，需要将每个bucketElementCounts = 0，至零
            bucketElementCounts[k] = 0;
        }
        System.out.println(&quot;第一轮，对个位数的排序处理arr=&quot;+ Arrays.toString(arr));


        //第二轮排序

        //第二轮(针对每个元素的十位进行排序处理)
        for (int j = 0; j &lt; arr.length; j++) {
            //去除每个元素的十数
            int digitOfDlement = arr[j] / 10 % 10;
            //放入到对应的桶中
            bucket[digitOfDlement][bucketElementCounts[digitOfDlement]] = arr[j];
            bucketElementCounts[digitOfDlement]++;
        }
        //按照这个桶顺序依次取出数据放入原来的数组。
        index = 0;
        //遍历每一个桶并将桶中的数据 ，放入到原数组
        for (int k = 0; k &lt; bucket.length; k++) {
            //如果桶种有数据，我们才放入原数组。
            if (bucketElementCounts[k] != 0){
                //循环该桶即第K个桶(即第k个一维数组)
                for (int l = 0; l &lt; bucketElementCounts[k]; l++) {
                    //取出元素，放入到arr
                    arr[index++] = bucket[k][l];

                }
            }
            //第二轮处理后，需要将每个bucketElementCounts = 0，至零
            bucketElementCounts[k] = 0;
        }
        System.out.println(&quot;第二轮，对个位数的排序处理arr=&quot;+ Arrays.toString(arr));




        //第三轮排序

        //第三轮(针对每个元素的百位进行排序处理)
        for (int j = 0; j &lt; arr.length; j++) {
            //去除每个元素的百数
            int digitOfDlement = arr[j] / 100 % 10;
            //放入到对应的桶中
            bucket[digitOfDlement][bucketElementCounts[digitOfDlement]] = arr[j];
            bucketElementCounts[digitOfDlement]++;
        }
        //按照这个桶顺序依次取出数据放入原来的数组。
        index = 0;
        //遍历每一个桶并将桶中的数据 ，放入到原数组
        for (int k = 0; k &lt; bucket.length; k++) {
            //如果桶种有数据，我们才放入原数组。
            if (bucketElementCounts[k] != 0){
                //循环该桶即第K个桶(即第k个一维数组)
                for (int l = 0; l &lt; bucketElementCounts[k]; l++) {
                    //取出元素，放入到arr
                    arr[index++] = bucket[k][l];

                }
            }
            //第三轮处理后，需要将每个bucketElementCounts = 0，至零
            bucketElementCounts[k] = 0;
        }
        System.out.println(&quot;第三轮，对个位数的排序处理arr=&quot;+ Arrays.toString(arr));
    }
}</code></pre>  <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>代码优化：</span><br></pre></td></tr></table></figure>
<p>  /*<br>    * 基数排序<br>    * */<br>    public class RadixSort {<br>        public static void main(String[] args) {<br>    //        int[] arr = {53,3,542,748,14,214};<br>            int[] arr = new int[80000000];<br>            for (int i = 0; i &lt; 80000000; i++) {<br>                arr[i] = (int)(Math.random() * 8000000);//生成[0,80000]<br>            }<br>            System.out.println(“排序前：”);<br>            Date date1 = new Date();<br>            SimpleDateFormat dateFormat = new SimpleDateFormat(“yyyy-MM-dd HH:mm:ss”);<br>            String s = dateFormat.format(date1);<br>            System.out.println(“排序前的时间：”+s);</p>
<pre><code>        radixSort(arr);

        Date date2 = new Date();
        String s1 = dateFormat.format(date2);
        System.out.println(&quot;排序后时间：&quot;+s1);

    }
    //基数排序
    public static void radixSort(int[] arr){
        //定义一个二维数组(包含10个一维数组，即桶)表示桶
        //防止在放入数的时候，数据溢出，每个桶大小为arr.length,空间换时间
        int[][] bucket = new int[10][arr.length];

        //为了记录每个桶中，实际存放了多少个数据，我们定义一个一维数组来记录各个桶每次放入的数据个数
        //可以理解
        //比如：bucketElementCounts[0],记录的就是bucket[0][0]桶中放入元素的个数
        int[] bucketElementCounts = new int[10];

        //得到数组中最大数的位数
        int max = arr[0]; //假设第一个数就是最大数
        for (int i = 0; i &lt; arr.length; i++) {
            if (arr[i] &gt; max){
                max = arr[i];
            }
        }
        //得到最大数的位数
        int maxLength = (max + &quot; &quot;).length()-1;

        //使用循环处理代码
        for (int m = 0, n =1; m &lt; maxLength; m++,n*=10) {

            //(针对每个元素的位置进行排序处理)
            for (int j = 0; j &lt; arr.length; j++) {
                //去除每个元素的对应位置的值
                int digitOfDlement = arr[j] / n % 10;
                //放入到对应的桶中
                bucket[digitOfDlement][bucketElementCounts[digitOfDlement]] = arr[j];
                bucketElementCounts[digitOfDlement]++;
            }
            //按照这个桶顺序依次取出数据放入原来的数组。
            int index = 0;
            //遍历每一个桶并将桶中的数据 ，放入到原数组
            for (int k = 0; k &lt; bucket.length; k++) {
                //如果桶种有数据，我们才放入原数组。
                if (bucketElementCounts[k] != 0){
                    //循环该桶即第K个桶(即第k个一维数组)
                    for (int l = 0; l &lt; bucketElementCounts[k]; l++) {
                        //取出元素，放入到arr
                        arr[index++] = bucket[k][l];

                    }
                }
                //第m+1轮处理后，需要将每个bucketElementCounts = 0，至零
                bucketElementCounts[k] = 0;
            }
        // System.out.println(&quot;第&quot;+(m+1)+&quot;轮，排序处理arr=&quot;+ Arrays.toString(arr));
        }
    }
}</code></pre><pre><code>  * 注意：java.lang.OutOfMemoryError: Java heap space 异常内存不够用
    比如：80000000个数据 * 11数组 * 4字节 /1024/1024/1024 = 3.3G的内存
* 说明：
  1. 基数排序是对传统的桶排序的扩展，速度很快
  2. 基数排序是经典的空间换时间的方式，占用内存大，当对海量数据进行排序时，容易造成OutOfMemoryError。
  3. 基数排序时稳定的。
### 堆排序：
* 



### 常用排序算法总结和对比
排序算法|平均时间复杂度|最好情况|最坏情况|空间复杂度|排序方式|稳定性
---|:--:|---:|---:|---:|---:|---:
冒泡排序|O(n^2)|O(n)|O(n^2)|O(1)|In-place|稳定
选择排序|O(n^2)|O(n^2)|O(n^2)|O(1)|In-place|不稳定
插入排序|O(n^2)|O(n)|O(n^2)|O(1)|In-place|稳定
希尔排序|O(nlogn)|O(nlog^2n)|O(nlog^2n)|O(1)|In-place|不稳定
归并排序|O(nlogn)|O(nlogn)|O(nlogn)|O(n)|out-place|稳定
快速排序|O(nlogn)|O(nlogn)|O(n^2)|O(logn)|In-place|不稳定
堆排序|O(nlogn)|O(nlogn)|O(nlogn)|O(1)|In-place|不稳定
计数排序|O(n+k)|O(n+k)|O(n+k)|O(k)|out-place|稳定
桶排序|O(n+k)|O(n+k)|O(n^2)|O(n+k)|out-place|稳定
基数排序|O(n*k)|O(n*k)|O(n*k)|O(n+k)|out-place|稳定
* 相关术语解释： 
  1. 稳定：如果a原来在b前面，而a=b，排序后a仍然在b前面；
  2. 不稳定：如果a原来在b前面，而a=b，排序后a可能在b后面；
  3. 内排序：所有排序都在内存中完成
  4. 外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能完成
  5. 时间复杂度：一个算法执行所消耗的时间
  6. 空间复杂度：运行完成一个程序所需内存大小
  7. n：数据模型
  8. k：&quot;桶&quot;的个数
  9. In-place：不占用额为内存
  10. out-place：占用额为内存</code></pre>]]></content>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构和算法+递归</title>
    <url>/2020/05/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul>
<li>基本介绍：</li>
<li>递归就是方法自己调用自己，每次调用时传入不同的变量，递归有助于编程者解决复杂的问题，同时可以让代码变得简洁。</li>
<li>递归调用机制：<br>1.JVM虚拟机：有堆空间，栈空间，代码区/常量<br>2.递归调用规则：<br>3.当一个程序执行到一个方法时，就会在栈空间里开辟一个独立的空间(栈)，</li>
<li>递归需要遵守的规则：<br>1.执行一个方法时，就创建一个新的受保护的独立空间(栈空间)；<br>2.方法的局部变量是独立的，不会相互影响<br>3.如果方法中使用的是引用类型的变量，就会共享该引用类型的数据；<br>4.递归必须向退出递归的条件逼近，否则就是无限递归，死归了，异常栈溢出StackOverFlowError；<br>5.当一个方法执行完毕，或者遇到return，就会返回，遵守谁调用，就会将结果返回谁，同时当方法执行完毕或者返回时，该方法也会就执行完毕。<h3 id="递归–》迷宫回溯问题分析和实现"><a href="#递归–》迷宫回溯问题分析和实现" class="headerlink" title="递归–》迷宫回溯问题分析和实现"></a>递归–》迷宫回溯问题分析和实现</h3></li>
<li>二维数组模拟迷宫</li>
<li>代码实现<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">package com.zhao.recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">MiGong</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先先创建一个二维数组，模拟迷宫</span></span><br><span class="line">        <span class="built_in">int</span>[][] map = new <span class="built_in">int</span>[<span class="number">8</span>][<span class="number">7</span>];</span><br><span class="line">        <span class="comment">//使用1表示墙</span></span><br><span class="line">        <span class="comment">//上下全部设置为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            map[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">            map[<span class="number">7</span>][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左右设置为1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span> ; i++) &#123;</span><br><span class="line">            map[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            map[i][<span class="number">6</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置挡板</span></span><br><span class="line">        map[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        map[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出地图</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-------------地图—————————————————"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.print(map[i][j] + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找路</span></span><br><span class="line">        setWay(map,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出新的地图，小球走过，并标识的递归地图</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-------------标识地图—————————————————"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++) &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.print(map[i][j] + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用递归回溯来给小球找路</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * map 表示地图</span></span><br><span class="line"><span class="comment">    * i，j 表示从哪个位置开始位置map【i】【j】</span></span><br><span class="line"><span class="comment">    * 如果找到通路map【6】【5】就返回true，否则返回false</span></span><br><span class="line"><span class="comment">    * 约定：</span></span><br><span class="line"><span class="comment">    * 当map【i】【j】为0时表示该点没有走过，为1时表示墙，为2时表示通路，3表示已走过不通</span></span><br><span class="line"><span class="comment">    * 迷宫策略：下-》右-》上—》左，如果该点走不通，再回朔</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">bool</span>ean setWay(<span class="built_in">int</span>[][] map,<span class="built_in">int</span> i,<span class="built_in">int</span> j)&#123;</span><br><span class="line">        <span class="keyword">if</span> (map[<span class="number">6</span>][<span class="number">5</span>] == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//已找到</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (map[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//如果当前这个点还没有走过</span></span><br><span class="line">                <span class="comment">//按照策略走</span></span><br><span class="line">                map[i][j] = <span class="number">2</span>; <span class="comment">//假定该点可以走通</span></span><br><span class="line">                <span class="keyword">if</span> (setWay(map,i+<span class="number">1</span>,j))&#123; <span class="comment">//向下走i+1</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map,i,j+<span class="number">1</span>))&#123;<span class="comment">//向右走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map,i<span class="number">-1</span>,j))&#123; <span class="comment">//向上走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(setWay(map,i,j<span class="number">-1</span>))&#123;<span class="comment">//向左走</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//说明该点走不通，是死路</span></span><br><span class="line">                    map[i][j] = <span class="number">3</span>;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果map[i][j] != 0,可能是1，2，3</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>结果<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">-------------地图—————————————————</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line">-------------标识地图—————————————————</span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="递归–》八皇后问题"><a href="#递归–》八皇后问题" class="headerlink" title="递归–》八皇后问题"></a>递归–》八皇后问题</h3></li>
<li>八皇后问题基本介绍：</li>
<li>八皇后问题，是回溯算法典型的案例。该问题是国际西洋棋手提出：在8*8格的国际象棋上摆方8个皇后，使其不能互相攻击，即：任意两个皇后都不能处于同一行，同一列或同一斜线上，问有多少中摆法。</li>
<li>思路分析：<br>1.第一个皇后先放第一行第一列<br>2.第二个皇后放在第二行第一列，然后判断是否OK，如果不OK，继续放在第二列,第三列，依次把所有的列都放完，找一个合适的<br>3.继续第三个皇后，还是第一列，第二列…直到第8个皇后也能放在一一个不冲突的位置，算是找到一个正确的解;<br>4.当得到一个正确的解释，在栈回退到上一个栈时，就会开始回溯，即将第一个皇后，放到第一列的所有正确解，全部得到。<br>5.然后回头继续第一个皇后放在第二列，后面继续循环执行1，2，3，4的步骤<ul>
<li>说明：<br>1.理论上应该创建一个二维数组来表示棋盘，但是实际上可以通过算法，用一个一维数组即可解决问题。<br>2.arr[8]={0,4,7,5,2,6,1,3};//对应arr的下标表示第几行，即第几个皇后，arr[i]=val;val表示第i+1个皇后，放在第i+1行的第val+1列</li>
</ul>
</li>
<li>代码实现<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuangHou8</span> &#123;</span></span><br><span class="line">    <span class="comment">//定义一个max表示共有多少个皇后</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">max</span> = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">//数组表示结果 arr[8]=&#123;0,4,7,5,2,6,1,3&#125;;</span></span><br><span class="line">    <span class="keyword">int</span>[] <span class="built_in">array</span> = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="built_in">max</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> judgeCount = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        HuangHou8 huangHou8 = <span class="keyword">new</span> HuangHou8();</span><br><span class="line">        huangHou8.check(<span class="number">0</span>);</span><br><span class="line">        System.out.<span class="built_in">printf</span>(<span class="string">"一共有%d解法"</span>,count);</span><br><span class="line">         System.out.<span class="built_in">printf</span>(<span class="string">"一共判断%d次"</span>,judgeCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法，可以将皇后拜访结果返回</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">array</span>.length; i++) &#123;</span><br><span class="line">            System.out.<span class="built_in">print</span>(<span class="built_in">array</span>[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="built_in">println</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看当我们放置第n个皇后，就去检测该皇后是否和前面已经摆放的皇后是否冲突</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        judgeCount++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//注意：在用一个一维数组表示，棋盘位置皇后的位置为数组中元素 array[i] == array[n] 4 == 4 在同一列</span></span><br><span class="line">            <span class="comment">// Math.abs(n-i) == Math.abs(array[n] - array[i]) 表示列差==行差或者可以说皇后位置的差==皇后个数的差，时在同一斜线上</span></span><br><span class="line">            <span class="comment">//由于i在递增所以不可能在同一行</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">array</span>[i] == <span class="built_in">array</span>[n] || Math.<span class="built_in">abs</span>(n-i) == Math.<span class="built_in">abs</span>(<span class="built_in">array</span>[n] - <span class="built_in">array</span>[i]))&#123;</span><br><span class="line">                <span class="comment">//array[i] == array[n]表示在同一列  Math.abs(n-i) == Math.abs(array[n] - array[i])在同一斜线上</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放置第n个皇后的方法</span></span><br><span class="line">    <span class="comment">//特别注意：check是每一次递归时，进入到cheak中都有 for (int i = 0; i &lt; n; i++) 因此会有回溯</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="built_in">max</span>)&#123; <span class="comment">//n == 8其实8个皇后以放置好</span></span><br><span class="line">            <span class="built_in">print</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 依次放入皇后，判断是否冲突</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">max</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//先把当前这个皇后n，放到该行第一列</span></span><br><span class="line">            <span class="built_in">array</span>[n] = i;</span><br><span class="line">            <span class="comment">//判断当放置第n个皇后到i时，是否冲突</span></span><br><span class="line">            <span class="keyword">if</span> (judge(n))&#123;<span class="comment">//不冲突</span></span><br><span class="line">                <span class="comment">//接着放置第n个皇后，即开始递归</span></span><br><span class="line">                check(n+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果冲突，就继续执行array[n] == i;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>结果：<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">0</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> </span><br><span class="line"><span class="number">0</span> <span class="number">6</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> </span><br><span class="line"><span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">0</span> <span class="number">6</span> <span class="number">3</span> <span class="number">7</span> <span class="number">2</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">4</span> <span class="number">0</span> <span class="number">3</span> </span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">4</span> <span class="number">7</span> <span class="number">0</span> <span class="number">3</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">7</span> <span class="number">0</span> <span class="number">6</span> <span class="number">3</span> <span class="number">5</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> <span class="number">6</span> <span class="number">0</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span> <span class="number">0</span> <span class="number">6</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span> <span class="number">4</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> <span class="number">0</span> <span class="number">7</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">1</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">0</span> <span class="number">3</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">0</span> <span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span> <span class="number">0</span> <span class="number">3</span> <span class="number">5</span> </span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> <span class="number">0</span> <span class="number">4</span> </span><br><span class="line"><span class="number">2</span> <span class="number">7</span> <span class="number">3</span> <span class="number">6</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span> </span><br><span class="line"><span class="number">3</span> <span class="number">0</span> <span class="number">4</span> <span class="number">7</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">3</span> <span class="number">0</span> <span class="number">4</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">6</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">0</span> <span class="number">4</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">4</span> <span class="number">0</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> <span class="number">0</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> </span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">0</span> <span class="number">4</span> <span class="number">1</span> <span class="number">7</span> <span class="number">2</span> <span class="number">6</span> </span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> </span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span> </span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">0</span> <span class="number">7</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">2</span> <span class="number">7</span> <span class="number">1</span> <span class="number">4</span> <span class="number">0</span> <span class="number">5</span> </span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">7</span> </span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> </span><br><span class="line"><span class="number">3</span> <span class="number">7</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line"><span class="number">3</span> <span class="number">7</span> <span class="number">0</span> <span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">3</span> <span class="number">7</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span> </span><br><span class="line"><span class="number">4</span> <span class="number">0</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> </span><br><span class="line"><span class="number">4</span> <span class="number">0</span> <span class="number">7</span> <span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">4</span> <span class="number">0</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">6</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">0</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">0</span> <span class="number">6</span> <span class="number">3</span> <span class="number">7</span> <span class="number">2</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">7</span> <span class="number">0</span> <span class="number">3</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">6</span> </span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">7</span> <span class="number">3</span> <span class="number">6</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> <span class="number">7</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">7</span> <span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">3</span> <span class="number">0</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">1</span> </span><br><span class="line"><span class="number">4</span> <span class="number">7</span> <span class="number">3</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> </span><br><span class="line"><span class="number">4</span> <span class="number">7</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">0</span> <span class="number">4</span> <span class="number">1</span> <span class="number">7</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">3</span> </span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span> <span class="number">4</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">7</span> <span class="number">3</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">7</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">6</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span> <span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">6</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">3</span> <span class="number">7</span> <span class="number">0</span> <span class="number">4</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span> <span class="number">0</span> <span class="number">3</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">6</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">1</span> <span class="number">4</span> </span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">0</span> <span class="number">4</span> <span class="number">7</span> <span class="number">1</span> <span class="number">6</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">4</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">7</span> </span><br><span class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">6</span> <span class="number">0</span> <span class="number">7</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">2</span> </span><br><span class="line"><span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">7</span> <span class="number">5</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> </span><br><span class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">7</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">3</span> <span class="number">7</span> <span class="number">4</span> </span><br><span class="line"><span class="number">6</span> <span class="number">2</span> <span class="number">0</span> <span class="number">5</span> <span class="number">7</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">6</span> <span class="number">2</span> <span class="number">7</span> <span class="number">1</span> <span class="number">4</span> <span class="number">0</span> <span class="number">5</span> <span class="number">3</span> </span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">7</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">1</span> <span class="number">7</span> <span class="number">5</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span> </span><br><span class="line"><span class="number">6</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">5</span> <span class="number">7</span> <span class="number">1</span> <span class="number">3</span> </span><br><span class="line"><span class="number">7</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">6</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> </span><br><span class="line"><span class="number">7</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> <span class="number">6</span> <span class="number">3</span> <span class="number">5</span> </span><br><span class="line"><span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">5</span> <span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">3</span> </span><br><span class="line"><span class="number">7</span> <span class="number">3</span> <span class="number">0</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">6</span> <span class="number">4</span> </span><br><span class="line">一共有<span class="number">92</span>解法</span><br><span class="line">一共判断<span class="number">15720</span>次,即回溯<span class="number">15720</span>次</span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构和算法+栈</title>
    <url>/2020/05/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E6%A0%88/</url>
    <content><![CDATA[<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><ul>
<li><p>基本介绍： </p>
<ol>
<li>数据结构是一种后入先出(LIFO)的顺序列表</li>
<li>栈(stack)是限制线性表中元素的插入和删除只能在线性表的同一端进行的一种特殊线性表。允许插入和删除的一端，为变化的一端，称为栈顶(Top)，另一端为固定的一端，称为栈底(Bottom);</li>
</ol>
<ul>
<li>入栈，退栈<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> Main &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        <span class="comment">// 1. Initialize a stack.</span></span><br><span class="line">        Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">// 2. Push new element.</span></span><br><span class="line">        s.<span class="keyword">push</span>(<span class="number">5</span>);</span><br><span class="line">        s.<span class="keyword">push</span>(<span class="number">13</span>);</span><br><span class="line">        s.<span class="keyword">push</span>(<span class="number">8</span>);</span><br><span class="line">        s.<span class="keyword">push</span>(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 3. Check if stack is empty.</span></span><br><span class="line">        <span class="keyword">if</span> (s.empty() == <span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.<span class="keyword">println</span>(<span class="string">"Stack is empty!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4. Pop an element.</span></span><br><span class="line">        s.<span class="keyword">pop</span>();</span><br><span class="line">        <span class="comment">// 5. Get the top element.查看此堆栈顶部的对象</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"The top element is: "</span> + s.peek());</span><br><span class="line">        <span class="comment">// 6. Get the size of the stack.</span></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"The size is: "</span> + s.<span class="keyword">size</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>应用案例 —》使用数组模拟栈</p>
<ul>
<li>思路分析</li>
</ul>
<ol>
<li>定义一个top来表示栈定，初始化为-1</li>
<li>入栈的操作，当有数据加入到栈时，top++；stack[top] = data;</li>
<li>出栈的操作，int value = stack[top];top–;return value;<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组模拟栈</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrsyStack</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        Stack <span class="built_in">stack</span> = <span class="keyword">new</span> Stack(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">String</span> key=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="literal">true</span>; <span class="comment">//控制是否退出菜单</span></span><br><span class="line">        <span class="comment">//扫描器</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (loop)&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"show: 表示显示栈"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"exit: 退出程序"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"push: 入栈"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"pop: 出栈"</span>);</span><br><span class="line">            key = scanner.next();</span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"show"</span>:</span><br><span class="line">                    <span class="built_in">stack</span>.show();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"exit"</span>:</span><br><span class="line">                    scanner.<span class="built_in">close</span>();</span><br><span class="line">                    loop = <span class="literal">false</span>;</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"已退出"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"push"</span>:</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"请输入一个数！"</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                    <span class="built_in">stack</span>.push(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"pop"</span>:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">int</span> res = <span class="built_in">stack</span>.pop();</span><br><span class="line">                        System.out.<span class="built_in">printf</span>(<span class="string">"出栈数据%d\n"</span>,res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                        System.out.<span class="built_in">println</span>(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义栈结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] <span class="built_in">stack</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> top = <span class="number">-1</span>; <span class="comment">//栈顶，初始化-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        <span class="built_in">stack</span> = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈满</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == maxSize<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//栈空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top == <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"栈满....."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        top++;</span><br><span class="line">        <span class="built_in">stack</span>[top] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            <span class="comment">//抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"栈空，没有数据"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="built_in">stack</span>[top];</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示栈&#123;遍历栈&#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//遍历时，需要从栈顶开始显示数据</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"栈空....."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从栈顶开始显示数据 i--</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = top; i &gt;= <span class="number">0</span> ; i--) System.out.<span class="built_in">printf</span>(<span class="string">"stack["</span>+i+<span class="string">"]=%d\n"</span>, <span class="built_in">stack</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>应用案例 –》用单链表实现栈</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">* 应用案例---》使用栈完成计算一个表达式的结果(综合计算器)</span><br><span class="line">  * 思路</span><br><span class="line">  <span class="number">1.</span> 创建两个栈，一个存放数，一个存放运算符</span><br><span class="line">  <span class="number">2.</span> 通过index值(索引)，来遍历我们的表达式</span><br><span class="line">  <span class="number">3.</span> 如果扫描到的是数字，就直接入数栈；</span><br><span class="line">  <span class="number">4.</span> 如果扫描到的是运算符，如下处理：</span><br><span class="line">     a. 如果发现当前符号栈为空，就直接入栈</span><br><span class="line">     b. 如果发现当前符号栈为不为空，就进行比较；</span><br><span class="line">     如果当前的操作符的优先级小于或者等于栈中的操作符，就需要从数栈中pop出两个数，</span><br><span class="line">     再从符号栈中pop出一个符号，进行运算将得到的结果入数栈，然后将当前的操作符入符号栈;</span><br><span class="line">     如果相反直接入符号栈。</span><br><span class="line">  <span class="number">5.</span> 当表达式扫描完毕，就顺序的从数栈和符号栈中pop出相应的数和符号，并运算</span><br><span class="line">  <span class="number">6.</span> 最后数栈中只有一个数字，就是表达式结果</span><br></pre></td></tr></table></figure>
<p>  public class Caaulator {</p>
<pre><code>public static void main(String[] args) {

    String expression = &quot;70*10*2/20-50+12+3-4&quot;; //多位数会出错
    //创建两个栈，数栈，符号栈
    Stack1 numberStack = new Stack1(10);
    Stack1 operStack = new Stack1(10);

    //定义相关变量
    int index = 0;//用于扫描
    int num1 = 0;
    int num2 = 0;
    int oper = 0;
    int res = 0;
    char ch = &apos; &apos;; //将每次扫描得到char保存到ch
    String keepnum = &quot;&quot;;//用于拼接多位数
    //开始while循环的扫描expression
    while(true){
        ch = expression.substring(index,index+1).charAt(0);
        //判断ch是么然后做出相应的处理
        if (operStack.isOper(ch)) {//是运算符
            //判断符号栈是否为空
            if (!operStack.isEmpty()){
                // b. 如果发现当前符号栈为不为空，就进行比较；
                //     如果当前的操作符的优先级小于或者等于栈中的操作符，就需要从数栈中pop出两个数，
                //     再从符号栈中pop出一个符号，进行运算将得到的结果入数栈，然后将当前的操作符入符号栈;
                //     如果相反直接入符号栈。
                if(operStack.priority(ch) &lt;= operStack.priority(operStack.peek())){
                    num1 = numberStack.pop();
                    num2 = numberStack.pop();
                    oper = operStack.pop();
                    res = numberStack.cal(num1,num2,oper);
                    numberStack.push(res);
                    operStack.push(ch);
                }else{
                    operStack.push(ch);
                }
            }else{
                //为空直接入栈
                operStack.push(ch);
            }
        }else{
            //numberStack.push(ch - 48); //在Ascll表中字符1，实际数字是49
            /*
            * 分析思路：
            * 1. 当处理多位数是，不能发现是一位数就直接入栈，因其可能是多位数
            * 2. 在处理数时，需要向expression的index，再看一位，如果是数就继续扫描，如果是符号就入栈
            * 3. 因此需要定义变量字符串，用于拼接
            * */

            //处理多位数
            keepnum += ch;

            //如果ch已经是最后一位就直接入栈
            if(index == expression.length() - 1){
                numberStack.push(Integer.parseInt(keepnum));
            }else {
                //判断下一个字符是不是数字是数字就继续扫描，不是数字就如数栈
                //注意是看后一位，不是index++；
                if (operStack.isOper(expression.substring(index + 1, index + 2).charAt(0))) {
                    numberStack.push(Integer.parseInt(keepnum));
                    //重要...keepnum清空
                    keepnum = &quot;&quot;;
                }
            }
        }
        //让index加1，并判断是否扫描到表达式最后
        index++;
        if (index &gt;= expression.length()){
            break;
        }
    }

    //当表达式扫描完毕，就顺序的从数栈中pop出相应的数和符号，并运行
    while (true){
        //如果符号栈为空则表示计算到最后的结果，数栈中只有一个数字{结果}
        if (operStack.isEmpty()){
            break;
        }
        num1 = numberStack.pop();
        num2 = numberStack.pop();
        oper = operStack.pop();
        res = numberStack.cal(num1,num2,oper);
        numberStack.push(res);//入数栈
    }
    //将数栈的最后的结果，pop出，就是结果
    System.out.printf(&quot;表达式 %s = %d&quot;,expression,numberStack.pop());
}</code></pre><p>  }<br>  //定义栈结构<br>  class Stack1{</p>
<pre><code>private int maxSize;
private int[] stack;
private int top = -1; //栈顶，初始化-1

public Stack1(int maxSize){
    this.maxSize = maxSize;
    stack = new int[this.maxSize];
}

//栈满
public boolean isFull(){
    return top == maxSize-1;
}

//栈空
public boolean isEmpty(){
    return top == -1;
}

//入栈
public void push(int value){
    if (isFull()){
        System.out.println(&quot;栈满.....&quot;);
        return;
    }
    top++;
    stack[top] = value;
}

//查看栈顶的值
public int peek(){
    return stack[top];
}
//出栈
public int pop(){
    if (isEmpty()){
        //抛出异常
        throw new RuntimeException(&quot;栈空，没有数据&quot;);
    }
    int value = stack[top];
    top--;
    return value;
}

//显示栈{遍历栈}
public void show(){
    //遍历时，需要从栈顶开始显示数据
    if (isEmpty()){
        System.out.println(&quot;栈空.....&quot;);
        return;
    }
    //从栈顶开始显示数据 i--
    for (int i = top; i &gt;= 0 ; i--) System.out.printf(&quot;stack[&quot;+i+&quot;]=%d\n&quot;, stack[i]);
}

//返回运算符的优先级，优先用数字表示
//数字越大则优先级越高
public int priority(int oper){
    if (oper == &apos;*&apos; || oper ==&apos;/&apos;){
        return 1;
    }else if (oper == &apos;+&apos; || oper == &apos;-&apos;){
        return 0;
    }else{
        return -1;//假定目前的表达式只有+-*、/
    }
}

//判断是不是一个运算符
public boolean isOper(char val){
    return val == &apos;+&apos; || val == &apos;-&apos;|| val == &apos;*&apos; || val == &apos;/&apos;;
}

//计算方法
public int cal(int num1, int num2, int oper){
    int res = 0; //用于存放计算的结果
    switch (oper){
        case &apos;+&apos;:
            res = num1 + num2;
            break;
        case &apos;-&apos;:
            res = num2 - num1;
            break;
        case &apos;*&apos;:
            res = num1 * num2;
            break;
        case &apos;/&apos;:
            res = num2 / num1;
            break;

        default:
        break;
    }
    return res;
}</code></pre><p>  }</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">### 栈结构的应用</span><br><span class="line">* 栈的典型应用</span><br><span class="line">![](images\栈Stack.png)</span><br><span class="line">  1. 逆序输出：输出次序与处理过程颠倒;递归深度和输出长度不易预知</span><br><span class="line">  2. 递归嵌套：具有自相性的问题可递归描述，但分支位置和嵌套深度不固定</span><br><span class="line">  3. 延迟缓冲：线性扫描算法模式中，在预读足够长之后，方能确定可处理的前缀</span><br><span class="line">  4. 栈式计算：基于栈结构的特定计算模式</span><br><span class="line">###  进制转换--逆序输出</span><br><span class="line">* 知识回顾：10进制转换2进制 除以2取余迭代即可(输出自下而上)</span><br></pre></td></tr></table></figure>
<p>  89(十进制)—》1011001(二进制)<br>  2013(十进制) –》(五进制)32013 </p>
  <figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 代码实现<span class="comment">--逆序输出</span></span><br></pre></td></tr></table></figure>
<p>import java.util.Stack;</p>
</li>
</ul>
<p>public class convert {<br>    public static void main(String[] args) {<br>        Stack<Character> stack = new Stack&lt;&gt;();<br>        con(stack,89,16);<br>        while (!stack.empty()){<br>            System.out.printf(“%c”,stack.pop());<br>        }<br>    }</p>
<pre><code>public static void con(Stack&lt;Character&gt; S,int n,int base){
    char[] digit = //新进制下数位符号，可视为base的取值范围适当扩充
            {&apos;0&apos;,&apos;1&apos;,&apos;2&apos;,&apos;3&apos;,&apos;4&apos;,&apos;5&apos;,&apos;6&apos;,&apos;7&apos;,&apos;8&apos;,&apos;9&apos;,&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;D&apos;,&apos;E&apos;,&apos;F&apos;};
    while(n &gt; 0){ //又低到高，逐一计算出新进制下的各位数
        S.push(digit[n % base]);//余数(对应的数位)入栈
        n /= base; //n更新为其对base的除商
    }
}</code></pre><p>}</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">* 注意：  <span class="number">16</span>进制数必须以   <span class="number">0</span>x开头。比如   <span class="number">0x1</span>表示一个<span class="number">16</span>进制数。</span><br><span class="line">  以下是一些用法示例：  </span><br><span class="line">  <span class="built_in">int</span>   a   =   <span class="number">0x100F</span>;  </span><br><span class="line">  <span class="built_in">int</span>   b   =   <span class="number">0x70</span>   +   a;</span><br><span class="line">#### 括号匹配--递归嵌套</span><br><span class="line">* 匹配括号“( ( ( ) ) )”</span><br></pre></td></tr></table></figure>
<p>public class pareent {</p>
<pre><code>public boolean paren(char[] exp, int lo, int hi){ //exp[lo,hi)
    Stack&lt;Character&gt; S = new Stack&lt;&gt;(); //使用栈记录已发现但尚未匹配的左括号
    for (int i = lo; i &lt; hi; i++) { //逐一检查当前字符
        if (&apos;(&apos; == exp[i]) S.push(exp[i]);//遇到左括号则进栈
        else if(!S.empty()) S.pop();//遇到右括号：若栈非空，则弹出左括号
        else return false; //否则（遇到右括号时栈空），必不匹配
    }
    return S.empty();//最终。栈空当且仅当匹配
}</code></pre><p>}</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">String</span> s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(s==null || <span class="string">""</span>.equals(s)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用栈保存 (，[，&#123;</span></span><br><span class="line">        Stack&lt;Character&gt; <span class="built_in">stack</span> = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line">        <span class="comment">//map中保存的是 ):(, ]:[,&#125;:&#123;</span></span><br><span class="line">        <span class="comment">//当遍历到 )时候就会去map中找对应的value，也就是(</span></span><br><span class="line">        <span class="comment">//再用这个value和stack弹出的元素比较，如果相等则匹配上，不等则返回false</span></span><br><span class="line">        <span class="comment">//这里也可以用数组来存，为了简单就用map表示了</span></span><br><span class="line">        HashMap&lt;Character,Character&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;Character,Character&gt;();</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">')'</span>,<span class="string">'('</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">']'</span>,<span class="string">'['</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">'&#125;'</span>,<span class="string">'&#123;'</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="comment">//如果map中不包含 (,[,&#123;，就将这个字符放入栈中</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">map</span>.containsKey(c)) &#123;</span><br><span class="line">                <span class="built_in">stack</span>.add(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果遍历的字符不在map中，也就是说这个字符是),],&#125;，那么就要跟栈中的元素比较</span></span><br><span class="line">                <span class="comment">//首先要判断栈是否为空，如果输入的字符是 )() ，那么当遍历到第一个)时，栈为空</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">stack</span>.<span class="built_in">size</span>()==<span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//取出栈顶的元素</span></span><br><span class="line">                Character tmp = <span class="built_in">stack</span>.pop();</span><br><span class="line">                <span class="comment">//假设当前遍历到的元素是 ]，那么从map中取到的value就是 [</span></span><br><span class="line">                <span class="comment">//如果栈顶的元素是 (，则不匹配返回false，否则继续</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">map</span>.<span class="built_in">get</span>(c)!=tmp) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回的时候还要判断栈是否为空</span></span><br><span class="line">        <span class="comment">//如果输入的字符串是 (((，那么最后栈就不为空</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">stack</span>.empty()? <span class="literal">true</span> : <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="栈混洗–》多种元素进行重新排列"><a href="#栈混洗–》多种元素进行重新排列" class="headerlink" title="栈混洗–》多种元素进行重新排列"></a>栈混洗–》多种元素进行重新排列</h3><ul>
<li><p>考察栈 A = &lt;a1,a2,a3,….,an];(&lt; 表示栈顶，]表示栈底)</p>
</li>
<li><p>只允许 将A的顶元素弹出并压入S，或   //s.push(A.pop());</p>
<pre><code>将S的顶元素弹出并压入B      //B.push(S.pop());</code></pre></li>
<li><p>若经过一系列以上操作后，A中的元素全部转入B中<br> B = [a1,a2…..,an&gt;</p>
</li>
<li><p>则称之为A的一个栈混洗(stack permutation)</p>
</li>
<li><p>甄别 混洗种类 SP(n) &lt;= n!(n的阶乘即全排列)</p>
<ul>
<li>简单情况：&lt;1,2,3],n=3<ol>
<li>栈混洗 6！/ 4！* 3！ = 5种<br>长度为 n 的序列，可能的栈混洗总数：<br><img src="images%5C%E6%A0%88%E6%B7%B7%E6%B4%97%E6%AC%A1%E6%95%B0.png" alt=""><br>Sp(n) = (2n)!/(n+1)!n! =&lt; n! 若4个元素 40320/120*24</li>
<li>全排列 3！= 6种</li>
<li>少一种即[3,1,2&gt; 不是栈混洗</li>
<li>对于任意i &lt; j 不含模式[…,j+1,…,i,…,j,…&gt; 判断是否栈混洗 <h3 id="中缀表达式求和-—》延迟缓冲-线性扫描算法模式中并不能保正处理的速度和扫描的速度同步，在预读足够长的之后，方能确定可处理的前缀"><a href="#中缀表达式求和-—》延迟缓冲-线性扫描算法模式中并不能保正处理的速度和扫描的速度同步，在预读足够长的之后，方能确定可处理的前缀" class="headerlink" title="中缀表达式求和 —》延迟缓冲(线性扫描算法模式中并不能保正处理的速度和扫描的速度同步，在预读足够长的之后，方能确定可处理的前缀)"></a>中缀表达式求和 —》延迟缓冲(线性扫描算法模式中并不能保正处理的速度和扫描的速度同步，在预读足够长的之后，方能确定可处理的前缀)</h3></li>
</ol>
</li>
</ul>
</li>
<li><p>中缀表达式算法代码实现：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> evaluate(String S) &#123;</span><br><span class="line">        Stack&lt;Integer&gt; opnd = <span class="keyword">new</span> Stack&lt;&gt;();    <span class="comment">//数栈</span></span><br><span class="line">        Stack&lt;Character&gt; optr = <span class="keyword">new</span> Stack&lt;&gt;();<span class="comment">//符栈</span></span><br><span class="line">        <span class="keyword">char</span> ch = <span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        optr.<span class="keyword">push</span>(<span class="string">'\0'</span>); <span class="comment">//尾哨兵'\0'也作为头哨兵首先入栈  即表达式的结束标志入符栈</span></span><br><span class="line">        <span class="keyword">while</span> (!optr.empty()) &#123;<span class="comment">//逐个处理个字符，直到运算符栈为空</span></span><br><span class="line">            ch = S.substring(index, index + <span class="number">1</span>).charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (!isdigth(ch)) &#123;<span class="comment">//若当前字符为操作数，则</span></span><br><span class="line">                readNumber(S, opnd); <span class="comment">//读入可能多位的操作数</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//若当前字符位运算符，则试其与与栈顶运算符之间的优先级高低</span></span><br><span class="line">                <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">                    <span class="comment">//分别处理</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">                        optr.<span class="keyword">push</span>(ch);</span><br><span class="line">                        index++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'='</span>:</span><br><span class="line">                        optr.<span class="keyword">pop</span>();</span><br><span class="line">                        index++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">                        <span class="keyword">char</span> op = optr.<span class="keyword">pop</span>();</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">'!'</span> == op) &#123;<span class="comment">//判断是否是阶乘运算符！</span></span><br><span class="line">                            opnd.<span class="keyword">push</span>(calcu(op, opnd.<span class="keyword">pop</span>()));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">int</span> pOpend2 = opnd.<span class="keyword">pop</span>(), pOpend1 = opnd.<span class="keyword">pop</span>();</span><br><span class="line">                            opnd.<span class="keyword">push</span>(calcu(pOpend1, op, pOpend2));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"结果："</span>+ opnd.<span class="keyword">pop</span>());</span><br><span class="line">        <span class="keyword">return</span> opnd.<span class="keyword">pop</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>前缀表达式(波兰表达式)</p>
<ol>
<li>前缀表达式又称波兰式，前缀表达式的运算符位于操作数之前</li>
<li>举例说明：(3+4) * 5-6【中缀表达式】对应的前缀表达式就是-*+3456；</li>
</ol>
</li>
<li><p>前缀表达式的计算计求值：</p>
<ol>
<li>从右至左扫描表达式，遇到数字压入数栈，遇到运算符时，弹出栈顶的两个数，用运算符对他们做相应的计算(栈顶元素和次顶元素)，并将结果入栈；重复上述过程直到表达式最左端最后运算得出的值即为表达式结果</li>
<li>例如：(3+4)<em>5-6对应的前缀表达式就是-</em>+3456，针对前缀表达式求值步骤如下：<ul>
<li>从右至左扫描，将6，5，4，3压入数栈</li>
<li>遇到+运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算出3+4的值再将其值入数栈</li>
<li>接着是<em>运算符，因此弹出7和5，计算出7</em>5的值入栈</li>
<li>最终是-运算符，计算出35-6的值，由此得出最终结果</li>
</ul>
</li>
</ol>
</li>
<li><p>后缀表达式(逆波兰表达式)：</p>
<ol>
<li>后缀表达式又称逆波兰表达式与前缀表达式相似就是，只是运算符在在操作数之后</li>
<li>举例说明：（3+4）<em>5-6 对应的后缀表达式就是34+5</em>6-</li>
</ol>
<table>
<thead>
<tr>
<th>中缀表达式</th>
<th align="center">逆波兰表达式</th>
</tr>
</thead>
<tbody><tr>
<td>a+b</td>
<td align="center">ab+</td>
</tr>
<tr>
<td>a+(b-c)</td>
<td align="center">abc-+</td>
</tr>
<tr>
<td>a+(b-c)*d</td>
<td align="center">abc-d*+</td>
</tr>
<tr>
<td>a+d*(b-c)</td>
<td align="center">adbc-*+</td>
</tr>
<tr>
<td>a=1+3</td>
<td align="center">a13+=</td>
</tr>
</tbody></table>
</li>
<li><p>后缀表达式的计算计求值：</p>
<ol>
<li>从左至右扫描表达式，遇到数字压入数栈，遇到运算符时，弹出栈顶的两个数，用运算符对他们做相应的计算(栈顶元素和次顶元素)，并将结果入栈；重复上述过程直到表达式最右端最后运算得出的值即为表达式结果</li>
<li>例如：(3+4)<em>5-6对应的前缀表达式就是34+5</em>6-，针对前缀表达式求值步骤如下：<ul>
<li>从右至左扫描，将3，4压入数栈</li>
<li>遇到+运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算出3+4的值再将其值入数栈</li>
<li>再将5入数栈</li>
<li>接着是<em>运算符，因此弹出5和7，计算出5</em>7的值入栈 </li>
<li>将6入数栈</li>
<li>最终是-运算符，计算出35-6的值，由此得出最终结果 <h3 id="逆波兰表达式实现计算器"><a href="#逆波兰表达式实现计算器" class="headerlink" title="逆波兰表达式实现计算器"></a>逆波兰表达式实现计算器</h3></li>
</ul>
</li>
</ol>
</li>
<li><p>代码实现</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolandNotation</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先定义一个逆波兰表达式</span></span><br><span class="line">        <span class="comment">//(3+4)*5-6 ==&gt;3 4 + 5* 6 -</span></span><br><span class="line">        <span class="keyword">String</span> suffixExpression = <span class="string">"30 4 + 5 * 6 -"</span>;</span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; rpnList = getListString(suffixExpression);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"rpnList ="</span> + rpnList);</span><br><span class="line">        <span class="keyword">int</span> calculate = calculate(rpnList);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"计算结果："</span>+calculate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将逆波兰表达式放入到Arraylist</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="keyword">String</span>&gt; getListString( <span class="keyword">String</span> suffixExpression)&#123;</span><br><span class="line">        <span class="comment">//将suffixExpression分割</span></span><br><span class="line">        <span class="keyword">String</span> [] split = suffixExpression.split(<span class="string">" "</span>);</span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; <span class="built_in">list</span>  = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> ele: split) &#123;</span><br><span class="line">            <span class="built_in">list</span>.add(ele);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//完成对逆波兰表达式的运算</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(List&lt;<span class="keyword">String</span>&gt; ls)</span></span>&#123;</span><br><span class="line">        Stack&lt;<span class="keyword">String</span>&gt; <span class="built_in">stack</span> = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历ls</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> item : ls)&#123;</span><br><span class="line">            <span class="comment">//这里是使用正则表达式来取出数</span></span><br><span class="line">            <span class="keyword">if</span> (item.matches(<span class="string">"\\d+"</span>))&#123; <span class="comment">//匹配的是多位数==》 </span></span><br><span class="line">                                              <span class="comment">// Boolean matches(String regex) </span></span><br><span class="line">                                              <span class="comment">// 告诉这个字符串是否匹配给定的 regular expression(正则表达式6)</span></span><br><span class="line">                <span class="comment">//入栈</span></span><br><span class="line">                <span class="built_in">stack</span>.push(item);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//pop出两个数，并运算在入栈</span></span><br><span class="line">                <span class="keyword">int</span> num2 = Integer.<span class="built_in">parseInt</span>(<span class="built_in">stack</span>.pop());</span><br><span class="line">                <span class="keyword">int</span> num1 = Integer.<span class="built_in">parseInt</span>(<span class="built_in">stack</span>.pop());</span><br><span class="line">                <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (item.equals(<span class="string">"+"</span>))&#123;</span><br><span class="line">                    res = num2 +num1;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"-"</span>))&#123;</span><br><span class="line">                    res = num1 - num2;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"*"</span>))&#123;</span><br><span class="line">                     res = num1 * num2;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"/"</span>))&#123;</span><br><span class="line">                    res = num1 / num2;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"运算符有误！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//结果入栈</span></span><br><span class="line">                <span class="built_in">stack</span>.push(<span class="string">""</span> + res);  <span class="comment">//res变为字符串</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//表达式结果</span></span><br><span class="line">        <span class="keyword">return</span> Integer.<span class="built_in">parseInt</span>(<span class="built_in">stack</span>.pop());</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="中缀表达式转换为后缀表达式算法实现："><a href="#中缀表达式转换为后缀表达式算法实现：" class="headerlink" title="中缀表达式转换为后缀表达式算法实现："></a>中缀表达式转换为后缀表达式算法实现：</h3></li>
<li><p>思路分析:</p>
</li>
</ul>
<ol>
<li>将中缀表达式保存到Arraylist中<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法：将中缀表达式转化为对应的List</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="keyword">String</span>&gt; toIndexExpression(<span class="keyword">String</span> s)&#123;</span><br><span class="line">        <span class="comment">//定义一个List，存放中缀表达式存放对应的内容</span></span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; ls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="built_in">int</span> i = <span class="number">0</span>; <span class="comment">//这是一个指针，用于遍历中缀表达式字符串</span></span><br><span class="line">        <span class="keyword">String</span> <span class="built_in">str</span>; <span class="comment">//对多位数的拼接</span></span><br><span class="line">        <span class="built_in">char</span> c; <span class="comment">//每遍利到一个字符就放入大C</span></span><br><span class="line">        do&#123;</span><br><span class="line">            <span class="comment">//如果c是一个非数字，我需要加入到ls 0-9在Acsll码中对应48 - 57</span></span><br><span class="line">            <span class="keyword">if</span> ((c =s.charAt(i)) &lt; <span class="number">48</span> || (c =s.charAt(i)) &gt; <span class="number">57</span>)&#123;</span><br><span class="line">                ls.<span class="built_in">add</span>(<span class="string">""</span> + c);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//如多是一个数，考虑读多位数</span></span><br><span class="line">                <span class="built_in">str</span> = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; s.length() &amp;&amp; (c=s.charAt(i)) &gt;= <span class="number">48</span> &amp;&amp; (c=s.charAt(i)) &lt;= <span class="number">57</span>)&#123;</span><br><span class="line">                    <span class="built_in">str</span> += c;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                ls.<span class="built_in">add</span>(<span class="built_in">str</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(i &lt; s.length());</span><br><span class="line">        <span class="keyword">return</span> ls;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>将得到的中缀表达式对应的List ==》(转换)后缀表达式<ul>
<li>1.初始化两个栈：运算符栈s1和存储中间结果的栈s2;</li>
<li>2.从左至右扫描中缀表达式;</li>
<li>3.遇到操作数时，将其压入s2;</li>
<li>4.遇到运算符时，比较其与s1栈顶运算符的优先级;<br>如果s1为空或者栈顶运算符为左括号“（”，则直接将此运算符入栈；<br>否则，若优先级比栈顶运算符高，也将运算符压入s1;<br>否则，将s1栈顶的运算符弹出并压入到s2中，在次转到与s1中新的栈顶元素运算符比较；</li>
<li>5.遇到括号时：<br>如果是左括号，直接入栈s1<br>如果是右括号，则依次弹出s1中运算符，并压s2，直到遇到左括号为止，此时这一对括号弃掉</li>
<li>6.重复步骤2至5，直到表达式的最右边</li>
<li>7.将s1中剩下的运算符依次弹出并压入s2</li>
<li>8.依次弹出s2中的元素并输出，结果的逆序即为中缀表达式对应的后缀表达式</li>
</ul>
</li>
</ol>
<ul>
<li>代码实现：<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//方法：将中缀表达式对应的list转换成 ==》后缀表达式对应的List</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="keyword">String</span>&gt;  parseSufferExpression(List&lt;<span class="keyword">String</span>&gt; ls)&#123;</span><br><span class="line">        <span class="comment">//定义两个栈</span></span><br><span class="line">        Stack&lt;<span class="keyword">String</span>&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">//符号栈</span></span><br><span class="line">        <span class="comment">//在中间结果栈中，在整个转换过程中，没有pop操作，而且后面我们还需要逆序输出</span></span><br><span class="line">        <span class="comment">//因此比较麻烦，这里我们就不用Stack&lt;String&gt; 直接使用List&lt;String&gt; stack2</span></span><br><span class="line">        <span class="comment">//Stack&lt;String&gt; stack2 = new Stack&lt;&gt;(); //存储中间结果的栈</span></span><br><span class="line">        List&lt;<span class="keyword">String</span>&gt; stack2 = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//存储中间结果的List2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历ls</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">String</span> item: ls) &#123;</span><br><span class="line">            <span class="comment">//如果是一个数，就加入stack2</span></span><br><span class="line">            <span class="keyword">if</span> (item.matches(<span class="string">"\\d+"</span>))&#123; <span class="comment">//正则匹配</span></span><br><span class="line">                stack2.add(item);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">"("</span>))&#123;</span><br><span class="line">                stack1.push(item);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.equals(<span class="string">")"</span>))&#123;</span><br><span class="line">                <span class="keyword">while</span>(!stack1.<span class="built_in">peek</span>().equals(<span class="string">"("</span>))&#123;</span><br><span class="line">                    stack2.add(stack1.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                stack1.pop();<span class="comment">//将左括号弹出</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//当item的优先级小于等于栈顶的优先级，将stack1栈顶的运算符弹出加入stack2中</span></span><br><span class="line">                <span class="keyword">while</span>((stack1.<span class="built_in">size</span>() != <span class="number">0</span>) &amp;&amp; (Operation.getValue(stack1.<span class="built_in">peek</span>()) &gt;= Operation.getValue(item)))&#123;</span><br><span class="line">                    stack2.add(stack1.pop());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将item压入栈</span></span><br><span class="line">                stack1.push(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将stack1中剩余的运算符依次弹出并加入stack2</span></span><br><span class="line">        <span class="keyword">while</span> (stack1.<span class="built_in">size</span>() != <span class="number">0</span>)&#123;</span><br><span class="line">            stack2.add(stack1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack2;<span class="comment">//注意因为是存放到List，因此按顺序输出就是对应的逆波兰表达式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//编写一个类Operation 可以返回一个运算符对应的优先级</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Operation</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ADD = <span class="number">1</span>; <span class="comment">//+</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> SUB = <span class="number">1</span>; <span class="comment">//-</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MUL = <span class="number">2</span>; <span class="comment">//*</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> DIV = <span class="number">2</span>; <span class="comment">// /</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法，返回对应的优先级数字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">String</span> operation)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span> (operation)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"+"</span>:</span><br><span class="line">                result = ADD;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"-"</span>:</span><br><span class="line">                result = SUB;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"*"</span>:</span><br><span class="line">                result = MUL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"/"</span>:</span><br><span class="line">                result = DIV;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"不存在该运算符！"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构和算法+稀疏数组+队列+链表</title>
    <url>/2020/05/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84-%E9%98%9F%E5%88%97-%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="线性结构和非线性结构"><a href="#线性结构和非线性结构" class="headerlink" title="线性结构和非线性结构"></a>线性结构和非线性结构</h4><ul>
<li>线性结构</li>
</ul>
<ol>
<li>线性结构作为最常用的数据结构，其特点是数据元素之间存在一对一的线性关系</li>
<li>线性结构有两种不同的存储方式，即顺序存储结构和链式存储结构。顺序存储的线性表称之为顺序表，顺序表中的存储元素是连续的</li>
<li>链式存储的线性表称为链表，链表中的存储元素不一定是连续的，元素节点中存放的数据元素以及相邻元素的地址信息</li>
<li>线性结构常见的有：数组,队列,链表和栈。</li>
</ol>
<ul>
<li>非线性结构</li>
</ul>
<p>1.非线性结构包括：二维数组，多维数组，广义表，树结构，图结构</p>
<h3 id="稀疏-Sparse-Array-数组"><a href="#稀疏-Sparse-Array-数组" class="headerlink" title="稀疏(Sparse Array)数组"></a>稀疏(Sparse Array)数组</h3><ul>
<li>基本介绍：<br>当一个数组中大部分元素为0，或者同一个值的数组时，可以使用稀疏数组来保证存该数组。<ul>
<li>稀疏数组的处理方式：<br>1.记录数组一共有几行几列，有多少个不同的值<br>2.把具体有不同的值的元素的行列及只记录在一个小规模的数组(稀疏数组)中，从而缩小程序的规模(压缩)</li>
</ul>
</li>
<li>例子<br><img src="images%5C%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84.png" alt="达到压缩数据的效果" title="达到压缩数据的效果"><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建普通的6行7列的二维数组</span></span><br><span class="line"><span class="comment">//第一种方式:</span></span><br><span class="line"><span class="built_in">int</span>[][] arr = new <span class="built_in">int</span>[<span class="number">6</span>][<span class="number">7</span>];</span><br><span class="line">arr[<span class="number">0</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">22</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">15</span>&#125;;</span><br><span class="line">arr[<span class="number">1</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">0</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">17</span>,<span class="number">0</span>&#125;;</span><br><span class="line">arr[<span class="number">2</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-6</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">15</span>&#125;;</span><br><span class="line">arr[<span class="number">3</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">39</span>,<span class="number">0</span>&#125;;</span><br><span class="line">arr[<span class="number">4</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">91</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>&#125;;</span><br><span class="line">arr[<span class="number">5</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">28</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式:</span></span><br><span class="line"><span class="built_in">int</span>[][] arr =&#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">22</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">15</span>&#125;,&#123;<span class="number">0</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">17</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-6</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">15</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">39</span>,<span class="number">0</span>&#125;,&#123;<span class="number">91</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">10</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">28</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把上面的二维数组变成稀疏数组(当一个数组中大部分元素为0，或者同一个值的数组时)</span></span><br><span class="line"><span class="built_in">int</span>[][] arr = new <span class="built_in">int</span>[<span class="number">9</span>][<span class="number">3</span>];</span><br><span class="line"><span class="comment">//第一个元素中arr[0][0]=6;表示普通数组6行,arr[0][1]=7,b表示普通数组有7列，arr[0][2]=8;表示有8个不是0或者同一值的数组的数字(固定写法，参数不同而已)</span></span><br><span class="line">arr[<span class="number">0</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">//以下写法规则：第0行的第三列元素值时22</span></span><br><span class="line">arr[<span class="number">1</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">0</span>,<span class="number">3</span>,<span class="number">22</span>&#125;;</span><br><span class="line">arr[<span class="number">2</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">0</span>,<span class="number">6</span>,<span class="number">15</span>&#125;;</span><br><span class="line">arr[<span class="number">3</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">11</span>&#125;;</span><br><span class="line">arr[<span class="number">4</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">17</span>&#125;;</span><br><span class="line">arr[<span class="number">5</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">-6</span>&#125;;</span><br><span class="line">arr[<span class="number">6</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">39</span>&#125;;</span><br><span class="line">arr[<span class="number">7</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">4</span>,<span class="number">0</span>,<span class="number">91</span>&#125;;</span><br><span class="line">arr[<span class="number">8</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">5</span>,<span class="number">2</span>,<span class="number">28</span>&#125;;</span><br><span class="line"><span class="comment">//小结:达到压缩数据的效果</span></span><br></pre></td></tr></table></figure></li>
<li>应用实例:</li>
</ul>
<ol>
<li>使用稀疏数组，来保留类似前面的二维数组(棋盘，地图等)</li>
<li>把稀疏数组存盘，并且可以从新恢复的原来的二维数组</li>
</ol>
<ul>
<li>图解<br><img src="images%5C%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84%E8%AF%A6%E8%A7%A3.png" alt=""></li>
<li>注意:稀疏数组最终保存到磁盘</li>
<li>代码实现：<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">sparse_arrays</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建原始二维数组，棋盘</span></span><br><span class="line">        <span class="comment">//0表示没得棋子，1表示黑子，2表示白子</span></span><br><span class="line">        <span class="built_in">int</span>[][] chessArrays = new <span class="built_in">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        chessArrays[<span class="number">1</span>][<span class="number">2</span>] =<span class="number">1</span>;</span><br><span class="line">        chessArrays[<span class="number">2</span>][<span class="number">3</span>] =<span class="number">2</span>;</span><br><span class="line">        <span class="comment">//输出原始二维数组</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"原始二维数组"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span>[] row : chessArrays) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> data : row) &#123;</span><br><span class="line">                <span class="comment">//格式化输出printf()</span></span><br><span class="line">                System.<span class="keyword">out</span>.printf(<span class="string">"%d\t"</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//没打印一行换一行</span></span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//将二维数组转稀疏数组</span></span><br><span class="line">        <span class="comment">//1. 先遍历二维数组 得到非0的数据个数</span></span><br><span class="line">        <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//先遍历行 i &lt; chessArrays.length</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArrays[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"有效数字个数："</span>+sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建稀疏数组</span></span><br><span class="line">        <span class="built_in">int</span>[][] sparseArrays =new <span class="built_in">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//该稀疏数组赋值</span></span><br><span class="line">        sparseArrays[<span class="number">0</span>] = new <span class="built_in">int</span>[]&#123;<span class="number">11</span>,<span class="number">11</span>,sum&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历二维数组，将非0的值放到稀疏数组中</span></span><br><span class="line">        <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArrays[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    sparseArrays[count] =new <span class="built_in">int</span>[]&#123;i,j,chessArrays[i][j]&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出稀疏数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span>[] sparse : sparseArrays) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> data1: sparse) &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.printf(<span class="string">"%d\t"</span>,data1);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sparseArrays.length ; i++) &#123;</span><br><span class="line">            <span class="comment">//%d\t 表示制表符(Tab键)</span></span><br><span class="line">            System.<span class="keyword">out</span>.printf(<span class="string">"%d\t%d\t%d\t\n"</span>, sparseArrays[i][<span class="number">0</span>],sparseArrays[i][<span class="number">1</span>],sparseArrays[i][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将稀疏数组 转 原始数组</span></span><br><span class="line">        <span class="comment">//1.新建二维数组</span></span><br><span class="line">        <span class="built_in">int</span>[][] arr = new <span class="built_in">int</span>[sparseArrays[<span class="number">0</span>][<span class="number">0</span>]][sparseArrays[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 读取稀疏数组的后几行数据(第二行开始)，并复制该 原始二维数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; sparseArrays.length ; i++) &#123;</span><br><span class="line">            <span class="comment">//%d\t 表示制表符(Tab键)</span></span><br><span class="line">            arr[sparseArrays[i][<span class="number">0</span>]][sparseArrays[i][<span class="number">1</span>]] = sparseArrays[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"恢复后的数据"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span>[] a : arr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> data2: a) &#123;</span><br><span class="line">                System.<span class="keyword">out</span>.printf(<span class="string">"%d\t"</span>,data2);</span><br><span class="line">            &#125;</span><br><span class="line">            System.<span class="keyword">out</span>.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4></li>
<li>基本介绍：</li>
<li>队列是一个有序列表，可以用数组或是链表来实现。</li>
<li>遵循先入先出的原则。即:先存入队列的数据，要先取出，后存入的要后取出</li>
<li>初始指针：rear(队尾)=-1，front(队首)=-1；添加数据在队尾，获取数据在队首</li>
<li>应用：银行叫号系统<h5 id="数组模拟队列"><a href="#数组模拟队列" class="headerlink" title="数组模拟队列"></a>数组模拟队列</h5></li>
<li>队列本身是有序列表，若使用数组的结构来存储队列的数据，则队列数据的声明如下图，其中maxSize是队列的最大容量。</li>
<li>因为队列的输出，输入是分别从前后端来处理，因此需要两个变量front及rear分别记录队列前后端的下标，fonat会随着数据输出而改变，而rear则是随着数据的输入而改变，<br><img src="images%5C%E9%98%9F%E5%88%97.png" alt=""></li>
<li>实现思路分析：<ul>
<li>当我们将数据存入队列时称为”addQueue”,addQueue的处理需要有两个步骤：</li>
</ul>
<ol>
<li>将尾指针往后移：rear+1，当front == rear (队列空)</li>
<li>将尾指针rear小于队列的最大下标maxSize-1,则将数据存入rear所指的数组元素中，否则无法存取数据。rear == maxSize-1(队列满)<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//扫描用户输入</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">arrayQueue</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组模拟队列</span></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="comment">//创建一个队列</span></span><br><span class="line">        ArrQueue <span class="built_in">queue</span> = <span class="keyword">new</span> ArrQueue(<span class="number">9</span>);</span><br><span class="line">        <span class="keyword">char</span> key = <span class="string">' '</span>; <span class="comment">//接受用户输入</span></span><br><span class="line">        <span class="comment">//扫描</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span>(loop)&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"s(show): 显示队列"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"e(exit): 退出程序"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"a(add): 添加数据到队列"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"g(get): 从队列中取出数据"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"h(head): 查看队列头数据"</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>); <span class="comment">//接受一个字符</span></span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                    <span class="built_in">queue</span>.show();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:<span class="comment">//退出</span></span><br><span class="line">                    scanner.<span class="built_in">close</span>();</span><br><span class="line">                    loop = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"输入一个数！"</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                    <span class="built_in">queue</span>.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'g'</span>:<span class="comment">//取出数据</span></span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> res = <span class="built_in">queue</span>.getQueue();</span><br><span class="line">                        System.out.<span class="built_in">printf</span>(<span class="string">"取出的数据是%d\n"</span>,res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                        System.out.<span class="built_in">println</span>(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'h'</span>:<span class="comment">//查看队列头</span></span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> head = <span class="built_in">queue</span>.headQueue();</span><br><span class="line">                        System.out.<span class="built_in">printf</span>(<span class="string">"查看的队列头是%d\n"</span>,head);</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                        System.out.<span class="built_in">println</span>(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"程序退出！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用数组模拟队列 -编写一个ArrQueue类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrQueue</span> &#123;</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">//表示数组的最大容量</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> front; <span class="comment">//对首指针</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> rear;<span class="comment">//队尾指针</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] arr; <span class="comment">//该数组用于存放数据</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建队列的构造器</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ArrQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">            <span class="keyword">this</span>.arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">            front = <span class="number">-1</span>; <span class="comment">//front是指向队列头的前一个位置，不包含在队列中</span></span><br><span class="line">            rear = <span class="number">-1</span>;  <span class="comment">//rear指向队列尾部具体数据，包含在队列中给</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断队列是否满</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> rear == maxSize - <span class="number">1</span>; <span class="comment">//队满</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断队列是否为空</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> rear == front;<span class="comment">//rear == -1 &amp; front == -1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加数据，入队</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1. 判断队列是否已满</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isFull()) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"队列已满不能加入数据！"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            rear++;<span class="comment">//移动指针</span></span><br><span class="line">            arr[rear] = n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取队列数据，出队</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1. 判断队列是否为空</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">//通过抛出异常处理</span></span><br><span class="line">                <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">"队列空....不能取数据"</span>); <span class="comment">//throw这里会自动返回</span></span><br><span class="line">            &#125;</span><br><span class="line">            front++;</span><br><span class="line">            <span class="keyword">return</span> arr[front];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示队列的所有数据</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//1.判断</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())&#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"队列空"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length ; i++) &#123;</span><br><span class="line">                System.out.<span class="built_in">printf</span>(<span class="string">"arr[%d]=%d\n"</span>, i, arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示队列的头信息</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">// 判断</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">"队列空....不能取数据"</span>); <span class="comment">//throw这里会自动返回</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr[front+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>问题分析并优化：<ol>
<li>目前数组使用一次就不能使用，没有达到复用的效果</li>
<li>将这个数组使用算法，改进成一个环形队列 取模：%<h5 id="使用数组模拟环形队列"><a href="#使用数组模拟环形队列" class="headerlink" title="使用数组模拟环形队列"></a>使用数组模拟环形队列</h5></li>
</ol>
</li>
</ul>
</li>
<li>思路分析:</li>
<li>1.front变量的含义做一个调整:front就指向队列的第一个元素，也就是说arr[front]就是队列的第一个元素front的初始值=0;</li>
<li>2.rear变量的含义做一个调整:rear就指向队列的最后一个元素，因为希望空出一个空间作为约定，也就是说arr[rear]就是队列的最后一个元素rear的初始值=0;</li>
<li>3.当队列满是，条件是（rear+1）% maxSize = front【满】，队满尾指针+1 == maxSize  即 rear+1）% maxSize = front = 0;</li>
<li>4.的那队列空的条件是，rear == front【空】</li>
<li>5.但我们这样分析队列中有效数据的个数(rear+maxSize-front) % maxSize // rear =1 ,front =0</li>
<li>6.我们就可以在原来的队列修改得到环形队列。</li>
<li>代码实现(环形队列—自然)<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnularQueue</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用数组模拟环形队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"测试数组模式环形队列的案例·····"</span>);</span><br><span class="line"></span><br><span class="line">        AnnularArray <span class="built_in">queue</span> = <span class="keyword">new</span> AnnularArray(<span class="number">4</span>);  <span class="comment">//说明设置4，其队列的有效数据最大是3(空出一个空间作为约定)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//接受用户输入</span></span><br><span class="line">        <span class="keyword">char</span> key = <span class="string">' '</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//扫描</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">boolean</span> loop = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出一个菜单</span></span><br><span class="line">        <span class="keyword">while</span>(loop)&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"s(show): 显示队列"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"e(exit): 退出程序"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"a(add): 添加数据到队列"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"g(get): 从队列中取出数据"</span>);</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"h(head): 查看队列头数据"</span>);</span><br><span class="line">            key = scanner.next().charAt(<span class="number">0</span>); <span class="comment">//接受一个字符</span></span><br><span class="line">            <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'s'</span>:</span><br><span class="line">                    <span class="built_in">queue</span>.show();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:<span class="comment">//退出</span></span><br><span class="line">                    scanner.<span class="built_in">close</span>();</span><br><span class="line">                    loop = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">                    System.out.<span class="built_in">println</span>(<span class="string">"输入一个数！"</span>);</span><br><span class="line">                    <span class="keyword">int</span> value = scanner.nextInt();</span><br><span class="line">                    <span class="built_in">queue</span>.addQueue(value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'g'</span>:<span class="comment">//取出数据</span></span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> res = <span class="built_in">queue</span>.getQueue();</span><br><span class="line">                        System.out.<span class="built_in">printf</span>(<span class="string">"取出的数据是%d\n"</span>,res);</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                        System.out.<span class="built_in">println</span>(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'h'</span>:<span class="comment">//查看队列头</span></span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="keyword">int</span> head = <span class="built_in">queue</span>.headQueue();</span><br><span class="line">                        System.out.<span class="built_in">printf</span>(<span class="string">"查看的队列头是%d\n"</span>,head);</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                        System.out.<span class="built_in">println</span>(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"程序退出！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnularArray</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize; <span class="comment">//表示数组的最大容量</span></span><br><span class="line">    <span class="comment">/* 1.front变量的含义做一个调整:front就指向队列的第一个元素，也就是说arr[front]就是队列的第一个元素front的初始值=0;</span></span><br><span class="line"><span class="comment">     * 2.rear变量的含义做一个调整:rear就指向队列的最后一个元素，因为希望空出一个空间作为约定，也就是说arr[rear]就是队列的最后一个元素rear的初始值=0;*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front; <span class="comment">//队首指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;<span class="comment">//队尾指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] arr; <span class="comment">//该数组用于存放数据，模拟队列</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnnularArray</span><span class="params">(<span class="keyword">int</span> arrMaxSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = arrMaxSize;</span><br><span class="line">        <span class="keyword">this</span>.arr = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        <span class="comment">//front = 0; //front是指向队列头的前一个位置，不包含在队列中</span></span><br><span class="line">        <span class="comment">//rear = 0;  //rear指向队列尾部具体数据，包含在队列中给</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否满</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear +<span class="number">1</span>) % maxSize == front ;<span class="comment">//队满;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队列是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;<span class="comment">//rear == -1 &amp; front == -1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加数据，入队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addQueue</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 判断队列是否已满</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isFull()) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"队列已满不能加入数据！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注意：这里rear直接指向最后一个元素</span></span><br><span class="line">        arr[rear] = n;</span><br><span class="line"></span><br><span class="line">        rear = (rear +<span class="number">1</span>) % maxSize;<span class="comment">//移动指针，将rear后移，这里你与考虑取模 (预留了一个空间作为约定 rear +1)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取队列数据，出队</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 判断队列是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//通过抛出异常处理</span></span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">"队列空....不能取数据"</span>); <span class="comment">//throw这里会自动返回</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里分析出front指向队列的第一个元素</span></span><br><span class="line">        <span class="comment">//先把front的值保存到一个临时变量</span></span><br><span class="line">        <span class="comment">//键fro nt后移，考虑取模%</span></span><br><span class="line">        <span class="comment">//将临时保存的变量保存</span></span><br><span class="line">        <span class="keyword">int</span> value = arr[front];</span><br><span class="line">        front = (front +<span class="number">1</span>) % maxSize;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列的所有数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.判断</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())&#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"队列空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//思路：从front遍历，遍历多少个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; front + <span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            System.out.<span class="built_in">printf</span>(<span class="string">"arr[%d]=%d\n"</span>, i % maxSize, arr[i % maxSize]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求出当前数组有效数据的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//（队尾下标 - 队首下标 + 最大元素个数）% 最大元素个数   取模保证不能为负</span></span><br><span class="line">        <span class="keyword">return</span> (rear + maxSize - front) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列的头信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">headQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 判断</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> RuntimeException(<span class="string">"队列空....不能取数据"</span>); <span class="comment">//throw这里会自动返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="链表-Linled-List-介绍"><a href="#链表-Linled-List-介绍" class="headerlink" title="链表(Linled List)介绍"></a>链表(Linled List)介绍</h3></li>
<li>链表是有序列列表，链式存储<ul>
<li>有头指针(节点)</li>
<li>没得头指针(节点)</li>
</ul>
</li>
<li>节点(Data域存放数据的域 + next域指向下一个节点)<ol>
<li>链表是以节点的方式存储的每个节点包data域和next域</li>
<li>链表的各个节点不一定是连续存储的</li>
</ol>
</li>
<li>单链表应用案例:  –使用带有(head)头节点的单链表实现–》水浒英雄排行榜管理</li>
<li>注意：链表最后一个元素next域为空<ul>
<li>增删改查操作</li>
<li>第一种方式：在添加时，直接添加到链表的尾部<br><img src="images%5CLinkedList.png" alt=""></li>
<li>代码实现<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">/单链表</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">singleLinkedListDemo</span> &#123;</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//测试</span></span><br><span class="line">          <span class="comment">//创建节点</span></span><br><span class="line">          HeroNode  node = <span class="keyword">new</span> HeroNode(<span class="number">1</span>, <span class="string">"宋江"</span>, <span class="string">"及时雨"</span>);</span><br><span class="line">          HeroNode node1 = <span class="keyword">new</span> HeroNode(<span class="number">2</span>, <span class="string">"卢俊义"</span>, <span class="string">"玉麒麟"</span>);</span><br><span class="line">          HeroNode node2 = <span class="keyword">new</span> HeroNode(<span class="number">2</span>, <span class="string">"吴用"</span>, <span class="string">"智多星"</span>);</span><br><span class="line">          HeroNode node3 = <span class="keyword">new</span> HeroNode(<span class="number">2</span>, <span class="string">"林冲"</span>, <span class="string">"豹子头"</span>);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//加入到链表--》创建链表</span></span><br><span class="line">          SingleLinledList singleLinledList = <span class="keyword">new</span> SingleLinledList();</span><br><span class="line"></span><br><span class="line">          singleLinledList.add(node);</span><br><span class="line">          singleLinledList.add(node1);</span><br><span class="line">          singleLinledList.add(node2);</span><br><span class="line">          singleLinledList.add(node3);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//显示</span></span><br><span class="line">          singleLinledList.<span class="built_in">list</span>();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"--------------------------------"</span>);</span><br><span class="line">          <span class="comment">//测试修改节点的代码</span></span><br><span class="line">          HeroNode node4 = <span class="keyword">new</span> HeroNode(<span class="number">2</span>, <span class="string">"哈哈"</span>, <span class="string">"麒麟哈哈"</span>);</span><br><span class="line">          singleLinledList.update(node4);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//显示</span></span><br><span class="line">          singleLinledList.<span class="built_in">list</span>();</span><br><span class="line"></span><br><span class="line">          <span class="comment">//删除节点</span></span><br><span class="line">          singleLinledList.del(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//显示</span></span><br><span class="line">          singleLinledList.<span class="built_in">list</span>();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义HeroNode，每个HeroNode兑现就是一个节点</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span>&#123;</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">int</span> no; <span class="comment">//编号</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">String</span> name;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">String</span> nickname;</span><br><span class="line">      <span class="keyword">public</span> HeroNode next; <span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//构造器</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> hNo, <span class="keyword">String</span> name, <span class="keyword">String</span> nickname)</span></span>&#123;</span><br><span class="line">          <span class="keyword">this</span>.no = hNo;</span><br><span class="line">          <span class="keyword">this</span>.name = name;</span><br><span class="line">          <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//重写toString</span></span><br><span class="line"></span><br><span class="line">      @Override</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">"HeroNode&#123;"</span> +</span><br><span class="line">                  <span class="string">"no="</span> + no +</span><br><span class="line">                  <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                  <span class="string">", nickname='"</span> + nickname + <span class="string">'\''</span> +</span><br><span class="line">                  <span class="string">'&#125;'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /创建SingleLinkedList，管理人物</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinledList</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//先初始化一个头节点，头节点不动,不存储具体的数据</span></span><br><span class="line">          <span class="keyword">private</span> HeroNode  head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">          <span class="comment">//添加节点到单向链表,直接添加到链表最后</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode headNode)</span></span>&#123;</span><br><span class="line">              <span class="comment">//思路：但不考虑编号的顺序时</span></span><br><span class="line">              <span class="comment">// 1.找到当前链表的最后一个节点</span></span><br><span class="line">              <span class="comment">// 2.将最后这个节点的next指向性的节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">              <span class="comment">//由于头指针不能动，我们需要一个辅助变量 temp</span></span><br><span class="line">              <span class="comment">//头节点指向temp</span></span><br><span class="line">              HeroNode temp = head;</span><br><span class="line"></span><br><span class="line">              <span class="comment">//遍历找到最后节点</span></span><br><span class="line">              <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                  <span class="comment">//找到链表的最后</span></span><br><span class="line">                  <span class="keyword">if</span>(temp.next == null)&#123;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">//如果没得找到就将temp后移</span></span><br><span class="line">                  temp = temp.next;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//当退出无限循环时，temp就指向链表的最后</span></span><br><span class="line">              temp.next = headNode;<span class="comment">//将其指向新的节点</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//修改节点信息，根据no编号来修改，即no编号不能改</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode newHeadNode)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//判断链表是否为空</span></span><br><span class="line">          <span class="keyword">if</span> (head.next == null)&#123;</span><br><span class="line">              System.out.<span class="built_in">println</span>(<span class="string">"链表为空....."</span>);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//找到需要修给的节点，根据no编号来找，定义一个辅助变量</span></span><br><span class="line">          HeroNode temp = head.next;</span><br><span class="line">          <span class="keyword">boolean</span> flag = <span class="literal">false</span>; <span class="comment">//表示是否找到给节点</span></span><br><span class="line">          <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">              <span class="keyword">if</span> (temp == null)&#123;</span><br><span class="line">                  <span class="keyword">break</span>;<span class="comment">// 表示已经到达链表最后，链表遍历结束</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (temp.no == newHeadNode.no)&#123;</span><br><span class="line">                  <span class="comment">//找到</span></span><br><span class="line">                  flag = <span class="literal">true</span>;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              temp = temp.next;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//根据flag判断是否找到是否要修改的节点</span></span><br><span class="line">          <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">              temp.name = newHeadNode.name;</span><br><span class="line">              temp.nickname = newHeadNode.nickname;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;<span class="comment">//没有找到</span></span><br><span class="line">              System.out.<span class="built_in">println</span>(<span class="string">"没有找到的节点，不能修改\n"</span>+newHeadNode.no);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//删除节点，head节点不能动，需要一个temp辅助节点，找到删除节点的前一个节点</span></span><br><span class="line">      <span class="comment">//说明我们再比较时，是让temp.next.no 和 需要删除的节点的no比较</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">          HeroNode temp = head;</span><br><span class="line">          <span class="keyword">boolean</span> flag = <span class="literal">false</span>;  <span class="comment">//表示是否找到待删除结</span></span><br><span class="line">          <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                  <span class="keyword">if</span> (temp.next == null)&#123;<span class="comment">//已经到链表的最后</span></span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">if</span> (temp.next.no == no)&#123;</span><br><span class="line">                      <span class="comment">//找到了待删除的节点的前一个节点temp</span></span><br><span class="line">                      flag = <span class="literal">true</span>;</span><br><span class="line">                      <span class="keyword">break</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                  temp = temp.next;<span class="comment">//temp后移，遍历</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//判断flag</span></span><br><span class="line">          <span class="keyword">if</span>(flag)&#123;<span class="comment">//找到</span></span><br><span class="line">              <span class="comment">// 可以删除，节点没得指向，垃圾回收机制回收</span></span><br><span class="line">              temp.next = temp.next.next;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              System.out.<span class="built_in">println</span>(<span class="string">"没得找到，节点不存在\n"</span>+no);</span><br><span class="line">              &#125;</span><br><span class="line">      &#125;</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">      <span class="comment">//显示链表[遍历]</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">              <span class="comment">//判断链表是否为空</span></span><br><span class="line">          <span class="keyword">if</span>(head.next == null)&#123;</span><br><span class="line">              System.out.<span class="built_in">println</span>(<span class="string">"链表为空"</span>);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//不为空，因其头节点不能动，创建辅助变量进行创建</span></span><br><span class="line">          HeroNode temp = head.next;</span><br><span class="line">          <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">              <span class="comment">//判断是否到链表最后</span></span><br><span class="line">              <span class="keyword">if</span>(temp == null)&#123;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">//输出节点信息</span></span><br><span class="line">              System.out.<span class="built_in">println</span>(temp);</span><br><span class="line">              <span class="comment">//将temp后移，不然是死循环</span></span><br><span class="line">              temp = temp.next;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>从点链表中删除一个节点思路:<ol>
<li>我们先要找到需要删除的这个节点的前一个节点temp</li>
<li>temp.next = temp.next.next</li>
<li>被删除的节点，将不会有其他引用指向，会被垃圾回收机制回收</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li>第二种方式：在添加时，排名将其插入指定的位置<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有顺序的添加方法 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> addByOrder(HeroNode headNode)&#123;</span><br><span class="line">          <span class="comment">//因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置</span></span><br><span class="line">          <span class="comment">//单链表，因此我找的temp是位于 添加位置的前一个个节点，否则插入不了</span></span><br><span class="line">          HeroNode temp = head;</span><br><span class="line">          <span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">//标识添加的编号是否存在，默认false</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">              <span class="keyword">if</span> (temp.<span class="keyword">next</span> == <span class="keyword">null</span>)&#123;<span class="comment">//说明temp已经在链表的最后</span></span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (temp.<span class="keyword">next</span>.no &gt; headNode.no)&#123;<span class="comment">//位置找到，就在temp的后面插入</span></span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.<span class="keyword">next</span>.no == headNode.no)&#123;<span class="comment">//说明和headNode的编号依然存在</span></span><br><span class="line">                  flag = <span class="keyword">true</span>;<span class="comment">//说明编号存在</span></span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              temp = temp.<span class="keyword">next</span>; <span class="comment">//后移，遍历当前的链表</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//判断flag的值</span></span><br><span class="line">          <span class="keyword">if</span>(flag)&#123;<span class="comment">//不能添加说明编号存在</span></span><br><span class="line">              System.out.<span class="keyword">println</span>(<span class="string">"准备添加的任务，已经存在不能添加\n"</span>+headNode.no);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="comment">//插入到链表中，temp的后面</span></span><br><span class="line">              headNode.<span class="keyword">next</span>= temp.<span class="keyword">next</span>;</span><br><span class="line">              temp.<span class="keyword">next</span> = headNode;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<h3 id="单链表面试题"><a href="#单链表面试题" class="headerlink" title="单链表面试题"></a>单链表面试题</h3></li>
<li>单链表常见的面试题如下<ol>
<li>求单链表中有效节点的个数<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取单链表中有效节点的个数(如果是带头节点的链表，需求不统计头节点)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> getLength(HeroNode head)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (head.<span class="keyword">next</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义一个辅助变量，这里没有统计头节点</span></span><br><span class="line">    HeroNode cur = head.<span class="keyword">next</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">        length++;</span><br><span class="line">        cur = cur.<span class="keyword">next</span>; <span class="comment">//遍历</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>查找单链表中的倒数第K个节点【新浪面试题】<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找单链表中倒数第K个节点</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 思路：</span></span><br><span class="line"><span class="comment">* 1. 编写一个方法，接受temp节点，同时接受一个index</span></span><br><span class="line"><span class="comment">* 2. index表示倒数index个节点</span></span><br><span class="line"><span class="comment">* 3. 先把链表从头到尾遍历一下，的到链表的总的长度getLenth</span></span><br><span class="line"><span class="comment">* 4. 得到size之后。我们从链表的第一个开始遍历(size-index)个，就可以得到</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">//如果找到，则返回该节点，否则返回null;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HeroNode findLastIndexNode(HeroNode head,<span class="keyword">int</span> index)&#123;</span><br><span class="line">    <span class="comment">//判断如果链表为空，就返回null</span></span><br><span class="line">    <span class="keyword">if</span> (head.<span class="keyword">next</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一次的到链表的长度(节点个数)</span></span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">size</span> = getLength(head);</span><br><span class="line">    <span class="comment">// 第二次遍历 size-index 位置，即使倒数的第K个节点</span></span><br><span class="line">    <span class="comment">//先做一个index的校验</span></span><br><span class="line">    <span class="keyword">if</span>(index &lt;=<span class="number">0</span> || index &gt; <span class="keyword">size</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义辅助变量，for循环定位倒数的index</span></span><br><span class="line">    HeroNode cur = head.<span class="keyword">next</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">size</span>-index; i++) &#123;</span><br><span class="line">        cur = cur.<span class="keyword">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>单链表的反转【腾讯面试题】<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">思路：</span><br><span class="line"><span class="number">1</span>. 先定义一个节点reverseHead = <span class="keyword">new</span> HeroNode();</span><br><span class="line"><span class="number">2</span>. 从头到尾遍历原来的链表，每遍历一个节点，就将其取出，并放入新的(reverseHead)链表的最前端</span><br><span class="line"><span class="number">3</span>. 原来链表的head.<span class="keyword">next</span> = reverseHead.<span class="keyword">next</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将单链表进行反转</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> reverseList(HeroNode head)&#123;</span><br><span class="line">      <span class="comment">//如果只有一个节点，或者链表为空，无需反转，直接返回</span></span><br><span class="line">      <span class="keyword">if</span>(head.<span class="keyword">next</span> == <span class="keyword">null</span> || head.<span class="keyword">next</span>.<span class="keyword">next</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//定义一个辅助指针(变量),帮我们遍历原来的链表</span></span><br><span class="line">       HeroNode cur = head.<span class="keyword">next</span>;</span><br><span class="line">      HeroNode <span class="keyword">next</span> = <span class="keyword">null</span>; <span class="comment">//指向当前节点的下一个节点</span></span><br><span class="line">      HeroNode reverseHead = <span class="keyword">new</span> HeroNode(<span class="number">0</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//遍历原来的链表，每遍历一个节点，就将其取出，并放在新的链表reverseHead的最前端</span></span><br><span class="line">      <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">next</span> = cur.<span class="keyword">next</span>; <span class="comment">//先保存当前节点的下一个节点，应为后面要使用</span></span><br><span class="line">          cur.<span class="keyword">next</span> = reverseHead.<span class="keyword">next</span>; <span class="comment">// 将cur的下一个结点指向新的链表做前端</span></span><br><span class="line">          cur = <span class="keyword">next</span>;<span class="comment">//让cur后移</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//将head.next 指向reverseHead.next,实现反转</span></span><br><span class="line">      head.<span class="keyword">next</span> = reverseHead.<span class="keyword">next</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>从尾到头打印单链表【百度：要求方式1：反向遍历。方式2:Stack栈】<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">思路：</span><br><span class="line">方式<span class="number">1</span>：先将单链表进行反转操作，然后再遍历即可，这样的做的问题是会破坏原来的单链表的结构，不建议</span><br><span class="line">方式<span class="number">2</span>：可以利用栈这个结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印效果。</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 从尾到头打印单链表</span></span><br><span class="line">  <span class="comment">//可以利用栈这个结构，将各个节点压入到栈中，然后利用栈的先进后出的特点，就实现了逆序打印效果。</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  revesePrint(HeroNode head)&#123;</span><br><span class="line">      <span class="keyword">if</span> (head.<span class="keyword">next</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//创建建一个栈</span></span><br><span class="line">      Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">      HeroNode cur = head.<span class="keyword">next</span>;</span><br><span class="line">      <span class="comment">//将链表的所有节点压入栈</span></span><br><span class="line">      <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">          stack.<span class="keyword">push</span>(cur);</span><br><span class="line">          cur = cur.<span class="keyword">next</span>;<span class="comment">//cur后移，这样就可以压入下一个节点</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//将栈中的节点进行打印，pop出栈</span></span><br><span class="line">      <span class="keyword">while</span> (stack.<span class="keyword">size</span>() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">          System.out.<span class="keyword">println</span>(stack.<span class="keyword">pop</span>());<span class="comment">//先进后出</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//注意：没有改变链表本身的结构</span></span><br></pre></td></tr></table></figure></li>
<li>合并两个有序的单链表，合并之后的链表依然有序</li>
</ol>
</li>
</ul>
<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><ul>
<li>特点:pre域指向前一个节点</li>
<li>分析双向链表的遍历，添加，修改删除的操作思路 <ul>
<li>遍历：和单向链表一样只是可以向前查找</li>
<li>添加(默认添加到双线链表的最后)：<ol>
<li>先找到双向链表的最后节点</li>
<li>temp.next = newTemp</li>
<li>newTemp.pre = temp</li>
</ol>
</li>
<li>修改：和原来的单向链表一样</li>
<li>删除：<ol>
<li>因为是双向链表可以实现自我删除某个节点</li>
<li>直接找到要删除的这个节点，比如temp</li>
<li>temp.pre.next = temp.next</li>
<li>temp.next.pre = temp.pre</li>
</ol>
</li>
</ul>
</li>
<li>代码实现<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.DoubleLinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双向链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> doubleLinkList &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        <span class="comment">//创建节点</span></span><br><span class="line">        HeroNode2  node = <span class="keyword">new</span> HeroNode2(<span class="number">1</span>, <span class="string">"宋江"</span>, <span class="string">"及时雨"</span>);</span><br><span class="line">        HeroNode2 node1 = <span class="keyword">new</span> HeroNode2(<span class="number">2</span>, <span class="string">"卢俊义"</span>, <span class="string">"玉麒麟"</span>);</span><br><span class="line">        HeroNode2 node2 = <span class="keyword">new</span> HeroNode2(<span class="number">3</span>, <span class="string">"吴用"</span>, <span class="string">"智多星"</span>);</span><br><span class="line">        HeroNode2 node3 = <span class="keyword">new</span> HeroNode2(<span class="number">4</span>, <span class="string">"林冲"</span>, <span class="string">"豹子头"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个双向链表</span></span><br><span class="line">        DoubleList doubleList = <span class="keyword">new</span> DoubleList();</span><br><span class="line">        doubleList.add(node);</span><br><span class="line">        doubleList.add(node1);</span><br><span class="line">        doubleList.add(node2);</span><br><span class="line">        doubleList.add(node3);</span><br><span class="line">        doubleList.list();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        HeroNode2 node4 = <span class="keyword">new</span> HeroNode2(<span class="number">2</span>, <span class="string">"哈哈"</span>, <span class="string">"麒麟哈哈"</span>);</span><br><span class="line">        doubleList.update(node4);</span><br><span class="line">        doubleList.list();</span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"----------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除</span></span><br><span class="line">        doubleList.del(<span class="number">3</span>);</span><br><span class="line">        doubleList.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个双向链表</span></span><br><span class="line"><span class="keyword">class</span> DoubleList&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//先初始化一个头结点，头节点不要动，不存放具体的数据</span></span><br><span class="line">    HeroNode2 head = <span class="keyword">new</span> HeroNode2(<span class="number">0</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回头节点</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode2 getHead()&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> add(HeroNode2 headNode)&#123;</span><br><span class="line">        <span class="comment">//思路：但不考虑编号的顺序时</span></span><br><span class="line">        <span class="comment">// 1.找到当前链表的最后一个节点</span></span><br><span class="line">        <span class="comment">// 2.将最后这个节点的next指向性的节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//由于头指针不能动，我们需要一个辅助变量 temp</span></span><br><span class="line">        <span class="comment">//头节点指向temp</span></span><br><span class="line">        HeroNode2 temp = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历找到最后节点</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//找到链表的最后</span></span><br><span class="line">            <span class="keyword">if</span>(temp.<span class="keyword">next</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果没得找到就将temp后移</span></span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当退出无限循环时，temp就指向链表的最后</span></span><br><span class="line">        <span class="comment">//形成一个双向链表</span></span><br><span class="line">        temp.<span class="keyword">next</span> = headNode;<span class="comment">//将其指向新的节点</span></span><br><span class="line">        headNode.pre = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有顺序的插入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> addByOrder(HeroNode2 headNode)&#123;</span><br><span class="line">        <span class="comment">//因为头节点不能动，因此我们仍然通过一个辅助指针(变量)来帮助找到添加的位置</span></span><br><span class="line">        <span class="comment">//单链表，因此我找的temp是位于 添加位置的前一个个节点，否则插入不了</span></span><br><span class="line">        HeroNode2 temp = head;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">//标识添加的编号是否存在，默认false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.<span class="keyword">next</span> == <span class="keyword">null</span>)&#123;<span class="comment">//说明temp已经在链表的最后</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.<span class="keyword">next</span>.no &gt; headNode.no)&#123;<span class="comment">//位置找到，就在temp的后面插入</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp.<span class="keyword">next</span>.no == headNode.no)&#123;<span class="comment">//说明和headNode的编号依然存在</span></span><br><span class="line">                flag = <span class="keyword">true</span>;<span class="comment">//说明编号存在</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.<span class="keyword">next</span>; <span class="comment">//后移，遍历当前的链表</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断flag的值</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;<span class="comment">//不能添加说明编号存在</span></span><br><span class="line">            System.out.<span class="keyword">println</span>(<span class="string">"准备添加的任务，已经存在不能添加\n"</span>+headNode.no);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//插入到链表中，temp的后面</span></span><br><span class="line">            headNode.<span class="keyword">next</span>= temp.<span class="keyword">next</span>;</span><br><span class="line">            temp.<span class="keyword">next</span> = headNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 双向链表</span></span><br><span class="line"><span class="comment">* 删除：我们可以直接找到要删除的节点，</span></span><br><span class="line"><span class="comment">* 找到后自我删除</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">    <span class="comment">//删除节点，head节点不能动，需要一个temp辅助节点，找到删除节点的前一个节点</span></span><br><span class="line">    <span class="comment">//说明我们再比较时，是让temp.next.no 和 需要删除的节点的no比较</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> del(<span class="keyword">int</span> no)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断当前链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(head.<span class="keyword">next</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.<span class="keyword">println</span>(<span class="string">"链表为空不能删除"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HeroNode2 temp = head.<span class="keyword">next</span>; <span class="comment">//辅助指针</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;  <span class="comment">//表示是否找到待删除结</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="keyword">null</span>)&#123;<span class="comment">//已经到链表的最后</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.no == no)&#123;</span><br><span class="line">                <span class="comment">//找到了待删除的节点的前一个节点temp</span></span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.<span class="keyword">next</span>;<span class="comment">//temp后移，遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断flag</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;<span class="comment">//找到</span></span><br><span class="line">            <span class="comment">// 可以删除，节点没得指向，垃圾回收机制回收</span></span><br><span class="line">            <span class="comment">//temp.next = temp.next.next; //单向链表</span></span><br><span class="line">            temp.pre.<span class="keyword">next</span> =temp.<span class="keyword">next</span>;</span><br><span class="line">            <span class="comment">//注意：如果删除的是最后一个节点，有问题，不需要执行下一个代码</span></span><br><span class="line">            <span class="keyword">if</span> (temp.<span class="keyword">next</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">                temp.<span class="keyword">next</span>.pre = temp.pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.<span class="keyword">println</span>(<span class="string">"没得找到，节点不存在\n"</span>+no);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改节点信息，根据no编号来修改，即no编号不能改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> update(HeroNode2 newHeadNode)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (head.<span class="keyword">next</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.<span class="keyword">println</span>(<span class="string">"链表为空....."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到需要修给的节点，根据no编号来找，定义一个辅助变量</span></span><br><span class="line">        HeroNode2 temp = head.<span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>; <span class="comment">//表示是否找到给节点</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">// 表示已经到达链表最后，链表遍历结束</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp.no == newHeadNode.no)&#123;</span><br><span class="line">                <span class="comment">//找到</span></span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据flag判断是否找到是否要修改的节点</span></span><br><span class="line">        <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">            temp.name = newHeadNode.name;</span><br><span class="line">            temp.nickname = newHeadNode.nickname;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//没有找到</span></span><br><span class="line">            System.out.<span class="keyword">println</span>(<span class="string">"没有找到的节点，不能修改\n"</span>+newHeadNode.no);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示链表[遍历]</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> list()&#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(head.<span class="keyword">next</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.<span class="keyword">println</span>(<span class="string">"链表为空"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不为空，因其头节点不能动，创建辅助变量进行创建</span></span><br><span class="line">        HeroNode2 temp = head.<span class="keyword">next</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//判断是否到链表最后</span></span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出节点信息</span></span><br><span class="line">            System.out.<span class="keyword">println</span>(temp);</span><br><span class="line">            <span class="comment">//将temp后移，不然是死循环</span></span><br><span class="line">            temp = temp.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义HeroNode，每个HeroNode兑现就是一个节点</span></span><br><span class="line"><span class="keyword">class</span> HeroNode2&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> no;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String nickname;</span><br><span class="line">    <span class="keyword">public</span> HeroNode2 <span class="keyword">next</span>; <span class="comment">//指向下一个节点 ，默认null</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode2 pre;  <span class="comment">//指向前一个节点，默认 null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="keyword">public</span> HeroNode2(<span class="keyword">int</span> hNo, String name, String nickname)&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = hNo;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写toString</span></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> String toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"HeroNode&#123;"</span> +</span><br><span class="line">                <span class="string">"no="</span> + no +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", nickname='"</span> + nickname + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h3><h4 id="单向环形链表"><a href="#单向环形链表" class="headerlink" title="单向环形链表"></a>单向环形链表</h4></li>
<li>Josephu(约瑟夫问题，约瑟夫环):<br>设编号为1,2,3…..n的n个人围坐一圈，约定编号为k(1&lt;=k&lt;=n)的人从1开始报数，数到m的那个有出列，他的下一个位又开始从1开始报数，以此类推，直到所有出列位置，由此产生一个出队编号的序列。</li>
<li>提示：用一个不带头结点的循环链表来处理Josephu问题：先构成一个有n个节点的单循环链表，然后由k节点起从1开始计数，记到m时对应节点从链表中删除，然后在从被删除的节点的下一个节点，又从1开始计数，直到最后一个节点从链表中删除算法结束。</li>
<li>实现思路:<ol>
<li>构建一个单向的循环链表</li>
<li>先创建第一个节点，让first指向该节点，并形成环形</li>
<li>后面当我们每创建一个新的节点,就把该节点，加入到已有的环形链表中</li>
</ol>
</li>
<li>遍历环形链表<ol>
<li>先让一个辅助指针(变量)curBoy，指向first节点</li>
<li>然后通过while循环遍历该环形链表即可，curBoy.next == first 遍历结束</li>
<li>出链表：需要创建一个辅助指针(变量)helper，事先应该指向环形链表的最后这个节点，<br>小孩报数前，先让first和helper移动k-1<br>当小孩报数是同时移动m-次，这时就可以将first指向小孩节点出圈</li>
<li>first = first.next;helper.next = first;</li>
<li>原来first指向的节点就没有任何引用，就会被回收</li>
</ol>
</li>
<li>代码实现 —》约瑟夫问题<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//约瑟夫问题</span></span><br><span class="line"> public <span class="keyword">class</span> AnnularLinkedList &#123;</span><br><span class="line">     public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//测试环形链表，和遍历</span></span><br><span class="line">         AnnularList annularList = <span class="keyword">new</span> <span class="constructor">AnnularList()</span>;</span><br><span class="line">         annularList.add<span class="constructor">Boy(125)</span>;</span><br><span class="line">         annularList.show<span class="constructor">Boy()</span>;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//测试出圈</span></span><br><span class="line">     annularList.count<span class="constructor">Boy(10,20,125)</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//创建一个环形的单向链表</span></span><br><span class="line"> <span class="keyword">class</span> AnnularList&#123;</span><br><span class="line">     <span class="comment">//创建一个first节点，当前没有编号</span></span><br><span class="line">     <span class="keyword">private</span> Boy first  = <span class="keyword">new</span> <span class="constructor">Boy(-1)</span>;</span><br><span class="line">     <span class="comment">//添加一个小孩节点，构建成一个环形链表</span></span><br><span class="line">     public  void add<span class="constructor">Boy(<span class="params">int</span> <span class="params">nums</span>)</span>&#123;</span><br><span class="line">         <span class="comment">//nums 数据校验</span></span><br><span class="line">         <span class="keyword">if</span>(nums &lt; <span class="number">1</span>)&#123;</span><br><span class="line">             <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"nums值不正确。。。。。。"</span>);</span><br><span class="line">             return;</span><br><span class="line">         &#125;</span><br><span class="line">         Boy curBoy = null; <span class="comment">//辅助节点，帮助构建环形链表</span></span><br><span class="line">         <span class="comment">//使用for来创建我们的环形链表</span></span><br><span class="line">         for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; nums ; i++) &#123;</span><br><span class="line">             <span class="comment">//根据编号，创建小孩节点</span></span><br><span class="line">             Boy boy = <span class="keyword">new</span> <span class="constructor">Boy(<span class="params">i</span>)</span>;</span><br><span class="line">             <span class="comment">//如果是第一个节点</span></span><br><span class="line">             <span class="keyword">if</span> (i<span class="operator"> == </span><span class="number">1</span>)&#123;</span><br><span class="line">                 first = boy;</span><br><span class="line">                 first.set<span class="constructor">Next(<span class="params">first</span>)</span>; <span class="comment">//nex域指向自身，构成环</span></span><br><span class="line">                 curBoy = first; <span class="comment">//让curBoy指向第一个小孩</span></span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 curBoy.set<span class="constructor">Next(<span class="params">boy</span>)</span>; <span class="comment">// 让curBoy next域 指向boy</span></span><br><span class="line">                 boy.set<span class="constructor">Next(<span class="params">first</span>)</span>; <span class="comment">//构成环</span></span><br><span class="line">                 curBoy = boy;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//遍历一个当前的环形链表</span></span><br><span class="line">     public void show<span class="constructor">Boy()</span>&#123;</span><br><span class="line">         <span class="comment">//判断链表是否为空</span></span><br><span class="line">         <span class="keyword">if</span> (first<span class="operator"> == </span>null)&#123;</span><br><span class="line">             <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"链表为空。。。。"</span>);</span><br><span class="line">             return;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//因为first(头节点)不能动，因此使用一个辅助指针完成遍历</span></span><br><span class="line">         Boy curBoy = first;</span><br><span class="line">         <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">             <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.printf(<span class="string">"小孩的编号%d \n"</span>,curBoy.get<span class="constructor">No()</span>);</span><br><span class="line">             <span class="keyword">if</span> (curBoy.get<span class="constructor">Next()</span><span class="operator"> == </span>first)&#123; <span class="comment">//说明已经遍历完毕</span></span><br><span class="line">                 break;</span><br><span class="line">             &#125;</span><br><span class="line">             curBoy = curBoy.get<span class="constructor">Next()</span>; <span class="comment">//curBoy后移</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//根据用户的输入，计算出小孩出圈的顺序</span></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 参数说明：</span></span><br><span class="line"><span class="comment">     * startNo：表示从第几个小孩开始数数</span></span><br><span class="line"><span class="comment">     * countNum：表示数几下</span></span><br><span class="line"><span class="comment">     * nums：表示最初有多少小孩在圈中</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">     public void count<span class="constructor">Boy(<span class="params">int</span> <span class="params">startNo</span>,<span class="params">int</span> <span class="params">countNum</span>,<span class="params">int</span> <span class="params">nums</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//先对数据进行效验</span></span><br><span class="line">         <span class="keyword">if</span> (first<span class="operator"> == </span>null<span class="operator"> || </span>startNo &lt; <span class="number">1</span><span class="operator"> || </span>startNo &gt; nums)&#123;</span><br><span class="line">             <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"参数输入有误，请重新输入"</span>);</span><br><span class="line">             return;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//创建要给辅助指针，帮助完成小孩出圈</span></span><br><span class="line">         Boy helper = first;</span><br><span class="line">         <span class="comment">//需要创建一个辅助指针(变量)helper，事先应该指向环形链表的最后这个节点</span></span><br><span class="line">         <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">             <span class="keyword">if</span> (helper.get<span class="constructor">Next()</span><span class="operator"> == </span>first)&#123;<span class="comment">//说明helper指向最后小孩节点</span></span><br><span class="line">                 break;</span><br><span class="line">             &#125;</span><br><span class="line">             helper = helper.get<span class="constructor">Next()</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//小孩报数前，先让first和helper移动k-1</span></span><br><span class="line">         for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; startNo - <span class="number">1</span>; i++) &#123;</span><br><span class="line">             first = first.get<span class="constructor">Next()</span>;</span><br><span class="line">             helper = helper.get<span class="constructor">Next()</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//当小孩报数是同时移动m-次，这时就可以将first指向小孩节点出圈</span></span><br><span class="line">         <span class="comment">//这里是一个循环操作，知道圈中只有一个节点</span></span><br><span class="line">         <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">             <span class="keyword">if</span> (helper<span class="operator"> == </span>first)&#123;<span class="comment">//说明圈中只有一个节点</span></span><br><span class="line">                 break;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//让first 和 hepler 指针同时的移动countNum-1</span></span><br><span class="line">             for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; countNum -<span class="number">1</span> ; i++) &#123;</span><br><span class="line">                 first = first.get<span class="constructor">Next()</span>;</span><br><span class="line">                 helper = helper.get<span class="constructor">Next()</span>;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//这时first指向的节点就是出圈的小孩节点</span></span><br><span class="line">             <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"小孩出圈："</span>+first.get<span class="constructor">No()</span>);</span><br><span class="line">             <span class="comment">//这时将first指向的小孩节点出圈</span></span><br><span class="line">             first = first.get<span class="constructor">Next()</span>;</span><br><span class="line">             helper.set<span class="constructor">Next(<span class="params">first</span>)</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"最后留在圈中小孩编号"</span>+helper.get<span class="constructor">No()</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//先创建一个Boy类，表示一个节点</span></span><br><span class="line"> <span class="keyword">class</span> Boy&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="built_in">int</span> no; <span class="comment">//编号</span></span><br><span class="line">     <span class="keyword">private</span> Boy next;</span><br><span class="line"></span><br><span class="line">     public <span class="constructor">Boy(<span class="params">int</span> <span class="params">no</span>)</span> &#123;</span><br><span class="line">         this.no = no;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     public <span class="built_in">int</span> get<span class="constructor">No()</span> &#123;</span><br><span class="line">         return no;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     public void set<span class="constructor">No(<span class="params">int</span> <span class="params">no</span>)</span> &#123;</span><br><span class="line">         this.no = no;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     public Boy get<span class="constructor">Next()</span> &#123;</span><br><span class="line">         return next;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     public void set<span class="constructor">Next(Boy <span class="params">next</span>)</span> &#123;</span><br><span class="line">         this.next = next;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+备忘录模式</title>
    <url>/2020/05/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><ul>
<li>基本介绍：<ol>
<li>备忘录模式(Memento Pattern)在不破坏封装性的前期下，捕捉一个对象的内部状态，并在该对象之外保存这个状态，这样以后就可以将对象恢复到原来保存的状态。</li>
<li>可以这里理解备忘录模式：现实生活中的备忘录用来记录，某些要去做的事情或者是记录已经达成的共同意见的事情，以防止忘记，而在软件层面，备忘录模式有着相同的含义，备忘录对象主要用来记录一个对象的某种状态，或者某些数据，但要做回退时，可以对从备忘录对象里获得原来的数据进行恢复操作</li>
<li>备忘录模式属于行为型模式；</li>
</ol>
<ul>
<li>类图<br><img src="images%5CMemento.png" alt="" title="原理类图">;<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4></li>
<li>原对象<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 备忘录模式</span><br><span class="line">* */</span><br><span class="line"></span><br><span class="line">public class Origintor &#123;</span><br><span class="line">    private String <span class="keyword">state</span>; //状态信息</span><br><span class="line"></span><br><span class="line">    public String getState()&#123;</span><br><span class="line">        return <span class="keyword">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void <span class="built_in">set</span>State(String <span class="keyword">state</span>)&#123;</span><br><span class="line">        this.<span class="keyword">state</span> = <span class="keyword">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //编写方法可以保存对象状态，返回一个Memeto 备忘录</span><br><span class="line">    public Memento saveStateMemento()&#123;</span><br><span class="line">        return new Memento(<span class="keyword">state</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //恢复状态，从备忘录中获取</span><br><span class="line">    public void getStateFromMemento(Memento memento)&#123;</span><br><span class="line">        <span class="keyword">state</span> = memento.getState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>备忘录<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 备忘录</span><br><span class="line">* */</span><br><span class="line">public class Memento &#123;</span><br><span class="line">    private String <span class="keyword">state</span>;</span><br><span class="line"></span><br><span class="line">    public Memento(String <span class="keyword">state</span>) &#123;</span><br><span class="line">        this.<span class="keyword">state</span> = <span class="keyword">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getState() &#123;</span><br><span class="line">        return <span class="keyword">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>管理者<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 备忘录管理者</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Caretaker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params">Memento memento</span>)</span>&#123;</span><br><span class="line">        mementoList.<span class="keyword">add</span>(memento);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">get</span>(<span class="params"><span class="keyword">int</span> index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mementoList.<span class="keyword">get</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 测试</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">public <span class="keyword">class</span> Client &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        Origintor origintor = <span class="keyword">new</span> <span class="constructor">Origintor()</span>;</span><br><span class="line">        Caretaker caretaker = <span class="keyword">new</span> <span class="constructor">Caretaker()</span>;</span><br><span class="line"></span><br><span class="line">        origintor.set<span class="constructor">State(<span class="string">"NEW-STATE"</span>)</span>;</span><br><span class="line">        <span class="comment">//保存NEW-STATE的状态</span></span><br><span class="line">        caretaker.add(origintor.save<span class="constructor">StateMemento()</span>);</span><br><span class="line"></span><br><span class="line">        origintor.set<span class="constructor">State(<span class="string">"RUNABLE-STATE"</span>)</span>;</span><br><span class="line">        <span class="comment">//保存RUNABLE的状态</span></span><br><span class="line">        caretaker.add(origintor.save<span class="constructor">StateMemento()</span>);</span><br><span class="line"></span><br><span class="line">        origintor.set<span class="constructor">State(<span class="string">"RUNNING-STATE"</span>)</span>;</span><br><span class="line">        <span class="comment">//保存RUNNING的状态</span></span><br><span class="line">        caretaker.add(origintor.save<span class="constructor">StateMemento()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"当前的状态："</span>+origintor.get<span class="constructor">State()</span>);</span><br><span class="line">        <span class="comment">//RUNNING-STATE</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//恢复状态</span></span><br><span class="line">        origintor.get<span class="constructor">StateFromMemento(<span class="params">caretaker</span>.<span class="params">get</span>(1)</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"恢复到可运行状态："</span>+origintor.get<span class="constructor">State()</span>);</span><br><span class="line">        <span class="comment">//恢复到RUNABLE-STATE</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h4></li>
</ul>
</li>
<li>游戏中  攻击力  状态的改变</li>
<li>类图<br><img src="images%5CMementoGame.png" alt=""></li>
<li>代码实现<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">*</span><br><span class="line">* 原发器 游戏角色</span><br><span class="line">* */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameRole</span> &#123;</span></span><br><span class="line">    <span class="comment">//攻击力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> vit;</span><br><span class="line">    <span class="comment">//防御力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> def;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVit</span><span class="params">(<span class="keyword">int</span> vit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDef</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDef</span><span class="params">(<span class="keyword">int</span> def)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建备忘录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(vit,def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//恢复状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recoveGamePoleState</span><span class="params">(Memento memento)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.def = memento.getDef();</span><br><span class="line">        <span class="keyword">this</span>.vit = memento.getVit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示当前状态的角色</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"游戏角色当前的攻击力："</span>+<span class="keyword">this</span>.vit + <span class="string">"防御力："</span>+ <span class="keyword">this</span>.def);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>备忘录 Memento<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 备忘录</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//攻击力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> vit;</span><br><span class="line">    <span class="comment">//防御力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">def</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Memento(<span class="keyword">int</span> vit, <span class="keyword">int</span> <span class="keyword">def</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = vit;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">def</span> = <span class="keyword">def</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> getVit() &#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setVit(<span class="keyword">int</span> vit) &#123;</span><br><span class="line">        <span class="keyword">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> getDef() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">def</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setDef(<span class="keyword">int</span> <span class="keyword">def</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">def</span> = <span class="keyword">def</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>管理者 保存状态的容器<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 管理者</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存游戏角色的状态</span></span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//对GameRole，保存多种状态</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Memento&gt; mementos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多个游戏角色保存多个游戏状态</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; mementoMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Client &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建游戏角色</span></span><br><span class="line">        GameRole gameRole = <span class="keyword">new</span> <span class="constructor">GameRole()</span>;</span><br><span class="line">        gameRole.set<span class="constructor">Def(100)</span>;</span><br><span class="line">        gameRole.set<span class="constructor">Vit(100)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"和boss大战前的状态："</span>);</span><br><span class="line">        gameRole.display<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//吧当前的状态保存到备忘录</span></span><br><span class="line">        Caretaker caretaker = <span class="keyword">new</span> <span class="constructor">Caretaker()</span>;</span><br><span class="line"></span><br><span class="line">        caretaker.set<span class="constructor">Memento(<span class="params">gameRole</span>.<span class="params">createMemento</span>()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"和boss大战..."</span>);</span><br><span class="line">        gameRole.set<span class="constructor">Def(30)</span>;</span><br><span class="line">        gameRole.set<span class="constructor">Vit(30)</span>;</span><br><span class="line"></span><br><span class="line">        gameRole.display<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"战后法师恢复其状态为满血："</span>);</span><br><span class="line">        gameRole.recove<span class="constructor">GamePoleState(<span class="params">caretaker</span>.<span class="params">getMemento</span>()</span>);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"恢复后的状态"</span>);</span><br><span class="line">        gameRole.display<span class="literal">()</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>结果:<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">和boss大战前的状态：</span><br><span class="line">游戏角色当前的攻击力：<span class="number">100</span>防御力：<span class="number">100</span></span><br><span class="line">和boss大战...</span><br><span class="line">游戏角色当前的攻击力：<span class="number">30</span>防御力：<span class="number">30</span></span><br><span class="line">战后法师恢复其状态为满血：</span><br><span class="line">恢复后的状态</span><br><span class="line">游戏角色当前的攻击力：<span class="number">100</span>防御力：<span class="number">100</span></span><br></pre></td></tr></table></figure></li>
<li>小结：</li>
</ul>
<ol>
<li>给用户提供一种可以恢复状态的机制，可以使用户比较方便地回到某一历史的状态。</li>
<li>实现信息的封装，使得用户不再关心状态的保存细节</li>
<li>如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存，这个需要注意</li>
<li>使用的应用场景：1.后悔药，2.打游戏时的存档，3.Windows里面的ctrl+z，4.IE中的后退 5.数据库的事务管理</li>
<li>为了节约内存，备忘录模式可以和原型模式配合使用  </li>
</ol>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+策略模式</title>
    <url>/2020/05/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><ul>
<li>编写鸭子问题，具体项目要求如下：</li>
</ul>
<ol>
<li>有各种鸭子(比如：野鸭，北京鸭，水鸭等，鸭子有各种行为，比如，叫，飞行等)</li>
<li>显示鸭子信息</li>
</ol>
<ul>
<li>类图<br><img src="images%5CStrtegy.png" alt="" title="原理类图"><h4 id="传统方式代码实现："><a href="#传统方式代码实现：" class="headerlink" title="传统方式代码实现："></a>传统方式代码实现：</h4><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Duck</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"鸭子叫。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"鸭子会游泳..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flly</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"鸭子飞行..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span>(<span class="params"></span>)</span>;<span class="comment">//显示鸭子信息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Duck</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"鸭子叫。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"鸭子会游泳..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flly</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"鸭子飞行..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span>(<span class="params"></span>)</span>;<span class="comment">//显示鸭子信息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TeyDuck</span> <span class="title">extends</span> <span class="title">Duck</span> &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"玩具鸭。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swin</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"玩具鸭不能叫。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"玩具鸭不能游泳。。。"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flly</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"玩具鸭不能飞。。"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WildDuck</span> <span class="title">extends</span> <span class="title">Duck</span> &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"这是野鸭..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>小结：<br>传统方式实现的问题分析和决绝方案</li>
</ul>
<ol>
<li>其他鸭子，都继承了Duck类，所以fly让所有子类都会飞了，这是不正常的，</li>
<li>上面说的1的问题，其实就是继承带来的问题，对类的局部改动，尤其超类的局部改动，会影响其他部分，会有溢出效应</li>
<li>为了改进1的问题，我们可以通过覆盖fly方法来解决 ==》覆盖问题</li>
<li>问题又来了，如果我们有一个玩具鸭子ToyDuck，这样就需要ToyDuck去覆盖Duck的所有实现的方法 ==》解决思路 策略模式</li>
</ol>
<h4 id="策略模式基本介绍"><a href="#策略模式基本介绍" class="headerlink" title="策略模式基本介绍"></a>策略模式基本介绍</h4><ol>
<li>策略模式(Strategy Pattern)中，定义算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户</li>
<li>这算法体现了几个设计原则，<br>第一，把变化的代码从不变的代码中分离出来；<br>第二，针对接口编程而不是具体类(定义了策略接口);<br>第三，多用组合/聚合，少用继承(客户通过组合方式使用策略);</li>
</ol>
<ul>
<li>类图<br><img src="images%5CstaticProxy.png" alt="" title="原理类图"></li>
</ul>
<ul>
<li>应用实例–》实现上面的鸭子问题<ol>
<li>策略模式：分别封装行为接口，实现算法族，超类里面放行为接口对象，在子类里具体设定行为对象。原则就是：分离变化部分，封装接口，基于接口编程各种功能。此模式让行为的变化独立与算法的使用者</li>
</ol>
</li>
<li>实例类图<br><img src="images%5CStatergyDuck.png" alt="" title="原理类图"></li>
</ul>
<ul>
<li>代码实现：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 聚合</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性就是策略接口</span></span><br><span class="line">    FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Duck</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"鸭子叫。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"鸭子会游泳..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flyBehavior != <span class="keyword">null</span>)&#123;</span><br><span class="line">            flyBehavior.flay();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;<span class="comment">//显示鸭子信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PekingDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PekingDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> NoFlyBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"北京鸭。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToyDock</span> <span class="keyword">extends</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToyDock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior  = <span class="keyword">new</span> NoFlyBehavior();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"玩具鸭。。。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"玩具鸭不能叫。。"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"玩具鸭不能游泳。。。"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器，传入FlyBehavior</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WildDuck</span><span class="params">()</span></span>&#123;</span><br><span class="line">        flyBehavior = <span class="keyword">new</span> GoFly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是野鸭！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//行为接口  作为属性聚合到Duck</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flay</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不会飞。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoFly</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"飞翔技术高超。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BadFlyBehavior</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"飞翔技术一般。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Duck wildDuck = <span class="keyword">new</span> WildDuck();</span><br><span class="line">        wildDuck.flly();</span><br><span class="line"></span><br><span class="line">        PekingDuck pekingDuck = <span class="keyword">new</span> PekingDuck();</span><br><span class="line">        pekingDuck.flly();</span><br><span class="line"></span><br><span class="line">        ToyDock toyDock = <span class="keyword">new</span> ToyDock();</span><br><span class="line">        toyDock.flly();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="策略模式在JDK—Arrays应用的源码分析"><a href="#策略模式在JDK—Arrays应用的源码分析" class="headerlink" title="策略模式在JDK—Arrays应用的源码分析"></a>策略模式在JDK—Arrays应用的源码分析</h3></li>
<li>在JDK的Arrrays的Comparator就是使用了策略模式<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">package pattern.strategy.yuanmafengxi;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 源码分析 策略模式 Arrays</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Cast</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        Integer[] data = &#123;<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        <span class="comment">//实现升序排序，返回-1放在左边，1放在右边，0保持不变</span></span><br><span class="line">        Comparator&lt;Integer&gt; comparator = new Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> compare(Integer o1, Integer o2) &#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 &gt; o2)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 说明：</span></span><br><span class="line"><span class="comment">        * 实现Comparator接口(策略模式)</span></span><br><span class="line"><span class="comment">        * new实例就是实现策略接口的对象</span></span><br><span class="line"><span class="comment">        * compare()方法就是制定具体的处理方式</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Comparator&lt;Integer&gt; comparator1 =((o1, o2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(o1 &gt; o2)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 说明：</span></span><br><span class="line"><span class="comment">        *  public static &lt;T&gt; void sort(T[] a, Comparator&lt;? super T&gt; c) &#123;</span></span><br><span class="line"><span class="comment">        if (c == null) &#123;</span></span><br><span class="line"><span class="comment">            sort(a);</span></span><br><span class="line"><span class="comment">        &#125; else &#123;</span></span><br><span class="line"><span class="comment">            if (LegacyMergeSort.userRequested)</span></span><br><span class="line"><span class="comment">                legacyMergeSort(a, c); //实现策略模式</span></span><br><span class="line"><span class="comment">            else</span></span><br><span class="line"><span class="comment">                TimSort.sort(a, 0, a.length, c, null, 0, 0);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        Arrays.sort(data,comparator);</span><br><span class="line">        System.<span class="keyword">out</span>.println(Arrays.toString(data));</span><br><span class="line"></span><br><span class="line">        Arrays.sort(data,comparator1);</span><br><span class="line">        System.<span class="keyword">out</span>.println(Arrays.toString(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>策略模式的注意事项和细节</li>
</ul>
<ol>
<li>策略模式的关键是：分析项目中的变化部分和不变部分</li>
<li>策略模式的核心思想是：多用组合/聚合 少用继承；用行为类组合，而不是行为的继承，更有弹性</li>
<li>体现了”对修改关闭，对扩展开放”的原则，客户端增加行为不用修改原有代码，只要添加一种策略(或者行为)即可，避免了使用多重转移语句(if else)</li>
<li>提供了可以替换继承关系的办法：策略模式将算法封装在独立的Statergy类中使得你可以独立于其他Context改变它，使得易于切换，易于理解，易于扩展</li>
<li>需要注意的是：每添加一个策略就是增加一个类，当策略过多是会导致类数目庞大</li>
</ol>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+职责链模式</title>
    <url>/2020/05/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h3><ul>
<li>基本介绍：</li>
</ul>
<ol>
<li>职责链模式(Chain of Responsibility pattern),又叫责任链模式，为请求创建了一个接收者对象的链，这种模式对请求的发送者和接收者进行解耦。</li>
<li>责任链模式通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理请求，那么它会把相同的请求传递给下一个接收者，依次类推</li>
<li>这种设计模式属于行为型模式</li>
<li>是多个对象都有机会处理请求，从而避免耦合关系。将这个对象连成一条链，并沿着这条链传递给请求，直到有一个对象处理它为止。</li>
</ol>
<ul>
<li>类图<br><img src="images%5CResponsibility.png" alt="" title="原理类图"></li>
</ul>
<h4 id="应用案例："><a href="#应用案例：" class="headerlink" title="应用案例："></a>应用案例：</h4><ul>
<li><p>账务审批</p>
</li>
<li><p>类图<br><img src="images%5CResponsibility001.png" alt="" title="原理类图"></p>
</li>
<li><p>代码实现：</p>
<pre><code>//抽象类，定义整体规则
public abstract class Approver {

    Approver approver; //下一个处理着
    String name; //名字

    public Approver(String name){
        this.name = name;
    }

    //设置下一个处理着
    public void setApprover(Approver approver) {
        this.approver = approver;
    }

    //处理审批请求的方法，得到一个请求，处理是子类的问题，因此该方法做成抽象
    public abstract void processRequest(PurchaseRequest purchaseRequest);
}


</code></pre></li>
</ul>
<pre><code>/*
* 请求类
* */
public class PurchaseRequest {

    private int type = 0;//
    //private int number = 0;
    private float price = 0.0f;
    private int id = 0;

    public PurchaseRequest(int type, float price, int id) {
        this.type = type;
        this.price = price;
        this.id = id;
    }

    public int getType() {
        return type;
    }

    public float getPrice() {
        return price;
    }

    public int getId() {
        return id;
    }
}



//抽象类的实现类
public class CollegeApprover  extends Approver{


    public CollegeApprover(String name) {
        super(name);
    }

    @Override
    public void processRequest(PurchaseRequest purchaseRequest) {
        if ( 5000 &lt; purchaseRequest.getPrice() &amp;&amp; purchaseRequest.getPrice() &lt;= 10000){
            System.out.println(&quot;请求编号id=&quot;+ purchaseRequest.getId() + &quot;被&quot;+this.name);
        }else{
            approver.processRequest(purchaseRequest);
        }
    }
}

/*
* 四号处理者
* */
public class DepartmentApprover extends Approver{


    public DepartmentApprover(String name) {
        super(name);
    }

    @Override
    public void processRequest(PurchaseRequest purchaseRequest) {
        if (purchaseRequest.getPrice() &lt;= 5000){
            System.out.println(&quot;请求编号id=&quot;+ purchaseRequest.getId() + &quot;被&quot;+this.name);
        }else{
            approver.processRequest(purchaseRequest);
        }
    }
}


public class SchooleMasterApprover extends Approver{


    public SchooleMasterApprover(String name) {
        super(name);
    }

    @Override
    public void processRequest(PurchaseRequest purchaseRequest) {
        if ( 20000 &lt; purchaseRequest.getPrice()){
            System.out.println(&quot;请求编号id=&quot;+ purchaseRequest.getId() + &quot;被&quot;+this.name);
        }else {
            approver.processRequest(purchaseRequest);
        }
    }
}


public class ViceSchoolMasterApprover extends Approver{

    public ViceSchoolMasterApprover(String name) {
        super(name);
    }

    @Override
    public void processRequest(PurchaseRequest purchaseRequest) {
        if ( 10000 &lt; purchaseRequest.getPrice() &amp;&amp; purchaseRequest.getPrice() &lt;= 20000){
            System.out.println(&quot;请求编号id=&quot;+ purchaseRequest.getId() + &quot;被&quot;+this.name);
        }else {
            approver.processRequest(purchaseRequest);
        }
    }
}


//测试类
public class Client {

    public static void main(String[] args) {

        //创建一个请求
        final PurchaseRequest purchaseRequest = new PurchaseRequest(1, 200, 1);

    //创建相关审批人
        DepartmentApprover departmentApprover = new DepartmentApprover(&quot;张主任&quot;);
        CollegeApprover collegeApprover = new CollegeApprover(&quot;李院长&quot;);
        ViceSchoolMasterApprover viceSchoolMasterApprover = new ViceSchoolMasterApprover(&quot;王副校长&quot;);
        SchooleMasterApprover schooleMasterApprover = new SchooleMasterApprover(&quot;蒋校长&quot;);

        //需要将各个审批级别的下一个设置好(处理人构成环形)
        departmentApprover.setApprover(collegeApprover);
        collegeApprover.setApprover(viceSchoolMasterApprover);
        viceSchoolMasterApprover.setApprover(schooleMasterApprover);
        schooleMasterApprover.setApprover(departmentApprover);


        departmentApprover.processRequest(purchaseRequest);
    }
}</code></pre><pre><code>### 职责链模式在SpringMVC框架源码分析
1. SpringMVC-HandlerExecutionChain类就使用到职责链模式
* SpringMVC的原理图
![](images\SpringMVC原理类图.png &quot;原理类图&quot;)

### 职责链模式小结：
1. 将请求和处理分开，实现解耦，提高系统的灵活性
2. 简化了对象，使对象不需要知道链的结构
3. 性能会受影响特别是在链表比较长的时候，因此需要控制链中最大节点数量，一般通过在Handler中设置一个最大节点数量，在setNext()方法中判断是否已经超过阙值，超过则不允许该链建立，避免出现超长链无意识的破坏系统性能
4. 调试不方便。采用了类似递归的方式，调用时逻辑可能比较复杂
5. 最佳应用场景：有多个对象可以处理同一个请求时，比如：多级请求，请假/加薪等审批流程，Java Web中Tomcat对Encoding的处理，拦截器</code></pre>]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+状态模式</title>
    <url>/2020/05/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="基本介绍："><a href="#基本介绍：" class="headerlink" title="基本介绍："></a>基本介绍：</h3><ul>
<li>状态模式(state Pattern):它主要用来解决对象在多中状态转换时，需要对外输出不同的的行为问题，状态和行为是一一对应的，状态之间可以相互转换。</li>
<li>当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类</li>
<li>类图<br><img src="images%5CState.png" alt="" title="原理类图"><h4 id="状态模式—》应用实例：解决APP抽奖问题"><a href="#状态模式—》应用实例：解决APP抽奖问题" class="headerlink" title="状态模式—》应用实例：解决APP抽奖问题"></a>状态模式—》应用实例：解决APP抽奖问题</h4></li>
</ul>
<ol>
<li>应用实例需求<br>完成App抽奖的项目，使用状态模式</li>
<li>思路：<br>定义一个接口叫状态接口，每个状态接口实现它。<br>接口有扣除积分的方法，抽奖方法，发送奖品的方法</li>
</ol>
<ul>
<li>类图：<br><img src="images%5CAPPInstance.png" alt="" title="App抽奖原理类图"></li>
<li>代码实现：<ol>
<li>状态接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 状态接口</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">deductMoney</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>活动类<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 活动类  关联关系</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Activity</span> &#123;</span><br><span class="line">    State state = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    State noraffleState = <span class="keyword">new</span> NoRaffleState(<span class="keyword">this</span>);</span><br><span class="line">    State canRaffleState = <span class="keyword">new</span> CanRaffleState(<span class="keyword">this</span>);</span><br><span class="line">    </span><br><span class="line">    State dispenseOutState =<span class="keyword">new</span> DispenseOutState(<span class="keyword">this</span>);</span><br><span class="line">    State dispenseState = <span class="keyword">new</span> DispenseState(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Activity</span>(<span class="params"><span class="keyword">int</span> count</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = getNoRaffleState();</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">State <span class="title">getNoRaffleState</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> noraffleState;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//扣分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debutMonry</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        state.deductMoney();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raffle</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state.raffle())&#123;</span><br><span class="line">            state.dispensePrize();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span>(<span class="params">State state</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> curCount = count;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> curCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span>(<span class="params"><span class="keyword">int</span> count</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getNoraffleState</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> noraffleState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNoraffleState</span>(<span class="params">State noraffleState</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.noraffleState = noraffleState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getCanRaffleState</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> canRaffleState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCanRaffleState</span>(<span class="params">State canRaffleState</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.canRaffleState = canRaffleState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getDispenseOutState</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dispenseOutState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDispenseOutState</span>(<span class="params">State dispenseOutState</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.dispenseOutState = dispenseOutState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getDispenseState</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dispenseState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDispenseState</span>(<span class="params">State dispenseState</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.dispenseState = dispenseState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<ol start="3">
<li>初始化状态，不能抽奖 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoRaffleState</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化时传入活动引用，扣除积分</span></span><br><span class="line">    Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoRaffleState</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前状态可以扣积分，扣除后，将状态设置成抽象状态</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"扣除50积分成功，你可以抽奖了"</span>);</span><br><span class="line">        activity.setState(activity.getCanRaffleState());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽奖   当前状态不能抽奖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"扣除积分才可以抽奖"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前状态不能发送奖品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>发放奖品的状态<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 发放奖品的状态</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispenseState</span> <span class="keyword">extends</span> <span class="title">State</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将Activity 聚合为其属性</span></span><br><span class="line">    Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispenseState</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不能扣积分"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不能抽奖！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(activity.getCount() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"恭喜中奖了"</span>);</span><br><span class="line">            activity.setState(activity.getNoRaffleState());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"很遗憾奖品发送完了"</span>);</span><br><span class="line">            <span class="comment">//改变状态</span></span><br><span class="line">            activity.setState(activity.getDispenseOutState());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>奖品发送结束<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 奖品发送结束</span></span><br><span class="line"><span class="comment">* 说明，当我们activity 改变成DispenseOutState 即活动结束</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispenseOutState</span> <span class="keyword">extends</span> <span class="title">State</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispenseOutState</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奖品发送完，请下次在参加"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奖品发送完，请下次在参加"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"奖品发送完，请下次在参加"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>抽奖<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CanRaffleState</span> <span class="title">extends</span> <span class="title">State</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    Activity activity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CanRaffleState</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deductMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"已扣积分！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">raffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"正在抽奖，请稍等。。。！"</span>);</span><br><span class="line">        Random <span class="built_in">random</span> = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> num = <span class="built_in">random</span>.nextInt(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>)&#123;</span><br><span class="line">            activity.setState(activity.getDispenseState());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"很遗憾没有抽中奖品！"</span>);</span><br><span class="line">            <span class="comment">//改变状态为不能抽奖</span></span><br><span class="line">            activity.setState(activity.getNoRaffleState());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispensePrize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"发奖中，不能发方奖品！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>测试<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建活动对象</span></span><br><span class="line">        Activity activity = new Activity(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//连续抽300次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"-------第"</span>+(i+<span class="number">1</span>)+<span class="string">"次抽奖-------"</span>);</span><br><span class="line">            <span class="comment">//第一步扣除积分</span></span><br><span class="line">            activity.debutMonry();</span><br><span class="line">            <span class="comment">//第二步，抽奖</span></span><br><span class="line">            activity.raffle();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">-------第<span class="number">1</span>次抽奖-------</span><br><span class="line">扣除<span class="number">50</span>积分成功，你可以抽奖了</span><br><span class="line">正在抽奖，请稍等。。。！</span><br><span class="line">很遗憾没有抽中奖品！</span><br><span class="line">-------第<span class="number">2</span>次抽奖-------</span><br><span class="line">扣除<span class="number">50</span>积分成功，你可以抽奖了</span><br><span class="line">正在抽奖，请稍等。。。！</span><br><span class="line">恭喜中奖了</span><br><span class="line">-------第<span class="number">3</span>次抽奖-------</span><br><span class="line">扣除<span class="number">50</span>积分成功，你可以抽奖了</span><br><span class="line">正在抽奖，请稍等。。。！</span><br><span class="line">很遗憾奖品发送完了</span><br><span class="line">-------第<span class="number">4</span>次抽奖-------</span><br><span class="line">奖品发送完，请下次在参加</span><br><span class="line">奖品发送完，请下次在参加</span><br></pre></td></tr></table></figure>
<h3 id="状态模式小结"><a href="#状态模式小结" class="headerlink" title="状态模式小结"></a>状态模式小结</h3></li>
</ul>
<ol>
<li>代码有很强的可读性，状态模式将每个状态的行为封装到对应的一个类中</li>
<li>方便维护，将容易产生问题的if-else语句删除了，如果把每个状态的行为都放到一个类中，每次调用方法时都要判断当前是什么状态，不但会产生很多if-else语句，而且容易出错。</li>
<li>符合”开闭原则”，容易增删状态</li>
<li>会产生很多类。每个状态都要一个对应的类当状态过多时，会产生很多类，加大维护难度</li>
<li>当一个事件或者对象有很多种状态，状态之间会相互转换，对不同的状态要求有不同的行为的时候，可以考虑使用状态模式 </li>
</ol>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+中介模式</title>
    <url>/2020/05/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="中介模式"><a href="#中介模式" class="headerlink" title="中介模式"></a>中介模式</h3><ul>
<li>基本介绍：<ol>
<li>中介者模式(Mediator Pattern),用一个中介对象来封装一系列的对象交互。中介者使用各个对象不需要显示的相互引用从而使其耦合松散而且可以独立的改变他们之间的交互。</li>
<li>中介者模式属于行为型模式，使代码+., 易于维护</li>
<li>比如MVC模式，C(Controller控制器)是M(Model模型)和V(View视图)的中介者，在前后端交互时起到了中间人的作用</li>
</ol>
<ul>
<li>类图<br><img src="images%5CMediator.png" alt="" title="中介者模式"></li>
<li>类图说明：<ol>
<li>Medialtor：就是抽象中介者定义同事对象到中介对象的接口</li>
<li>Colleague：就是抽象同事类</li>
<li>ConcreteMediator：具体的中介者对象，实现抽象方法,它需要知道所有的具体的同事类，即一个集合来管理HashMap，并接受某个同事对象消息，完成相应的任务</li>
<li>ConcreateColleague：具体的同事类，会有很多，每个同事只知道自己的行为，而不了解其他同事类的行为（方法），但是他们都会依赖中介者对象<h4 id="中介者模式应用案例-–》智能家庭管理"><a href="#中介者模式应用案例-–》智能家庭管理" class="headerlink" title="中介者模式应用案例 –》智能家庭管理"></a>中介者模式应用案例 –》智能家庭管理</h4></li>
</ol>
</li>
</ul>
</li>
<li>类图<br><img src="" alt=""></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Java设计模式+解释器模式</title>
    <url>/2020/05/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><ul>
<li>基本介绍：</li>
</ul>
<ol>
<li>在编译原理中，一个算数表达式通过词法分析器形成词法单元再通过语法分析器构建语法的分析树，最终形成一棵抽象的与分析树。这里的词法分析器和语法分析器都可以看做是解析器</li>
<li>解析器模式（Interpreter pattern）:是指给定一个语言(表达式)，定义它的文法的一种表示，并定义一个解释器，使用该解释器来解释语言中的句子(表达式)</li>
<li>应用场景<ul>
<li>应用可以将一个需要解释器执行的的语言中的句子表示为一个抽象语法树</li>
<li>一些重复出现的问题可以用一种简单的语言来表达</li>
<li>一个简单的语法需要解释的场景</li>
</ul>
</li>
<li>这样的例子还有：比如编译器，算数表达式计算，正则表达式，机器人等</li>
</ol>
<ul>
<li>类图<br><img src="images%5CInterparter.png" alt="" title="解释器模式角色"></li>
</ul>
<h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3><ul>
<li>通过解析器模式来实现四则运算，如计算a+b-c的值，具体要求</li>
</ul>
<ol>
<li>先输入表达式的形式，比如a+b+c-d+e，要求表达式的字母不能重复。</li>
</ol>
<ul>
<li><p>类图<br><img src="images%5CInterparter.png" alt="" title="原理类图"></p>
</li>
<li><p>代码实现<br>1.</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 抽象表达式，通过Hashmap键值对，可以获取变量的值</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Expression</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//解释公式和数值，key 就是公式(表达式)，参数[a,b,c],value就是具体值</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">interpreter</span>(<span class="params">HashMap&lt;String,Integer&gt; <span class="keyword">var</span></span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">``` </span><br><span class="line"><span class="number">2.</span></span><br></pre></td></tr></table></figure>
<p>  /*</p>
<ul>
<li><p>抽象运算符号解析器 这里 ，每个运算符号，都只和自己左右两个数字有关系</p>
</li>
<li><p>但左右两个数字有可能也是一个解析的结果，无论何种类型都是Expression类的实现类</p>
</li>
<li><p>*/<br>public class SimpleExpression extends Expression{</p>
<p>  protected Expression left;<br>  protected Expression right;</p>
<p>  public SimpleExpression(Expression left, Expression right) {</p>
<pre><code>this.left = left;
this.right = right;</code></pre><p>  }<br>/*</p>
</li>
<li><p>因为 SimpleExpression 是让其子类实现的，因此 interpreter是空实现的</p>
</li>
<li><p>*/<br>  @Override<br>  public int interpreter(HashMap&lt;String, Integer&gt; var) {</p>
<pre><code>return 0;</code></pre><p>  }<br>}</p>
<p>  /*</p>
</li>
<li><p>变量的解释器</p>
</li>
<li><p>*/<br>public class VarExpression extends Expression{</p>
<p>  private String key; //key=a key=b</p>
<p>  public VarExpression(String Key){</p>
<pre><code>this.key = key;</code></pre><p>  }</p>
<p>  /*</p>
<ul>
<li>var 就是{a =10，b =20 }</li>
<li>*/<br>@Override<br>public int interpreter(HashMap&lt;String, Integer&gt; var) {<br>  return var.get(this.key);<br>}<br>}<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span></span><br></pre></td></tr></table></figure>
/*</li>
</ul>
</li>
<li><p>减法解析器</p>
</li>
<li><p>*/<br>public class SubExpression extends SimpleExpression{</p>
<p>  public SubExpression(Expression left, Expression right) {</p>
<pre><code>super(left, right);</code></pre><p>  }</p>
<p>  //处理运算<br>  public int interpreter(HashMap&lt;String,Integer&gt; var){</p>
<pre><code>/*
* super.left.interpreter(var)  返回left表达是对应的值
* */
return super.left.interpreter(var) - super.right.interpreter(var);</code></pre><p>  }<br>}</p>
<p>  /*</p>
</li>
<li><p>加法法解释器</p>
</li>
<li><p>*/<br>public class AddExpression extends SimpleExpression{</p>
</li>
</ul>
</li>
</ul>
<pre><code>    public AddExpression(Expression left, Expression right) {
        super(left, right);
    }

    /*
    * 处理加法
    * */
    public int interpreter(HashMap&lt;String,Integer&gt; var){
        return super.left.interpreter(var) + super.right.interpreter(var);
    }

}</code></pre> <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">4.</span></span><br></pre></td></tr></table></figure>
<pre><code>/*
* 表达式
* */
public class Calculator {

    //定义表达式
    private Expression expression;

    //构造函数传值，并解析

    public Calculator(String expStr) {
        //安排运算先后顺序
        Stack&lt;Expression&gt; stack = new Stack&lt;&gt;();
        char[] charArray = expStr.toCharArray();

        Expression left = null;
        Expression right = null;

        for (int i = 0; i &lt; charArray.length; i++) {
            switch (charArray[i]){
                case &apos;+&apos;://
                    left = stack.pop();
                    right= new VarExpression(String.valueOf(charArray[++i]));
                    stack.push(new AddExpression(left,right));
                    break;
                case &apos;-&apos;:
                    left = stack.pop();
                    right = new VarExpression(String.valueOf(charArray[++i]));
                    stack.push(new SubExpression(left,right));
                    break;
                default :
                    /*
                    * 如果是一个Var 就创建要给VarExpression对象，并push到stack
                    * */
                    stack.push(new VarExpression(String.valueOf(charArray[i])));
                    break;
            }
        }
        this.expression = stack.pop();
    }
    public int run(HashMap&lt;String,Integer&gt; var){
        return this.expression.interpreter(var);
    }
}</code></pre> <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">5.</span> 测试</span><br></pre></td></tr></table></figure>
<pre><code>package pattern.Interpater;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;

public class Client {

    public static void main(String[] args) throws IOException {

    String expStr = getExpStr();
    HashMap&lt;String,Integer&gt; var = getValue(expStr);
    Calculator calculator = new Calculator(expStr);
    System.out.println(&quot;运算结果：&quot;+ expStr + &quot;=&quot; +calculator.run(var));
    }

    /**
    * @return
    */
    //获得表达式
    public static String getExpStr() throws IOException {
        System.out.println(&quot;请输入表达式：&quot;);
        return (new BufferedReader(new InputStreamReader(System.in))).readLine();
    }

    //获得值映射
    public static HashMap&lt;String,Integer&gt; getValue(String expStr) throws IOException {
        HashMap&lt;String,Integer&gt; map = new HashMap&lt;&gt;();
        for (char ch:expStr.toCharArray()) {
            if (ch != &apos;+&apos; &amp;&amp; ch != &apos;-&apos;){
                if (!map.containsKey(String.valueOf(ch))){
                    System.out.println(&quot;请输入&quot;+String.valueOf(ch)+&quot;的值：&quot;);
                    String in = (new BufferedReader(new InputStreamReader(System.in))).readLine();
                    map.put(String.valueOf(ch),Integer.parseInt(in));
                }
            }
        }
        return map;
    }

}</code></pre> <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">### 解释器模式在Spring框架中的应用源码分析</span><br><span class="line">* Spring框架中SpelExpressionParser就是使用到解释器模式</span><br></pre></td></tr></table></figure>
<pre><code>public class interpater {

    public static void main(String[] args) {

        //创建SpelExpressionParser对象
        SpelExpressionParser spelExpressionParser = new SpelExpressionParser();

        Expression expression = spelExpressionParser.parseExpression(&quot;10 * (2+1) * 1 + 66&quot;);

        int resuslt = (Integer) expression.getValue();

        System.out.println(resuslt);
    }
}</code></pre><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>![](images\解释器模式+接口及实现类.png)</span><br><span class="line"><span class="bullet">* </span>图中Expression 就是解释器的接口--》表达式接口</span><br><span class="line"><span class="bullet">* </span>![](images\19003.png)</span><br><span class="line"><span class="bullet">* </span>根据你创建不同的SpelExpressionParser对象，返回不同的Expression对象</span><br></pre></td></tr></table></figure>
<p>public abstract class TemplateAwareExpressionParser implements ExpressionParser {<br>@Override<br>    public Expression parseExpression(String expressionString) throws ParseException {<br>        return parseExpression(expressionString, null);<br>    }</p>
<pre><code>@Override
public Expression parseExpression(String expressionString, @Nullable ParserContext context) throws ParseException {
    if (context != null &amp;&amp; context.isTemplate()) {
        return parseTemplate(expressionString, context);
    }
    else {
        return doParseExpression(expressionString, context);
    }
}


private Expression parseTemplate(String expressionString, ParserContext context) throws ParseException {
    if (expressionString.isEmpty()) {
        return new LiteralExpression(&quot;&quot;);
    }

    Expression[] expressions = parseExpressions(expressionString, context);
    if (expressions.length == 1) {
        return expressions[0];
    }
    else {
        return new CompositeStringExpression(expressionString, expressions);
    }
}</code></pre><p>```</p>
<ul>
<li>使用得到Expression对象，调用getValue()对象，最后得到结果；</li>
</ul>
<h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><ol>
<li>当有一个语言需要解释执行，可将该语言中的句子表示为一个抽象语法树，就可以考虑使用解释器模式，让程序具有良好的扩展性</li>
<li>应用场景:编译器，运算表达式计算，正则表达式，机器人等</li>
<li>使用解释器模式可能带来的问题：解释器模式会引起类膨胀，解释器模式采用递归调用方法，将会导致调试非常复杂，效率可能降低</li>
</ol>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+代理模式</title>
    <url>/2020/02/29/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="代理模式-Proxy"><a href="#代理模式-Proxy" class="headerlink" title="代理模式(Proxy)"></a>代理模式(Proxy)</h3><h4 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h4><ul>
<li>1.代理模式：为一个对象提供一个提供一个替身，以控制对这个对象的访问。即通过代理对象访问目标对象..这样做的好处是：可以在目标对象实现基础上，增强额外的功能操作，即扩展目标对象的功能。</li>
<li>2.被代理的对象可以是远程对象，创建开销大的对象或者需要安全控制的对象</li>
<li>3.代理模式有不同的形式，主要有三种静态代理，动态代理(JDK动态代理)，和Cglib代理(可以在内存动态创建对象，而不需要实现接口，它是属于动态代理的范畴)。<h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4></li>
<li>基本介绍：</li>
<li>静态代理在使用时，需要定义接口或者父类，被代理对象(即目标对象)与代理对象一起实现相同的接口或者是继承相同的父类</li>
<li>应用实例<ul>
<li>类图<br><img src="images%5CstaticProxy.png" alt="" title="静态代理模式"><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">teacher</span><span class="params">()</span></span>;<span class="comment">//授课方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老师授课中....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//静态代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDaoProxy</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ITeacherDao <span class="keyword">target</span>; <span class="comment">//目标对象，通过接口聚合关系</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeacherDaoProxy</span><span class="params">(ITeacherDao <span class="keyword">target</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">target</span> = <span class="keyword">target</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//增强额外的功能</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"开始代理....."</span>);</span><br><span class="line">        <span class="keyword">target</span>.teacher();</span><br><span class="line">        System.out.println(<span class="string">"代理结束....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目标对象</span></span><br><span class="line">        TeacherDao teacherDao = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        TeacherDaoProxy teacherDaoProxy = <span class="keyword">new</span> TeacherDaoProxy(teacherDao);</span><br><span class="line"></span><br><span class="line">        teacherDaoProxy.teacher();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>小结：<ol>
<li>优点：在不修改目标对象的功能前提下，能通过代理对象对目标对象功能扩展</li>
<li>缺点：因为代理对象需要与目标对象实现一样的的接口所以会有很多代理类</li>
<li>一旦接口增强方法，目标对象与代理对象都要维护</li>
</ol>
</li>
</ul>
<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><ul>
<li>基本介绍：</li>
</ul>
<ol>
<li>代理对象，不需要实现接口，但是目标对象要实现接口，否则不能用动态代理</li>
<li>代理对象的生成，是利用JDK的API，动态的在内存中(利用反射机制)构建代理对象</li>
<li>动态代理也叫:JDK动态代理，接口代理<h5 id="JDk中生成代理对象的API"><a href="#JDk中生成代理对象的API" class="headerlink" title="JDk中生成代理对象的API"></a>JDk中生成代理对象的API</h5></li>
<li>代理类所在的包：Java.lang.reflect.Proxy</li>
<li>JDK实现代理只需要使用newProxyInstance方法，但是该方法需要接收三个参数，完整写法是：<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">static Object newProxyInstance(ClassLoader loader,<span class="keyword">class</span>&lt;?&gt;[] <span class="symbol">interfaces,<span class="symbol">InvocationHander</span></span> <span class="symbol">h</span> )&#123;&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>类图<br><img src="images%5CjdkProxy.png" alt="" title="JDK代理"></li>
<li>代码实现<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">teacher</span><span class="params">()</span></span>;<span class="comment">//授课方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老师正在授课中....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">proxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//维护一个目标对象，Object</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="keyword">target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器，对target进行初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">proxyFactory</span><span class="params">(Object <span class="keyword">target</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">target</span> = <span class="keyword">target</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给目标对象生成代理对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">getProxInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *  public static Object newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">        *                                  Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">        *                                 InvocationHandler h)</span></span><br><span class="line"><span class="comment">        * 说明：</span></span><br><span class="line"><span class="comment">        * classloader：指定当前目标对象使用的类加载器，获取加载器方法固定的</span></span><br><span class="line"><span class="comment">        * Class&lt;?&gt;[] interfaces:指定对象实现的接口类型，使用泛型的方式确认类型</span></span><br><span class="line"><span class="comment">        * invocationHandler h：事件处理执行目标对象方法时，会去触发事件处理器的方法，会把当前执行的的目标对象作为参数传入</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">target</span>.getClass().getClassLoader(),</span><br><span class="line">                <span class="keyword">target</span>.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">"jdk代理开始...."</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">//反射机制调用目标对象方法</span></span><br><span class="line">                        Object returnVal = method.invoke(<span class="keyword">target</span>, args);</span><br><span class="line">                        </span><br><span class="line">                         System.out.println(<span class="string">"jdk代理提交...."</span>);</span><br><span class="line">                        <span class="keyword">return</span> returnVal;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目标对象</span></span><br><span class="line">        ITeacherDao <span class="keyword">target</span> = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给目标对象创建代理对象,</span></span><br><span class="line">        ITeacherDao proxInstance = (ITeacherDao)<span class="keyword">new</span> proxyFactory(<span class="keyword">target</span>).getProxInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"代理对象："</span>+proxInstance.getClass());</span><br><span class="line">        <span class="comment">//代理对象：class com.sun.proxy.$Proxy0 内存中生成代理对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理对象，调用目标方法</span></span><br><span class="line">        proxInstance.teacher();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Cglib代理"><a href="#Cglib代理" class="headerlink" title="Cglib代理"></a>Cglib代理</h3></li>
<li>基本介绍:</li>
</ul>
<ol>
<li>静态代理和JDK代理模式都要要求目标对象是实现一个接口，但是有时候目标对象只有一个单独的对象，并没有实现任何的接口，这个时候可使用目标对象子类来实现代理，这就是Cglib代理</li>
<li>Cglib代理也叫子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能扩展</li>
<li>Cgilb代理是一个强大的高性能的代码生成包,它可以在运行期扩展Java类与实现Java接口，它广泛的被许多AOP的框架使用，例如：Spring AOP，实现方法拦截</li>
<li>在AOP编程中如何使用代理模式：<br>a.目标对象需要实现接口,用JDK代理<br>b.目标对象不需要实现接口，用Cglib代理</li>
<li>Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类。<h4 id="Cglib实现步骤"><a href="#Cglib实现步骤" class="headerlink" title="Cglib实现步骤"></a>Cglib实现步骤</h4></li>
</ol>
<ul>
<li>引入cglib的jar包<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">asm</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">asm-commons</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">asm-tree</span><span class="selector-class">.jar</span></span><br><span class="line"><span class="selector-tag">cglib-2</span><span class="selector-class">.2</span><span class="selector-class">.jar</span></span><br></pre></td></tr></table></figure></li>
<li>在内存中动态构建子类，注意代理的类不能为final、否则会报错：<br>java.lang.illgalArgumetExeption(非法参数异常);</li>
<li>目标对象的方法如果为final/static，那么就不会被拦截，即不会执行目标对象额为的业务方法。</li>
<li>代理工厂实现MethodInterceptor 重写intercept方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>类图<br><img src="images%5Ccglib.png" alt="" title="Cglib代理"></li>
<li>代码实现<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">tech</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老师授课中,我是cglib代理，不需要实现接口"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//维护一个目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="keyword">target</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器，传入一个目标对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object <span class="keyword">target</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">target</span> = <span class="keyword">target</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个代理对象，是target对象的代理对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">getProxyIntance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建工具类</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//2. 设置父类</span></span><br><span class="line">        enhancer.setSuperclass(<span class="keyword">target</span>.getClass());</span><br><span class="line">        <span class="comment">//3.设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//4.创建子类，即代理对象</span></span><br><span class="line">        <span class="function"><span class="keyword">return</span> enhancer.<span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写接口MethodInterceptor的intercept,会调用目标方法的相关方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Cglib代理模式开始....."</span>);</span><br><span class="line">        Object returnVal = method.invoke(<span class="keyword">target</span>, objects);</span><br><span class="line">        System.out.println(<span class="string">"cglib代理提交"</span>);</span><br><span class="line">        <span class="keyword">return</span> returnVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建目标对象</span></span><br><span class="line">        TeacherDao <span class="keyword">target</span> = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        TeacherDao proxy = (TeacherDao)<span class="keyword">new</span> ProxyFactory(<span class="keyword">target</span>).getProxyIntance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行代理对象的方法，触发intecept方法，从而实现对目标对象的调用</span></span><br><span class="line">        proxy.tech();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代理模式-Proxy-的变体"><a href="#代理模式-Proxy-的变体" class="headerlink" title="代理模式(Proxy)的变体"></a>代理模式(Proxy)的变体</h3></li>
<li>几种常见的代理模式介绍—几种变体</li>
</ul>
<ol>
<li>防火墙代理<br>内网通过代理穿透防火墙，实现对公网的访问</li>
<li>缓存代理<br>比如：当请求图片文件等资源时，先到缓存代理取，如果取到资源则OK，如果取不到资源，再到公网或者数据库取，然后缓存。</li>
<li>远程代理<br> 远程对象的本地代表，通过它可以把远程对象当本地对象来调用。远程代理通过网络和真正的远程对象沟通信息.</li>
<li>同步代理:主要使用在多线程编程中，完成多线程间同步工作。</li>
</ol>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+迭代器模式</title>
    <url>/2020/02/29/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><ul>
<li>基本介绍：</li>
<li>迭代器模式(Iterator Pattern)是常用的设计模式，属于行为模式</li>
<li>如果我们的集合是用不同的方式实现的，有数组，还有Java的集合类，或者还有其他方式，当客户端需要遍历这些集合元素的时候就要使用多种遍历方式，而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决。</li>
<li>迭代器模式，提供一种遍历集合元素的统一接口，用一致的方法遍历集合元素，不需要知道集合对象的底层表示，即：不暴露其内部结构</li>
<li>类图<br><img src="images%5Citerator.png" alt="" title="迭代器模式"></li>
<li>说明<ol>
<li>Iterator：迭代器接口，是系统提供的，含有hasNaxt，next，remove方法</li>
<li>ConcreateIterator:具体的迭代器，管理迭代</li>
<li>Aggregate：一个统一的聚合接口，将客户端和具体聚合解耦</li>
<li>ConcreateAggreate：具体的聚合持有对象集合，并提供一个方法，返回一个迭代器，该迭代器可以正确遍历集合</li>
<li>Client:客户端，通过Iterator和Aggregate依赖子类<h4 id="应用案例：—学校管理"><a href="#应用案例：—学校管理" class="headerlink" title="应用案例：—学校管理"></a>应用案例：—学校管理</h4></li>
</ol>
<ul>
<li>类图<br><img src="images%5CIteratorPattre.png" alt="" title="学校管理"></li>
<li>代码实现：<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//迭代器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerColleageIterator</span> <span class="title">implements</span> <span class="title">Iterator</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里我们需要Department 是以则样的方式存放的 ==》数组</span></span><br><span class="line">    Department[] departments;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">position</span> = <span class="number">0</span>; <span class="comment">//遍历的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerColleageIterator</span><span class="params">(Department[] departments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.departments = departments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除方法空实现</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否有下一个元素</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">position</span> &gt;=departments.length || departments[<span class="built_in">position</span>] == null)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Department department = departments[<span class="built_in">position</span>];</span><br><span class="line">        <span class="built_in">position</span> += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoCollegeIterator</span>  <span class="title">implements</span> <span class="title">Iterator</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    List&lt;Department&gt; departments; <span class="comment">// XXX学院以list方式存放系</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">-1</span>; <span class="comment">//索引</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoCollegeIterator</span><span class="params">(List&lt;Department&gt; departments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.departments = departments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//空实现</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer action)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断list中还有没有下一个元素</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= departments.<span class="built_in">size</span>()<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departments.<span class="built_in">get</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//要迭代的对象接口  业务类接口 </span></span><br><span class="line"><span class="keyword">public</span> interface Colleage &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加系的方法 名字描述</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(<span class="keyword">String</span> name,<span class="keyword">String</span> desc)</span></span>;</span><br><span class="line">    <span class="comment">//返回一个迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createColleage</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//业务类具体实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerColleage</span> <span class="title">implements</span> <span class="title">Colleage</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  Department[] departments;</span><br><span class="line">  <span class="keyword">int</span> numofDepartment = <span class="number">0</span>; <span class="comment">//保存当前数组的对象个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"计算机学院"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ComputerColleage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      departments = <span class="keyword">new</span> Department[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">      addDepartment(<span class="string">"Java专业"</span>,<span class="string">"牛逼"</span>);</span><br><span class="line">      addDepartment(<span class="string">"python"</span>,<span class="string">"好牛逼"</span>);</span><br><span class="line">      addDepartment(<span class="string">".net"</span>,<span class="string">"微软"</span>);</span><br><span class="line">      addDepartment(<span class="string">"python"</span>,<span class="string">"好牛逼"</span>);</span><br><span class="line">      addDepartment(<span class="string">".net"</span>,<span class="string">"微软"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">String</span> desc)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      Department department = <span class="keyword">new</span> Department(name, desc);</span><br><span class="line">      departments[numofDepartment] = department;</span><br><span class="line">      numofDepartment += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Iterator <span class="title">createColleage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ComputerColleageIterator(departments);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerColleageIterator</span> <span class="title">implements</span> <span class="title">Iterator</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里我们需要Department 是以则样的方式存放的 ==》数组</span></span><br><span class="line">    Department[] departments;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">position</span> = <span class="number">0</span>; <span class="comment">//遍历的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerColleageIterator</span><span class="params">(Department[] departments)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.departments = departments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除方法空实现</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否有下一个元素</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">position</span> &gt;=departments.length || departments[<span class="built_in">position</span>] == null)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Department department = departments[<span class="built_in">position</span>];</span><br><span class="line">        <span class="built_in">position</span> += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//实体类</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> &#123;</span></span><br><span class="line">    <span class="comment">//部门 --系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> desc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">String</span> desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(<span class="keyword">String</span> desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Output</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//学院的集合</span></span><br><span class="line">    List&lt;Colleage&gt; colleages;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Output</span><span class="params">(List&lt;Colleage&gt; colleages)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.colleages = colleages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历所有的学院然后调用printDepartment 输出各个学院的的系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">printColleage</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从colleages中取出 取出所用的学院 ，Java中List 已经实现了Iterator</span></span><br><span class="line">        Iterator&lt;Colleage&gt; iterator = colleages.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//取出学院</span></span><br><span class="line">            Colleage colleage = iterator.next();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"======"</span>+colleage.getName()+<span class="string">"======"</span>);</span><br><span class="line">            printDepartment(colleage.createColleage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出 学院输出系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDepartment</span><span class="params">(Iterator iterator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            Department department = (Department)iterator.next();</span><br><span class="line">            System.out.<span class="built_in">println</span>(department.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建学院</span></span><br><span class="line">        List&lt;Colleage&gt; colleageList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        ComputerColleage computerColleage = <span class="keyword">new</span> ComputerColleage();</span><br><span class="line">        InfoColleage infoColleage = <span class="keyword">new</span> InfoColleage();</span><br><span class="line"></span><br><span class="line">        colleageList.add(computerColleage);</span><br><span class="line">        colleageList.add(infoColleage);</span><br><span class="line"></span><br><span class="line">        Output output = <span class="keyword">new</span> Output(colleageList);</span><br><span class="line">        output.printColleage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="迭代器模式在JDK-–》-ArrayList集合中的源码分析"><a href="#迭代器模式在JDK-–》-ArrayList集合中的源码分析" class="headerlink" title="迭代器模式在JDK –》 ArrayList集合中的源码分析"></a>迭代器模式在JDK –》 ArrayList集合中的源码分析</h3>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">      <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">      <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">      <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">      Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> cursor != size;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">      <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          checkForComodification();</span><br><span class="line">          <span class="keyword">int</span> i = cursor;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">          Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">          cursor = i + <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">      &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="function">Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>; <span class="comment">//得到迭代器的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>说明：<ol>
<li>内部类Itr充当具体实现迭代器Iterator，作为ArrayList内部类</li>
<li>List就是充当了聚合接口，含有itrator()方法，返回一个迭代对象</li>
<li>ArrayList是实现聚合接口List的子类，实现iterator()</li>
<li>Itrrator接口系统提供</li>
<li>迭代器模式解决了 不同集合(Arraylist LinkedList)统一遍历问题<h3 id="迭代器模式总结："><a href="#迭代器模式总结：" class="headerlink" title="迭代器模式总结："></a>迭代器模式总结：</h3></li>
</ol>
</li>
<li>优点：<ul>
<li>提供一个统一的方法遍历对象，客户不用在考虑聚合的类型，使用一种方法就可以遍历对象了</li>
<li>隐藏了聚合的内部结构，客户端要遍历聚合的时候只能取到迭代器，而不会知道聚合的具体组成。</li>
<li>提供了一种设计思想,就是一个应用应该只有一个引起变化的原因(叫做单一职责原则)。在聚合类中我们把迭代器分开，就是要把管理对象集合和遍历对象集合的责任分开，这样一来集合改变的话，只影响到聚合的对象。而如果便利的方式改变的话，只影响到了迭代器</li>
</ul>
<ol start="4">
<li>当展示一组相似对象，或者遍历一组相同对象时使用，适合使用迭代器模式</li>
</ol>
</li>
<li>缺点：<ul>
<li>每个聚合对象都要一个迭代器，会生成多个迭代器不好管理类</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+访问者模式</title>
    <url>/2020/02/29/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><ul>
<li>基本介绍：</li>
<li>1.访问者模式(Visitir Pattern),封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前期下定义作用于这些元素的新的操作。</li>
<li>2.主要将数据结构与数据操作分离，解决数据结构和操作耦合性问题。</li>
<li>3.访问模式的基本操作原理是:在访问的类里面加一个对外提供接待访问者的接口</li>
<li>4.访问者模式主要应用场景是:需要对一个对象结构中的对象进行很多不同操作(这些操作彼此没有关联)，同时需要避免让这些操作”污染”这些对象的类，可以选用访问者模式解决</li>
<li>类图<br><img src="images%5CVisitir.png" alt="" title="访问者模式"></li>
<li>说明：<ol>
<li>Visitor抽象的访问者，为该对象结构中的ConcreteElement每一个类声明一个visitor操作。</li>
<li>ConcreteVisitor:是一个具体的访问者，实现每个有Visitor声明的操作，是每个操作实现的部分。</li>
<li>ObjectStructure：能枚举他的元素，可以提供一个高层的接口,用来允许访问者访问元素。</li>
<li>Element:定义一个accept方法，接受一个访问者对象</li>
<li>ConcreteElement:为具体元素，实现了accept方法</li>
</ol>
</li>
<li>应用案例：–歌手大赛</li>
<li>类图<br><img src="images%5Csinger.png" alt=""><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到男性 测评结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getManResult</span><span class="params">(Man man)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到女性 测评结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">getWomanResult</span><span class="params">(Woman woman)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Success</span> <span class="keyword">extends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getManResult</span><span class="params">(Man man)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"男性评价————》歌手成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWomanResult</span><span class="params">(Woman woman)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"女性评价————》歌手成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fail</span> <span class="keyword">extends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getManResult</span><span class="params">(Man man)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"男性评价————》歌手失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWomanResult</span><span class="params">(Woman woman)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"女性评价————》歌手失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个方法，让访问者可以访问</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accpet</span><span class="params">(Action action)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accpet</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里传入本身对象就可以</span></span><br><span class="line">        action.getManResult(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 说明：</span></span><br><span class="line"><span class="comment">* 1. 这里我们使用到了双分配,及首先在客户端程序中，将具体的状态作为参数传给了Women中，(这是第一次分配)</span></span><br><span class="line"><span class="comment">* 2. 然后Women类调用作为参数的"具体方法"中方法getWomanResult，同时将自己的(this)作为一个参数传入，完成了第二次分配</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accpet</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">        action.getWomanResult(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据结构，管理了很多人(man woman)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//维护一个集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Person&gt; personList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        personList.add(person);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delach</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        personList.remove(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示测评结果。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Action action)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Person person:personList)&#123;</span><br><span class="line">            person.accpet(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建ObjectStructure</span></span><br><span class="line">        ObjectStructure objectStructure = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line"></span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> Man());</span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> Woman());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//成功</span></span><br><span class="line">        Success success = <span class="keyword">new</span> Success();</span><br><span class="line">        objectStructure.display(success);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//失败</span></span><br><span class="line">        Fail fail = <span class="keyword">new</span> Fail();</span><br><span class="line">        objectStructure.display(fail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>小结：</li>
<li>上面提到双分派，所谓的双分派就是指不管类这么变化，我们都能找到期望的方法运行。双分派意味着得到执行的操作取决于请求的种类和两个执行者的类型</li>
<li>以上面实例为例，假设我们需要添加一个Wait(待定)的状态类，考察Man类和Woman类的反应，由于使用了双分派，只需要增加一个Action子类即可在客户端调用即可。不需要改动任何其他的代码。<h4 id="访问者模式小结："><a href="#访问者模式小结：" class="headerlink" title="访问者模式小结："></a>访问者模式小结：</h4></li>
<li>优点：<ol>
<li>访问者模式符合单一职责原则，让程序具有优秀的扩展性，灵活性非常高</li>
<li>访问者模式可以对功能进行统一，可以做报表，UI，拦截与过滤器，适用于数据结构相对稳定的系统</li>
</ol>
</li>
<li>缺点：<ol>
<li>具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的，这样造成了具体元素变更比较困难</li>
<li>违背了依赖倒转原则。访问者依赖的是具体元素，而不是抽象元素</li>
<li>因此，如果一个系统有比较稳定的数据结构，又经常变化的功能需求，那么访问者模式就比较适合</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+观察者模式</title>
    <url>/2020/02/29/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ul>
<li>应用案例 –》天气情况</li>
<li>普通方式实现<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建接入方</span></span><br><span class="line">        CurrentCoditions currentCoditions = <span class="keyword">new</span> CurrentCoditions();</span><br><span class="line">        <span class="comment">//创建WeaterData 并将介入方传递到此</span></span><br><span class="line">        WeaterData weaterData = <span class="keyword">new</span> WeaterData(currentCoditions);</span><br><span class="line">        <span class="comment">//更新</span></span><br><span class="line">        weaterData.setData(<span class="number">30</span>,<span class="number">150</span>,<span class="number">40</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//核心类</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 核心类</span></span><br><span class="line"><span class="comment">* 包含最新的天气情况信息</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeaterData</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature; <span class="comment">//温度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure; <span class="comment">//气压</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity; <span class="comment">//湿度</span></span><br><span class="line">    <span class="keyword">private</span> CurrentCoditions currentCoditions;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeaterData</span><span class="params">(CurrentCoditions currentCoditions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentCoditions = currentCoditions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> temperature;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pressure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> humidity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        currentCoditions.update(getTemperature(),getPressure(),getHumidity());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当数据有更新时，就调用setData</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">float</span> temperature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="comment">//将最新的消息推送给 接入方 currentConditions</span></span><br><span class="line">        dataChange();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 显示当前天气情况</span></span><br><span class="line"><span class="comment">* 第三方</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentCoditions</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature; <span class="comment">//温度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure; <span class="comment">//气压</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity; <span class="comment">//湿度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新 ，别人调用weaterData</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> pressure, <span class="keyword">float</span> humidity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="built_in">display</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"**今天的温度:"</span>+temperature+<span class="string">"**"</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"**今天的气压:"</span>+pressure+<span class="string">"**"</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"**今天的湿度:"</span>+humidity+<span class="string">"**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>普通方式实现问题分析：<ol>
<li>其他第三方接入气象站获得数据的问题</li>
<li>无法在运行时动态的添加第三方</li>
<li>在WeartherData中，当添加一个第三方，都需要创建一个对应的第三方的公告板对象，并加入dataChange，不利于维护，也不是动态加入<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public void data<span class="constructor">Change()</span>&#123;</span><br><span class="line">    currentCoditions.update(get<span class="constructor">Temperature()</span>,get<span class="constructor">Pressure()</span>,get<span class="constructor">Humidity()</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>违反了ocp(开闭)原则<h3 id="观察者模式的定义："><a href="#观察者模式的定义：" class="headerlink" title="观察者模式的定义："></a>观察者模式的定义：</h3></li>
</ol>
</li>
<li>在对象之间定义了一对多的依赖，这样一来，当一个对象改变状态，依赖它的对象会收到通知并自动更新。</li>
<li>其实就是发布订阅模式，发布者发布信息，订阅者获取信息，订阅了就能收到信息，没订阅就收不到信息。</li>
<li>应用案例<ol>
<li>类图<br><img src="images%5Cobserver.png" alt=""></li>
<li>代码实现：<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码：</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span> &#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">         <span class="comment">//创建WatherData</span></span><br><span class="line">         WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line"></span><br><span class="line">         <span class="comment">//创建观察者</span></span><br><span class="line">         CurrentCodition currentCodition = <span class="keyword">new</span> CurrentCodition();</span><br><span class="line"></span><br><span class="line">         <span class="comment">//注册观察者</span></span><br><span class="line">         weatherData.registerObserver(currentCodition);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//测试</span></span><br><span class="line">         System.<span class="keyword">out</span>.println(<span class="string">"通知各个注册的观察者，看看信息！"</span>);</span><br><span class="line"></span><br><span class="line">         weatherData.setData(<span class="number">10</span>,<span class="number">10</span>,<span class="number">30.3f</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//观察者个接口</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Observer</span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>(<span class="params"><span class="keyword">float</span> temperatrue, <span class="keyword">float</span> pressure, <span class="keyword">float</span> humidity</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CurrentCodition</span> <span class="title">implements</span> <span class="title">Observer</span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">float</span> temperature; <span class="comment">//温度</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">float</span> pressure; <span class="comment">//气压</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">float</span> humidity; <span class="comment">//湿度</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//更新 ，别人调用weaterData</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span>(<span class="params"><span class="keyword">float</span> temperature, <span class="keyword">float</span> pressure, <span class="keyword">float</span> humidity</span>)</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">         <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">         <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">         display();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//显示</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         System.<span class="keyword">out</span>.println(<span class="string">"**今天的温度:"</span>+temperature+<span class="string">"**"</span>);</span><br><span class="line">         System.<span class="keyword">out</span>.println(<span class="string">"**今天的气压:"</span>+pressure+<span class="string">"**"</span>);</span><br><span class="line">         System.<span class="keyword">out</span>.println(<span class="string">"**今天的湿度:"</span>+humidity+<span class="string">"**"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//接口，让WeatherDate 来实现</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span>(<span class="params">Observer o</span>)</span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span>(<span class="params">Observer o</span>)</span>;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span>(<span class="params"></span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherData</span> <span class="title">implements</span> <span class="title">Subject</span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">float</span> temperature; <span class="comment">//温度</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">float</span> pressure; <span class="comment">//气压</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">float</span> humidity; <span class="comment">//湿度</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//观察者集合</span></span><br><span class="line">     <span class="keyword">private</span> ArrayList&lt;Observer&gt; observers;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">         observers = <span class="keyword">new</span> ArrayList&lt;&gt;(   );</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getTemperature</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> temperature;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPressure</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> pressure;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getHumidity</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> humidity;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChange</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     notifyObserver();<span class="comment">//遍历所有的观察者，并通知</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//当数据有更新时，就调用setData</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span>(<span class="params"><span class="keyword">float</span> temperature,<span class="keyword">float</span> pressure,<span class="keyword">float</span> humidity</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">         <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">         <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">         <span class="comment">//将最新的消息推送给 接入方 currentConditions</span></span><br><span class="line">         dataChange();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span>(<span class="params">Observer o</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">         observers.<span class="keyword">add</span>(o);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     @Override</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span>(<span class="params">Observer o</span>)</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (observers.contains(<span class="number">0</span>)) <span class="comment">//  return indexOf(o) &gt;= 0;</span></span><br><span class="line">         observers.<span class="keyword">remove</span>(o);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//遍历所有的观察者，并通知</span></span><br><span class="line">     @Override</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; observers.size(); i++) &#123;</span><br><span class="line">             observers.<span class="keyword">get</span>(i).update(getTemperature(),getPressure(),getHumidity());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>小结<ol>
<li>观察者模式设计后，会以集合的方式来管理用户(Observer),包括注册，移除和通知</li>
<li>这样，我们增加观察者，就不需要去修改核心类WeatherDate的代码，遵循ocp原则<h3 id="观察者模式在JDk–》Observable类中的应用"><a href="#观察者模式在JDk–》Observable类中的应用" class="headerlink" title="观察者模式在JDk–》Observable类中的应用"></a>观察者模式在JDk–》Observable类中的应用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> changed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> Vector&lt;Observer&gt; obs;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Observable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obs = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">if</span> (!obs.contains(o)) &#123;</span><br><span class="line">            obs.addElement(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">        obs.removeElement(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyObservers(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(Object arg)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        Object[] arrLocal;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!changed)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            arrLocal = obs.toArray();</span><br><span class="line">            clearChanged();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arrLocal.length-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">            ((Observer)arrLocal[i]).update(<span class="keyword">this</span>, arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deleteObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        obs.removeAllElements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        changed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">clearChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        changed = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">hasChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> changed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">countObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obs.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//观察者接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
<li>分析：<ul>
<li>Observable：的作用和地位等价于我们前面讲过的Subject</li>
<li>Odservable：是类不是接口，类中实现了核心的方法，即管理Observer的方法add,delete,notify</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+命令模式</title>
    <url>/2020/02/29/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><ul>
<li>基本介绍:</li>
</ul>
<ol>
<li>命令模式(Command Pattern):在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道请求的操作是哪个，我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计</li>
<li>命令模式使得请求发送者与请求接收者彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。</li>
<li>在命令模式，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求(即命名)，同时命名模式也支持可撤销的操作。</li>
<li>通俗易懂的的理解：将军命令，士兵去执行。其中有几个角色，将军(命令发布者)，士兵(命令的具体执行者)，命令(连接将军和士兵)<br>Invoker是调用者(将军)，Receiver是被调用者(士兵)，MyCommand是命令，实现了Command接口，持有接收对象</li>
</ol>
<ul>
<li>类图<br><img src="images%5Ccommand.png" alt="" title="命令模式"></li>
<li>说明(类图)命令模式的角色和职责</li>
</ul>
<ol>
<li>Inviker是调用者角色</li>
<li>Command是命令角色，需要执行的所有命令都在这里可以是接口或者抽象类</li>
<li>Receiver是接受者这角色</li>
<li>ConcreateCommand:将一个接收者对象与一个动作(命令)，调用接收者相应的操作，实现execute<h4 id="应用案例—智能家居"><a href="#应用案例—智能家居" class="headerlink" title="应用案例—智能家居"></a>应用案例—智能家居</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行某个动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//撤销某个动作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span>  <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="comment">//聚合LightReceiver</span></span><br><span class="line">    LightReceiver light;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span><span class="params">(LightReceiver light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合LightReceiver</span></span><br><span class="line">    LightReceiver light;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(LightReceiver light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//调用接收者的方法</span></span><br><span class="line">       light.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//空命令，对于简化操作，有帮助，可以省去对空的判断</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有任何命令，空执行</span></span><br><span class="line">    <span class="comment">//用于初始化每个按键，当调用命令时，对象什么都不做</span></span><br><span class="line">    <span class="comment">//其实。这也是一种设计模式，可以省掉对空的判断</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//要被聚合的类  命令具体的接受者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightReceiver</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"点灯打开了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电灯关闭了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//命令发送者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开按钮的命令数组</span></span><br><span class="line">    Command[] onCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];;</span><br><span class="line">    Command[] offCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//撤销命令</span></span><br><span class="line">    Command undoCommand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">/*   onCommands = new Command[5];</span></span><br><span class="line"><span class="comment">      onCommands = new Command[5];*/</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            onCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">            offCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//給我们的按钮设置你需要的命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(<span class="keyword">int</span> number,Command onCommand,Command offCommand)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        onCommands[number] = onCommand;</span><br><span class="line">        offCommands[number] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按下开的按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPushed</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//找到你按下的开的按钮，并调用对应的方法</span></span><br><span class="line">        onCommands[number].execute();</span><br><span class="line">        <span class="comment">//记录这次的操作，用于撤销</span></span><br><span class="line">        undoCommand = onCommands[number];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按下关的按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButtonWasPushed</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">        <span class="comment">//找到你按下的开的按钮，并调用对应的方法</span></span><br><span class="line">        offCommands[number].execute();</span><br><span class="line">        <span class="comment">//记录这次的操作，用于撤销</span></span><br><span class="line">        undoCommand = onCommands[number];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按下撤销安按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undoButonWasPush</span><span class="params">()</span></span>&#123;</span><br><span class="line">        undoCommand.undo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对程序进行扩展 添加电视机对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合TVRReceiver</span></span><br><span class="line">    TVRReceiver tvrReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TVOffCommand</span><span class="params">(TVRReceiver tvrReceiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>. tvrReceiver= tvrReceiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        tvrReceiver.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        tvrReceiver.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合</span></span><br><span class="line">    TVRReceiver tvrReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TVOnCommand</span><span class="params">(TVRReceiver tvrReceiver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tvrReceiver = tvrReceiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tvrReceiver.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tvrReceiver.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行者  被聚合的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVRReceiver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电视打开了......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"电视关闭了......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用命令模式完成，通过遥控器对电灯的操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建电灯接收者的对象</span></span><br><span class="line">        LightReceiver lightReceiver = <span class="keyword">new</span> LightReceiver();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建电灯开关的操作命令</span></span><br><span class="line">        LightOnCommand lightOnCommand = <span class="keyword">new</span> LightOnCommand(lightReceiver);</span><br><span class="line">        LightOffCommand lightOffCommand = <span class="keyword">new</span> LightOffCommand(lightReceiver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要一个遥控器</span></span><br><span class="line">        RemoteController remoteController = <span class="keyword">new</span> RemoteController();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给我们的遥控器设置相关命令，比如number == 0 是对电灯的操作</span></span><br><span class="line">        remoteController.setCommand(<span class="number">0</span>,lightOnCommand,lightOffCommand);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*---------按下电灯开的操作----------*"</span>);</span><br><span class="line">        remoteController.onButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"*---------按下电灯关的操作----------*"</span>);</span><br><span class="line">        remoteController.offButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        remoteController.undoButonWasPush();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"+++++++++++使用遥控器操作电视机+++++++++++"</span>);</span><br><span class="line"></span><br><span class="line">        TVRReceiver tvrReceiver = <span class="keyword">new</span> TVRReceiver();</span><br><span class="line">        TVOnCommand tvOnCommand = <span class="keyword">new</span> TVOnCommand(tvrReceiver);</span><br><span class="line">        TVOffCommand tvOffCommand = <span class="keyword">new</span> TVOffCommand(tvrReceiver);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//给我们的遥控器设置相关命令，比如number == 0 是对电灯的操作</span></span><br><span class="line">        remoteController.setCommand(<span class="number">1</span>,tvOnCommand,tvOffCommand);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*---------按下电视机开的操作----------*"</span>);</span><br><span class="line">        remoteController.onButtonWasPushed(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"*---------按下电视机关的操作----------*"</span>);</span><br><span class="line">        remoteController.offButtonWasPushed(<span class="number">1</span>);</span><br><span class="line">        remoteController.undoButonWasPush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="命令模式在Spring框架jdbcTemplate-jdb持久化模板-应用源码分析"><a href="#命令模式在Spring框架jdbcTemplate-jdb持久化模板-应用源码分析" class="headerlink" title="命令模式在Spring框架jdbcTemplate(jdb持久化模板)应用源码分析"></a>命令模式在Spring框架jdbcTemplate(jdb持久化模板)应用源码分析</h3></li>
</ol>
<ul>
<li>Spring框架的JdbcTemplete就是使用到了命令模式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//命令者....</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplate</span> <span class="keyword">extends</span> <span class="title">JdbcAccessor</span> <span class="keyword">implements</span> <span class="title">JdbcOperations</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">query</span><span class="params">(PreparedStatementCreator psc, @Nullable <span class="keyword">final</span> PreparedStatementSetter pss, <span class="keyword">final</span> ResultSetExtractor&lt;T&gt; rse)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">        Assert.notNull(rse, <span class="string">"ResultSetExtractor must not be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.logger.debug(<span class="string">"Executing prepared SQL query"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.execute(psc,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//命令接收者</span></span><br><span class="line">         <span class="keyword">new</span> PreparedStatementCallback&lt;T&gt;() &#123;</span><br><span class="line">            <span class="meta">@Nullable</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> T <span class="title">doInPreparedStatement</span><span class="params">(PreparedStatement ps)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                Object var3;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pss != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        pss.setValues(ps);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    rs = ps.executeQuery();</span><br><span class="line">                    var3 = rse.extractData(rs);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    JdbcUtils.closeResultSet(rs);</span><br><span class="line">                    <span class="keyword">if</span> (pss <span class="keyword">instanceof</span> ParameterDisposer) &#123;</span><br><span class="line">                        ((ParameterDisposer)pss).cleanupParameters();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> var3;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PreparedStatementCallback</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function">T <span class="title">doInPreparedStatement</span><span class="params">(PreparedStatement ps)</span> <span class="keyword">throws</span> SQLException, DataAccessException</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StatementCallback</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function">T <span class="title">doInStatement</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException, DataAccessException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="命令模式小结："><a href="#命令模式小结：" class="headerlink" title="命令模式小结："></a>命令模式小结：</h4></li>
</ul>
<ol>
<li>将发起请求的对象与执行请求的对象解耦，发起请求的对象是调用者，调用者只要调用命令对象的excecute()方法就可以让接收者工作，而不必知道具体的接受者对象是谁，是如何实现的，命令对象会负责让接收者执行请求的动作，也就是说：”请求发送者”和”请求执行者”之间解耦是通过命令对象的实现的，命令对象起到了枢纽桥梁的作用。</li>
<li>容易设计一个命令队列，只要把命令对象放到队列，就可以的多线程的执行命令</li>
<li>容易实现对请求的撤销和重做</li>
<li>命令模式不足：可能导致某些系统有过多的具体命令类，增加了系统的的复杂化度，这点在使用的时候要注意</li>
<li>空命令也是一种设计模式，他为我们省去了判断空的操作，在上面的实例中，如果没有空命令了，我们每按下一个按键都要判断空，这给我们编码带来一定的麻烦</li>
<li>命令模式经典的应用场景:界面的一个按钮都是一条命令，模拟CMD(dos命令)订单的撤销/恢复，出发反馈机制</li>
</ol>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+模板模式</title>
    <url>/2020/02/29/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><ul>
<li>基本介绍：</li>
</ul>
<ol>
<li>模板方法模式(Template Method Pattern),又叫模板方法模式；在一个抽象类公开定义了执行他方法的模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方法进行。</li>
<li>简单说，模板方法模式定义一个操作中的的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重新定义该算法的某些特定的步骤</li>
<li>这种类型的设计模属于行为型模式</li>
</ol>
<ul>
<li>类图<br><img src="images%5Ctemplate.png" alt="" title="模板模式"></li>
<li>说明：<br>1.AbsClass抽象类，类中实现了模板方法，定义了算法的骨架，具体子类需要去实现其他抽象方法<br>2.ConcreteClass实现抽象方法operaction1，2，3，以及完成算法中特点子类的步骤<h4 id="应用实例：豆浆制作过程：选材–-gt-添加配料–-gt-侵泡–-gt-放到豆浆机打碎"><a href="#应用实例：豆浆制作过程：选材–-gt-添加配料–-gt-侵泡–-gt-放到豆浆机打碎" class="headerlink" title="应用实例：豆浆制作过程：选材–&gt;添加配料–&gt;侵泡–&gt;放到豆浆机打碎"></a>应用实例：豆浆制作过程：选材–&gt;添加配料–&gt;侵泡–&gt;放到豆浆机打碎</h4></li>
<li>类图<br><img src="images%5Ctemplate_soymilk.png" alt="" title="模板方法模式"></li>
<li>代码实现<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类，表示豆浆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">SoyMilk</span> &#123;</span><br><span class="line">    <span class="comment">//模板方法，可以做成final，不让子类覆盖</span></span><br><span class="line">    <span class="function">final <span class="keyword">void</span>  <span class="title">make</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">select</span>();</span><br><span class="line">        <span class="keyword">add</span>();</span><br><span class="line">        soak();</span><br><span class="line">        beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选材料</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"1.选择新鲜黄豆"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加不同配料,子类具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浸泡</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">soak</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"3.黄豆和配料开始浸泡 需要三个小时"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打碎</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"4.黄豆和配料放到豆浆机粉碎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ReadBeanSoyMilk</span> <span class="title">extends</span> <span class="title">SoyMilk</span> &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"加入上好的红豆"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PennutSoyMilk</span> <span class="title">extends</span> <span class="title">SoyMilk</span> &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"加入上好的花生"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Client</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----制作红豆豆浆----"</span>);</span><br><span class="line">        SoyMilk readBeanSoyMilk = <span class="keyword">new</span> ReadBeanSoyMilk();</span><br><span class="line">        readBeanSoyMilk.make();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----制作花生豆浆----"</span>);</span><br><span class="line">        SoyMilk pennutSoyMilk = <span class="keyword">new</span> PennutSoyMilk();</span><br><span class="line">        pennutSoyMilk.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="模板模式中的钩子方法"><a href="#模板模式中的钩子方法" class="headerlink" title="模板模式中的钩子方法"></a>模板模式中的钩子方法</h4></li>
<li>在模板方法模式的父类中，我们可以定义一个方法，它默认不会做任何事，子类可以视情况要不要覆盖它，该方法称为”钩子”。</li>
<li>还是用上面做豆浆的例子来讲解，比如，我们希望制作纯豆浆，不添加任何的配料，请使用钩子方法对前面的模板方法进行改造<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PureSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyMilk</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空实现</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">customerWantCodiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类，表示豆浆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SoyMilk</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模板方法，可以做成final，不让子类覆盖</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span>  <span class="title">make</span><span class="params">()</span></span>&#123;</span><br><span class="line">        select();</span><br><span class="line">        <span class="keyword">if</span>(customerWantCodiments())&#123;</span><br><span class="line">            add();</span><br><span class="line">        &#125;</span><br><span class="line">        soak();</span><br><span class="line">        beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选材料</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1.选择新鲜黄豆"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加不同配料,子类具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浸泡</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">soak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"3.黄豆和配料开始浸泡 需要三个小时"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打碎</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"4.黄豆和配料放到豆浆机粉碎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//钩子方法，决定是否添加配料</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">customerWantCodiments</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模板方法模式在Spring框架应用的源码分析"><a href="#模板方法模式在Spring框架应用的源码分析" class="headerlink" title="模板方法模式在Spring框架应用的源码分析"></a>模板方法模式在Spring框架应用的源码分析</h3></li>
<li>Spring IOC容器中初始化时运用到的模板方法模式</li>
<li>代码<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public interface <span class="type">ConfigurableApplicationContext</span> <span class="keyword">extends</span> <span class="type">ApplicationContext</span>, <span class="type">Lifecycle</span>, <span class="type">Closeable</span> &#123;</span><br><span class="line">    <span class="comment">//此处声明了一个模板方法</span></span><br><span class="line">    void refresh() <span class="keyword">throws</span> <span class="type">BeansException</span>, <span class="type">IllegalStateException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span> <span class="title">implements</span> <span class="title">ConfigurableApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="comment">//模板方法的实现</span></span><br><span class="line">public void refresh() <span class="keyword">throws</span> <span class="type">BeansException</span>, <span class="type">IllegalStateException</span> &#123;</span><br><span class="line">        synchronized(<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">            <span class="keyword">this</span>.prepareRefresh();</span><br><span class="line">            <span class="type">ConfigurableListableBeanFactory</span> beanFactory = <span class="keyword">this</span>.obtainFreshBeanFactory();</span><br><span class="line">            <span class="keyword">this</span>.prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.postProcessBeanFactory(beanFactory);</span><br><span class="line">                <span class="keyword">this</span>.invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">                <span class="keyword">this</span>.registerBeanPostProcessors(beanFactory);</span><br><span class="line">                <span class="keyword">this</span>.initMessageSource();</span><br><span class="line">                <span class="keyword">this</span>.initApplicationEventMulticaster();</span><br><span class="line">                <span class="keyword">this</span>.onRefresh();</span><br><span class="line">                <span class="keyword">this</span>.registerListeners();</span><br><span class="line">                <span class="keyword">this</span>.finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">                <span class="keyword">this</span>.finishRefresh();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="type">BeansException</span> var9) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.logger.warn(<span class="string">"Exception encountered during context initialization - cancelling refresh attempt: "</span> + var9);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.destroyBeans();</span><br><span class="line">                <span class="keyword">this</span>.cancelRefresh(var9);</span><br><span class="line">                <span class="keyword">throw</span> var9;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.resetCommonCaches();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">ConfigurableListableBeanFactory</span> obtainFreshBeanFactory() &#123;</span><br><span class="line">        <span class="keyword">this</span>.refreshBeanFactory();</span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> beanFactory = <span class="keyword">this</span>.getBeanFactory();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">"Bean factory for "</span> + <span class="keyword">this</span>.getDisplayName() + <span class="string">": "</span> + beanFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> beanFactory;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//抽象方法</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">abstract</span> void refreshBeanFactory() <span class="keyword">throws</span> <span class="type">BeansException</span>, <span class="type">IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">        public <span class="keyword">abstract</span> <span class="type">ConfigurableListableBeanFactory</span> getBeanFactory() <span class="keyword">throws</span> <span class="type">IllegalStateException</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//空方法，钩子方法</span></span><br><span class="line">        <span class="keyword">protected</span> void postProcessBeanFactory(<span class="type">ConfigurableListableBeanFactory</span> beanFactory) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRefreshableApplicationContext</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">GenericApplicationContext</span> <span class="keyword">extends</span> <span class="title">AbstractApplicationContext</span> <span class="title">implements</span> <span class="title">BeanDefinitionRegistry</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li>类图<br><img src="images%5Ctemplate001.png" alt="" title="spring源码中的模板方法模式"></li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+外观模式</title>
    <url>/2020/02/29/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><ul>
<li>案例电影院设备管理</li>
<li>传统设计模式  创建一个管理端，调用每一个设备的方法<ul>
<li>问题分析：</li>
</ul>
<ol>
<li>在Client的main方法中。创建各个子系统的对象，并直接去调用子系统(对象)相关方法，会造成调用过程混乱，没有清晰的过程。</li>
<li>不利于在Client中，去维护对子系统的操作</li>
<li>解决思路:定义一个高层接口，给子系统中的一组接口提供一个一致的界面(比如在高层接口提供四个方法 ready，play ,pause,end),用来访问子系统中的一群接口</li>
<li>也就是说通过定义一个一致接口(界面类)，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统内部细节 ==》外观模式<h4 id="外观模式的基本介绍：-》属于结构型模式"><a href="#外观模式的基本介绍：-》属于结构型模式" class="headerlink" title="外观模式的基本介绍：===》属于结构型模式"></a>外观模式的基本介绍：===》属于结构型模式</h4></li>
</ol>
</li>
<li>1.外观模式(Facade),也叫做”过程模式”；外观模式为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</li>
<li>2.外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统内部细节。</li>
<li>3.围观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用</li>
<li>类图<br><img src="images%5Cfacade.png" alt="" title="外观模式"><h4 id="案例代码实现"><a href="#案例代码实现" class="headerlink" title="案例代码实现"></a>案例代码实现</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DVDPlayer</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用单例模式，饿汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DVDPlayer dvdPlayer = <span class="keyword">new</span> DVDPlayer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DVDPlayer <span class="title">getDvdPlayer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dvdPlayer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"dvd 打开"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"dvd 关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"dvd 暂停"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"dvd 播放"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Popcorn</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用单例模式，饿汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Popcorn popcorn = <span class="keyword">new</span> Popcorn();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Popcorn <span class="title">getPopcorn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> popcorn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"苞米花机 打开"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"苞米花机 关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"苞米花机 正在运作....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Project</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用单例模式，饿汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Project project = <span class="keyword">new</span> Project();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Project <span class="title">getProject</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> project;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"投影仪 打开"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"投影仪 关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">promm</span><span class="params">()</span></span>&#123; <span class="comment">//聚焦</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"投影仪 聚焦"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Screen</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用单例模式，饿汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Screen screen = <span class="keyword">new</span> Screen();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Screen <span class="title">getScreen</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> screen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"屏幕 上升"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">down</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"屏幕 下降"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面都是子系统的类</span></span><br><span class="line"><span class="comment">//外观类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheaterFacede</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义歌歌词子系统的对象</span></span><br><span class="line">    <span class="keyword">private</span> DVDPlayer dvdPlayer;</span><br><span class="line">    <span class="keyword">private</span> Popcorn popcorn;</span><br><span class="line">    <span class="keyword">private</span> Project project;</span><br><span class="line">    <span class="keyword">private</span> Screen  screen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeTheaterFacede</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dvdPlayer = dvdPlayer.getDvdPlayer();</span><br><span class="line">        <span class="keyword">this</span>.popcorn = popcorn.getPopcorn();</span><br><span class="line">        <span class="keyword">this</span>.project = project.getProject();</span><br><span class="line">        <span class="keyword">this</span>.screen = screen.getScreen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 操作分四部</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 准备</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">ready</span><span class="params">()</span></span>&#123;</span><br><span class="line">        popcorn.on();</span><br><span class="line">        popcorn.pop();</span><br><span class="line">        screen.down();</span><br><span class="line">        project.on();</span><br><span class="line">        dvdPlayer.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//播放</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dvdPlayer.play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dvdPlayer.pause();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;</span><br><span class="line">        popcorn.off();</span><br><span class="line">        screen.up();</span><br><span class="line">        project.off();</span><br><span class="line">        dvdPlayer.off();</span><br><span class="line">        screen.up();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        HomeTheaterFacede homeTheaterFacede = <span class="keyword">new</span> HomeTheaterFacede();</span><br><span class="line"></span><br><span class="line">        homeTheaterFacede.<span class="built_in">ready</span>();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"++++++++++++++"</span>);</span><br><span class="line">        homeTheaterFacede.play();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"++++++++++++++"</span>);</span><br><span class="line">        homeTheaterFacede.<span class="built_in">end</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">苞米花机 打开</span><br><span class="line">苞米花机 正在运作.....</span><br><span class="line">屏幕 下降</span><br><span class="line">投影仪 打开</span><br><span class="line">dvd 打开</span><br><span class="line">++++++++++++++</span><br><span class="line">dvd 暂停</span><br><span class="line">++++++++++++++</span><br><span class="line">苞米花机 关闭</span><br><span class="line">屏幕 上升</span><br><span class="line">投影仪 关闭</span><br><span class="line">dvd 关闭</span><br><span class="line">屏幕 上升</span><br></pre></td></tr></table></figure>
<h4 id="外观模式在MyBatis框架应用的源码分析"><a href="#外观模式在MyBatis框架应用的源码分析" class="headerlink" title="外观模式在MyBatis框架应用的源码分析"></a>外观模式在MyBatis框架应用的源码分析</h4></li>
<li>Mybatis中的Configuration去创建MetaObject对象使用到了为外观模式  package org.apache.ibatis.session;</li>
<li>Configuration<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> ReflectorFactory <span class="built_in">ref</span>lectorFactory;</span><br><span class="line"><span class="keyword">protected</span> ObjectFactory objectFactory;</span><br><span class="line"><span class="keyword">protected</span> ObjectWrapperFactory objectWrapperFactory;</span><br></pre></td></tr></table></figure></li>
<li><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public MetaObject <span class="keyword">new</span><span class="constructor">MetaObject(Object <span class="params">object</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//这里聚合了三个对象的实例</span></span><br><span class="line">    return <span class="module-access"><span class="module"><span class="identifier">MetaObject</span>.</span></span>for<span class="constructor">Object(<span class="params">object</span>, <span class="params">this</span>.<span class="params">objectFactory</span>, <span class="params">this</span>.<span class="params">objectWrapperFactory</span>, <span class="params">this</span>.<span class="params">reflectorFactory</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>forObject方法<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static MetaObject for<span class="constructor">Object(Object <span class="params">object</span>, ObjectFactory <span class="params">objectFactory</span>, ObjectWrapperFactory <span class="params">objectWrapperFactory</span>, ReflectorFactory <span class="params">reflectorFactory</span>)</span> &#123;</span><br><span class="line">      return object<span class="operator"> == </span>null ? SystemMetaObject.NULL_META_OBJECT : <span class="keyword">new</span> <span class="constructor">MetaObject(<span class="params">object</span>, <span class="params">objectFactory</span>, <span class="params">objectWrapperFactory</span>, <span class="params">reflectorFactory</span>)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>MetaObject构造方法<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">MetaObject</span>(<span class="type">Object</span> <span class="class"><span class="keyword">object</span>, <span class="title">ObjectFactory</span> <span class="title">objectFactory</span>, <span class="title">ObjectWrapperFactory</span> <span class="title">objectWrapperFactory</span>, <span class="title">ReflectorFactory</span> <span class="title">reflectorFactory</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.originalObject = <span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">       <span class="keyword">this</span>.objectFactory = objectFactory;</span><br><span class="line">       <span class="keyword">this</span>.objectWrapperFactory = objectWrapperFactory;</span><br><span class="line">       <span class="keyword">this</span>.reflectorFactory = reflectorFactory;</span><br><span class="line">       <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">instanceof</span> <span class="title">ObjectWrapper</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.objectWrapper = (<span class="type">ObjectWrapper</span>)<span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (objectWrapperFactory.hasWrapperFor(<span class="class"><span class="keyword">object</span>)) </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.objectWrapper = objectWrapperFactory.getWrapperFor(<span class="keyword">this</span>, <span class="class"><span class="keyword">object</span>)</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">instanceof</span> <span class="title">Map</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.objectWrapper = <span class="keyword">new</span> <span class="type">MapWrapper</span>(<span class="keyword">this</span>, (<span class="type">Map</span>)<span class="class"><span class="keyword">object</span>)</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="class"><span class="keyword">object</span> <span class="title">instanceof</span> <span class="title">Collection</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.objectWrapper = <span class="keyword">new</span> <span class="type">CollectionWrapper</span>(<span class="keyword">this</span>, (<span class="type">Collection</span>)<span class="class"><span class="keyword">object</span>)</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">this</span>.objectWrapper = <span class="keyword">new</span> <span class="type">BeanWrapper</span>(<span class="keyword">this</span>, <span class="class"><span class="keyword">object</span>)</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>类图<br><img src="images%5Cmybatis_configuration_facade.png" alt="" title="mybatis中Configuration用到外观模式"><h4 id="外观模式小结："><a href="#外观模式小结：" class="headerlink" title="外观模式小结："></a>外观模式小结：</h4></li>
<li>1.外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复杂性</li>
<li>2.外观模式对客户端与子系统的耦合关系，让子系统内部的模块更容易维护和扩展</li>
<li>3.通过合理的使用外观模式可以帮我们更好的划分访问层次</li>
<li>4.当系统需要进行分层设计时，可以考虑使用Facade(外观模式)</li>
<li>5.在维护一个遗留大型系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个Facade(外观类)，来提供遗留系统的比较清晰简单的接口，让新系统与外观Facade类交互，提高复用性</li>
<li>6.不能过多的或者不合理的使用外观模式，使用外观模式好还是直接调用模块好，要以让系统有层次，力与维护为目的。</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+享元模式</title>
    <url>/2020/02/29/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><ul>
<li>基本介绍：</li>
<li>1.享元模式(Flyweight Pattern)也叫蝇量模式：运用共享技术有效的支持大量细粒度的对象。</li>
<li>2.常用于系统底层开发，解决系统的性能问题。像数据库连接池，里面都是创建好的链接对象，在这些连接对象中有我们需要的则直接拿来用， 避免重新创建，如果没有我们需要的，则创建一个</li>
<li>3.享元模式能够解决重复对象的内存的浪费问题，当系统中有大量相似的对象，需要缓冲池时。不需要总是创建新的对象，可以从缓冲池里拿，。这样可以降低系统的内存，同时提高效率</li>
<li>4.享元模式经典的应用场景就是池技术了，String常量池，数据库连接池，缓冲池等等都是享元模式的应用，享元模式是池技术的重要实现</li>
<li>享元模式原理类图<br><img src="images%5CFlyweight.png" alt=""><ul>
<li>说明：<ul>
<li>FlyweightFactory：享元工厂，用于构建一个池容器（集合）同时提供从池中获取对象的方法</li>
<li>Flyweight：抽象的享元角色，产品抽象类，同时定义出对象的外部状态和内部状态的接口或者实现</li>
<li>ConcrateFlyweight:具体的享元角色，是具体的产品类<br>实现抽象角色定义的相关业务</li>
<li>UnsharedConcreatreFlyweight:是不可共享的角色,一般不会出现在享元工厂<h4 id="享元模式详解"><a href="#享元模式详解" class="headerlink" title="享元模式详解"></a>享元模式详解</h4></li>
</ul>
</li>
</ul>
</li>
<li>1.享元模式提出了两个要求，细粒度和共享对象。这里就涉及到内部状态和外部状态了，即将对象的性息分外两部分:内部状态和外部状态</li>
<li>2.内部状态指的是对象共享出来的信息，存储在享元对象内部且不会随环境的改变而改变</li>
<li>3.外部状态指对象得以依赖的一个标记，是随环境改变而改变的，不可共享的状态<h4 id="应用案例-代码实现"><a href="#应用案例-代码实现" class="headerlink" title="应用案例+代码实现"></a>应用案例+代码实现</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> abstract <span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> abstract <span class="keyword">void</span> <span class="title">use</span><span class="params">(User user)</span></span>; <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreateWebSite</span> <span class="title">extends</span> <span class="title">WebSite</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//共享部分，内部状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> type = <span class="string">""</span>;<span class="comment">//网页发布的形式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreateWebSite</span><span class="params">(<span class="keyword">String</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"网页发布的形式"</span>+type+<span class="string">""</span>+<span class="string">"用户名："</span>+user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//外部状态类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSticeFactory</span> &#123;</span></span><br><span class="line">    <span class="comment">//享元工厂</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//集合，充当池的作用</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;<span class="keyword">String</span>,ConcreateWebSite&gt;  pool = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据网站类型，返回一个网站，如果没有就创建一个，并放入到池中,并返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebSite <span class="title">getWebSiteCategory</span><span class="params">(<span class="keyword">String</span> type)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!pool.containsKey(type))&#123;</span><br><span class="line">            <span class="comment">//创建一个，并放入到池中</span></span><br><span class="line">            pool.<span class="built_in">put</span>(type,<span class="keyword">new</span> ConcreateWebSite(type));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (WebSite) pool.<span class="built_in">get</span>(type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取网站分类总数(池中有多少个网站类型)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWebSiteCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pool.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个工厂类</span></span><br><span class="line">        WebSticeFactory factory = <span class="keyword">new</span> WebSticeFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要以新闻的形式发布的网站</span></span><br><span class="line">        WebSite webSite = factory.getWebSiteCategory(<span class="string">"新闻"</span>);</span><br><span class="line"></span><br><span class="line">        webSite.use(<span class="keyword">new</span> User(<span class="string">"TOM"</span>));</span><br><span class="line"></span><br><span class="line">        WebSite webSite1 = factory.getWebSiteCategory(<span class="string">"博客"</span>);</span><br><span class="line"></span><br><span class="line">        webSite1.use(<span class="keyword">new</span> User(<span class="string">"小明"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"网站分类："</span>+factory.getWebSiteCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="享元模式在JDK-Interger的应用源码分析："><a href="#享元模式在JDK-Interger的应用源码分析：" class="headerlink" title="享元模式在JDK-Interger的应用源码分析："></a>享元模式在JDK-Interger的应用源码分析：</h4></li>
<li>1.Integer中的享元模式</li>
<li>2.valueOf()方法就是享元模式的具体实现<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static Integer value<span class="constructor">Of(<span class="params">int</span> <span class="params">i</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="module-access"><span class="module"><span class="identifier">IntegerCache</span>.</span></span>low<span class="operator"> &amp;&amp; </span>i &lt;= <span class="module-access"><span class="module"><span class="identifier">IntegerCache</span>.</span></span>high)</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">IntegerCache</span>.</span></span>cache<span class="literal">[<span class="identifier">i</span> + (-I<span class="identifier">ntegerCache</span>.<span class="identifier">low</span>)]</span>;</span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">Integer(<span class="params">i</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小结：</span></span><br><span class="line"><span class="comment">//1.在valueOf方法中，先判断是否在IntegerCache中，如果不在就创建新的Integer(new),否则，就直接从缓存池中返回</span></span><br><span class="line"><span class="comment">//2.valueOf方法，就是使用享元模式</span></span><br></pre></td></tr></table></figure>
<h4 id="享元模式小结："><a href="#享元模式小结：" class="headerlink" title="享元模式小结："></a>享元模式小结：</h4></li>
<li>1.在享元模式这样理解：“享”就是共享，”元”表示对象</li>
<li>2.系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时，我们就可以就可以使用享元模式</li>
<li>3.用唯一的标码判断，如果内存中有，则返回这个唯一标识码的对象，用HashMap/HashTable存储</li>
<li>4.享元模式提高了系统的复杂度。需要分离出内部状态和外部状态，而外部状态具有固化特效，不应该随着内部状态的改变而改变，这是我们使用享元模式需要注意的地方</li>
<li>6.使用享元模式，注意划分内部状态和外部状态，并且需要有个一个工厂类加以控制。</li>
<li>7.享元模式经典的应用场景是需要缓存池的场景，比如string常量池，数据连接池</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+组合模式</title>
    <url>/2020/02/29/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><ul>
<li>基本介绍</li>
<li>1.组合模式(Composite Pattern),又叫部分整体模式，他创建了对象组的树形结构，将对象组合成树状结构用以表示”整体-部分”的关系。</li>
<li>2.组合模式依据树形结构来组合对象，用来表示部分以及整体层次。</li>
<li>3.这种类型的设计模式属于结构型模式。</li>
<li>4.组合模式使得用户对单个对象和组合对象的访问具有一致性，即:组合能让客户以一致的方式处理个别对象以及组合对象<h4 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h4></li>
<li>类图<br><img src="images%5Ccompsite.png" alt="" title="组合模式类图"></li>
<li>代码实现<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> abstract <span class="class"><span class="keyword">class</span> <span class="title">OrganizationComponet</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> des;<span class="comment">//描述</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponet componet)</span></span>&#123;</span><br><span class="line">        <span class="comment">//默认实现 如果是抽象方法叶子节点必须要实现</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"不支持操作异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponet componet)</span></span>&#123;</span><br><span class="line">        <span class="comment">//默认实现 如果是抽象方法叶子节点必须要实现</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"不支持操作异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrganizationComponet</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">String</span> des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.des = des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDes</span><span class="params">(<span class="keyword">String</span> des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.des = des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印方法，做成抽象的 所有的子类必须实现</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> abstract <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">University</span> <span class="keyword">extends</span> <span class="title">OrganizationComponet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//聚合</span></span><br><span class="line"></span><br><span class="line">    List&lt;OrganizationComponet&gt; organizationComponets = <span class="keyword">new</span> ArrayList&lt;OrganizationComponet&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">University</span><span class="params">(String name, String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, des);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写Add方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponet componet)</span> </span>&#123;</span><br><span class="line">        organizationComponets.add(componet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponet componet)</span> </span>&#123;</span><br><span class="line">        organizationComponets.remove(componet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">getDes</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印输出Universit 包含的学院</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"============="</span>+getName()+<span class="string">"==============="</span>);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (OrganizationComponet o : organizationComponets)&#123;</span><br><span class="line">            o.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pattern.compsite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pattern.OrganizationComponet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">College</span> <span class="keyword">extends</span> <span class="title">OrganizationComponet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//聚合</span></span><br><span class="line"></span><br><span class="line">    List&lt;OrganizationComponet&gt; organizationComponets = <span class="keyword">new</span> ArrayList&lt;OrganizationComponet&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">College</span><span class="params">(String name, String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, des);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写Add方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponet componet)</span> </span>&#123;</span><br><span class="line">        organizationComponets.add(componet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponet componet)</span> </span>&#123;</span><br><span class="line">        organizationComponets.remove(componet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">getDes</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印输出Universit 包含的学院</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"============="</span>+getName()+<span class="string">"==============="</span>);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span> (OrganizationComponet o : organizationComponets)&#123;</span><br><span class="line">            o.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pattern.compsite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pattern.OrganizationComponet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> <span class="keyword">extends</span> <span class="title">OrganizationComponet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(String name, String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, des);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">getDes</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pattern.compsite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pattern.OrganizationComponet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从大到小创建对象</span></span><br><span class="line">        OrganizationComponet university = <span class="keyword">new</span> <span class="type">University</span>(<span class="string">"清华大学"</span>, <span class="string">"中国顶级的学府"</span>);</span><br><span class="line"></span><br><span class="line">        OrganizationComponet college = <span class="keyword">new</span> <span class="type">College</span>(<span class="string">"信息工程学院"</span>, <span class="string">"牛逼的院系"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ((College) college).add(<span class="keyword">new</span> <span class="type">Department</span>(<span class="string">"软件专业"</span>, <span class="string">"顶级专业"</span>));</span><br><span class="line">        ((College) college).add( <span class="keyword">new</span> <span class="type">Department</span>(<span class="string">"网络专业"</span>, <span class="string">"顶级专业"</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将学院加入到学校zhong</span></span><br><span class="line">        ((University) university).add(college);</span><br><span class="line"></span><br><span class="line">        university.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="组合模式在JDK集合中源码"><a href="#组合模式在JDK集合中源码" class="headerlink" title="组合模式在JDK集合中源码"></a>组合模式在JDK集合中源码</h4></li>
<li>1.Java的集合类-HashMap就使用了组合模式</li>
<li>源代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//叶子节点</span></span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>说明<ul>
<li>Map就是一个抽象的构建(类似前面Component)</li>
<li>HsahMap是一个中间的构建(Composite),实现/继承相关方法</li>
<li>put，putAll</li>
<li>Node 是HashMap的静态内部类，叶子节点，这里就没有put，putall<h4 id="组合模式小结"><a href="#组合模式小结" class="headerlink" title="组合模式小结"></a>组合模式小结</h4></li>
</ul>
</li>
<li>1.简化客户端操作。客户端只需要面对一致的对象而不是考虑整体部分或者节点叶子的问题。</li>
<li>2.具有较强的扩展性。当我们要更该组合对象是，我们需要调整内部的层次关系，客户端不用做出任何改动</li>
<li>3.方便创建出复杂的层次结构。客户端不用理会组合里面的组成细节，容易添加节点或者叶子从而创建出复杂的树装结构</li>
<li>4.需要遍历组织机构，或者处理的对象具有树状结构时，非常适合使用组合模式。</li>
<li>5.要求较高的抽象性，如果节点和叶子有很多差异性的话，比如很多方法和属性都不一样，不适合使用组合模式 </li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot微服务框架(九)+错误处理</title>
    <url>/2020/02/29/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-%E4%B9%9D-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="SpringBoot错误处理原理"><a href="#SpringBoot错误处理原理" class="headerlink" title="SpringBoot错误处理原理"></a>SpringBoot错误处理原理</h3><ul>
<li>返回一个默认错误页面</li>
<li>如果是其他客户端，默认响应一个json字符串</li>
<li>原理：<ul>
<li>可以参照ErrorMvcAutoConfiguration：错误处理自动配置</li>
<li>给容器中添加了以下组件<ul>
<li>1.DefaultErrorAttributes<br>浏览器发送的请求的请求头：<br>Accept：text/html</li>
<li>2.BasicErrorController  //处理默认/error请求<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>&#125;)</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ErrorProperties</span> errorProperties;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&#123;<span class="meta-string">"<span class="subst">$&#123;server.error.path:$&#123;error.path:/error&#125;</span>&#125;"</span>&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="title">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ErrorProperties errorProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BasicErrorController(ErrorAttributes errorAttributes, ErrorProperties errorProperties) &#123;</span><br><span class="line">        <span class="keyword">this</span>(errorAttributes, errorProperties, Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BasicErrorController(ErrorAttributes errorAttributes, ErrorProperties errorProperties, List&lt;ErrorViewResolver&gt; errorViewResolvers) &#123;</span><br><span class="line">        <span class="keyword">super</span>(errorAttributes, errorViewResolvers);</span><br><span class="line">        Assert.notNull(errorProperties, <span class="string">"ErrorProperties must not be null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.errorProperties = errorProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String getErrorPath() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.errorProperties.getPath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">        produces = &#123;<span class="meta-string">"text/html"</span>&#125;</span></span><br><span class="line"><span class="meta">    )</span>  <span class="comment">//产生Html类型数据 浏览器发送请求来到这个方法处理</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView errorHtml(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">        HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">        Map&lt;String, Object&gt; model = Collections.unmodifiableMap(<span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">        response.setStatus(status.value());</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">this</span>.resolveErrorView(request, response, status, model);</span><br><span class="line">        <span class="keyword">return</span> modelAndView != <span class="literal">null</span> ? modelAndView : new ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span> <span class="comment">//产生json类型数据 其他客户端来到这个方法处理</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">        HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">        <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">            <span class="keyword">return</span> new ResponseEntity(status);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, Object&gt; body = <span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">            <span class="keyword">return</span> new ResponseEntity(body, status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> boolean isIncludeStackTrace(HttpServletRequest request, MediaType produces) &#123;</span><br><span class="line">        IncludeStacktrace include = <span class="keyword">this</span>.getErrorProperties().getIncludeStacktrace();</span><br><span class="line">        <span class="keyword">if</span> (include == IncludeStacktrace.ALWAYS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> include == IncludeStacktrace.ON_TRACE_PARAM ? <span class="keyword">this</span>.getTraceParameter(request) : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ErrorProperties getErrorProperties() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.errorProperties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>3.ErrorPageCustomizer 系统出现错误的以后来到error页面请求进行处理;(web.xml注册的错误页面规则)</li>
<li>4.DefaultErrorViewResolverConfiguration //在页面共享信息<br>步骤：<br>一但系统出现4xx或者5xx之类的信息；ErrorpageCustomizer就会生效(定制错误响应规则)， 就会来到/error请求<br>就会被BasicErrorController处理请求；</li>
</ul>
</li>
</ul>
</li>
<li>如何定制错误的页面？<ul>
<li>1.有模板引擎的情况下；error/状态码【将错误页面命名为 错误状态码.html放在error文件夹下】发生此状态码的错误就会来到对应的人页面<br>我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，原则是精确优先<br>页面能获取的信息:（DefaultErrorViewResolver）<pre><code>timestamp：时间戳
status：状态码
error：错误提示
exception：异常
message：异常消息
errors：JSR303数据校验的错误都i在这里</code></pre></li>
<li>2.没有模板引擎(模板引擎找不到这个错误页面)放在静态文件夹下(static/error;public/error)：</li>
<li>3.以上都没有错误文件夹就是默认来到SpringBoot的默认的错误提示页面</li>
</ul>
</li>
<li>客户端如何定制错误的json数据？</li>
<li>异常处理器<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.无自适应效果</span></span><br><span class="line">    @ControllerAdvice  <span class="comment">//异常处理器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    @ResponseBody</span><br><span class="line">    @ExceptionHandler(UserNotExistException.class)</span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>,Object&gt; handlerException(Exception e)&#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>,Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//没有自适应效果。。。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//2.转发到/erroe进行自适应效果响应处理</span></span><br><span class="line">    @ResponseBody</span><br><span class="line">    @ExceptionHandler(UserNotExistException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">handlerException</span><span class="params">(Exception e,HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        Map&lt;<span class="keyword">String</span>,Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//传入自己的错误状态码，否则返回的错误视图是SpringBoot默认的页面</span></span><br><span class="line">        <span class="comment">// 源码：AbstractErrorController类</span></span><br><span class="line">        <span class="comment">// Integer statusCode = (Integer)request.getAttribute("javax.servlet.error.status_code");</span></span><br><span class="line">        request.setAttribute(<span class="string">"javax.servlet.error.status_code"</span>,<span class="number">400</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"code"</span>,<span class="string">"user.notexist"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"message"</span>,e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forword:/error"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">//3.返回到我们定制的错误页面，并将携带我们定制的数据</span></span><br><span class="line">  <span class="comment">//出现错误后，会来到/error请求，会被BasicErrorController处理响应出去的数据是由getErrorAttributes()方法得到的(此方法是由AbstractErrorController规定的);</span></span><br><span class="line">  <span class="comment">//第一种方法：完全来编写一个错误处理的类【或者是编写AbstractErrorController的子类】，放在容器中</span></span><br><span class="line">  <span class="comment">//第二种方法：页面上能用的数据，或者是json返回能用数据都是通过errorAtttributes.getErrorAttribute得到；</span></span><br><span class="line">            容器中DefaultErrorAttributes.getErrorAttribute默认进行数据处理的;</span><br></pre></td></tr></table></figure></li>
<li>自定义异常<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义异常                                 //运行时异常</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserNotExistException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">   public <span class="type">UserNotExistException</span>() &#123;</span><br><span class="line">       <span class="keyword">super</span>(<span class="string">"用户不存在！"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot微服务(八)+高级任务Spring-Security</title>
    <url>/2020/02/29/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E5%85%AB-%E9%AB%98%E7%BA%A7%E4%BB%BB%E5%8A%A1Spring-Security/</url>
    <content><![CDATA[<h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><ul>
<li>注解     //告诉Spring这是一个异步方法 @Async; @EnableAsync //开启异步注解</li>
<li>在多线程中 休眠3秒 ，开启异步就不用等待</li>
<li>案例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//任务</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//告诉Spring这是一个异步方法</span></span><br><span class="line">    <span class="meta">@Async</span>  <span class="comment">//多线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//休眠3秒</span></span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"处理数据中。。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AsyncService asyncService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        asyncService.hello();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步注解</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTaskRenwuApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(DemoTaskRenwuApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3></li>
<li>项目开发中经常需要执行一些定时任务，比如需要在每天凌晨时候，分析一次前一天的日志信息。Spring为我们提供了异步执行任务的调度方式，提供TaskExecutor，TaskScheduler接口。</li>
<li>两个注解：@EnableScheduling，@Scheduld</li>
<li>cron(时间单位)表达式:</li>
</ul>
<table>
<thead>
<tr>
<th>字段</th>
<th align="center">允许值</th>
<th>允许的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td>秒</td>
<td align="center">0-59</td>
<td>,-*/</td>
</tr>
<tr>
<td>分</td>
<td align="center">0-59</td>
<td>,-*/</td>
</tr>
<tr>
<td>小时</td>
<td align="center">0-23</td>
<td>,-*/</td>
</tr>
<tr>
<td>日期</td>
<td align="center">1-31</td>
<td>,-*?/ L W C</td>
</tr>
<tr>
<td>月份</td>
<td align="center">1-12</td>
<td>,-*/</td>
</tr>
<tr>
<td>星期</td>
<td align="center">0-7或SUN-SAT0，7是SUN</td>
<td>,-*?/L C #</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>特殊字符</th>
<th align="center">代表含义</th>
</tr>
</thead>
<tbody><tr>
<td>,</td>
<td align="center">枚举</td>
</tr>
<tr>
<td>-</td>
<td align="center">区间</td>
</tr>
<tr>
<td>*</td>
<td align="center">任意</td>
</tr>
<tr>
<td>/</td>
<td align="center">步长</td>
</tr>
<tr>
<td>?</td>
<td align="center">日/星期冲突匹配</td>
</tr>
<tr>
<td>L</td>
<td align="center">最后</td>
</tr>
<tr>
<td>W</td>
<td align="center">工作日</td>
</tr>
<tr>
<td>C</td>
<td align="center">和calendar联系后计算过的值</td>
</tr>
<tr>
<td>符号#</td>
<td align="center">星期，4#2,第2个星期三</td>
</tr>
</tbody></table>
<ul>
<li>案例<br>【0 0/5 14，15 * * ?】 每天14点整和15点整，每隔五秒执行一次<br>【0 15 10 ? * 1-6】每个月周一至周六10：15分执行一次<br>【0 0 2 ？ * 6L】每个月最后一周六2点支执行一次<br>【0 0 2 LW * ?】每个月的最后一个工作日凌晨2点执行一次<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Service</span></span><br><span class="line">public class ScheduledService &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//秒 分 时 日 月 周</span></span><br><span class="line">    <span class="comment">// 表示 周1到2每分钟执行一次</span></span><br><span class="line">    <span class="variable">@Scheduled</span>(cron = <span class="string">"0 * * * * MON-TUE"</span>)</span><br><span class="line">    <span class="comment">//枚举方式</span></span><br><span class="line">    <span class="variable">@Scheduled</span>(cron = <span class="string">"0,1,2,3,4 * * * * MON-TUE"</span>)</span><br><span class="line">    <span class="comment">//区间</span></span><br><span class="line">    <span class="variable">@Scheduled</span>(cron = <span class="string">"0-4 * * * * MON-TUE"</span>)</span><br><span class="line">    public void hello()&#123;</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">"定时执行...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">EnableScheduling</span> <span class="comment">//开启定时注解</span></span><br><span class="line">@<span class="selector-tag">EnableAsync</span> <span class="comment">//开启异步注解</span></span><br><span class="line">@<span class="selector-tag">SpringBootApplication</span></span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">DemoTaskRenwuApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">		<span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(DemoTaskRenwuApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="邮件任务"><a href="#邮件任务" class="headerlink" title="邮件任务"></a>邮件任务</h3></li>
<li>邮件发送需要引入spring-boot-starter-mail</li>
<li>SpringBoot自动配置MailSendAutoConfiguration</li>
<li>定义MailProperties内容，配置application.yml<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">@ConfigurationProperties(</span><br><span class="line">    prefix = <span class="string">"spring.mail"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final Charset DEFAULT_CHARSET;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> host;</span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> protocol = <span class="string">"smtp"</span>;</span><br><span class="line">    <span class="keyword">private</span> Charset defaultEncoding;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; properties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> jndiName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//application.properties配置</span></span><br><span class="line">spring.mail.username=<span class="number">1234556</span>@qq.com</span><br><span class="line">spring.mail.password=<span class="number">5112122</span>  <span class="comment">//授权码</span></span><br><span class="line">spring.mail.host=smtp.qq.com<span class="comment">// 主机地址SMTP服务器 地址</span></span><br><span class="line"><span class="meta">#安全连接ssl</span></span><br><span class="line">spring.mail.properties.mail.smtp.ssl.enable=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>自动装配JavaMailSenderImpl</li>
<li>测试邮件发送<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line"><span class="keyword">class</span> DemoTaskRenwuApplicationTests &#123;</span><br><span class="line"></span><br><span class="line">	@Autowired</span><br><span class="line">	JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	void context<span class="constructor">Loads()</span> &#123;</span><br><span class="line">		<span class="comment">//简单邮件</span></span><br><span class="line">		SimpleMailMessage message = <span class="keyword">new</span> <span class="constructor">SimpleMailMessage()</span>;</span><br><span class="line">		<span class="comment">//邮件设置</span></span><br><span class="line">		<span class="comment">//标题</span></span><br><span class="line">		message.set<span class="constructor">Subject(<span class="string">"通知：开始嗨！"</span>)</span>;</span><br><span class="line">		<span class="comment">//内容</span></span><br><span class="line">		message.set<span class="constructor">Text(<span class="string">"今晚7：40.。。。。。"</span>)</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//接收者</span></span><br><span class="line">		message.set<span class="constructor">To(<span class="string">"123456@qq.com"</span>)</span>;</span><br><span class="line">		<span class="comment">//发送者</span></span><br><span class="line">		message.set<span class="constructor">From(<span class="string">"1234556@qq.com"</span>)</span>;</span><br><span class="line">		mailSender.send(message);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	public void text<span class="literal">()</span> throws MessagingException &#123;</span><br><span class="line">		<span class="comment">//复杂邮件</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//1.创建一个复杂邮件</span></span><br><span class="line">		MimeMessage mimeMessage = mailSender.create<span class="constructor">MimeMessage()</span>;</span><br><span class="line"></span><br><span class="line">		MimeMessageHelper message = <span class="keyword">new</span> <span class="constructor">MimeMessageHelper(<span class="params">mimeMessage</span>)</span>;</span><br><span class="line">		<span class="comment">//邮件设置</span></span><br><span class="line">		<span class="comment">//标题</span></span><br><span class="line">		message.set<span class="constructor">Subject(<span class="string">"通知：开始嗨！"</span>)</span>;</span><br><span class="line">		<span class="comment">//内容  可以是html片段</span></span><br><span class="line">		message.set<span class="constructor">Text(<span class="string">"&lt;b style='color:red'&gt;jkpppppppppagajogerg&lt;/b&gt;"</span>,<span class="params">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//接收者</span></span><br><span class="line">		message.set<span class="constructor">To(<span class="string">"123456@qq.com"</span>)</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//发送者</span></span><br><span class="line">		message.set<span class="constructor">From(<span class="string">"1234556@qq.com"</span>)</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//上传文件</span></span><br><span class="line">		message.add<span class="constructor">Attachment(<span class="string">"1.jpg"</span>,<span class="params">new</span> File(<span class="string">"目录"</span>)</span>);</span><br><span class="line">		mailSender.send(mimeMessage);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot微服务(七)+高级消息RabbitMQ</title>
    <url>/2020/02/29/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1-%E4%B8%83-%E9%AB%98%E7%BA%A7%E6%B6%88%E6%81%AFRabbitMQ/</url>
    <content><![CDATA[<h3 id="消息服务"><a href="#消息服务" class="headerlink" title="消息服务"></a>消息服务</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li><p>1.大多应用中，可通过消息服务中间件来提升系统的异步通信，扩展解耦能力</p>
</li>
<li><p>2.消息服务中的两个重要概念：<br>  消息代理(message broker)和目的地(destination)<br>  当消息发送者发送发消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。</p>
</li>
<li><p>3.消息队列主要有两种形式的目的地：</p>
<ul>
<li>队列(Queue)：点对点消息通信(point</li>
</ul>
<p>  -to-point)</p>
<ul>
<li>主题(topic)：发布(publish)/订阅(subscribe)消息通信</li>
</ul>
</li>
<li><p>4.点对点式：</p>
<ul>
<li>消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取消息内容，消息读取后被移除队列</li>
<li>消息只有唯一的发送者和接受者，但并不是说只能有一个接收者</li>
</ul>
</li>
<li><p>5.发布订阅式：</p>
<ul>
<li>发送者(发布者)发送消息到主题，多个接收者(订阅者)监听(订阅)这个主题，那么就会在消息到达同时收到消息。</li>
</ul>
</li>
<li><p>6.JMS(java Message Service)Java消息服务：</p>
<ul>
<li>基于JVM消息代理的规范。ActiveMQ，RockerMQ，kafuka，都是JMS的实现</li>
<li>Java api</li>
</ul>
</li>
<li><p>7.AMQP(Advanced Message Queuing Protocol)</p>
<ul>
<li>高级消息队列协议，也是一个消息代理的规范，兼容JMS</li>
<li>RabbitMQ是AMPQ的实现</li>
<li>网络线级服务</li>
</ul>
</li>
<li><p>Spring支持</p>
<ul>
<li>Spring-jms提供了对JMS的支持</li>
<li>spring-rabbit提供了对AMQP的支持</li>
<li>需要ConnectionFactory的实现来连接消息代理</li>
<li>提供JmsTemplate，RabbitTemplate来发送消息</li>
<li>@JmsListener(JMS),@RabbitListener(AMQP)注解在方法上监听消息代理发布的消息</li>
<li>EnableJms，@EnableRabbit开启支持</li>
</ul>
</li>
<li><p>Spring Boot自动配置</p>
<ul>
<li>JmsAutoConfiguration</li>
<li>RabbitAutoConfiguration<h3 id="RabbitMQ简介"><a href="#RabbitMQ简介" class="headerlink" title="RabbitMQ简介"></a>RabbitMQ简介</h3></li>
</ul>
</li>
<li><p>简介：</p>
</li>
<li><p>RabbitMQ是由erlang开发的AMQP(Advanved Message Queue Protocol)的开源实现。</p>
</li>
<li><p>核心概念：</p>
<ul>
<li><p>Messge</p>
</li>
<li><p>消息，消息是不具名的，它由消息头，和消息体组成，消息体是不透明的，而消息头则由一系列的可选属性组成，这些消息包括routing-key(路由器)，priority(相对于其他消息的优先权)，delivery-mode(指出该消息可能需要持久性存储)等。</p>
</li>
<li><p>publisher<br>消息生产者，也是一个向交换器发布消息的客户端应用程序。</p>
</li>
<li><p>Exchange<br>交换器，用来接受生产者发送的消息并将这些消息路由给服务器中的队列。<br>Exchange有4种类型：direct(默认)，fanout，topic和headers，不同类型的Exchange转发消息的策略有所区别</p>
<ul>
<li><p>Queue<br>消息队列，用于保存消息直到发送给消费者，他是消息的容器，也是消息的终点。一个消息可投入一个或多个队列，消息一直在队列里面，等待消费者连接到这个队列将其取走。</p>
</li>
<li><p>Binging<br>绑定，用于保存消息队列和交换器之间的关联。一个绑定就是基于路由键将路由器和消息队列，连接起来的路由规则 ，所以可以将路由器理解成一个由绑定构成的路由表。</p>
<p>Exchange和Queue的绑定可以是多对多的关系。</p>
</li>
<li><p>Connection<br>网络连接，比如一个TCP连接</p>
</li>
<li><p>Channel<br>信道，多路复用链接中的一条独立的双向数据流通道。信通是建立在真实的TCP连接内的虚拟连接，AMQP命令都是通过信通发出去的，不管是发布消息，订阅队列还是接受消息，这些动作都是通过信道完成。因此对于操作系统来说建立和销毁TCP都是非常昂贵的开销，所以引入了信通的概念，以复用一条TCP连接。</p>
</li>
<li><p>Consumer<br>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</p>
</li>
<li><p>Virtual Host<br>虚拟主机，表示一批交换器，消息队列和相关对象。虚拟主机是共享相同身份认证和加密环境的独立服务器域，每个vhost本质就是一个迷你版的RabbbitMQ服务器，拥有自己的队列，交换器，绑定和权限机制。vhost是AMQP概念的基础，必须在连接是指定，RebbitMQ默认的vhost是/。</p>
</li>
<li><p>Broker<br>表示消息队列服务实体</p>
</li>
<li><p>图解<br><img src="images%5CRebbitMQ.png" alt="" title="关系图"></p>
<h3 id="RabbitMQ-运行机制"><a href="#RabbitMQ-运行机制" class="headerlink" title="RabbitMQ 运行机制"></a>RabbitMQ 运行机制</h3></li>
</ul>
</li>
</ul>
</li>
<li><p>AMQP中的消息路由</p>
<ul>
<li>AMQP中消息的路由过程和Java开发者熟悉的JMS存在一些偏差，AMQP中增加了Exchange和Binding角色。生产者把消息发布到Exchange上，消息最终到达队列并被消费者接受，而Binging决定交换器的消息应该发送到那个队列。</li>
<li>Eachange分发消息的时根据不同分发策略有区别：目前有四种类型：direct，fanout，topic，headers。headers匹配AMQP消息的header而不是路由键，headers交换器和direct交换器完全一致，但性能差不多，目前几乎用不到，所以直接看另为三种类型：<h3 id="交换器类型Eachange"><a href="#交换器类型Eachange" class="headerlink" title="交换器类型Eachange"></a>交换器类型Eachange</h3></li>
<li>Direct Exchange(JMS点对点通信模型的实现)</li>
<li>消息中的路由键(routing key)如果和Binding中的binging key 一致。交换器就将消息发到对应的队列中。路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为“dog”，则只转发routing key标记为”dog”的消息，不会转发”dog.puppy”,也不会转发”dog.guard”等等，它是完全匹配，单播的模式 </li>
<li>Fanout Excange(JMS中发布订阅模型的实现)</li>
<li>每个发到Fanout类型交换器的消息都会分到所有绑定的队列上去。fanout交换器不处理交换路由键，只是简单的地将队列绑定到交换器上，每个发送到交换器上的消息都会被转发到与该交互器绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。fanout类型转换发消息是最快的。</li>
<li>Topic Exchange(允许对路由键进行模糊匹配)</li>
<li>topic交换器通过模型匹配分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。他将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开，它同样也会识别两个通配符：符号”#”和符号”*”。#匹配0个或多个单词，*匹配一个单词。 </li>
</ul>
<h3 id="利用docker容器技术安装RabbitMQ容器"><a href="#利用docker容器技术安装RabbitMQ容器" class="headerlink" title="利用docker容器技术安装RabbitMQ容器"></a>利用docker容器技术安装RabbitMQ容器</h3><ul>
<li>安装命令：docker run -d –name my-rabbit -p 5672:5672 -p 15672:15672 rabbitmq:3.7.3-management</li>
<li>注意关闭：Linux服务器的防火墙(否则访问不到)命令: systemctl stop firewalld</li>
<li>15672：控制台端口号—–5672：应用访问端口号</li>
<li>默认登陆账号密码：guest   <h4 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h4></li>
</ul>
</li>
<li><p>消息执行<br><img src="images%5Crabbitmq%E6%B6%88%E6%81%AF%E6%89%A7%E8%A1%8C.jpg" alt=""></p>
</li>
<li><p>fanout类型的交换器发出的消息，所有队列全部接收</p>
</li>
<li><p>direct类型的交换器发出的消息，只有绑定的队列接收 点对点方式</p>
</li>
<li><p>topic类型的交换器根据路由键的绑定规则匹配(*号匹配一个，#匹配一个或多个 zhao.#   *.news)</p>
<h5 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h5></li>
<li><p>添加rebbitMQ模块</p>
</li>
<li><p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>domo_message_rabbitmq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>domo_message_rabbitmq<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   //amqp协议的启动器</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    //springboot整合rabbitmq</span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>SpringBoot项目中RabbitMQ自动配置</p>
<ul>
<li>自动化配置类 RabbitMQAutoConfig</li>
<li>有自动配置了连接工厂 ConnectionFactory<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">@Configuration(</span><br><span class="line">  proxyBeanMethods = <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line">@ConditionalOnClass(&#123;RabbitTemplate.class, Channel.class&#125;)</span><br><span class="line">@EnableConfigurationProperties(&#123;RabbitProperties.class&#125;)</span><br><span class="line">@<span class="keyword">Import</span>(&#123;RabbitAnnotationDrivenConfiguration.class&#125;)</span><br><span class="line"><span class="keyword">public</span> class RabbitAutoConfiguration &#123;</span><br><span class="line">    <span class="keyword">public</span> RabbitAutoConfiguration() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Configuration(</span><br><span class="line">        proxyBeanMethods = <span class="literal">false</span></span><br><span class="line">    )</span><br><span class="line">    @ConditionalOnClass(&#123;RabbitMessagingTemplate.class&#125;)</span><br><span class="line">    @ConditionalOnMissingBean(&#123;RabbitMessagingTemplate.class&#125;)</span><br><span class="line">    @<span class="keyword">Import</span>(&#123;RabbitAutoConfiguration.RabbitTemplateConfiguration.class&#125;)</span><br><span class="line">    <span class="keyword">protected</span> static class MessagingTemplateConfiguration &#123;</span><br><span class="line">        <span class="keyword">protected</span> MessagingTemplateConfiguration() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Bean</span><br><span class="line">        @ConditionalOnSingleCandidate(RabbitTemplate.class)</span><br><span class="line">        <span class="keyword">public</span> RabbitMessagingTemplate rabbitMessagingTemplate(RabbitTemplate rabbitTemplate) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">new</span> RabbitMessagingTemplate(rabbitTemplate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Configuration(</span><br><span class="line">        proxyBeanMethods = <span class="literal">false</span></span><br><span class="line">    )</span><br><span class="line">    @<span class="keyword">Import</span>(&#123;RabbitAutoConfiguration.RabbitConnectionFactoryCreator.class&#125;)</span><br><span class="line">    <span class="keyword">protected</span> static class RabbitTemplateConfiguration &#123;</span><br><span class="line">        <span class="keyword">protected</span> RabbitTemplateConfiguration() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Bean</span><br><span class="line">        @ConditionalOnSingleCandidate(ConnectionFactory.class)</span><br><span class="line">        @ConditionalOnMissingBean(&#123;RabbitOperations.class&#125;)</span><br><span class="line">        <span class="comment">//RabbitMQ模板  给RabbitMQ发送和接收消息</span></span><br><span class="line">        <span class="keyword">public</span> RabbitTemplate rabbitTemplate(RabbitProperties properties, ObjectProvider&lt;MessageConverter&gt; messageConverter, ObjectProvider&lt;RabbitRetryTemplateCustomizer&gt; retryTemplateCustomizers, ConnectionFactory connectionFactory) &#123;</span><br><span class="line">            PropertyMapper <span class="built_in">map</span> = PropertyMapper.get();</span><br><span class="line">            RabbitTemplate template = <span class="literal">new</span> RabbitTemplate(connectionFactory);</span><br><span class="line">            messageConverter.ifUnique(template<span class="type">::setMessageConverter</span>);</span><br><span class="line">            template.setMandatory(this.determineMandatoryFlag(properties));</span><br><span class="line">            Template templateProperties = properties.getTemplate();</span><br><span class="line">            <span class="keyword">if</span> (templateProperties.getRetry().isEnabled()) &#123;</span><br><span class="line">                template.setRetryTemplate((<span class="literal">new</span> RetryTemplateFactory((<span class="built_in">List</span>)retryTemplateCustomizers.orderedStream().collect(Collectors.toList()))).createRetryTemplate(templateProperties.getRetry(), Target.SENDER));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            templateProperties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(templateProperties<span class="type">::getReceiveTimeout</span>).whenNonNull().as(<span class="built_in">Duration</span><span class="type">::toMillis</span>).<span class="keyword">to</span>(template<span class="type">::setReceiveTimeout</span>);</span><br><span class="line">            templateProperties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(templateProperties<span class="type">::getReplyTimeout</span>).whenNonNull().as(<span class="built_in">Duration</span><span class="type">::toMillis</span>).<span class="keyword">to</span>(template<span class="type">::setReplyTimeout</span>);</span><br><span class="line">            templateProperties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(templateProperties<span class="type">::getExchange</span>).<span class="keyword">to</span>(template<span class="type">::setExchange</span>);</span><br><span class="line">            templateProperties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(templateProperties<span class="type">::getRoutingKey</span>).<span class="keyword">to</span>(template<span class="type">::setRoutingKey</span>);</span><br><span class="line">            templateProperties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(templateProperties<span class="type">::getDefaultReceiveQueue</span>).whenNonNull().<span class="keyword">to</span>(template<span class="type">::setDefaultReceiveQueue</span>);</span><br><span class="line">            <span class="keyword">return</span> template;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">boolean</span> determineMandatoryFlag(RabbitProperties properties) &#123;</span><br><span class="line">            <span class="built_in">Boolean</span> mandatory = properties.getTemplate().getMandatory();</span><br><span class="line">            <span class="keyword">return</span> mandatory != <span class="built_in">null</span> ? mandatory : properties.isPublisherReturns();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Bean</span><br><span class="line">        @ConditionalOnSingleCandidate(ConnectionFactory.class)</span><br><span class="line">        @ConditionalOnProperty(</span><br><span class="line">            prefix = <span class="string">"spring.rabbitmq"</span>,</span><br><span class="line">            name = &#123;<span class="string">"dynamic"</span>&#125;,</span><br><span class="line">            matchIfMissing = <span class="literal">true</span></span><br><span class="line">        )</span><br><span class="line">        @ConditionalOnMissingBean</span><br><span class="line">        <span class="comment">//RabbitMQ系统管理功能组件</span></span><br><span class="line">        <span class="keyword">public</span> AmqpAdmin amqpAdmin(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">new</span> RabbitAdmin(connectionFactory);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Configuration(</span><br><span class="line">        proxyBeanMethods = <span class="literal">false</span></span><br><span class="line">    )</span><br><span class="line">    @ConditionalOnMissingBean(&#123;ConnectionFactory.class&#125;)</span><br><span class="line">    <span class="comment">//自动配置连接工厂</span></span><br><span class="line">    <span class="keyword">protected</span> static class RabbitConnectionFactoryCreator &#123;</span><br><span class="line">        <span class="keyword">protected</span> RabbitConnectionFactoryCreator() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Bean</span><br><span class="line">        <span class="keyword">public</span> CachingConnectionFactory rabbitConnectionFactory(RabbitProperties properties, ObjectProvider&lt;ConnectionNameStrategy&gt; connectionNameStrategy) throws Exception &#123;</span><br><span class="line">            PropertyMapper <span class="built_in">map</span> = PropertyMapper.get();</span><br><span class="line">            CachingConnectionFactory factory = <span class="literal">new</span> CachingConnectionFactory((com.rabbitmq.client.ConnectionFactory)this.getRabbitConnectionFactoryBean(properties).getObject());</span><br><span class="line">            properties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(properties<span class="type">::determineAddresses</span>).<span class="keyword">to</span>(factory<span class="type">::setAddresses</span>);</span><br><span class="line">            properties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(properties<span class="type">::isPublisherReturns</span>).<span class="keyword">to</span>(factory<span class="type">::setPublisherReturns</span>);</span><br><span class="line">            properties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(properties<span class="type">::getPublisherConfirmType</span>).whenNonNull().<span class="keyword">to</span>(factory<span class="type">::setPublisherConfirmType</span>);</span><br><span class="line">            org.springframework.boot.autoconfigure.amqp.RabbitProperties.<span class="keyword">Cache</span>.Channel channel = properties.getCache().getChannel();</span><br><span class="line">            channel.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(channel<span class="type">::getSize</span>).whenNonNull().<span class="keyword">to</span>(factory<span class="type">::setChannelCacheSize</span>);</span><br><span class="line">            channel.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(channel<span class="type">::getCheckoutTimeout</span>).whenNonNull().as(<span class="built_in">Duration</span><span class="type">::toMillis</span>).<span class="keyword">to</span>(factory<span class="type">::setChannelCheckoutTimeout</span>);</span><br><span class="line">            Connection connection = properties.getCache().getConnection();</span><br><span class="line">            connection.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(connection<span class="type">::getMode</span>).whenNonNull().<span class="keyword">to</span>(factory<span class="type">::setCacheMode</span>);</span><br><span class="line">            connection.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(connection<span class="type">::getSize</span>).whenNonNull().<span class="keyword">to</span>(factory<span class="type">::setConnectionCacheSize</span>);</span><br><span class="line">            connectionNameStrategy.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(connectionNameStrategy<span class="type">::getIfUnique</span>).whenNonNull().<span class="keyword">to</span>(factory<span class="type">::setConnectionNameStrategy</span>);</span><br><span class="line">            <span class="keyword">return</span> factory;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> RabbitConnectionFactoryBean getRabbitConnectionFactoryBean(RabbitProperties properties) throws Exception &#123;</span><br><span class="line">            PropertyMapper <span class="built_in">map</span> = PropertyMapper.get();</span><br><span class="line">            RabbitConnectionFactoryBean factory = <span class="literal">new</span> RabbitConnectionFactoryBean();</span><br><span class="line">            properties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(properties<span class="type">::determineHost</span>).whenNonNull().<span class="keyword">to</span>(factory<span class="type">::setHost</span>);</span><br><span class="line">            properties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(properties<span class="type">::determinePort</span>).<span class="keyword">to</span>(factory<span class="type">::setPort</span>);</span><br><span class="line">            properties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(properties<span class="type">::determineUsername</span>).whenNonNull().<span class="keyword">to</span>(factory<span class="type">::setUsername</span>);</span><br><span class="line">            properties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(properties<span class="type">::determinePassword</span>).whenNonNull().<span class="keyword">to</span>(factory<span class="type">::setPassword</span>);</span><br><span class="line">            properties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(properties<span class="type">::determineVirtualHost</span>).whenNonNull().<span class="keyword">to</span>(factory<span class="type">::setVirtualHost</span>);</span><br><span class="line">            properties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(properties<span class="type">::getRequestedHeartbeat</span>).whenNonNull().asInt(<span class="built_in">Duration</span><span class="type">::getSeconds</span>).<span class="keyword">to</span>(factory<span class="type">::setRequestedHeartbeat</span>);</span><br><span class="line">            Ssl ssl = properties.getSsl();</span><br><span class="line">            <span class="keyword">if</span> (ssl.determineEnabled()) &#123;</span><br><span class="line">                factory.setUseSSL(<span class="literal">true</span>);</span><br><span class="line">                ssl.getClass();</span><br><span class="line">                <span class="built_in">map</span>.from(ssl<span class="type">::getAlgorithm</span>).whenNonNull().<span class="keyword">to</span>(factory<span class="type">::setSslAlgorithm</span>);</span><br><span class="line">                ssl.getClass();</span><br><span class="line">                <span class="built_in">map</span>.from(ssl<span class="type">::getKeyStoreType</span>).<span class="keyword">to</span>(factory<span class="type">::setKeyStoreType</span>);</span><br><span class="line">                ssl.getClass();</span><br><span class="line">                <span class="built_in">map</span>.from(ssl<span class="type">::getKeyStore</span>).<span class="keyword">to</span>(factory<span class="type">::setKeyStore</span>);</span><br><span class="line">                ssl.getClass();</span><br><span class="line">                <span class="built_in">map</span>.from(ssl<span class="type">::getKeyStorePassword</span>).<span class="keyword">to</span>(factory<span class="type">::setKeyStorePassphrase</span>);</span><br><span class="line">                ssl.getClass();</span><br><span class="line">                <span class="built_in">map</span>.from(ssl<span class="type">::getTrustStoreType</span>).<span class="keyword">to</span>(factory<span class="type">::setTrustStoreType</span>);</span><br><span class="line">                ssl.getClass();</span><br><span class="line">                <span class="built_in">map</span>.from(ssl<span class="type">::getTrustStore</span>).<span class="keyword">to</span>(factory<span class="type">::setTrustStore</span>);</span><br><span class="line">                ssl.getClass();</span><br><span class="line">                <span class="built_in">map</span>.from(ssl<span class="type">::getTrustStorePassword</span>).<span class="keyword">to</span>(factory<span class="type">::setTrustStorePassphrase</span>);</span><br><span class="line">                ssl.getClass();</span><br><span class="line">                <span class="built_in">map</span>.from(ssl<span class="type">::isValidateServerCertificate</span>).<span class="keyword">to</span>((validate) -&gt; &#123;</span><br><span class="line">                    factory.setSkipServerCertificateValidation(!validate);</span><br><span class="line">                &#125;);</span><br><span class="line">                ssl.getClass();</span><br><span class="line">                <span class="built_in">map</span>.from(ssl<span class="type">::getVerifyHostname</span>).<span class="keyword">to</span>(factory<span class="type">::setEnableHostnameVerification</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            properties.getClass();</span><br><span class="line">            <span class="built_in">map</span>.from(properties<span class="type">::getConnectionTimeout</span>).whenNonNull().asInt(<span class="built_in">Duration</span><span class="type">::toMillis</span>).<span class="keyword">to</span>(factory<span class="type">::setConnectionTimeout</span>);</span><br><span class="line">            factory.afterPropertiesSet();</span><br><span class="line">            <span class="keyword">return</span> factory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>RabbitProperties 封装了 RabbitMQ的配置<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">@ConfigurationProperties(</span><br><span class="line">  prefix = <span class="string">"spring.rabbitmq"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> class RabbitProperties &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> host = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="keyword">private</span> int port = <span class="number">5672</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> username = <span class="string">"guest"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> password = <span class="string">"guest"</span>;</span><br><span class="line">    <span class="keyword">private</span> final RabbitProperties.Ssl ssl = <span class="literal">new</span> RabbitProperties.Ssl();</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> virtualHost;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> addresses;</span><br><span class="line">    @DurationUnit(ChronoUnit.SECONDS)</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Duration</span> requestedHeartbeat;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">boolean</span> publisherReturns;</span><br><span class="line">    <span class="keyword">private</span> ConfirmType publisherConfirmType;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Duration</span> connectionTimeout;</span><br><span class="line">    <span class="keyword">private</span> final RabbitProperties.<span class="keyword">Cache</span> <span class="keyword">cache</span> = <span class="literal">new</span> RabbitProperties.<span class="keyword">Cache</span>();</span><br><span class="line">    <span class="keyword">private</span> final RabbitProperties.Listener listener = <span class="literal">new</span> RabbitProperties.Listener();</span><br><span class="line">    <span class="keyword">private</span> final RabbitProperties.Template template = <span class="literal">new</span> RabbitProperties.Template();</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">List</span>&lt;RabbitProperties.Address&gt; parsedAddresses;</span><br></pre></td></tr></table></figure>
<h5 id="RabbitMQ的相关配置-application-properties"><a href="#RabbitMQ的相关配置-application-properties" class="headerlink" title="RabbitMQ的相关配置 application.properties"></a>RabbitMQ的相关配置 application.properties</h5><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="number">8088</span></span><br><span class="line"><span class="attr">spring.rabbitmq.host</span>=<span class="number">192.168</span>.<span class="number">1.110</span></span><br><span class="line"><span class="attr">spring.rabbitmq.username</span>=guest</span><br><span class="line"><span class="attr">spring.rabbitmq.password</span>=guest</span><br><span class="line"><span class="comment"># 默认5672</span></span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="number">5672</span>  </span><br><span class="line"><span class="comment">#spring.rabbitmq.virtual-host=  默认/</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>测试</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@SpringBootText</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DomoMessageRabbitmqApplicationTests</span> &#123;</span></span><br><span class="line"></span><br><span class="line">	@Autowired</span><br><span class="line">	RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	* 1.单播(点对点)</span></span><br><span class="line"><span class="comment">	* */</span></span><br><span class="line"></span><br><span class="line">	@Test</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//Message需要自己构建一个；定义消息体内容和消息头</span></span><br><span class="line">		<span class="comment">//rabbitTemplate.send(exchage,routeKey,message);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">//object默认当成消息体，只需要传入要发送的对象，自动序列化发送给rabbitmq；</span></span><br><span class="line">		<span class="comment">//rabbitTemplate.convertAndSend(exchage,routeKey,object);</span></span><br><span class="line"></span><br><span class="line">		Map&lt;<span class="keyword">String</span>,Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"msg"</span>,<span class="string">"这是第一个消息"</span>);</span><br><span class="line">		<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"data"</span>, Arrays.asList(<span class="string">"helloworld"</span>,<span class="number">123</span>,<span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line">		<span class="comment">//对象被默认序列化</span></span><br><span class="line">		rabbitTemplate.convertAndSend(<span class="string">"exchange.direct"</span>,<span class="string">"zhao.news"</span>,<span class="built_in">map</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//消费者/接收数据，如何将数据自动的转化成JSON数据</span></span><br><span class="line">	@Test</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Object o = rabbitTemplate.receiveAndConvert(<span class="string">"zhao.news"</span>);</span><br><span class="line"></span><br><span class="line">		System.out.<span class="built_in">println</span>(o.getClass());</span><br><span class="line">		System.out.<span class="built_in">println</span>(o);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	* 广播</span></span><br><span class="line"><span class="comment">	* 注意广播不用路由键</span></span><br><span class="line"><span class="comment">	* */</span></span><br><span class="line">	@Test</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMag</span><span class="params">()</span></span>&#123;</span><br><span class="line">		rabbitTemplate.convertAndSend(<span class="string">"exchange.fanout"</span>,<span class="string">""</span>,<span class="string">"map"</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>SpringBoot 默认序列化SimpleMessageConverter</p>
</li>
<li><p>将数据自动的转化成JSON数据<br><img src="images%5Cconverter.png" alt=""></p>
</li>
<li><p>写个配置类</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAMQPConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MessageConverter messageContext()&#123;</span><br><span class="line">        <span class="keyword">return</span> new Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">#### 消息监听机制  注解<span class="meta">@RabbitListener</span>+<span class="meta">@EnableRabbit</span>监听消息队列的内容</span><br><span class="line">* 注意：要在启动类上开启基于注解的RabbitMQ ==》<span class="meta">@EnableRabbit</span></span><br></pre></td></tr></table></figure>
<p>public class BookService{</p>
<p>//queues是数组的方式 只要这个队列中有消息进来 就执行receive方法<br>@RabbitListener(queues = “zhao.news”)<br>public void receive(Book book){<br>  System.out.println(“收到消息：”+book);<br>}</p>
<p>//获取消息的头信息<br>@RabbitListener(queues = “zhao”)<br>public void receive02(Message message){<br>  System.out.println(“消息体：”+message.getBody());<br>  System.out.println(“消息头：”+message.getMessageProperties());<br>}<br>}</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### AmqpAdmin：RabbitMQ系统消息管理组建的使用</span><br><span class="line">* AmqpAdmin：创建和删除Queue，Exchange，Bingding</span><br></pre></td></tr></table></figure>
<p>@SpringBootText<br>class DomoMessageRabbitmqApplicationTests {</p>
<p>  @Autowired<br>  RabbitTemplate rabbitTemplate;</p>
<p>@Autowired<br>AmqpAdmin amqpAdmin；</p>
<p>@Test<br>public void createExchange(){<br>  //注意凡是以declare开头的都是创建组件。。。<br>  //创建交换器<br>  amqpAdmin.declareExchange(new DirectExchange(“amqpadmin.exchange”));<br>  Sytem.out.println(“创建完成”);</p>
<p>  //创建队列<br>  amqpAdmin.declareQueue(new Queue(“amqpadmin.queue”,true));</p>
<p>  //创建绑定规则  “amqp.haha”指的是路由键  null 表示参数为空<br>  amqpAdmin.declareBinding(new Binging(“amqpadmin.queue”,Binding.DestinationType.QUEUE,”amqpadmin.exchange”,”amqp.haha”,null));<br>}</p>
<pre><code>
</code></pre></li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java消息中间件+ActiveMQ(八)高级特性</title>
    <url>/2020/02/29/Java%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-ActiveMQ-%E5%85%AB-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ul>
<li><p>1.引入消息队列之后该如何保证其高可用性.<br>答：Zookeeper+replicated-levelDB-store(带复制功能的levelDB)集群</p>
<h3 id="异步投递Async-Sends"><a href="#异步投递Async-Sends" class="headerlink" title="异步投递Async-Sends"></a>异步投递Async-Sends</h3></li>
<li><p>ActiveMQ支持以同步或异步模式将消息发送到代理。使用的模式对发送呼叫的延迟有很大的影响。由于延迟通常是生产者可以实现的吞吐量的重要因素，因此使用异步发送可以显着提高系统的性能。</p>
</li>
<li><p>好消息是，在某些情况下，ActiveMQ默认情况下以异步模式发送消息。只有在JMS规范要求使用同步发送的情况下，我们才默认使用同步发送。我们被迫以同步模式发送的情况是在事务外部发送持久性消息时。</p>
</li>
<li><p>如果您不使用事务并且正在发送持久消息，则每次发送都将同步并阻塞，直到代理已向生产者发送回确认消息已将消息安全保存到磁盘为止。该ack保证了消息不会丢失，但是由于客户端被阻止，因此还付出了巨大的等待时间。</p>
</li>
<li><p>许多高性能应用程序旨在承受故障情况下的少量消息丢失。如果您的应用程序是按照这种方式设计的，则即使使用持久性消息，也可以启用异步发送来提高吞吐量。</p>
</li>
<li><p>对于一个慢的消费者(Slow Consumer),使用同步发送消息可能出现producer(生产)堵塞等情况，慢消费着适合使用异步发送。</p>
</li>
<li><p>ActiveMQ支持同步，异步两种发送的模式将消息发送到broker，模式的选择对发送延时有巨大的影响。producer能达到则样的产出率(产出率=发送数据总量/时间)主要受发送延时有巨大的影响。使用异步发送可以显著的提高发送的性能。</p>
</li>
<li><p>ActiveMQ默认使用异步发送的模式：除非明确指定使用同步发送的方式或者未使用事务的前提下发送持久化消息，这两种情况都是同步发送的。</p>
</li>
<li><p>如果没有使用事务且发送的持久化的消息，每一次发送都是同步发送且会阻塞producer直到broker返回一个确定，表示消息已经被安全的持久化到磁盘，确认机制提供了消息安全的保障，但是同时会阻塞客户端带来了很大的延时。</p>
</li>
<li><p>很多高性能的应用，允许再失败的情况下有少量的数据丢失，如果你的应用满足这个特点，你可以使用异步发送来提高生产率，即使发送的持久化消息。</p>
<h5 id="异步发送"><a href="#异步发送" class="headerlink" title="异步发送"></a>异步发送</h5></li>
<li><p>它可以最大化producer端的发送效率，我们通常在发送消息量比较密集的情况下使用异步发送，他可以很大的提高Producer性能；不过这也带来了额外的问题，就是需要消耗较多的Client端内存同时也会导致broker端性能消耗增加；此外它不能有效的确保消息的发送成功。在useAsyncSend=true的情况下客户端需要容忍消息丢失的可能。<br>即添加以下代码</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">第一种方式：携带参数</span><br><span class="line">cf = <span class="keyword">new</span> <span class="constructor">ActiveMQConnectionFactory(<span class="string">"tcp://ip:61616?jms.useAsyncSend=true"</span>)</span>;</span><br><span class="line"></span><br><span class="line">第二种方式：连接工厂</span><br><span class="line">((ActiveMQConnectionFactory)conectionFactory).set<span class="constructor">UseAsyncSend(<span class="params">true</span>)</span>;</span><br><span class="line"></span><br><span class="line">第三种方式：连接</span><br><span class="line">((ActiveMQConnection).connection).set<span class="constructor">UseAsyncSend(<span class="params">true</span>)</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>异步消息如何确定发送成功？？？</p>
<ul>
<li><p>1.异步发送丢失消息的场景是：生产者默认UseAsyncSend=true，使用producer.send(msg)持续发送消息。</p>
</li>
<li><p>2.由于消息不阻塞，生产者会认为所有send的消息均被成功发送至MQ。</p>
</li>
<li><p>3.如果MQ突然死机，此时生产者端内存中尚未被发送至MQ的消息都会丢失。<br>所以，正确的异步发送方法是需要接受回调的。</p>
</li>
<li><p>4.同步发送和异步发送的区别再此：<br>同步发送等send不阻塞了就表示一定发送成功，<br>异步发送需要接收回执并由客户端在判断一次是否发送成功 </p>
<h5 id="正确的异步发送方法是需要接受回调的"><a href="#正确的异步发送方法是需要接受回调的" class="headerlink" title="正确的异步发送方法是需要接受回调的"></a>正确的异步发送方法是需要接受回调的</h5></li>
</ul>
</li>
<li><p>1.添加消息头：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">message.set<span class="constructor">JMSMessageID(UUID.<span class="params">randomUUID</span>()</span>.<span class="keyword">to</span><span class="constructor">String()</span>+<span class="string">"--orderMsg--"</span>);</span><br><span class="line"></span><br><span class="line">String msgID = message.get<span class="constructor">JMSMessageID()</span>;</span><br><span class="line"></span><br><span class="line">activeMQMessageProducer.send(message ,</span><br><span class="line"><span class="comment">//异步匿名回调方法</span></span><br><span class="line"><span class="keyword">new</span> <span class="constructor">AsayncCallback()</span>&#123;</span><br><span class="line">    @Overide <span class="comment">//成功</span></span><br><span class="line">    public void on<span class="constructor">Success()</span>&#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(msgID+<span class="string">""</span>has been ok send);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override <span class="comment">//失败</span></span><br><span class="line">    public void on<span class="constructor">Exception(JMSException <span class="params">exception</span>)</span>&#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(msgID+<span class="string">""</span>fail <span class="keyword">to</span> send mq);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="延时投递和定时投递"><a href="#延时投递和定时投递" class="headerlink" title="延时投递和定时投递"></a>延时投递和定时投递</h3></li>
<li><p>四大属性</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>Property</th>
<th align="center">type</th>
<th align="right">description</th>
</tr>
</thead>
<tbody><tr>
<td>AMQ_SCHEDULED_DELAY</td>
<td align="center">long</td>
<td align="right">延时投递的时间</td>
</tr>
<tr>
<td>AMQ_SCHEDULED_PEDIOD</td>
<td align="center">long</td>
<td align="right">重复投递时间间隔</td>
</tr>
<tr>
<td>AMQ_SCHEDULED</td>
<td align="center">int</td>
<td align="right">重复投递次数</td>
</tr>
<tr>
<td>AMQ_SCHEDULED</td>
<td align="center">String</td>
<td align="right">Cron表达式(Linux)</td>
</tr>
<tr>
<td>* 操作步骤</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>1. 要在activemq.xml中配置schedulerSupport属性为true</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;broker <span class="attribute">xmlns</span>=<span class="string">"http://activemq.apache.org/schema/core"</span> <span class="attribute">brokerName</span>=<span class="string">"localhosst"</span> <span class="attribute">dataDirectory</span>=<span class="string">"<span class="variable">$&#123;activemq.data&#125;</span>"</span> <span class="attribute">schedulerSupport</span>=<span class="string">"true"</span>&gt;</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>2. java代码里面封装的辅助消息类型:ScheduledMessage</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//主题生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsProduce</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> ACTIVEMQ_URL = <span class="string">"tcp://localhost:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> TOPIC_NAME = <span class="string">"topic-zhao"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws JMSException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建连接工厂,按照给定的URL地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过连接工厂，获取连接connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//connection.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话</span></span><br><span class="line">        <span class="comment">//有两个参数，第一个叫事务/第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建目的地(具体是队列还是主题) 接口</span></span><br><span class="line">        Topic topic = session.createTopic(TOPIC_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建消息生产者</span></span><br><span class="line">        MessageProducer messageProducer = session.createProducer(topic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面就是延时3秒，每4秒投递一次，总投递5次</span></span><br><span class="line">         <span class="comment">//延时投递的时间</span></span><br><span class="line">         <span class="keyword">long</span> <span class="built_in">delay</span> = <span class="number">3</span> * <span class="number">1000</span>;</span><br><span class="line">         <span class="comment">//重复投递时间间隔</span></span><br><span class="line">         <span class="keyword">long</span> period = <span class="number">4</span> * <span class="number">1000</span>;</span><br><span class="line">         <span class="comment">//重复投递次数</span></span><br><span class="line">         <span class="keyword">int</span> repeat = <span class="number">5</span>;</span><br><span class="line">        <span class="comment">//主题持久化</span></span><br><span class="line">        messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);</span><br><span class="line">        connection.start();<span class="comment">//主题持久化启动位置</span></span><br><span class="line">        <span class="comment">//6.通过消息的生产者messageProdecer生产3条消息发送到MQ的队列里面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">3</span> ; i++) &#123;</span><br><span class="line">            <span class="comment">//7.创建消息 ， 一定格式的消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"topic---msg------"</span> + i);<span class="comment">//理解为一个字符串</span></span><br><span class="line">            <span class="comment">//延时投递和定时投递</span></span><br><span class="line">            textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_DELAY,<span class="built_in">delay</span>);</span><br><span class="line">            textMessage.setLongProperty(ScheduledMessage.AMQ_SCHEDULED_PERIOD,period);</span><br><span class="line">            textMessage.setIntProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT,repeat);</span><br><span class="line">            <span class="comment">//8.通过messagerProducer发送给MQ</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//9.关闭资源</span></span><br><span class="line">        messageProducer.<span class="built_in">close</span>();</span><br><span class="line">        session.<span class="built_in">close</span>();</span><br><span class="line">        connection.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"*****主题消息发送到MQ完成******"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>### 分发策略</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>### ActiveMQ的消息重试机制</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>* 面试题</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>1. 具体哪些情况会引起消息的重发</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>* 答：</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>1. Client用了transactions且在session中调用了rollback(),即回滚</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>2. Client用了transactions且在调用commit()之前关闭或者没有commit</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td>3. Client在CLIENT_ACKNOWLEDGE的传递模式下，在session中调用了recover();</td>
<td align="center"></td>
<td align="right"></td>
</tr>
</tbody></table>
<pre><code>* 回滚的过程是消息先出列，然后重发，默认6次，超过次数后进入到死亡队列，（配置持久化数据库的时候，并持久化到数据库一条数据)；
* 回滚肯定是开启了事务的情况下，那么没有开启事务的情况呢？消息没有确认的情况，消息会停在消息队列中，等待着再次被监听，除非调用session.recover()方法，效果和开启事务并回滚一样会进入死亡队列。</code></pre><ol start="2">
<li>请说说消息重发时间间隔和重发次数<br>间隔：1<br>次数：6</li>
<li>有毒消息Poison ACK谈谈理解<br> 一个消息被redelivedred(重发)超过默认最大重发次数(默认6次)时，消费端会给MQ发送一个”poison ack”表示这个消息有毒，告诉broker不要再发了。这个时候broker会把这个消息放到DLQ(死信队列)。<ul>
<li>Available Properties(可用属性)<br><img src="images%5C%E9%87%8D%E5%8F%91%E5%B1%9E%E6%80%A7.png" alt="" title="重试机制属性"></li>
</ul>
</li>
</ol>
<ul>
<li><p>collisionAvoidanceFactor:设置防止冲突范围的正负百分比，只有useCollisionAvoidance参数时才生效。也就是在延迟时间上再加一个时间波动范围。默认为0.15</p>
</li>
<li><p>maximumRadeliveries：最大重传次数，达到最大重连次数后抛出异常。为-1时不限制次数，为0时表示不进行重传。默认为6.</p>
</li>
<li><p>maximumRedeliveryDelay:最大传送延时，只在useExponentialBackOff为true时有效(v5.5),假设首次重连间隔为10ms，倍数为2，那么第二次重连间隔为20ms，第三次为重连时间间隔为40ms，当重连时间间隔达到最大重连时间间隔时，以后每次重连时间间隔都会为最大重连时间间隔。默认为-1.</p>
</li>
<li><p>initialRedeliveryDelay:初始重发延迟时间，默认1000L</p>
</li>
<li><p>redeliveryDelary：重发延迟时间，当initialRedeliveryDelay=0时，默认1000L</p>
</li>
<li><p>useCollisionAvoidance：启用防止冲突功能，默认false</p>
</li>
<li><p>useExponentialBackOff：启用指数倍数递增的方式增加延迟时间，默认false</p>
</li>
<li><p>backOffMultiplier：重连时间间隔递增倍数，只有值大于1和启用useExponentialBackOff参数时才生效。默认是5。 </p>
</li>
<li><p>每个目的地的RedeliveryPolicy</p>
</li>
<li><p>从ActiveMQ v5.7.0开始，您现在可以基于每个目标配置RedeliveryPolicy。ActiveMQConnection现在，  工厂类公开了RedeliveryPolicyMap属性，该属性允许使用命名目标或目标通配符来分配RedeliveryPolicy。下面的代码片段显示了如何为主题和队列配置不同的RedeliveryPolicy</p>
</li>
<li><p>找到消费者重新设置发送策略</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">ActiveMQConnection connection<span class="operator"> ...  </span><span class="comment">// Create a connection</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建连接工厂之后</span></span><br><span class="line"><span class="comment">//创建重发对象</span></span><br><span class="line">RedeliveryPolicy queuePolicy = <span class="keyword">new</span> <span class="constructor">RedeliveryPolicy()</span>;</span><br><span class="line">queuePolicy.set<span class="constructor">InitialRedeliveryDelay(0)</span>;</span><br><span class="line">queuePolicy.set<span class="constructor">RedeliveryDelay(1000)</span>;</span><br><span class="line">queuePolicy.set<span class="constructor">UseExponentialBackOff(<span class="params">false</span>)</span>;</span><br><span class="line">queuePolicy.set<span class="constructor">MaximumRedeliveries(2)</span>;</span><br><span class="line"></span><br><span class="line">RedeliveryPolicy topicPolicy = <span class="keyword">new</span> <span class="constructor">RedeliveryPolicy()</span>;</span><br><span class="line">topicPolicy.set<span class="constructor">InitialRedeliveryDelay(0)</span>;</span><br><span class="line">topicPolicy.set<span class="constructor">RedeliveryDelay(1000)</span>;</span><br><span class="line">topicPolicy.set<span class="constructor">UseExponentialBackOff(<span class="params">false</span>)</span>;</span><br><span class="line">topicPolicy.set<span class="constructor">MaximumRedeliveries(3)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Receive a message with the JMS API</span></span><br><span class="line">RedeliveryPolicyMap map = connection.get<span class="constructor">RedeliveryPolicyMap()</span>;</span><br><span class="line">map.put(<span class="keyword">new</span> <span class="constructor">ActiveMQTopic(<span class="string">"&gt;"</span>)</span>, topicPolicy);</span><br><span class="line">map.put(<span class="keyword">new</span> <span class="constructor">ActiveMQQueue(<span class="string">"&gt;"</span>)</span>, queuePolicy);</span><br></pre></td></tr></table></figure></li>
<li><p>重发机制整合spring之后，使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义ReDelivery重发机制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"activeMQReadliverpolicy"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.RedliveryPolicy"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 是否在每次尝试重新发送失败之后，增长这个等待时间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proprty</span> <span class="attr">name</span>=<span class="string">"useExponentialBackOff"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 重发次数默认6次，这里为3次 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maximumReadliveries"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 重发时间间隔，默认为1秒 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialRedeliveryDelay"</span> <span class="attr">value</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一次失败之后重新发送之前等待500毫秒，第二次发送等待500*2毫秒，这里的2表示value的值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"backOffMultiplier"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最大传递延迟，只在useExponentialBackOff为true时有效(v5.5),</span></span><br><span class="line"><span class="comment">    假设首次发送为10毫秒倍数为2，那么第二次重新连接时间间隔为20ms，第三次重新连接时间间隔为40ms，</span></span><br><span class="line"><span class="comment">    当重新连接时间间隔大的最大时间间隔时，以后每次重新连接的时间间隔都为最大重连时间间隔 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxmumReadliveryDela"</span> <span class="attr">value</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 创建连接工厂 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://localhost:61616"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用重发机制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">propert</span> <span class="attr">name</span>=<span class="string">"redeliveryPolicy"</span> <span class="attr">ref</span>=<span class="string">"activeMQReadliverpolicy"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="死信队列-了解"><a href="#死信队列-了解" class="headerlink" title="死信队列(了解)"></a>死信队列(了解)</h3><ul>
<li>ActiveMQ中引入了”死信队列”(Dead Letter Queue)DLQ的概念，即一条消息在被重发了多次后(默认为重发6次redeliveryCounter == 6)，将会被ActiveMQ移入”死信队列”。</li>
<li>开发人员可以在这个队列Queue中查看处理出错的消息，进行人工干预。</li>
<li>死信队列的使用：处理失败的消息</li>
<li>一般生产环境中在使用MQ的时候会设计两个队列：一个是核心业务队列，一个是死信队列。</li>
<li>核心业务队列，就是比如订单系统发送订单消息的，然后另一个死信队列就是用来处理异常情况的，<h4 id="将所有的DeadLetter保存在一个共享的队列中，这是ActiveMQ-broker端默认的策略。"><a href="#将所有的DeadLetter保存在一个共享的队列中，这是ActiveMQ-broker端默认的策略。" class="headerlink" title="将所有的DeadLetter保存在一个共享的队列中，这是ActiveMQ broker端默认的策略。"></a>将所有的DeadLetter保存在一个共享的队列中，这是ActiveMQ broker端默认的策略。</h4></li>
<li>共享死信队列默认为”ActiveMQ.DLQ”,可以通过”deadLetterQueue”属性设定。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">deadLetterStrategy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sharedDeadLetterStrategy</span> <span class="attr">deadLetterQueue</span>=<span class="string">"DLQ-QUEUE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">deadLetterStrategy</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="独立的死信队列处理方式individualDeadLetterStrategy"><a href="#独立的死信队列处理方式individualDeadLetterStrategy" class="headerlink" title="独立的死信队列处理方式individualDeadLetterStrategy"></a>独立的死信队列处理方式individualDeadLetterStrategy</h4></li>
</ul>
</li>
<li><p>把DeadLetter放入各自的死信通道中，<br>对于QUEUE而言，死信通道的前缀默认为”ActiveMQ.ELQ.QUEUE.”;<br>对于Topic而言，死信通道的前缀默认为”ActiveMQ.DLQ.Topic.”;<br>比如队列Order，那么它对应的死信通道为”ActiveMQ.DLQ.Queue.Order”。</p>
</li>
<li><p>我们们使用”queuePrefix”,”topicPrefix”来指定的上述前缀。<br>默认情况下，无论是Topic还是Queue，broker将使用Queue来保存DeadLeader，即死信队列通道通常为Queue；不过开发者也可以指定为Topic。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">policyEntry</span> <span class="attr">queue</span>=<span class="string">"order"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">deadLetterStrategy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">individualDeadLetterStrategy</span> <span class="attr">queuePrefix</span>=<span class="string">"DLQ."</span> <span class="attr">useQueueMessages</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">policEntry</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>将队列Order中出现的DeadLetter保存在DLQ.Order中，不过此时DLQ.Order为Topic。</p>
</li>
<li><p>属性”useQueueForTopicMessage”,此值表示是否将Topic的Dead Letter保存在Queue中，默认true。</p>
<h4 id="死信消息过多"><a href="#死信消息过多" class="headerlink" title="死信消息过多"></a>死信消息过多</h4><ul>
<li>自动删除过期消息</li>
</ul>
</li>
<li><p>有时需要直接删除过期的消息而不需要发送到死队列中，”processExpired”表示是否将过期消息放入死信队列，默认为true；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">policyEntry</span> <span class="attr">queue</span>=<span class="string">"&gt;"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">deadLetterStrategy</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">sharedDeadLetterStategy</span> <span class="attr">processExpired</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">deadLetterStratedy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">policyEntry</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>存放非持久消息到死信队列中</li>
</ul>
</li>
<li><p>默认情况下，ActiveMQ不会把非持久的死消息发送到死信队列中。</p>
</li>
<li><p>processNonPresisitent，表示是否将”非持久”消息放入死信队列中，默认为false。</p>
</li>
<li><p>非持久性如果你想把非持久消息发送到死信队列中,需要设置属性processNonPersistent=”true”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">policyEntry</span> <span class="attr">queue</span>=<span class="string">"&gt;"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">deadLetterStrategy</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">sharedDeadLetterStategy</span> <span class="attr">processNonPersistent</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">deadLetterStratedy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">policyEntry</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="防止重复调用-如同表单重复提交"><a href="#防止重复调用-如同表单重复提交" class="headerlink" title="防止重复调用(如同表单重复提交)"></a>防止重复调用(如同表单重复提交)</h3><ul>
<li>如何保证消息不被重复消费呢？幂等性问题你谈谈？？？？</li>
</ul>
</li>
<li><p>网络延时输出中，会造成进行MQ重试(重发)中，在重试过程中，可能会造成重复消费。</p>
</li>
<li><p>如果消息是做数据库的插入操作，给这个消息做一个唯一主键，那么就算出现重复消费的情况，就会导致主键冲突，避免数据库出现脏数据。</p>
</li>
<li><p>如果上面两种情况还不行，准备一个第三方服务方来做消息记录。以redis为例，给消息分配一个全局id，只要消费过该消息，将&lt;id,message&gt;以K-v形式写入redis。那消费者开始消费前，先去redis中查询有没消费记录即可。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java消息中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java消息中间件+ActiveMQ(七)消息存储和持久化</title>
    <url>/2020/02/29/Java%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-ActiveMQ-%E4%B8%83-%E6%B6%88%E6%81%AF%E5%AD%98%E5%82%A8%E5%92%8C%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<h3 id="消息存储"><a href="#消息存储" class="headerlink" title="消息存储"></a>消息存储</h3><ul>
<li>MQ的高可用：事务，持久，签收，可持久化</li>
<li>事务，持久，签收是MQ自带的，而可持久化是未界</li>
<li>可持久化：<ol>
<li>Replicated LevelDB Store (带复制功能的LevelDB)；</li>
<li>KahaDB (可汗DB)</li>
</ol>
<ul>
<li>说明：<ol>
<li>可持久化就是数据高可用的保障手段，若MQ服务器挂了，消息不会丢失的机制。</li>
<li>为了避免意外司机以后丢失信息，需要做到重启后可以恢复消息队列，消息系统一般都会采用持久化机制。</li>
<li>ActiveMQ的消息持久化机制有JDBC，AMO，KahaDB和LevelDB，无论使用哪种持久化方式，消息的存储逻辑都是保持一致的。</li>
<li>就是在发送者将消息发送出去后，消息中心首先将消息存储到本地数据文件，内存数据库或者远程数据库等在试图将消息发送给接收者，成功则将消息从存储中删除，失败则继续尝试发送。</li>
<li>消息中心启动以后首先要检查指定的存储位置，如果有未发送成功的消息，则需要把消息发送出去。<h4 id="KahaDB消息存储-默认-文件系统存储在本地硬盘"><a href="#KahaDB消息存储-默认-文件系统存储在本地硬盘" class="headerlink" title="KahaDB消息存储(默认 文件系统存储在本地硬盘)"></a>KahaDB消息存储(默认 文件系统存储在本地硬盘)</h4></li>
</ol>
</li>
</ul>
</li>
<li>基于日志，从ActiveMQ5.4开始默认使用的持久化插件    </li>
<li>说明：<ol>
<li>KahaDB是目前默认的存储方式，可用于任何场景，提高了性能和恢复能力</li>
<li>消息存储用一个事务日志和仅仅用一个索引文件来存储他所有的地址。(比如，字典 的目录就是索引文件 正文就是事务日志)</li>
<li>KahaDB是一个专门针对消息持久化的解决方案，它对典型的消息使用模式进行了优化。</li>
<li>数据被追加到data logs中。当不再需要log文件中的数据时，log文件会被丢弃(删除/归档)。<br><img src="images%5Clog.png" alt=""><br><img src="images%5CkahaDB.png" alt=""></li>
</ol>
</li>
<li>存储原理<ol>
<li>kahaDB在消息保存目录中只有4类文件和一个lock，跟ActiveMQ的其他几种文件存储引擎相比这就非常简介了。</li>
<li>db-<number>.log kahaDB存储消息到预定义大小(32兆)的数据记录文件中，文件命名为db-<number>.log。当数据已满是，一个新的文件随之创建，number数值也会随之递增，它随着消息数量的增多，如每32M一个文件，文件名按照数字进行编号，如db-1.log，db-2.log……。当不在有引用到数据文件中的任何消息时，文件被删除或归档。</li>
<li>db.data该文件包含了支持的BTree索引,索引了消息记录中的消息，它是消息的索引文件，本质是B-Tree(B树)，使用B-Tree作为索引指向db-<Number>.log里面存储的消息。</li>
<li>db.free 当前db.data文件里那个是空闲的，文件具体内容是所有空闲页的ID。</li>
<li>db.redo 用于进行消息恢复，如果KahaDB消息存储在强制退出后启动，用于回复BTree索引。(相当于备份2和3)</li>
<li>lock 文件锁，表示但前获取kahadb读取写权限的broker。<h4 id="LevelDB消息存储-了解"><a href="#LevelDB消息存储-了解" class="headerlink" title="LevelDB消息存储(了解)"></a>LevelDB消息存储(了解)</h4></li>
</ol>
</li>
<li>这种文件系统是从ActiveMQ5.8之后引进的，它和kahaDB非常相似，也是基于文件的本地数据库存储的形式，但是它提供比kahaDB更快的持久性。</li>
<li>但它不使用自定义BTree实现来索引预写日志，而是使用基于LevelDB的索引</li>
<li>默认配置如下：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">levelDBdirectory</span> = <span class="string">"activemq-data"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="JDBC消息存储-重点"><a href="#JDBC消息存储-重点" class="headerlink" title="JDBC消息存储(重点)"></a>JDBC消息存储(重点)</h4></li>
<li>1.将MySql的驱动jar包放到ActiveMQ的lib目录下</li>
<li>2.jdbcPersistenceAdapter配置(jdbc持久化配置)<br>  activemq.xml修改配置(默认kahaDB)  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcPersistenceAdapter</span> <span class="attr">dataSource</span> =<span class="string">"#mysql-ds"</span> <span class="attr">createTablesOnstartup</span> =<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>说明：<br>dataSource指定将要引用的持久化数据库的bean名称，createTablesOnstartup是否在启动的时候创建数据表，默认true这样每次都会去创建数据表(是一套表)了，一般是第一次启动的时候设置为true之后改成false。</li>
</ul>
</li>
<li>3.配置数据源(位置</brokers>之后<import>之前)<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">"mysql-ds"</span> <span class="built_in">class</span>=<span class="string">"org.apache.commons.dbcp2.BasicDataSource"</span> destory-method=<span class="string">"close"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"driverClassName"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://自己数据库的IP:3306/activemq?relaxAutoCommit=true"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"username"</span> value=<span class="string">"用户名"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"password"</span> value=<span class="string">"密码"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"maxTotal"</span> value=<span class="string">"200"</span>/&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"poolPreparedStatements"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li>
<li>4.建仓SQL和建表说明：<ul>
<li>建一个名为activemq的数据库 create database activemq</li>
<li>ActiveMQ重启会自动创建三张表<ul>
<li>ACTIVEMQ_MSGS(消息)<ul>
<li>表中的字段<br>ID：自增数据库主键<br>CONTAINER:消息的Destination(目的地即队列/主题)<br>MSGID_PROD:消息发送者的主键<br>MSG_SEQ:是发送消息的顺序，MSGID_PROD+MSG_SEQ可以组成JMS的MessageID<br>EXPIRATION:消息的过期时间，存储的是1970-01-01到现在的毫秒数<br>MSG:消息本体的Java序列化对象的二进制数据<br>PRIORITY:优先级，从0-9，数值越大优先级越高</li>
</ul>
</li>
<li>ACTIVEMQ_ACKS(签收)<ul>
<li>表中的字段<ul>
<li>activemq_acks:用于存储订阅关系。如果是持久化Topic，订阅者和服务器的订阅关系在这个表中保存。</li>
<li>数据库的字段如下：<br>CONTAINER:消息的Destination(目的地即队列/主题)<br>SUB_DEST:如果是使用Static集群，这个字段会有集群其他系统消息<br>CLIENT_ID:每个订阅者都必须有一个唯一的客户端ID用于区分<br>SUB_NAME:订阅者名称<br>SELECTOR:选择器，可以选择只消费满足条件的消息。条件可以用自定义属性实现，可支持多属性AND和OR操作<br>LAST_ACKED_ID：记录消费过的消息的ID</li>
</ul>
</li>
<li>表存储持久化订阅的信息和最后一个持久订阅接收消息ID</li>
</ul>
</li>
<li>ACTIVEMQ_LOCK(锁定)<ul>
<li>在集群环境中才能有用，只有一个Broker可以获得消息，称为Master Broker(主Broker)，其他的只能作为备份等待Master Broker不可用，才可能成为下一个Master Broker。这个表用于记录那个Broker是当前的MaSter Broker</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>activemq.xml文件<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">    Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="xml">    contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="xml">    this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="xml">    The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="xml">    (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="xml">    the License.  You may obtain a copy of the License at</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="xml">    distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="xml">    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="xml">    See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="xml">    limitations under the License.</span></span><br><span class="line"><span class="xml">--&gt;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- START SNIPPET: example --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">beans</span></span></span></span><br><span class="line"><span class="xml">  xmlns="http://www.springframework.org/schema/beans"</span></span><br><span class="line"><span class="xml">  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line"><span class="xml">  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="xml">  http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Allows us to use system properties as variables in this configuration file --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:$</span><span class="template-variable">&#123;activemq.conf&#125;</span><span class="xml">/credentials.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!-- Allows accessing the server log --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logQuery"</span> <span class="attr">class</span>=<span class="string">"io.fabric8.insight.log.log4j.Log4jLogQuery"</span></span></span></span><br><span class="line"><span class="xml">          lazy-init="false" scope="singleton"</span></span><br><span class="line"><span class="xml">          init-method="start" destroy-method="stop"&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">        The <span class="tag">&lt;<span class="name">broker</span>&gt;</span> element is used to configure the ActiveMQ broker.</span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">broker</span> <span class="attr">xmlns</span>=<span class="string">"http://activemq.apache.org/schema/core"</span> <span class="attr">brokerName</span>=<span class="string">"localhost"</span> <span class="attr">dataDirectory</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;activemq.data&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">destinationPolicy</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">policyMap</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">policyEntries</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">policyEntry</span> <span class="attr">topic</span>=<span class="string">"&gt;"</span> &gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!-- The constantPendingMessageLimitStrategy is used to prevent</span></span></span><br><span class="line"><span class="xml">                         slow topic consumers to block producers and affect other consumers</span></span><br><span class="line"><span class="xml">                         by limiting the number of messages that are retained</span></span><br><span class="line"><span class="xml">                         For more information, see:</span></span><br><span class="line"></span><br><span class="line"><span class="xml">                         http://activemq.apache.org/slow-consumer-handling.html</span></span><br><span class="line"></span><br><span class="line"><span class="xml">                    --&gt;</span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">pendingMessageLimitStrategy</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">constantPendingMessageLimitStrategy</span> <span class="attr">limit</span>=<span class="string">"1000"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">pendingMessageLimitStrategy</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">policyEntry</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">policyEntries</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">policyMap</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">destinationPolicy</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">policyEntries</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">policyEntry</span> <span class="attr">topic</span>=<span class="string">"&gt;"</span> &gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!-- The constantPendingMessageLimitStrategy is used to prevent</span></span></span><br><span class="line"><span class="xml">                         slow topic consumers to block producers and affect other consumers</span></span><br><span class="line"><span class="xml">                         by limiting the number of messages that are retained</span></span><br><span class="line"><span class="xml">                         For more information, see:</span></span><br><span class="line"></span><br><span class="line"><span class="xml">                         http://activemq.apache.org/slow-consumer-handling.html</span></span><br><span class="line"></span><br><span class="line"><span class="xml">                    --&gt;</span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">pendingMessageLimitStrategy</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">constantPendingMessageLimitStrategy</span> <span class="attr">limit</span>=<span class="string">"1000"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;/<span class="name">pendingMessageLimitStrategy</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">policyEntry</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;/<span class="name">policyEntries</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">policyMap</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">destinationPolicy</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">            The managementContext is used to configure how ActiveMQ is exposed in</span></span><br><span class="line"><span class="xml">            JMX. By default, ActiveMQ uses the MBean server that is started by</span></span><br><span class="line"><span class="xml">            the JVM. For more information, see:</span></span><br><span class="line"></span><br><span class="line"><span class="xml">            http://activemq.apache.org/jmx.html</span></span><br><span class="line"><span class="xml">        --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">managementContext</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">managementContext</span> <span class="attr">createConnector</span>=<span class="string">"false"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">managementContext</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">            Configure message persistence for the broker. The default persistence</span></span><br><span class="line"><span class="xml">            mechanism is the KahaDB store (identified by the kahaDB tag).</span></span><br><span class="line"><span class="xml">            For more information, see:</span></span><br><span class="line"></span><br><span class="line"><span class="xml">            http://activemq.apache.org/persistence.html</span></span><br><span class="line"><span class="xml">        --&gt;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">kahaDB</span> <span class="attr">directory</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;activemq.data&#125;</span><span class="xml"><span class="tag"><span class="string">/kahadb"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span></span><br><span class="line"><span class="xml">--&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span></span><br><span class="line"><span class="xml">                  <span class="tag">&lt;<span class="name">jdbcPersistenceAdapter</span> <span class="attr">dataSource</span>=<span class="string">"#mysql-ds"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">            The systemUsage controls the maximum amount of space the broker will</span></span><br><span class="line"><span class="xml">            use before disabling caching and/or slowing down producers. For more information, see:</span></span><br><span class="line"><span class="xml">            http://activemq.apache.org/producer-flow-control.html</span></span><br><span class="line"><span class="xml">          --&gt;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">systemUsage</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">systemUsage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">memoryUsage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">memoryUsage</span> <span class="attr">percentOfJvmHeap</span>=<span class="string">"70"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">memoryUsage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">storeUsage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">storeUsage</span> <span class="attr">limit</span>=<span class="string">"100 gb"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">storeUsage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">tempUsage</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">tempUsage</span> <span class="attr">limit</span>=<span class="string">"50 gb"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">tempUsage</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">systemUsage</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">systemUsage</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">            The transport connectors expose ActiveMQ over a given protocol to</span></span><br><span class="line"><span class="xml">            clients and other brokers. For more information, see:</span></span><br><span class="line"></span><br><span class="line"><span class="xml">            http://activemq.apache.org/configuring-transports.html</span></span><br><span class="line"><span class="xml">        --&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">transportConnectors</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="comment">&lt;!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB --&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"openwire"</span> <span class="attr">uri</span>=<span class="string">"tcp://0.0.0.0:61616?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"amqp"</span> <span class="attr">uri</span>=<span class="string">"amqp://0.0.0.0:5672?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"stomp"</span> <span class="attr">uri</span>=<span class="string">"stomp://0.0.0.0:61613?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"mqtt"</span> <span class="attr">uri</span>=<span class="string">"mqtt://0.0.0.0:1883?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">transportConnector</span> <span class="attr">name</span>=<span class="string">"ws"</span> <span class="attr">uri</span>=<span class="string">"ws://0.0.0.0:61614?maximumConnections=1000&amp;amp;wireFormat.maxFrameSize=104857600"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">transportConnectors</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- destroy the spring context on shutdown to stop jetty --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">shutdownHooks</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.hooks.SpringContextHook"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">shutdownHooks</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">broker</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mysql-ds"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp2.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://192.168.1.101:3306/activemq?relaxAutoCommit=true;serverTimezone=Asia/Shanghai"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"200"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="xml">        Enable web consoles, REST and Ajax APIs and demos</span></span><br><span class="line"><span class="xml">        The web consoles requires by default login, you can disable this in the jetty.xml file</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        Take a look at $</span><span class="template-variable">&#123;ACTIVEMQ_HOME&#125;</span><span class="xml">/conf/jetty.xml for more details</span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"jetty.xml"</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- END SNIPPET: example --&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="Windows本地安装ActiveMQ"><a href="#Windows本地安装ActiveMQ" class="headerlink" title="Windows本地安装ActiveMQ"></a>Windows本地安装ActiveMQ</h4></li>
<li>启动命令：cd bin   activemq.bat start</li>
<li>注意配置数据源: 如阿里Druid(德鲁伊)<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mysql-ds"</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"url"</span> <span class="attr">value</span> = <span class="string">"jdbc:mysql://192.168.1.101:3306/activemq?relaxAutoCommit=true;serverTimezone=Asia/Shanghai"</span>/&gt;</span>  </span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"username"</span> <span class="attr">value</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"password"</span> <span class="attr">value</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"driverClassName"</span> <span class="attr">value</span> = <span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span>  </span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"filters"</span> <span class="attr">value</span> = <span class="string">"stat"</span>/&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="xml">          <span class="comment">&lt;!-- 最大并发连接数 --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"maxActive"</span> <span class="attr">value</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;maxActive&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">         <span class="comment">&lt;!-- 初始化连接数量 --&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">         <span class="tag">&lt; <span class="attr">property</span> <span class="attr">name</span> = <span class="string">"initialSize"</span> <span class="attr">value</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;initialSize&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"maxWait"</span> <span class="attr">value</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;maxWait&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="comment">&lt;!-- 最小空闲连接数 --</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"minIdle"</span> <span class="attr">value</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;minIdle&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></span><br><span class="line"><span class="xml">          <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt; <span class="attr">property</span> <span class="attr">name</span> = <span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span> =<span class="string">"$</span></span></span><span class="template-variable">&#123;timeBetweenEvictionRunsMillis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span> =<span class="string">"$</span></span></span><span class="template-variable">&#123;minEvictableIdleTimeMillis&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"validationQuery"</span> <span class="attr">value</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;validationQuery&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"testWhileIdle"</span> <span class="attr">value</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;testWhileIdle&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"testOnBorrow"</span> <span class="attr">value</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;testOnBorrow&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"testOnReturn"</span> <span class="attr">value</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;testOnReturn&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span>  </span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"maxOpenPreparedStatements"</span> <span class="attr">value</span> =<span class="string">"$</span></span></span><span class="template-variable">&#123;maxOpenPreparedStatements&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="comment">&lt;!-- 打开 removeAbandoned 功能 --&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"removeAbandoned"</span> <span class="attr">value</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;removeAbandoned&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="comment">&lt;!-- 1800 秒，也就是 30 分钟 --&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"removeAbandonedTimeout"</span> <span class="attr">value</span> =<span class="string">"$</span></span></span><span class="template-variable">&#123;removeAbandonedTimeout&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="comment">&lt;!-- 关闭 abanded 连接时输出错误日志 --&gt;</span>   </span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"logAbandoned"</span> <span class="attr">value</span> = <span class="string">"$</span></span></span><span class="template-variable">&#123;logAbandoned&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>打开数据库会自动创建3张表<h4 id="代码运行验证："><a href="#代码运行验证：" class="headerlink" title="代码运行验证："></a>代码运行验证：</h4></li>
<li>一定要开启持久化：messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);</li>
<li>在点对点的类型中:<ul>
<li>当DeliveryMode设置为NON_PERSISTENCE(非持久化)时，消息被保存在内存中；</li>
<li>当DeliveryMode设置为PERSISTENCE(持久化)时，消息被保存在broker的相应的文件或者数据库中；</li>
<li>而且点对点类型中消息一旦被Consumer就从broker中删除(broker就是ActiveMQ的一个实例)</li>
</ul>
</li>
<li>在主题订阅/发布类型中：<ul>
<li>数据不会被删除，<h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4></li>
</ul>
</li>
<li>如果是队列Queue：<ul>
<li>在没有消费者消费的情况下会将消息保存到activemq_msgs表中，只要有任意一个消费者已经消费过了，消费之后这些消息将会立刻被删除</li>
</ul>
</li>
<li>如果是主题Topic：<ul>
<li>一般是先启动消费订阅然后在生产的情况下会将消息保存到activemq_acks里；<h4 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h4></li>
</ul>
</li>
</ul>
<ul>
<li>java.lang.IIIegalStateException:BeanFactory not initialized or already closed+ </li>
<li>这是因为你的操作系统的机器名中有”_”符号，请更改机器名称并且重启即可解决问题。</li>
</ul>
<h3 id="JDBC-Message-store-with-ActiveMQ-Journal-（JDBC消息存储增强带高速缓存日志）"><a href="#JDBC-Message-store-with-ActiveMQ-Journal-（JDBC消息存储增强带高速缓存日志）" class="headerlink" title="JDBC Message store with ActiveMQ Journal （JDBC消息存储增强带高速缓存日志）"></a>JDBC Message store with ActiveMQ Journal （JDBC消息存储增强带高速缓存日志）</h3><ul>
<li>这种方式克服了JDBC Store的不足，JDBC每次消息过来，都需要去写库和读库。</li>
<li>ActiveMQ Journal，使用高速缓存技术，大大提高了性能。</li>
<li>当消费者的消费速度能够及时跟上生产者消息的生产速度时，journal文件能够大大减少需要写入的DB中的消息。</li>
<li>举例子说明：<ul>
<li>生产者生产了1000条消息，这1000条消息会保存到journal文件，如果消费者的消费速度很快的情况下，在journal文件还没有同步到DB之前，消费者已经消费了90%的以上的消息，那么这个时候只需要同步剩余的10%的消息到DB。</li>
<li>如果消费者的消费速度很慢，这个时候journal文件可以使消息以批量方式写到DB。</li>
</ul>
</li>
<li>配置 在/myactivemq/apache-activemq-5.15.11/conf路径下修改activemq.xml的配置<ul>
<li>修改前：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcPersisenceAdapter</span> <span class="attr">dataSource</span>=<span class="string">"$mysql-ds"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>修改后：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceFactory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">journalPersisenceFactory</span></span></span><br><span class="line"><span class="tag">      <span class="attr">journalLogFiles</span>=<span class="string">"4"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">journalLogSize</span>=<span class="string">"32768"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">useJournal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">useQurickJournal</span>=<span class="string">"#mysql-ds"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">dataDirectory</span>=<span class="string">"activemq-data"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceFactory</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3></li>
<li>持久化消息主要指：<br>MQ所在的服务down(挂掉)了消息不会丢失的机制</li>
<li>ActiveMQ的消息持久化机制有：<br>AMQ：基于日志文件<br>KahaDB：基于日志文件，从ActiveMQ5.4开始默认的持久化插件<br>JDBC：基于第三方数据库<br>LevelDB:基于文件的数据库存储，从ActiveMQ5.8之后推出的LevelDB的持久化引擎性能高于KahaDB<br>Replicated LevelDB Store ：从ActiveMQ5.9提供了LevelDB和Zookeeper的数据复制方式，用于Master-slave方式的首选数据复制方案。</li>
<li>无论哪种持久化机制，消息的存储逻辑都一致的。 </li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java消息中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java消息中间件+SpringBoot整合ActiveMQ</title>
    <url>/2020/02/05/Java%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-SpringBoot%E6%95%B4%E5%90%88ActiveMQ(%E5%85%AD)/</url>
    <content><![CDATA[<h3 id="SpringBoot整合ActiveMQ"><a href="#SpringBoot整合ActiveMQ" class="headerlink" title="SpringBoot整合ActiveMQ"></a>SpringBoot整合ActiveMQ</h3><h4 id="队列Queue"><a href="#队列Queue" class="headerlink" title="队列Queue"></a>队列Queue</h4><ul>
<li>创建SpringBoot项目</li>
<li>pom.xml文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhao.boot.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo_boot_activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>demo_boot_activemq<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>配置ActiveMQ application.yml<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://192.168.1.110:61616</span>  <span class="comment">#MQ服务器地址</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="comment">#默认情况下activemq提供的是queue模式，若要使用topic模式需要配置</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">false</span>   <span class="comment">#false表示队列 默认true  Topic主题</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义队列名称</span></span><br><span class="line"><span class="attr">myqueue:</span> <span class="string">boot-activemq-queue</span></span><br></pre></td></tr></table></figure></li>
<li>配置Bean  ==》相当于spring框架的ApplicationContext.xml文件<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.jms.Queue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;myqueue&#125;</span>"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String myQueue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>  <span class="comment">//相当于&lt;bean id="" class=""&gt;</span></span><br><span class="line">    <span class="keyword">public</span> Queue queue()&#123;</span><br><span class="line">        <span class="keyword">return</span> new ActiveMQQueue(myQueue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>业务层消息生产者<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Component</span>  <span class="comment">//相当于service层</span></span><br><span class="line"><span class="variable">@EnableJms</span>  <span class="comment">//开启JMS适配的注解</span></span><br><span class="line">public class Queue_Produce &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private Queue queue;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">produceMsg</span>()&#123;</span><br><span class="line">        <span class="comment">//convertAndSend()可以做转换和发送</span></span><br><span class="line">        <span class="comment">// jmsMessagingTemplate.Send();</span></span><br><span class="line">        <span class="selector-tag">jmsMessagingTemplate</span><span class="selector-class">.convertAndSend</span>(queue,<span class="string">"*******:"</span>+ UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoBootActivemqApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(DemoBootActivemqApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoBootActivemqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> Queue_Produce queue_produce;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		queue_produce.produceMsg();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
浏览器输入：ip:8161<br><img src="images%5CSpringBoot-activemq.png" alt=""><h4 id="要求每隔3分钟往MQ推送消息以下定时发送Case，案例修改"><a href="#要求每隔3分钟往MQ推送消息以下定时发送Case，案例修改" class="headerlink" title="要求每隔3分钟往MQ推送消息以下定时发送Case，案例修改"></a>要求每隔3分钟往MQ推送消息以下定时发送Case，案例修改</h4></li>
<li>修改Queue_Produce新增定时投递方法<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Component</span>  <span class="comment">//相当于service层</span></span><br><span class="line"><span class="variable">@EnableJms</span>  <span class="comment">//开启JMS适配的注解</span></span><br><span class="line">public class Queue_Produce &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Autowired</span></span><br><span class="line">    private Queue queue;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">produceMsg</span>()&#123;</span><br><span class="line">        <span class="comment">//convertAndSend()可以做转换和发送</span></span><br><span class="line">        <span class="comment">// jmsMessagingTemplate.Send();</span></span><br><span class="line">        <span class="selector-tag">jmsMessagingTemplate</span><span class="selector-class">.convertAndSend</span>(queue,<span class="string">"*******:"</span>+ UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//间隔时间定时投递方法</span></span><br><span class="line">    @<span class="selector-tag">Scheduled</span>(fixedDelay = <span class="number">3000</span>)</span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">produceMsgScheduled</span>()&#123;</span><br><span class="line">        <span class="selector-tag">jmsMessagingTemplate</span><span class="selector-class">.convertAndSend</span>(queue,<span class="string">"定时投递Scheduled:"</span>+ UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">        <span class="selector-tag">System</span><span class="selector-class">.out</span><span class="selector-class">.println</span>(<span class="string">"间隔时间3秒定时投递消息"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>修改著配置类 添加注解@EnableScheduling  //激活(开启)消息定时投递<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableScheduling</span>  <span class="comment">//激活(开启)消息定时投递</span></span><br><span class="line">public class DemoBootActivemqApplication &#123;</span><br><span class="line"></span><br><span class="line">	<span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">		<span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(DemoBootActivemqApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>直接开启主启动类，间隔发消息，即可<h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4></li>
<li>创建项目SpringBoot项目添加ActiveMQ依赖</li>
<li>添加配置application.xml(与生产者配置一样，只是端口不同)</li>
<li>消费者代码实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue_Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"$&#123;myqueue&#125;"</span>) <span class="comment">//ActiveMQ监听注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(TextMessage textMessage)</span><span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消费者收到消息："</span>+textMessage.getText());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>直接开启主启动类,即可<br><img src="images%5Cconsumer.png" alt=""><h3 id="Topic主题"><a href="#Topic主题" class="headerlink" title="Topic主题"></a>Topic主题</h3><h4 id="Topic生产者"><a href="#Topic生产者" class="headerlink" title="Topic生产者"></a>Topic生产者</h4></li>
<li>步骤与队列相似</li>
<li>application.xml<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6666</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://192.168.1.110:61616</span>  <span class="comment">#MQ服务器地址</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line"><span class="comment">#    queue-name: boot-activemq-topic</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="comment">#默认情况下activemq提供的是queue模式，若要使用topic模式需要配置</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">true</span>   <span class="comment">#false表示队列 默认true  Topic主题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">packages:</span></span><br><span class="line">  <span class="attr">trust-all:</span> <span class="literal">true</span> <span class="comment">#不配置此项，会报错</span></span><br><span class="line"><span class="comment">#自定义队列名称</span></span><br><span class="line"><span class="attr">mytopic:</span> <span class="string">boot-activemq-topic</span></span><br></pre></td></tr></table></figure></li>
<li>配置类<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(<span class="meta-string">"<span class="subst">$&#123;mytopic&#125;</span>"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> String topicName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Topic topic()&#123;</span><br><span class="line">        <span class="keyword">return</span>  new ActiveMQTopic(topicName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>生产者逻辑代码<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">public <span class="keyword">class</span> Topic_Produce &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    @<span class="constructor">Autowired(<span class="params">required</span> = <span class="params">false</span>)</span></span><br><span class="line">    <span class="keyword">private</span> Topic topic;</span><br><span class="line"></span><br><span class="line">    @<span class="constructor">Scheduled(<span class="params">fixedDelay</span> = 3000)</span></span><br><span class="line">    public void produce<span class="constructor">Topic()</span>&#123;</span><br><span class="line">        jmsMessagingTemplate.convert<span class="constructor">AndSend(<span class="params">topic</span>,<span class="string">"主题消息："</span>+ UUID.<span class="params">randomUUID</span>()</span>.<span class="keyword">to</span><span class="constructor">String()</span>.substring(<span class="number">0</span>,<span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动类<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableScheduling</span></span><br><span class="line">public class BootActivemqTopicProduceApplication &#123;</span><br><span class="line"></span><br><span class="line">	<span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">		<span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(BootActivemqTopicProduceApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="主题消费者"><a href="#主题消费者" class="headerlink" title="主题消费者"></a>主题消费者</h4></li>
<li>application.yml<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6606</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://192.168.1.110:61616</span>  <span class="comment">#MQ服务器地址</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">admin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">  <span class="comment">#    queue-name: boot-activemq-queue</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="comment">#默认情况下activemq提供的是queue模式，若要使用topic模式需要配置</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">true</span>   <span class="comment">#false表示队列 默认true  Topic主题</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">packages:</span></span><br><span class="line">  <span class="attr">trust-all:</span> <span class="literal">true</span> <span class="comment">#不配置此项，会报错</span></span><br><span class="line"><span class="comment">#自定义队列名称</span></span><br><span class="line"><span class="attr">mytopic:</span> <span class="string">boot-activemq-topic</span></span><br></pre></td></tr></table></figure></li>
<li>消费者<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Topic_Consumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"$&#123;mytopic&#125;"</span>) <span class="comment">//ActiveMQ监听注解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(TextMessage textMessage)</span><span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"消费者收到消息："</span>+textMessage.getText());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行启动类即可。</li>
</ul>
]]></content>
      <tags>
        <tag>Java消息中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+适配器模式</title>
    <url>/2020/02/05/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><ul>
<li>基本介绍</li>
<li>1.适配器模式(Adapter Pattern)将某个类的接口转换成客户端期望的另一个接口表示，主要目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协调工作。其别名为包装器(Wrapper).</li>
<li>2.适配器模式属于结构型模式</li>
<li>3.主要分为3类：类适配器模式，对象适配器模式，接口适配器模式<h4 id="适配器模式工作原理"><a href="#适配器模式工作原理" class="headerlink" title="适配器模式工作原理"></a>适配器模式工作原理</h4></li>
<li>1.适配器模式：将一个类的接口转换成另一个接口，让原本的接口不兼容的类可以兼容</li>
<li>2.从用户的角度看不到被适配器，是解耦的</li>
<li>3.用户调用适配器转化出来的目的接口方法，适配器再调用被适配者的相关接口方法</li>
<li>4.用户收到反馈结果，感觉只是和目标接口交互<br>目标最终需要的输出，dst(destination 即Target)===》适配器称为Adapter===》被适配者需要适配的类，接口，对象简称src(source) <h4 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h4></li>
<li>应用案例<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被适配的类</span></span><br><span class="line"><span class="comment">//输出220伏的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Voltage220V</span>&#123;</span><br><span class="line">    <span class="built_in">int</span> src = <span class="number">220</span>;</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"电压"</span>+src+<span class="string">"伏"</span>);</span><br><span class="line">    <span class="keyword">return</span> src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="symbol">Voltage5V</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> ouput5V();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//适配器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">voltageAdapter</span> <span class="symbol">extends</span> <span class="symbol">Voltage220V</span> <span class="symbol">implement</span> <span class="symbol">Voltage5V</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> output5V()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得220伏电压</span></span><br><span class="line">        <span class="built_in">int</span> srcV = output220V();</span><br><span class="line">        <span class="built_in">int</span> dstV = srcV/<span class="number">44</span>;</span><br><span class="line">        <span class="keyword">return</span> dstV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Phone</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//充电</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> charging(Voltage5V voltage5V)&#123;</span><br><span class="line">        <span class="keyword">if</span>(voltage5V.output5V() == <span class="number">5</span>)&#123;</span><br><span class="line">            Sytem.<span class="keyword">out</span>.println(<span class="string">"电压为5可以充电"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(voltage5V.output5V() &gt; <span class="number">5</span>)&#123;</span><br><span class="line">             Sytem.<span class="keyword">out</span>.println(<span class="string">"电压大于5伏，不能充电"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Cilent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> static  <span class="built_in">void</span> main(String[] args)&#123;</span><br><span class="line">        System.oout.println(<span class="string">"类适配器模式"</span>);</span><br><span class="line">        Phone phone = new Phone();</span><br><span class="line">        phone.charing(new VoltageAdapter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>小结</li>
<li>1.Java是单继承机制，所以类适配器需要继承src类这一点算是一个缺点，因为这要求dst必须是接口，有一定的局限性</li>
<li>2.src类的方法在Adapter中都会暴露，也增加了使用成本。</li>
<li>3.由于其继承了src类，所以它可以根据需求重写src类方法，使得Adapter的灵活性增强了。<h4 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h4></li>
<li>基本思路和类适配器模式相同，只是将Adapter类做修改，不是继承src类，而是特有的是src类的实例，以解决兼容性的问题。即：持有src类，实现dst类的接口，完成src-&gt;dst的适配</li>
<li>根据“合成复用原则”，在系统中尽量使用关联关系来代替继承关系。</li>
<li>对象适配器模式是适配器模式常用的一种</li>
<li>类图<br><img src="images%5Capadter_object.png" alt="" title="对象适配器类图"></li>
<li>应用案例<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被适配的类</span></span><br><span class="line"><span class="comment">//输出220伏的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">    System.out.<span class="built_in">println</span>(<span class="string">"电压"</span>+src+<span class="string">"伏"</span>);</span><br><span class="line">    <span class="keyword">return</span> src;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">Voltage5V</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ouput5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//适配器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">voltageAdapter</span> <span class="title">extends</span> <span class="title">implement</span> <span class="title">Voltage5V</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Voltage220V voltage220V;<span class="comment">//持有Voltage220V对象，不是继承; 关联关系中的聚合关系</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器传值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">voltageAdapter</span><span class="params">(Voltage220V voltage220V)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.votage220V = voltage220V;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> dstV = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(null != voltage220V)&#123;</span><br><span class="line">            <span class="keyword">int</span> src = voltage220.output220V();获取对象<span class="number">220</span>V电压</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"适用对象适配器，进行适配配"</span>);</span><br><span class="line">            dstV = srcV/<span class="number">44</span>;</span><br><span class="line">            SYstem.out.<span class="built_in">println</span>(<span class="string">"适配完成输出电压......="</span> + dstV);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dstV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span>&#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//充电</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(Voltage5V voltage5V)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(voltage5V.output5V() == <span class="number">5</span>)&#123;</span><br><span class="line">            Sytem.out.<span class="built_in">println</span>(<span class="string">"电压为5可以充电"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(voltage5V.output5V() &gt; <span class="number">5</span>)&#123;</span><br><span class="line">             Sytem.out.<span class="built_in">println</span>(<span class="string">"电压大于5伏，不能充电"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cilent</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span></span>&#123;</span><br><span class="line">        System.oout.<span class="built_in">println</span>(<span class="string">"===对象适配器模式==="</span>);</span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        <span class="comment">//接口指向实现类</span></span><br><span class="line">        phone.charing(<span class="keyword">new</span> VoltageAdapter(<span class="keyword">new</span> Voltage220V()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="对象适配器小结："><a href="#对象适配器小结：" class="headerlink" title="对象适配器小结："></a>对象适配器小结：</h5></li>
<li>1.对象适配器和类适配器其实算是同一种思想，只不过实现方式不同。</li>
<li>2.根据合成复用原则，使用组合替代继承，所以解决了类适配器必须继承src的局限性问题，也不再要求dst必须是接口</li>
<li>3.使用成本低。<h4 id="接口适配器模式"><a href="#接口适配器模式" class="headerlink" title="接口适配器模式"></a>接口适配器模式</h4></li>
<li>基本介绍<ul>
<li>1.一些书籍称为：适配器模式(Default Adapter Pattern)或缺省适配器模式；</li>
<li>2.当不需要全部实现接口提供的方法时，可以先设计一个抽象类实现接口，并为该接口中每一个方法提供一个默认实现(空方法)，那么该抽象类的子类可有选择的覆盖父类的某些方法来实现需求</li>
<li>3.适用于一个接口不想用其所有的方法的情况。</li>
<li>类图<br><img src="images%5CAdapter_interface.png" alt="" title="接口适配器类图"></li>
</ul>
</li>
<li>应用案例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Interface Inter0&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在AbsAdapter我们将Interface4的方法进行默认实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsAdapter</span> <span class="keyword">implements</span> <span class="title">Inter0</span></span>&#123;</span><br><span class="line">    <span class="comment">//默认实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say4</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        AbsAdapter absAdapter = <span class="keyword">new</span> AbsAdapter()&#123;</span><br><span class="line">            <span class="comment">//只需要覆盖我们需要使用接口方法</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say1</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"使用那个say1方法...."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        absAdapter.say1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="适配器模式-SpringMVC–》Dispatcher源码分析"><a href="#适配器模式-SpringMVC–》Dispatcher源码分析" class="headerlink" title="适配器模式 SpringMVC–》Dispatcher源码分析"></a>适配器模式 SpringMVC–》Dispatcher源码分析</h4></li>
<li>SpringMVC中的HandAdapter，就是用适配器模式</li>
<li>SpringMVC处理器求的流程<br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1580552227491&di=b44e07bb360f98b3ef8a1b045531c649&imgtype=0&src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fpng%2F09278ec2b41470b39a0374cdeb45ed5c.png%3Fx-oss-process%3Dimage%2Fresize%2Cp_100%2Fauto-orient%2C1%2Fquality%2Cq_90%2Fformat%2Cjpg%2Fwatermark%2Cimage_eXVuY2VzaGk%3D%2Ct_100" alt=""></li>
<li>使用HandAdapter的原因分析：<br>可以看到处理器类型不同，有多重实现方法，那么调用方式就不是确定的，如果需要直接调用Controller方法，需要调用的时候就不断使用if else来进行判断是哪一种子类然后执行。那么如果后面要扩展Controller，就得修改原来的代码，这样违背了OCP原则。<h3 id="适配器模式小结："><a href="#适配器模式小结：" class="headerlink" title="适配器模式小结："></a>适配器模式小结：</h3></li>
<li>1.三种命名方式：是根据src(被适配的类)以则样的形式给Adapter(在Adapter里的形式)来命名的。</li>
<li>2.类适配器：以类给到，在Adapter里就是将src当作类，继承<br>对象适配器:以对象给到，在Adapter里，将src作为一个对象，持有<br>接口适配器:以接口给到，在Adapter里将src作为一个接口，实现</li>
<li>3.Adapter模式最大的作用还是将原本不兼容的接口融合到一起工作。</li>
<li>4.实际开发中，实现起来不拘泥于我们讲过的三种经典形式</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+装饰者模式</title>
    <url>/2020/02/05/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><ul>
<li>案例</li>
<li>星巴克咖啡订单项目</li>
<li>1.咖啡种类/单品咖啡：Espresso(意大利咖啡)，ShprtBlack，LongBlack(美式咖啡)，Decaf(无因咖啡)</li>
<li>2.调料：Milk,Soy(豆浆)，Chocolate</li>
<li>3.要求在扩展咖啡种类时具有良好的扩展性，改进方便，维护方便</li>
<li>4.使用OO的来计算不同种类咖啡的费用：客户可以点单品咖啡，也可以单品咖啡+调料组合</li>
<li>传统方案会出现类爆炸<h4 id="装饰者模式基本概念："><a href="#装饰者模式基本概念：" class="headerlink" title="装饰者模式基本概念："></a>装饰者模式基本概念：</h4></li>
<li>1.装饰者模式:动态地将新功能附加到对象上。在对象功能扩展方面，他比继承更有弹性，装饰者模式也体现了开闭原则(ocp)</li>
<li>2.这里提到的动态的将新功能附加到对象和ocp原则，在后面的应用实例上会以代码的形式体现<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4></li>
<li>类图<br><img src="images%5CDecorator.png" alt=""></li>
<li>说明</li>
</ul>
<ol>
<li>Dirck类就是抽象类</li>
<li>ShortBlack就是单品咖啡</li>
<li>Decorator是一个装饰类，含有一个被装饰的对象(Drink obj)</li>
<li>Decorator的cost方法 进行一个费用的叠加计算，递归地计算价格<h5 id="装饰者模式解决星巴克咖啡订单"><a href="#装饰者模式解决星巴克咖啡订单" class="headerlink" title="装饰者模式解决星巴克咖啡订单"></a>装饰者模式解决星巴克咖啡订单</h5></li>
</ol>
<ul>
<li>下单：2份巧克力+一份牛奶的longBlack<br><img src="images%5CDel001.png" alt=""></li>
<li>说明:</li>
</ul>
<ol>
<li>Milk包含LongBlack</li>
<li>一份Chocolate包含了(Milk+LongBlack)</li>
<li>一份Chocolate包含(Chocolate+Milk+LongBlack)</li>
<li>这样不管是什么形式的单品咖啡+调料组合，通过递归方式可以方便的组合和维护</li>
</ol>
<ul>
<li>代码</li>
<li>被装饰者<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类  饮料</span></span><br><span class="line"><span class="keyword">public</span> abstract <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> des;<span class="comment">//描述</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDes</span><span class="params">(<span class="keyword">String</span> des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.des = des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算价格/费用的抽象方法</span></span><br><span class="line">    <span class="comment">//子类来实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> abstract <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>抽象类饮料继承类 咖啡  实现抽象方法<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">coffee</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public float cost() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>咖啡的子类<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">Espresso</span>()&#123;</span><br><span class="line">        setDes(<span class="string">"意大利咖啡"</span>);</span><br><span class="line">        setPrice(<span class="number">6.0</span>f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LongBlack</span> <span class="keyword">extends</span> <span class="title">coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">LongBlack</span>()&#123;</span><br><span class="line">        setDes(<span class="string">"美式咖啡"</span>);</span><br><span class="line">        setPrice(<span class="number">10.0</span>f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">coffee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">Espresso</span>()&#123;</span><br><span class="line">        setDes(<span class="string">"意大利咖啡"</span>);</span><br><span class="line">        setPrice(<span class="number">6.0</span>f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>装饰者 继承Drink(饮料)类 组合Drink(饮料)类<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="comment">//组合关联关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Drink</span> obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法传值</span></span><br><span class="line">    public <span class="type">Decorator</span>(<span class="type">Drink</span> obj)&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写父类的 计算价格方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public float cost() &#123;</span><br><span class="line">        <span class="comment">//价格</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + obj.cost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写父类 描述方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">String</span> getDes() &#123;</span><br><span class="line">        <span class="comment">//obj.getDes()输出被装饰者的信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.des + <span class="string">" "</span> + <span class="keyword">super</span>.getPrice() + <span class="string">"&amp;&amp;"</span> + obj.getDes();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>装饰者子类<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">Milk</span>(<span class="type">Drink</span> obj) &#123;</span><br><span class="line">        <span class="keyword">super</span>(obj);</span><br><span class="line">        setDes(<span class="string">"牛奶"</span>);</span><br><span class="line">        setPrice(<span class="number">8.0</span>f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ShoreBlack</span> <span class="keyword">extends</span> <span class="title">coffee</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    public <span class="type">ShoreBlack</span>()&#123;</span><br><span class="line">        setDes(<span class="string">"拿铁咖啡"</span>);</span><br><span class="line">        setPrice(<span class="number">20.0</span>f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    public <span class="type">Soy</span>(<span class="type">Drink</span> obj) &#123;</span><br><span class="line">        <span class="keyword">super</span>(obj);</span><br><span class="line">        setDes(<span class="string">"豆浆"</span>);</span><br><span class="line">        setPrice(<span class="number">4.0</span>f);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">//装饰者模式下单</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> CoffeeBar &#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">        //装饰者模式下单:<span class="number">2</span>份巧克力+一份牛奶的LongBlack</span><br><span class="line"></span><br><span class="line">        //<span class="number">1.</span> 点一份LongBlack</span><br><span class="line">        Drink <span class="keyword">order</span> = <span class="built_in">new</span> LongBlack();</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("费用=" +<span class="keyword">order</span>.<span class="keyword">cost</span>());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("描述=" +<span class="keyword">order</span>.getDes());</span><br><span class="line"></span><br><span class="line">        //<span class="number">2.</span> 加入一份牛奶</span><br><span class="line">        <span class="keyword">order</span> = <span class="built_in">new</span> Milk(<span class="keyword">order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("加入 一份牛奶费用=" +<span class="keyword">order</span>.<span class="keyword">cost</span>());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("加入一份牛奶描述=" +<span class="keyword">order</span>.getDes());</span><br><span class="line"></span><br><span class="line">        //<span class="number">3.</span> 加入一份巧克力</span><br><span class="line">        <span class="keyword">order</span> = <span class="built_in">new</span> Chocolate(<span class="keyword">order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("加入一份牛奶一份巧克力费用=" +<span class="keyword">order</span>.<span class="keyword">cost</span>());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("加入一份牛奶一份巧克力描述=" +<span class="keyword">order</span>.getDes());</span><br><span class="line"></span><br><span class="line">        //<span class="number">4.</span> 加入两份巧克力</span><br><span class="line">        <span class="keyword">order</span> = <span class="built_in">new</span> Chocolate(<span class="keyword">order</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("加入一份牛奶加入两份巧克力费用=" +<span class="keyword">order</span>.<span class="keyword">cost</span>());</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("加入一份牛奶加入两份巧克力描述=" +<span class="keyword">order</span>.getDes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行结果<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">费用=<span class="number">10.0</span></span><br><span class="line">描述=美式咖啡</span><br><span class="line">加入一份牛奶费用=<span class="number">18.0</span></span><br><span class="line">加入一份牛奶描述=牛奶 <span class="number">8.0</span>&amp;&amp;美式咖啡</span><br><span class="line">加入一份牛奶一份巧克力费用=<span class="number">21.0</span></span><br><span class="line">加入一份牛奶一份巧克力描述=巧克力 <span class="number">3.0</span>&amp;&amp;牛奶 <span class="number">8.0</span>&amp;&amp;美式咖啡</span><br><span class="line">加入一份牛奶加入两份巧克力费用=<span class="number">24.0</span></span><br><span class="line">加入一份牛奶加入两份巧克力描述=巧克力 <span class="number">3.0</span>&amp;&amp;巧克力 <span class="number">3.0</span>&amp;&amp;牛奶 <span class="number">8.0</span>&amp;&amp;美式咖啡</span><br></pre></td></tr></table></figure>
<h3 id="装饰者模式在JDK应用的源码分析"><a href="#装饰者模式在JDK应用的源码分析" class="headerlink" title="装饰者模式在JDK应用的源码分析"></a>装饰者模式在JDK应用的源码分析</h3></li>
<li>volatile是一个特征修饰符（type specifier）.volatile的作用是作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值。</li>
<li>java的IO结构，FilterInputStream就是一个装饰者</li>
<li>源代码<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//装饰者</span></span><br><span class="line">public</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FilterInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span> </span>&#123;</span><br><span class="line">    <span class="comment">//含被装饰者，组合关联关系</span></span><br><span class="line">    <span class="keyword">protected</span> volatile <span class="type">InputStream</span> in;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">FilterInputStream</span>(<span class="type">InputStream</span> in) &#123;</span><br><span class="line">        <span class="keyword">this</span>.in = in;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被装饰者子类</span></span><br><span class="line">public</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileInputStream</span> <span class="keyword">extends</span> <span class="title">InputStream</span></span></span><br><span class="line"><span class="class"></span>&#123;   <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">FileDescriptor</span> fd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> path;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">FileChannel</span> channel = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> closeLock = <span class="keyword">new</span> <span class="type">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> volatile boolean closed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    public <span class="type">FileInputStream</span>(<span class="type">String</span> name) <span class="keyword">throws</span> <span class="type">FileNotFoundException</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>(name != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="type">File</span>(name) : <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//被装饰者</span></span><br><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span> <span class="title">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰者子类，具体的修饰者</span></span><br><span class="line">public</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> <span class="keyword">extends</span> <span class="title">FilterInputStream</span> <span class="title">implements</span> <span class="title">DataInput</span> </span>&#123;</span><br><span class="line">    public <span class="type">DataInputStream</span>(<span class="type">InputStream</span> in) &#123;</span><br><span class="line">        <span class="keyword">super</span>(in);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>分析得出JDK的IO流运用了装饰者模式</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+桥接模式</title>
    <url>/2020/02/05/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><ul>
<li>基本介绍：</li>
<li>1.桥接模式(Bridge模式)是指：将实现与抽象放在两个不同的类层次，使两个层次可以独立改变。</li>
<li>2.是一种结构型设计模式</li>
<li>3.Bridge模式基于类的最小设计原则，通过使用封装，聚合及继承等行为让不同的类承担不同的职责。他的主要特点是把抽象(Abstraction)与行为实现(Implememtation)分离开来，从而可以保持各部分的独立性以及应对他们的功能扩展</li>
<li>类图<br><img src="images%5Cbridge.png" alt="" title="桥接模式类图"><ul>
<li>远离类图说明：</li>
</ul>
<ol>
<li>Client类：桥接模式的调用者</li>
<li>抽象类(Abstraction):维护了Implemention/即他的实现子类，而这时聚合关系，Abstraction充当了桥接类。</li>
<li>RefinedAbstraction：是Abstraction抽象类的子类</li>
<li>Implemention：行为实现类的接口</li>
<li>ConcreationImpA/B：行为的具体实现类</li>
<li>从UML类图：可以看出这里的抽象类和接口是聚合的关系，其实就是调用和被调用的关系<h4 id="应用案例—-手机"><a href="#应用案例—-手机" class="headerlink" title="应用案例—-手机"></a>应用案例—-手机</h4></li>
</ol>
</li>
<li>类图<br><img src="images%5Cbeidge001.png" alt="" title="手机桥接模式"></li>
<li>代码实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vivo</span> <span class="keyword">implements</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"vivo手机开机了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"vivo手机关机了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"vivo手机打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMI</span> <span class="keyword">implements</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小米手机开机了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小米手机关机了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小米手机打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Phone相当于桥</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//组合品牌</span></span><br><span class="line">    <span class="keyword">private</span> Brand brand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpRegistPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpRegistPhone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">        System.out.println(<span class="string">"平板手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.close();</span><br><span class="line">        System.out.println(<span class="string">"平板手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.call();</span><br><span class="line">        System.out.println(<span class="string">"平板手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//折叠式手机类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FolendPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FolendPhone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">        System.out.println(<span class="string">"折叠样式手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.close();</span><br><span class="line">        System.out.println(<span class="string">"折叠样式手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.call();</span><br><span class="line">        System.out.println(<span class="string">"折叠样式手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取折叠式手机(样式加品牌)</span></span><br><span class="line">        Phone folendPhone = <span class="keyword">new</span> FolendPhone(<span class="keyword">new</span> XiaoMI());</span><br><span class="line"></span><br><span class="line">        folendPhone.open();</span><br><span class="line">        folendPhone.close();</span><br><span class="line">        folendPhone.call();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line">        Phone VPhone = <span class="keyword">new</span> FolendPhone(<span class="keyword">new</span> Vivo());</span><br><span class="line"></span><br><span class="line">        VPhone.open();</span><br><span class="line">        VPhone.close();</span><br><span class="line">        VPhone.call();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line">        <span class="comment">//获得平板手机</span></span><br><span class="line">        Phone upRegistPhone = <span class="keyword">new</span> UpRegistPhone(<span class="keyword">new</span> XiaoMI());</span><br><span class="line"></span><br><span class="line">        upRegistPhone.open();</span><br><span class="line">        upRegistPhone.call();</span><br><span class="line">        upRegistPhone.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line">        Phone VuPhone = <span class="keyword">new</span> UpRegistPhone(<span class="keyword">new</span> Vivo());</span><br><span class="line"></span><br><span class="line">        VuPhone.open();</span><br><span class="line">        VuPhone.call();</span><br><span class="line">        VuPhone.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="桥接模式在JDBC的源码分析"><a href="#桥接模式在JDBC的源码分析" class="headerlink" title="桥接模式在JDBC的源码分析"></a>桥接模式在JDBC的源码分析</h3></li>
<li>1.JDBC的Driver接口，如果从桥接模式来看，Driver就是一个接口，下面可以有MySQL的Driver，Oracle的驱动，这些就可以当作实现接口类<h4 id="桥接模式小结："><a href="#桥接模式小结：" class="headerlink" title="桥接模式小结："></a>桥接模式小结：</h4></li>
<li>1.实现抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实现部分独立开来，这有助于系统分层设计，从而产生更好的结构化系统。</li>
<li>2.对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其他的部分有具体的业务来完成</li>
<li>3.桥接模式替代多层继承方案，可以以减少子类的个数，降低系统的管理和维护成本。</li>
<li>4.桥接模式的引入增加了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程。</li>
<li>5.桥接模式要求正常识别出系统中两个独立变化的维度，因此其使用范围有一定的局限性，即需要有这样的应用场景。<h4 id="桥接模式的应用场景"><a href="#桥接模式的应用场景" class="headerlink" title="桥接模式的应用场景"></a>桥接模式的应用场景</h4></li>
<li>1.对于我们那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li>
<li>2.常见的应用场景：<br>JDBC驱动程序<br>银行转账系统<br>转账分类：网上转账，柜台转帐，AMT转帐<br>转账用户类型：普通用户，银行用户，金卡用户<br>消息管理<br>消息类型：即时消息，延时消息<br>消息分类：手机短信，邮件消息，QQ消息。。。。</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java消息中间件+ActiveMQ传输协议(四)</title>
    <url>/2020/02/05/Java%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-ActiveMQ%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE-%E5%9B%9B/</url>
    <content><![CDATA[<h3 id="ActiveMQ的传输协议"><a href="#ActiveMQ的传输协议" class="headerlink" title="ActiveMQ的传输协议"></a>ActiveMQ的传输协议</h3><ul>
<li><p>简介</p>
</li>
<li><p>activemq.xml<br><img src="images%5CActivemq%E5%8D%8F%E8%AE%AE.png" alt=""></p>
</li>
<li><p>Supports pluggable transport protocols such as in-VM, TCP, SSL, NIO, UDP, multicast, JGroups and JXTA transports  即 支持可插拔的传输协议，例如VM，TCP，SSL，NIO，UDP，多播，JGroups和JXTA传输</p>
</li>
<li><p>ActiveMQ默认的协议是tcp/ip协议==&gt;openwrie</p>
</li>
<li><p>其默认的Broker配置，TCP的Client监听端口61616</p>
</li>
<li><p>在网络传输数据前，必须要序列化数据，消息是通过一个叫wire protocol的来序列化成字节流。默认情况下ActiveMQ把wire protocol叫做openWrie，它的目的是促使网络上的效率和数据快速交互。</p>
</li>
<li><p>TCP连接的URL形式如：tcp://hostname:port?key=value&amp;key=value,后面参数可选</p>
</li>
<li><p>TCP传输的优点：</p>
<ul>
<li>TCP协议传输可靠性高，稳定性强</li>
<li>高效性：字节流方式传递，效率很高</li>
<li>有效性，可用性:应用广泛，支持任何平台<h4 id="ActiveMQ传输协议之NIO"><a href="#ActiveMQ传输协议之NIO" class="headerlink" title="ActiveMQ传输协议之NIO"></a>ActiveMQ传输协议之NIO</h4></li>
</ul>
</li>
<li><p>修改activemq.xml配置</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">&lt;transportConnectors&gt;</span><br><span class="line">    &lt;transportConnector name=<span class="string">"nio"</span> uri=<span class="string">"nio://0.0.0.0:61618?trace=true"</span>/&gt;</span><br><span class="line">&lt;/transportConnectors&gt;</span><br><span class="line">```    </span><br><span class="line"><span class="comment">* 如果不特别指定ActiveMQ的网络的监听器，那么这些端口都将使用BIO网络IO模型。(OpenWire ,stopmp,amqp...)</span></span><br><span class="line"><span class="comment">* 所以为了首先提高单节点的网络吞吐性能，我们需要明确指定ActiveMQ的网络IO模型</span></span><br><span class="line"><span class="comment">* 如上：URL格式头以"nio"开头。表示这个端口使用以TCP协议为基础的NIO网络IO模型</span></span><br><span class="line">#### NIO增强</span><br><span class="line"><span class="comment">* 我们怎样既让这个端口支持NIO网络协议，又让它支持多个协议？？？？？</span></span><br><span class="line"><span class="comment">* 解决：</span></span><br><span class="line"><span class="comment">  * 使用auto关键字</span></span><br><span class="line"><span class="comment">  * 使用"+"符号来为端口设置多种特性</span></span><br><span class="line"><span class="comment">  * 如果我们即需要某一个端口支持NIO网络IO模型，有需要它支持多个协议</span></span><br></pre></td></tr></table></figure>
<p>  在TCP上启用AUTO<br>  要通过TCP连接配置ActiveMQ自动线路格式检测，请使用  auto 传输前缀。例如，在您的XML文件中添加以下传输配置：</p>
  <transportConnector name="auto" uri="auto://localhost:5671"/>
  通过SSL启用自动
  要通过SSL连接配置ActiveMQ自动线路格式检测，请使用  auto+ssl 传输前缀。例如，在您的XML文件中添加以下传输配置：

  <transportConnector name="auto+ssl" uri="auto+ssl://localhost:5671"/>
  有关将SSL与ActiveMQ一起使用的更多详细信息，请参见以下文章（如何使用SSL）。
  在NIO上启用AUTO
  要通过NIO TCP连接配置ActiveMQ自动线路格式检测，请使用  auto+nio传输前缀。例如，在您的XML文件中添加以下传输配置：

  <transportConnector name="auto+nio" uri="auto+nio://localhost:5671"/>
  在NIO SSL上启用自动
  要通过NIO SSL连接配置ActiveMQ自动线路格式检测，请使用  auto+nio+ssl 传输前缀。例如，在您的XML文件中添加以下传输配置：

  <transportConnector name="auto+nio+ssl" uri="auto+nio+ssl://localhost:5671"/>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>例如：修改activemq.xml配置</span><br></pre></td></tr></table></figure>
<transportConnector name="auto+nio" uri="auto+nio://localhost:61608"?maxmumConnections=1000&amp:wireFormat.maxFrameSize=104857600&amp:org.apache.activemq.transport.nio.SelectorManager.corePoolSize=20&amp:org.apache.activemq.transport.nio.SelectorManager.maximumPoolSize=50"/>
```
</li>
</ul>
]]></content>
      <tags>
        <tag>Java消息中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java消息中间件+Spring整合ActiveMQ</title>
    <url>/2020/02/05/Java%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-Spring%E6%95%B4%E5%90%88ActiveMQ(%E4%BA%94)/</url>
    <content><![CDATA[<h3 id="Spring整合ActiveMQ"><a href="#Spring整合ActiveMQ" class="headerlink" title="Spring整合ActiveMQ"></a>Spring整合ActiveMQ</h3><ul>
<li>1.Maven修改，需要添加Spring支持JMS的包<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spring_ActiveMQ<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring_ActiveMQ Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--zctiveMQ所需要的jar包配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.activemq/activemq-all --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.xbean/xbean-spring --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ActiveMQ整合Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--JSON数据绑定包--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--ActiveMQ对JMS的支持，整合Spring和ActiveMQ--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jms --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ActiveMQ所需要的pool包配置--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.activemq/activemq-pool --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring——Aop等相关配置--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring依赖注入--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring切面编程--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/springframework/spring-orm --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Aop联盟的jar包--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjrt --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjrt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--cglib字节码增强--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Spring_ActiveMQ<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="队列Queue"><a href="#队列Queue" class="headerlink" title="队列Queue"></a>队列Queue</h4></li>
<li>Spring配置文件 applicationContext.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http:///www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--开启包的自动扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zhao.activemq"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置生产者--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.pool.PooledConnectionFactory"</span> <span class="attr">destroy-method</span>=<span class="string">"stop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--真正可以产生Connection的ConnectionFactor,由对应的JMS服务厂商提供--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://192.168.1.110:61616"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxConnections"</span> <span class="attr">value</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这个队列目的地，点对点的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"destainationQueue"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构造注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"spring-active-queue"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Spring提供的JMS工具包，它可以进行消息发送，接受等--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jmsFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestination"</span> <span class="attr">ref</span>=<span class="string">"destainationQueue"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--消息转换--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.support.converter.SimpleMessageConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>消息生产者<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消息生产者  业务逻辑层</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMQ_Produce</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//织入JMS模板</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//Spring控制反转  相当于 new SpringMQ_Produce();</span></span><br><span class="line">        SpringMQ_Produce produce = (SpringMQ_Produce)ctx.getBean(<span class="string">"springMQ_Produce"</span>);</span><br><span class="line">        produce.jmsTemplate.send(<span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line"></span><br><span class="line">                TextMessage textMessage = session.createTextMessage(<span class="string">"Spring和ActiveMQ的整合配置消息。。。。。。"</span>);</span><br><span class="line">                <span class="keyword">return</span> textMessage;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*此处技术点Java8特性之一 lambda表达式 只有一个参数，其参数类型也可以省略 (session)-&gt;&#123;&#125;</span></span><br><span class="line"><span class="comment">        produce.jmsTemplate.send((Session session)-&gt;&#123;</span></span><br><span class="line"><span class="comment">            TextMessage textMessage = session.createTextMessage("Spring和ActiveMQ的整合配置消息。。。。。。");</span></span><br><span class="line"><span class="comment">            return textMessage;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"********send 方法运行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>消费者<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringMQ_Consumer</span> &#123;</span></span><br><span class="line">    <span class="comment">//织入JMS模板</span></span><br><span class="line">    @Autowired</span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//Spring控制反转  相当于 new SpringMQ_Produce();</span></span><br><span class="line">        SpringMQ_Consumer consumer = (SpringMQ_Consumer) ctx.getBean(<span class="string">"springMQ_Consumer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">String</span> textMessage = (<span class="keyword">String</span>) consumer.jmsTemplate.receiveAndConvert();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"消费者收到的消息。。。。。"</span>+textMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="主题Topic"><a href="#主题Topic" class="headerlink" title="主题Topic"></a>主题Topic</h4></li>
<li>Spring核心配置 ：applicationContext.xml文件做以下修改即可<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--主题目的地，发布订阅模式--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"destainationTopic"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"spring-active-topic"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Spring提供的JMS工具包，它可以进行消息发送，接受等 JmsTemplate消息模板--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jmsFactory"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--&lt;property name="defaultDestination" ref="destainationQueue"/&gt;--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestination"</span> <span class="attr">ref</span>=<span class="string">"destainationTopic"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--消息转换--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverter"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.support.converter.SimpleMessageConverter"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>注意：生产者，消费者 代码与队列代码一样，不变<h4 id="在Spring里面实现消费者不启动，直接通过配置监听完成"><a href="#在Spring里面实现消费者不启动，直接通过配置监听完成" class="headerlink" title="在Spring里面实现消费者不启动，直接通过配置监听完成"></a>在Spring里面实现消费者不启动，直接通过配置监听完成</h4></li>
<li>在Spring配置文件中添加，监听器配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置监听程序--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsContainer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jmsFactory"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"destainationTopic"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--public class MYMessageListener implements MessageListener--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"myMessageListener"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--配置的方法将监听器添加到容器中--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--&lt;bean id="myMessageListener" class="com.zhao.activemq.spring.MyMessageListener"/&gt;--&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>写一个类实现消息监听<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过注解方式，添加到容器 注意：要配置扫描组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != message &amp;&amp; message <span class="keyword">instanceof</span> TextMessage)&#123;</span><br><span class="line">            TextMessage textMessage = (TextMessage) message;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(textMessage.getText());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Java消息中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java消息中间件ActiveMQ+JMS(二)</title>
    <url>/2020/02/05/Java%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6ActiveMQ(%E4%BA%8C)-JMS/</url>
    <content><![CDATA[<h3 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h3><ul>
<li>知识补充：<ul>
<li>JavaEE–？？</li>
<li>JavaEE是一套使用Java进行企业级应用开发的大家一致遵循的13个核心规范工业标准。JavaEE平台提供了一个基于组件的方式来加快设计，开发，装配及部署企业应用程序</li>
<li>1.JDBC(Java Database)数据库连接。</li>
<li>2.JNDI(Java Naming and Directory Interfaces)Java的命名和目录接口</li>
<li>3.EJB(Enterprise JavaBean)</li>
<li>4.RML(Remote Method Invoke)远程方法调用</li>
<li>5.Java IDL(Interface Description Language)/CORBA(Common Object Broker Architecture)接口定义语言/公用对象请求代理程序体系结构</li>
<li>6.JSP(Java Server Pages)</li>
<li>7.Servlet</li>
<li>8.XML(Extensible Markup Langage)可扩展白标记语言</li>
<li>9.JMS(Java Message Service)Java消息服务</li>
<li>10.JTA(Java Transation API)Java事务API</li>
<li>11.JTS(Java Transation Service)Java事务服务</li>
<li>12.JavaMail</li>
<li>13.JAF(JavaBean Activation Framework)</li>
</ul>
</li>
<li>Java消息服务–？？<ul>
<li>Java消息服务指的是两个应用程序之间进行异步通信的API，他为标准消息服务提供了一组接口，包括创建，发送，读取消息，等，用于支持Java应用程序开发。在JavaEE中，当两个应用程序使用JMS进行通信时，他们之间并不是直接相连的，而是通过一个共同的消息收发服务组件关联起来以达到解耦/异步/削峰的效果。<h4 id="JMS的组成和特点"><a href="#JMS的组成和特点" class="headerlink" title="JMS的组成和特点"></a>JMS的组成和特点</h4></li>
</ul>
</li>
<li>JMS provider<br>  实现JMS接口和规范的消息中间件，也就是我们的MQ服务器</li>
<li>JMS producer<br>  消息的生产者，创建和发送JMS消息的客户端应用</li>
<li>JMS consumer<br>  消息的消费者，接受和处理JMS消息的客户端应用程序</li>
<li>JMS message<ul>
<li>消息头(消息调用)<ol>
<li>JMSDestination<ul>
<li>消息发送的目的地，主要是指Queue队列和主题topic</li>
</ul>
</li>
<li>JMSDeliveryMode<ul>
<li>持久模式和非持久模式。</li>
<li>一条持久性的消息：应该被传送”一次仅仅一次”，这意味着如果JMS提供者出现故障，该消息并不会丢失，他会在服务器恢复之后再次传递。</li>
<li>一条非持久的消息：最多会传递一次，这意味着服务器出现故障，该消息将永远丢失。</li>
</ul>
</li>
<li>JMSExpiration<ul>
<li>可以设置消息在一定时间后过期，默认是永不过期</li>
<li>消息过期时间，等于Destination的send方法中的timeToLive值加上发送时刻的GMT时间</li>
<li>如果timeTolive值等于零，则JMSExpiration被设置为零，表示该消息永不过期</li>
<li>如果发送消息后，在消息过期时间之后消息还没有被发送到目的地，则该消息被清除。</li>
</ul>
</li>
<li>JMSPriority<ul>
<li>消息优先级，从0-9十个级别，0到4是普通消息，5到9是加急消息</li>
<li>JMS不要求MQyange按照这十个优先级发送消息，但必须保证加急消息要先与普通消息到达。默认是4级</li>
</ul>
</li>
<li>JMS MessageID<ul>
<li>唯一标识每个消息的标识由MQ产生。</li>
</ul>
</li>
</ol>
</li>
<li>消息属性<ul>
<li>如果需要出消息头字段之外的值，那么可以使用消息属性</li>
<li>作用：识别/去重/重点/标注等操作非常有用的方法</li>
<li>他们是以属性名和属性值对的形式制定的，可以将属性是为消息头的的扩展，属性指定一些消息头没有的包括的附加信息，比如可以在属性里指定消息选择器。</li>
<li>消息的属性就像可以分配给一条消息的附加消息头一样，他们允许开发者添加有关消息的不透明附加消息。</li>
<li>他们还用于暴露消息选择器在消息过滤时使用的数据<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">TextMessage mwessage = session.create<span class="constructor">TextMessage()</span>;</span><br><span class="line">message.get<span class="constructor">Text(<span class="params">text</span>)</span>;</span><br><span class="line">message.set<span class="constructor">StringProperty(<span class="string">"username"</span>,<span class="string">"z3"</span>)</span>;<span class="comment">//自定义属性</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>消息体<ul>
<li>封装具体的消息数据</li>
<li>发送和接受的消息体类型必须一直对应</li>
<li>5中消息体格式(session调用)<ol>
<li>TextMessage<ul>
<li>普通字符串消息，包含一个string</li>
</ul>
</li>
<li>MapMessage<ul>
<li>一个Map类型的消息，key为string类型，而值为Java的基本类型</li>
</ul>
</li>
<li>Bytesmessage<ul>
<li>二进制数组消息，包含一个byte[]</li>
</ul>
</li>
<li>StreamMessage<ul>
<li>Java数据流消息，用标准流操作来顺序的填充和读取。</li>
</ul>
</li>
<li>ObjectMessage<ul>
<li>对象消息，包含一个可序列化的Java对象<h3 id="JMS的可靠性"><a href="#JMS的可靠性" class="headerlink" title="JMS的可靠性"></a>JMS的可靠性</h3><h4 id="MQ挂了，那么消息的持久化和丢失情况分别如何—"><a href="#MQ挂了，那么消息的持久化和丢失情况分别如何—" class="headerlink" title="MQ挂了，那么消息的持久化和丢失情况分别如何—????"></a>MQ挂了，那么消息的持久化和丢失情况分别如何—????</h4></li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li>persistent：持久性  PERSISTENT表示持久<br>redis的持久化方式：rdb aof<ul>
<li>Queue队列的持久性<ul>
<li>非持久：messageProducer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);<br>但服务器宕(死)机，消息不存在</li>
<li>持久：messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);<br>持久化：当服务器宕机，消息依然存在</li>
<li>队列(Queue)持久化消息：<br>这是队列的默认传递模式，此模式保证这些消息只被传递一次和成功使用一次。对于这些消息，可靠性是优先考虑的因素。<br>可靠性的另一个重要方面是确保持久性消息传送至目标后，消息服务在向消费者传送它们之前不会丢失这些消息。</li>
</ul>
</li>
<li>主题Topic的持久化消息：<ul>
<li>特点：先启动订阅在启动生产</li>
<li>一定要先运行一次消费者，等于向MQ注册，类似我订阅了这个主题。</li>
<li>然后在运行生产者发送消息，此时:</li>
<li>无论消费者是否在线，都会接受到，不在线的话，下次链接的时候，会把没有收到的消息都接受下来。</li>
<li>应用案例<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">//消费者</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> JmsConsumer &#123;</span><br><span class="line"><span class="built_in">public</span> static final String ACTIVEMQ_URL = "tcp://192.168.1.7:61616";</span><br><span class="line"><span class="built_in">public</span> static final String TOPIC_NAME = "topic-zhao";</span><br><span class="line"><span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws JMSException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println("********z3消费者********");</span><br><span class="line"></span><br><span class="line">    // <span class="number">1.</span>创建连接工厂,按照给定的URL地址，采用默认用户名和密码</span><br><span class="line">    ActiveMQConnectionFactory activeMQConnectionFactory = <span class="built_in">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">    //<span class="number">2.</span>通过连接工厂，获取连接<span class="keyword">connection</span>并启动</span><br><span class="line">    <span class="keyword">Connection</span> <span class="keyword">connection</span> = activeMQConnectionFactory.createConnection();</span><br><span class="line">    //<span class="keyword">connection</span>.<span class="keyword">start</span>();</span><br><span class="line">    <span class="keyword">connection</span>.setClientID("z3");</span><br><span class="line">    //<span class="number">3.</span>创建会话</span><br><span class="line">    //有两个参数，第一个叫事务/第二个叫签收</span><br><span class="line">    <span class="keyword">Session</span> <span class="keyword">session</span> = <span class="keyword">connection</span>.createSession(<span class="keyword">false</span>, <span class="keyword">Session</span>.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">    //<span class="number">4.</span>创建目的地(具体是队列还是主题) 接口</span><br><span class="line">    Topic topic = <span class="keyword">session</span>.createTopic(TOPIC_NAME);</span><br><span class="line">    // TopicSubscriber 主题的订阅者    DurableSubscriber表示持久化订阅者</span><br><span class="line">    TopicSubscriber topicSubscriber = <span class="keyword">session</span>.createDurableSubscriber(topic,"remark.......");</span><br><span class="line">    <span class="keyword">connection</span>.<span class="keyword">start</span>();</span><br><span class="line"></span><br><span class="line">    Message message = topicSubscriber.receive();</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">null</span> != message)&#123;</span><br><span class="line">        TextMessage textMessage = (TextMessage) message;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("收到的持久化Topic："+textMessage.getText());</span><br><span class="line">        message = topicSubscriber.receive(<span class="number">5000</span>L);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*//5.创建消费者</span></span><br><span class="line"><span class="comment">    MessageConsumer consumer = session.createConsumer(topic);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//通过监听的方式(旧式写法)</span></span><br><span class="line"><span class="comment"> */</span><span class="comment">/*   consumer.setMessageListener(new MessageListener() &#123;</span></span><br><span class="line"><span class="comment">        @Override</span></span><br><span class="line"><span class="comment">        public void onMessage(Message message) &#123;</span></span><br><span class="line"><span class="comment">        if (null != message &amp;&amp; message instanceof TextMessage)&#123;</span></span><br><span class="line"><span class="comment">            TextMessage textMessage = (TextMessage) message;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                System.out.println("******消费者接收到消息："+textMessage.getText());</span></span><br><span class="line"><span class="comment">            &#125; catch (JMSException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;);*/</span><span class="comment">/*</span></span><br><span class="line"><span class="comment"> //此处技术点Java8特性之一 lambda表达式</span></span><br><span class="line"><span class="comment">    consumer.setMessageListener((Message message)-&gt;&#123;</span></span><br><span class="line"><span class="comment">        if (null != message &amp;&amp; message instanceof TextMessage)&#123;</span></span><br><span class="line"><span class="comment">            TextMessage textMessage = (TextMessage) message;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                System.out.println("******消费者接收到消息："+textMessage.getText());</span></span><br><span class="line"><span class="comment">            &#125; catch (JMSException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;);*/</span></span><br><span class="line">    //保证控制台不灭</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">in</span>.<span class="keyword">read</span>();</span><br><span class="line">    //<span class="number">6.</span>关闭资源</span><br><span class="line">    <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    <span class="keyword">connection</span>.<span class="keyword">close</span>();</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>生产者<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package activemq.topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主题生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsProduce</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> ACTIVEMQ_URL = <span class="string">"tcp://192.168.1.7:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> TOPIC_NAME = <span class="string">"topic-zhao"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws JMSException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建连接工厂,按照给定的URL地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过连接工厂，获取连接connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//connection.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话</span></span><br><span class="line">        <span class="comment">//有两个参数，第一个叫事务/第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建目的地(具体是队列还是主题) 接口</span></span><br><span class="line">        Topic topic = session.createTopic(TOPIC_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建消息生产者</span></span><br><span class="line">        MessageProducer messageProducer = session.createProducer(topic);</span><br><span class="line">        <span class="comment">//主题持久化</span></span><br><span class="line">        messageProducer.setDeliveryMode(DeliveryMode.PERSISTENT);</span><br><span class="line">        connection.start();<span class="comment">//主题持久化启动位置</span></span><br><span class="line">        <span class="comment">//6.通过消息的生产者messageProdecer生产3条消息发送到MQ的队列里面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">3</span> ; i++) &#123;</span><br><span class="line">            <span class="comment">//7.创建消息 ， 一定格式的消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"topic---msg------"</span> + i);<span class="comment">//理解为一个字符串</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//8.通过messagerProducer发送给MQ</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//9.关闭资源</span></span><br><span class="line">        messageProducer.<span class="built_in">close</span>();</span><br><span class="line">        session.<span class="built_in">close</span>();</span><br><span class="line">        connection.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"*****主题消息发送到MQ完成******"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>事务<ol>
<li>producer提交时的事务<ul>
<li>false<br>只执行send，就进入到队列中。<br>关闭事务，那第2个签收参数的设置需要有效</li>
<li>true<br>先执行，send在执行commit，消息才真正的提交到队列中。<br>消息需要批量发送，需要换冲区处理<br>关闭session之前，需提交事务session.commit();<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">  //ok <span class="keyword">session</span>.<span class="keyword">commit</span>();</span><br><span class="line">&#125;catch(<span class="keyword">exception</span> e)&#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">null</span> != <span class="keyword">session</span>)&#123;</span><br><span class="line">    <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意消费者也需，进行事务提交，session.commit() *  2. 事务偏生产者/签收偏消费者</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li>Acknowledge：签收<ul>
<li>非事务</li>
<li>自动签收：session.AUTO_ACKNOWLEDGE</li>
<li>手动签收<br>session.CLIENT_ACKNOWLEDGE<br>客户端调用acknowledge方法手动签收<br>textMessage.acknowledge();</li>
<li>允许重复消息<br>session.DUPS_OK_ACKNOWLEDGE</li>
<li>事务：<ul>
<li>生产事务开启，只有commit后才能将全部消息变为以消费</li>
</ul>
</li>
</ul>
</li>
<li>签收和事务的关系:<ul>
<li>在事务性会话中，当一个事务被成功提交则消息被自动签收。<br>如果事务回滚，则消息会被再次传递。</li>
<li>非事务性会话中，消息何时被确任取决于创建会话时的应答模式(acknowledgement mode)<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3></li>
</ul>
</li>
</ul>
<ol>
<li>点对点模式Queue<ul>
<li>点对点模式是基于队列的，生产者发消息到队列，消费者从队列接收消息，队列的存在在使得消息的异步传输，成为可能，和我们平时给朋友发短信类似。</li>
<li>如果在Session关闭时有部分消息已被收到但是还没有被签收(acknowledged),那当消费者，下次连接到相同的队列时，这些消息还会被再次接收。</li>
<li>队列可以长久的保存消息直到消费者收到消息，消费者不需要因为担心消息会丢失而时刻和队列保持激活的连接状态，充分体现了异步传输模式的优势。 </li>
</ul>
</li>
<li>发布订阅模式<ul>
<li>JMS Pub/Sub模型定义了如何向一个内容节点发布和订阅消息，这些节点被称为topic</li>
<li>主题可被认为是消息的传输中介，发布者(publisher)发布消息到主题，订阅者(subscribe)从主题订阅消息</li>
<li>主题使得消息订阅这和消息发布者保持互相独立，不需要接触即可保证消息的传递<h3 id="按照不同的conf配置文件来启动ActiveMQ"><a href="#按照不同的conf配置文件来启动ActiveMQ" class="headerlink" title="按照不同的conf配置文件来启动ActiveMQ"></a>按照不同的conf配置文件来启动ActiveMQ</h3></li>
</ul>
</li>
</ol>
<ul>
<li><p>相当于一个ActiveMQ服务实例</p>
</li>
<li><p>Broker其实就是实现用代码的形式启动ActiveMQ将MQ嵌套到Java代码中，以便随时用随时启动，<br>作用：在用的时候在去启动这样节省了资源，也保证了可靠性。<br>命令：cp activemq.xml activemq02.xml<br>启动：./activemq start xbean:file:/apache-activemq-5.15.9/conf/activemq02 启动指定容器<br>命令：lsof -i:61616</p>
</li>
<li><p>二、按照不同配置文件启动ActiveMQ<br>1、 先将ActiveMQ根目录下conf文件夹中的activemq.xml复制一份并重命名为activemq02</p>
<pre><code>命令（cp activemq.cml activemq02.xml）</code></pre><p>2、启动activemq02，默认启动的是activemq</p>
<pre><code>命令（./activemq start xbean:file:/apache-activemq-5.15.11/conf/activemq02.xml）</code></pre><h3 id="Broker嵌入式"><a href="#Broker嵌入式" class="headerlink" title="Broker嵌入式"></a>Broker嵌入式</h3></li>
<li><p>用ActiveMQ  Broker作为独立的消息服务来构建JAVA应用。</p>
</li>
<li><p>ActiveMQ也支持在vm中通信基于嵌套shidebroker,能够无缝集成其他Java应用</p>
</li>
<li><p>嵌入式Broker</p>
<h4 id="知识补充：Jackson介绍（JSON处理库）"><a href="#知识补充：Jackson介绍（JSON处理库）" class="headerlink" title="知识补充：Jackson介绍（JSON处理库）"></a>知识补充：Jackson介绍（JSON处理库）</h4></li>
<li><p>Jackson作为一个知名，并且经典的Java平台的JSON库，有人说它是最好的JSON解析工具，或者只是一个简单的还行的JSON解析库，不管如何Jackson都是一个值得一学，值得一用的JSON处理库。</p>
</li>
<li><p>Jackson不仅支持流式处理json，还支持数据绑定（POJO和JSON之间的相互转化），甚至还拓展了很多其他第三方库所支持的数据格式（如：Avro, BSON, CBOR, CSV, Smile, (Java) Properties, Protobuf, XML和YAML，Guava, Joda, PCollections）。</p>
</li>
<li><p>Jackson的三个核心模块：</p>
<ul>
<li>jackson-core:定义了低级的流式API，包括了JSON处理细节。</li>
<li>jackson-annotations:包含了Jackson的注解。</li>
<li>jackson-databind:实现了对象和JSON之间的转换，这个包依赖上面两个包。</li>
</ul>
</li>
<li><p>如何解析JSON:</p>
</li>
<li><p>尽管有很多种拆分JSON并解析的方法，但是可以归纳成3种:</p>
<ul>
<li>迭代：对事件流（Jackson称之为Token流）的迭代</li>
<li>数据绑定：将Json数据绑定到对象</li>
<li>遍历树：构建一个树结构并使用合适的方法遍历它</li>
</ul>
</li>
<li><p>对应的Java的API:</p>
<ul>
<li>SAX和Stax。这个提供了一些基本的API来遍历事件流。其中，SAX是主动把event推给你(push)，Stax是让你可以主动遍历这个事件流(pull)。一个是push，一个是pull，但是事件流都是一样的，只是表现方式不同。提供事件callback的SAX，主动遍历event的Stax，还有一个是Stax Cursor API（游标）。</li>
<li>JAXB是数据绑定的标准; 虽然有n + 1个替代品（Jibx，XMLBeans，Castor等等），但它们都是这样做的：将（Java）对象转换为xml，反之亦然，其中一些方便而有效，另一些则不如此。</li>
<li>DOM是“最标准的”API，它定义了树结构; 但是与数据绑定一样，还有多种（更好的）替代方案（XOM，JDOM，DOM4j）。您可以逐节点遍历它，也可以使用XPath。<br>虽然上面说的都是XML的，但是我们讨论的是JSON啊！事实证明，格式不重要，重要的是这种解析的思想。</li>
</ul>
</li>
<li><p>对应了Jackson提供的三个类:</p>
</li>
<li><p>核心包（jackson-core）包含JsonParser和JsonGenerator，它们允许迭代令牌(Jackson喜欢说成令牌token，而不是事件event)。</p>
</li>
<li><p>ObjectMapper实现了数据绑定功能：JSON和Object之间的相互转换。</p>
</li>
<li><p>TreeMapper是把JSON字符串构造成一个树，其中包含了节点(JsonNode)和子节点(JsonNode)。<br>和Jackson 1.x的区别:</p>
</li>
</ul>
<p>使用Maven作为构建工具，而不是Ant<br>注释划分到一个单独的包<br>包改成了com.fasterxml.jackson.core(原来是 org.codehaus.jackson)</p>
<ul>
<li>POM.xml文件<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现了对象和JSON之间的转换</span></span><br><span class="line"><span class="params">&lt;dependency&gt;</span></span><br><span class="line">    <span class="params">&lt;groundId&gt;</span>com.fasterxml.jackson.core<span class="params">&lt;/groundId&gt;</span></span><br><span class="line">    <span class="params">&lt;artifactId&gt;</span>jackson-databind<span class="params">&lt;artifactId&gt;</span></span><br><span class="line">    <span class="params">&lt;version&gt;</span><span class="number">2.9</span><span class="number">.5</span><span class="params">&lt;version&gt;</span></span><br><span class="line"><span class="params">&lt;decependcy&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>测试服务   EmbedBroker<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmbedBroker</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//AAAAACtiveMQ也支持在vm中通信基于嵌入式的broker</span></span><br><span class="line">        BrokerService brokerService = <span class="keyword">new</span> BrokerService();</span><br><span class="line">        brokerService.setUseJmx(<span class="literal">true</span>);</span><br><span class="line">        brokerService.addConnector(<span class="string">"tcp://localhost:61616"</span>);</span><br><span class="line">        brokerService.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>查看服务 队列验证<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">G</span>:\<span class="selector-tag">IDEA</span>\<span class="selector-tag">Maven_ActiveMQ</span>&gt;<span class="selector-tag">jps</span> <span class="selector-tag">-l</span></span><br><span class="line">  10720 <span class="selector-tag">embedborker</span><span class="selector-class">.EmbedBroker</span></span><br><span class="line">  12224 <span class="selector-tag">org</span><span class="selector-class">.jetbrains</span><span class="selector-class">.jps</span><span class="selector-class">.cmdline</span><span class="selector-class">.Launcher</span></span><br><span class="line">  12180 <span class="selector-tag">org</span><span class="selector-class">.jetbrains</span><span class="selector-class">.idea</span><span class="selector-class">.maven</span><span class="selector-class">.server</span><span class="selector-class">.RemoteMavenServer36</span></span><br><span class="line">  4084 <span class="selector-tag">sun</span><span class="selector-class">.tools</span><span class="selector-class">.jps</span><span class="selector-class">.Jps</span></span><br><span class="line">  11160</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java消息中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+建造者模式</title>
    <url>/2020/01/26/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><ul>
<li>传统方式</li>
<li>类图<br><img src="images%5Cbuilder.png" alt="传统方式" title="传统方式"><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractHost</span> &#123;</span><br><span class="line">    <span class="comment">//打地基</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bulidBasic</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//砌墙</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildwall</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封顶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roofed</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        bulidBasic();</span><br><span class="line">        buildwall();</span><br><span class="line">        roofed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>子类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHost</span> <span class="keyword">extends</span> <span class="title">AbstractHost</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bulidBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通房子打地基"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildwall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通房子砌墙"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通房子封顶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试类(客户端)<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public class<span class="built_in"> Client </span>&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        CommonHost commonHost = new CommonHost();</span><br><span class="line">        commonHost.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>传统方式分析：</li>
<li>1.优点是比较好理解，简单易操作。</li>
<li>2.设计的程序，过于简单，没有设计缓存层的对象，程序的扩展和维护不好，也就是说这种设计方案，把产品(即：房子)和创建产品的过程(即：建房子的流程)封装在一起，耦合性增强了。</li>
<li>3.解决放方案：将产品和产品建造过程解耦 =》建造者模式<h3 id="建造这模式基本介绍："><a href="#建造这模式基本介绍：" class="headerlink" title="建造这模式基本介绍："></a>建造这模式基本介绍：</h3></li>
<li>1.建造者模式(Build Pattern)又叫生成器模式，是一种对象的构建模式。它可以将复杂对象的建造过程抽象出来(抽象类别)，使这个抽象过程的不同实现方法可以构造出不同表现(属性)的对象。</li>
<li>2.建造者模式是一步一步创建一个复杂对象，它允许用户只通过指定复杂对象的内容就可以构建他们，用户不需要知道内部的具体构建细节。</li>
<li>建造者模式的四个角色：</li>
<li>Product(产品角色)：一个具体的产品对象；</li>
<li>Builder(抽象建造者)：创建一个Product对象的各个部件指定的接口/抽象类。</li>
<li>ConcreteBuilder(具体建造者)：实现接口,构建和装配各个部件。</li>
<li>Director(指挥者)：构建一个使用Builder接口的对象。它主要是用于创建一个复杂的对象。它主要由两个作用，一是：隔离了客户于对象的生产过程，二是：负责控制产品对象的生产过程。</li>
<li>类图<br><img src="images%5Cbuilder1.png" alt="建造者模式" title="建造者模式"></li>
<li>应用案例</li>
<li>House —&gt;Product(产品角色)<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> basic;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> wall;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> rootfed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> basic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBasic</span><span class="params">(<span class="keyword">String</span> basic)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.basic = basic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wall;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWall</span><span class="params">(<span class="keyword">String</span> wall)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wall = wall;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getRootfed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rootfed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRootfed</span><span class="params">(<span class="keyword">String</span> rootfed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootfed = rootfed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>HouseBuilder—-&gt;Builder(抽象建造者)<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象的建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">HouseBuilder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span>  House house = <span class="keyword">new</span> House();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将建造的流程...,抽象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildBasic</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildwalls</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">rootfed</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建造房子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">buildHose</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> house;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>HightBuilder和CommonHost—》ConcreteBuilder(具体建造者)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HightBuilder</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"高楼的地基"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildwalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"高楼砌墙"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rootfed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"高楼封顶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHost</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通房子打地基"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildwalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通房子砌墙"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rootfed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通房子封顶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>HouseDirector —&gt;Director(指挥者)<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指挥者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseDirector</span> </span>&#123;</span><br><span class="line">    HouseBuilder houseBuilder = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器传入houseBuilder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseDirector</span><span class="params">(HouseBuilder houseBuilder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过setter方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setHouseBuilder</span><span class="params">(HouseBuilder houseBuilder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体的建造流程在这里指挥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">House <span class="title">contructHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        houseBuilder.buildBasic();</span><br><span class="line">        houseBuilder.buildwalls();</span><br><span class="line">        houseBuilder.rootfed();</span><br><span class="line">        <span class="function"><span class="keyword">return</span> houseBuilder.<span class="title">buildHose</span><span class="params">()</span></span>;  <span class="comment">//返回具体产品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="建造者模式在JDK的应用源码分析："><a href="#建造者模式在JDK的应用源码分析：" class="headerlink" title="建造者模式在JDK的应用源码分析："></a>建造者模式在JDK的应用源码分析：</h3></li>
<li>java.lang.StringBuider中的建造这模式(StringBuilder是一个可变的字符序列。此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。)</li>
<li>源码中建造者模式角色分析：<ul>
<li>Appendable接口定义了多个Appendable为抽象建造者，定义了抽象方法。</li>
<li>AbstrStringBuilder实现Applentable接口方法，这里的AbstractStringBuilder已经是建造者，只是不能实例化</li>
<li>StringBuilder即充当了指挥者角色，同时充当了具体的建造者，建造方法的是现实是由AbstractStringBuilder完成，而StringBuilder继承了AbstracterStrignBuilder<h3 id="建造者模式的注意事项："><a href="#建造者模式的注意事项：" class="headerlink" title="建造者模式的注意事项："></a>建造者模式的注意事项：</h3></li>
</ul>
</li>
<li>1.客户端(使用程序)不必知道产品的内部组成的细节 ，将产品本身于产品创建过程解耦，使得相同的创建过程可以创建不同的产品对象</li>
<li>2.每一个具体的建造者都是相对独立的，，而与其他具体建造者无关，因此可以很方便的替换具体建造者或者增加新的具体创建者，用户使用不同的具体创建者即可得到不同的产品对象</li>
<li>3.可以更加精细的控制产品的创建过程，见复杂产品的创建步骤分解在不同的方法中，是的创建过程更加清晰，也更方便使用程序来控制创建过程</li>
<li>4.增加新的具体建造者无需修改原有的类库的代码，指挥者类针对抽象创建者类编程，系统扩展方便。符合ocp(开闭)原则</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+工厂模式</title>
    <url>/2020/01/26/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><ul>
<li>传统方式 应用案例<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//将Pizze类做成抽象的</span></span><br><span class="line"><span class="keyword">public</span> abstract <span class="class"><span class="keyword">class</span> <span class="title">pizze</span> &#123;</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> abstract <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(name+<span class="string">"baking"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(name+<span class="string">"cut"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(name+<span class="string">"boxing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizze</span> <span class="title">extends</span> <span class="title">pizze</span>&#123;</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"制作奶酪披萨 准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizze</span> <span class="title">extends</span> <span class="title">pizze</span> &#123;</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"希腊披萨准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//订单类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizze</span> &#123;</span></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pizze pizze = null;</span><br><span class="line">        <span class="keyword">String</span> orderType;<span class="comment">//订购披萨的类型</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">            orderType = getType();</span><br><span class="line">            <span class="keyword">if</span>(orderType.equals(<span class="string">"greek"</span>))&#123;</span><br><span class="line">                pizze = <span class="keyword">new</span> GreekPizze();</span><br><span class="line">                pizze.setName(<span class="string">"希腊"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">                pizze = <span class="keyword">new</span> CheesePizze();</span><br><span class="line">                pizze.setName(<span class="string">"奶昔"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出pizze，的制作过程</span></span><br><span class="line">            pizze.<span class="built_in">prepare</span>();</span><br><span class="line">            pizze.bake();</span><br><span class="line">            pizze.cut();</span><br><span class="line">            pizze.box();</span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法，可以动态的使用，获取客户希望订购的披萨</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">String</span> <span class="title">getType</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"input pizza 种类："</span>);</span><br><span class="line">            <span class="keyword">String</span> str = strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于一个客户端，发出订购</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> OrderPizze();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>类图<br><img src="images%5Cpizzastore.png" alt=""><h5 id="传统方式的优缺点："><a href="#传统方式的优缺点：" class="headerlink" title="传统方式的优缺点："></a>传统方式的优缺点：</h5></li>
<li>1.优点是比较好理解，简单易操作。</li>
<li>2.缺点是违反了设计模式的ocp原则，即对扩展开放，对修改关闭。即但我们该类增加新的功能是，尽量不修改代码，或者尽可能少修改代码。</li>
<li>3.比如我们这时要增加一个Pizze的种类(Pepper披萨)，我们需要做如下修改：<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">pepperPizze</span> <span class="keyword">extends</span> <span class="title">pizze</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void prepare() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"给胡椒披萨准配原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>订单代码修改<br><img src="images%5C180000.png" alt="订单代码截图" title="订单代码截图"></li>
</ul>
<h5 id="改进代码思路分析"><a href="#改进代码思路分析" class="headerlink" title="改进代码思路分析"></a>改进代码思路分析</h5><ul>
<li>分析：<ul>
<li>修改代码可以接受，但是如果我们在其他的地方也有创建Pizze的代码，就意味着，也需要修改，而创建Pizza的代码，往往有多处</li>
</ul>
</li>
<li>思路：把创建Pizze的对象封装到一个类中，这样我们有新的Pizze种类是，只需要修改该类就可，其他创建到Pizze对象的代码就不需要修改了 —》简单工厂模式</li>
<li>改进类图：<br><img src="images%5Cpizzastore1.png" alt=""><h3 id="简单-静态-工厂模式-–概述："><a href="#简单-静态-工厂模式-–概述：" class="headerlink" title="简单(静态)工厂模式 –概述："></a>简单(静态)工厂模式 –概述：</h3></li>
<li>1.简单工厂模式是属于创建型模式，是工厂模式的一种。简单工厂模式是由决定创建出哪一一个工厂对象种产品类的实例。简单工厂模式是工厂模式家族中最简单使用的模式</li>
<li>2.简单工厂模式：定义了一个创建对象的类,由这个类来封装实例化对象的行为(代码)</li>
<li>3.在软件开发中，当我们会用到大量的创建某种，某类或者某批对象时，就会使用到工厂模式</li>
<li>订单类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizze</span> &#123;</span></span><br><span class="line">    <span class="comment">//定义一个简单工厂对象</span></span><br><span class="line">    SimpleFactory simpleFactory;</span><br><span class="line">    pizze pizze = null;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizze</span><span class="params">(SimpleFactory simpleFactory)</span></span>&#123;</span><br><span class="line">        setFactory(simpleFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFactory</span><span class="params">(SimpleFactory simpleFactory)</span></span>&#123;</span><br><span class="line">        <span class="keyword">String</span> orderType = <span class="string">""</span>;<span class="comment">//用户输入的</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.simpleFactory = simpleFactory;<span class="comment">//设置简单工厂对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = getType();</span><br><span class="line">            pizze = <span class="keyword">this</span>.simpleFactory.createPizze(orderType);</span><br><span class="line">            <span class="comment">//输出pizze</span></span><br><span class="line">            <span class="keyword">if</span>(pizze != null)&#123;<span class="comment">//订购成功</span></span><br><span class="line">                pizze.<span class="built_in">prepare</span>();</span><br><span class="line">                pizze.bake();</span><br><span class="line">                pizze.cut();</span><br><span class="line">                pizze.box();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"订购披萨失败！"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法，可以动态的使用，获取客户希望订购的披萨</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">String</span> <span class="title">getType</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"input pizza 种类："</span>);</span><br><span class="line">            <span class="keyword">String</span> str = strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>简单工厂类(定义一个可以实例化pizze对象的类，封装创建对象的代码<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimpleFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据orderType，返回对应的pizze对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> pizze <span class="title">createPizze</span>(<span class="params">String orderType</span>)</span> &#123;</span><br><span class="line">        pizze pizze = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"使用简单工厂模式"</span>);</span><br><span class="line">        <span class="keyword">if</span> (orderType.<span class="keyword">equals</span>(<span class="string">"greek"</span>)) &#123;</span><br><span class="line">            pizze = <span class="keyword">new</span> GreekPizze();</span><br><span class="line">            pizze.setName(<span class="string">"希腊"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.<span class="keyword">equals</span>(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">            pizze = <span class="keyword">new</span> CheesePizze();</span><br><span class="line">            pizze.setName(<span class="string">"奶昔"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.<span class="keyword">equals</span>(<span class="string">"pepper"</span>)) &#123;</span><br><span class="line">            pizze = <span class="keyword">new</span> pepperPizze();</span><br><span class="line">            pizze.setName(<span class="string">"胡椒"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizze;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//相当于一个客户端，发出订购</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//使用简单工厂模式</span></span><br><span class="line">        <span class="keyword">new</span> OrderPizze(<span class="keyword">new</span> SimpleFactory());</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"----退出程序-----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3></li>
<li>使用简单工厂模式，创建不同的简单工厂类，但是考虑到项目的规模以及软件的可维护性，可扩展性并不是特别好。</li>
<li>工厂方法模式基本概念：<ul>
<li>工厂方法模式：定义一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将对象的实例化推迟到子类。</li>
</ul>
</li>
<li>类图<br><img src="images%5Cfactorymethod.png" alt="工厂方法模式" title="工厂方法模式"></li>
<li>应用案例<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">paizeeStore</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// new BJorderPizze();</span></span><br><span class="line">        <span class="keyword">new</span> LDorderPizze();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LDorderPizze</span> <span class="title">extends</span> <span class="title">OrderPizze</span> &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function">pizze <span class="title">createPizze</span>(<span class="params">String orderType</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        pizze pizze1 =<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (orderType.<span class="keyword">equals</span>(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            pizze1 = <span class="keyword">new</span> LDCheesePizze();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.<span class="keyword">equals</span>(<span class="string">"pepper"</span>))&#123;</span><br><span class="line">            pizze1 = <span class="keyword">new</span> LDGreekPizze();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizze1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BJorderPizze</span> <span class="title">extends</span> <span class="title">OrderPizze</span> &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function">pizze <span class="title">createPizze</span>(<span class="params">String orderType</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        pizze pizze1 =<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (orderType.<span class="keyword">equals</span>(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            pizze1 = <span class="keyword">new</span> BJCheesePizze();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.<span class="keyword">equals</span>(<span class="string">"pepper"</span>))&#123;</span><br><span class="line">            pizze1 = <span class="keyword">new</span> BJGreekPizze();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizze1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">OrderPizze</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个抽象方法，createPizze，让各个工厂子类自己实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> pizze <span class="title">createPizze</span>(<span class="params">String orderType</span>)</span>;  <span class="comment">//抽象方法由工厂子类实现</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizze</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        pizze pizze = <span class="literal">null</span>;</span><br><span class="line">        String orderType;<span class="comment">//订购披萨的类型</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line">            orderType = getType();</span><br><span class="line">            pizze pizze1 = createPizze(orderType); <span class="comment">//抽象方法由工厂子类实现</span></span><br><span class="line">            <span class="comment">//输出pizze，的制作过程</span></span><br><span class="line">            pizze1.prepare();</span><br><span class="line">            pizze1.bake();</span><br><span class="line">            pizze1.cut();</span><br><span class="line">            pizze1.box();</span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法，可以动态的使用，获取客户希望订购的披萨</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.<span class="keyword">in</span>));</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"input pizza 种类："</span>);</span><br><span class="line">            String str = strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将Pizze类做成抽象的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">pizze</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(name+<span class="string">"baking"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(name+<span class="string">"cut"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(name+<span class="string">"boxing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">setName</span>(<span class="params">String name</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BJCheesePizze</span> <span class="title">extends</span> <span class="title">pizze</span> &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        setName(<span class="string">"北京。。。。。。"</span>);</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"北京，制作奶酪披萨 准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">其他<span class="number">3</span>个类与BJCheesePizze相似省略....</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><ul>
<li>基本接受</li>
<li>1.抽象工厂模式：定义了一个interface用于创建相关或有依赖关系的对象簇，而无需指明具体的类</li>
<li>2.抽象工厂模式可以将简单工厂模式和工厂方法模式进行整合。</li>
<li>3.从设计层面看，抽象工厂模式就是对简单工厂模式的改进(或者称为进一步的抽象)。</li>
<li>4.将工厂抽象成两层，AbsFactory(抽象工厂)和具体实现的工厂子类。程序员可以更具创建的对象类型使用对应的工厂子类。这样就将单个的简单工厂类变成工厂簇，更利用代码的维护和扩展。</li>
<li>类图<br><img src="images%5CabsFactory.png" alt="抽象工厂模式" title="抽象工厂模式"></li>
<li>应用案例<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将Pizze类做成抽象的</span></span><br><span class="line"><span class="keyword">public</span> abstract <span class="class"><span class="keyword">class</span> <span class="title">pizze</span> &#123;</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> abstract <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(name+<span class="string">"baking"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(name+<span class="string">"cut"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(name+<span class="string">"boxing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJCheesePizze</span> <span class="title">extends</span> <span class="title">pizze</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">"北京。。。。。。"</span>);</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"北京，制作奶酪披萨 准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">其他<span class="number">3</span>个类与BJCheesePizze相似省略....</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象工厂模式的抽象层 接口</span></span><br><span class="line"><span class="keyword">public</span> interface absFactory&lt;Pizze&gt; &#123;</span><br><span class="line">    <span class="comment">//让下面的工厂子类来 具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> pizze <span class="title">createPizze</span><span class="params">(<span class="keyword">String</span> orderType)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJFactory</span> <span class="title">implements</span> <span class="title">absFactory</span> &#123;</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> pizze <span class="title">createPizze</span><span class="params">(<span class="keyword">String</span> orderType)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"使用的是抽象工厂模式...."</span>);</span><br><span class="line">        pizze pizze = null;</span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            pizze = <span class="keyword">new</span> BJCheesePizze();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(orderType.equals(<span class="string">"geek"</span>))&#123;</span><br><span class="line">            pizze = <span class="keyword">new</span> BJGreekPizze();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizze;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">LDFactory于BJFactory同理此处省略......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//OrderPizze聚合 absFactory工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizze</span> &#123;</span></span><br><span class="line">    absFactory Factory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizze</span><span class="params">(absFactory factory)</span> </span>&#123;</span><br><span class="line">       setFactory(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setFactory</span><span class="params">(absFactory Factory)</span></span>&#123;</span><br><span class="line">        pizze pizze = null;</span><br><span class="line">        <span class="keyword">String</span> orderType=<span class="string">""</span>;<span class="comment">//用户输入</span></span><br><span class="line">        <span class="keyword">this</span>.Factory = Factory;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            orderType = getType();</span><br><span class="line">            <span class="comment">//Factory可能是BJ的工厂子类也可能是LD</span></span><br><span class="line">            pizze = Factory.createPizze(orderType);</span><br><span class="line">            <span class="keyword">if</span>(pizze != null)&#123;<span class="comment">//订购成功</span></span><br><span class="line">                pizze.<span class="built_in">prepare</span>();</span><br><span class="line">                pizze.bake();</span><br><span class="line">                pizze.cut();</span><br><span class="line">                pizze.box();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"订购失败！"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法，可以动态的使用，获取客户希望订购的披萨</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">String</span> <span class="title">getType</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"input pizza 种类："</span>);</span><br><span class="line">            <span class="keyword">String</span> str = strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">pizzeStore</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> OrderPizze(<span class="keyword">new</span> BJFactory());</span><br><span class="line">        <span class="comment">//new OrderPizze(new LDFactory());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="工厂模式在JDK-Calendar-日历类-应用源码分析"><a href="#工厂模式在JDK-Calendar-日历类-应用源码分析" class="headerlink" title="工厂模式在JDK-Calendar(日历类)应用源码分析"></a>工厂模式在JDK-Calendar(日历类)应用源码分析</h3></li>
<li>源码 java.util包下Calendar使用简单工厂模式<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Calendar getInstance(TimeZone zone,</span><br><span class="line">                                     Locale aLocale)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">return</span> createCalendar(zone, aLocale);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Calendar createCalendar(TimeZone zone,</span><br><span class="line">                                         Locale aLocale)</span><br><span class="line">  &#123;</span><br><span class="line">      CalendarProvider provider =</span><br><span class="line">          LocaleProviderAdapter.getAdapter(CalendarProvider.class, aLocale)</span><br><span class="line">                               .getCalendarProvider();</span><br><span class="line">      <span class="keyword">if</span> (provider != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> provider.getInstance(zone, aLocale);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">              <span class="comment">// fall back to the default instantiation</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Calendar cal = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (aLocale.hasExtensions()) &#123;</span><br><span class="line">          <span class="keyword">String</span> caltype = aLocale.getUnicodeLocaleType(<span class="string">"ca"</span>);</span><br><span class="line">          <span class="keyword">if</span> (caltype != <span class="literal">null</span>) &#123;</span><br><span class="line">              <span class="keyword">switch</span> (caltype) &#123;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">"buddhist"</span>:<span class="type"></span></span><br><span class="line"><span class="type">              cal </span>= <span class="keyword">new</span> <span class="type">BuddhistCalendar</span>(zone, aLocale);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">"japanese"</span>:<span class="type"></span></span><br><span class="line"><span class="type">                  cal </span>= <span class="keyword">new</span> <span class="type">JapaneseImperialCalendar</span>(zone, aLocale);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="keyword">case</span> <span class="string">"gregory"</span>:<span class="type"></span></span><br><span class="line"><span class="type">                  cal </span>= <span class="keyword">new</span> <span class="type">GregorianCalendar</span>(zone, aLocale);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (cal == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// If no known calendar type is explicitly specified,</span></span><br><span class="line">          <span class="comment">// perform the traditional way to create a Calendar:</span></span><br><span class="line">          <span class="comment">// create a BuddhistCalendar for th_TH locale,</span></span><br><span class="line">          <span class="comment">// a JapaneseImperialCalendar for ja_JP_JP locale, or</span></span><br><span class="line">          <span class="comment">// a GregorianCalendar for any other locales.</span></span><br><span class="line">          <span class="comment">// <span class="doctag">NOTE:</span> The language, country and variant strings are interned.</span></span><br><span class="line">          <span class="keyword">if</span> (aLocale.getLanguage() == <span class="string">"th"</span> &amp;&amp; aLocale.getCountry() == <span class="string">"TH"</span>) &#123;</span><br><span class="line">              cal = <span class="keyword">new</span> <span class="type">BuddhistCalendar</span>(zone, aLocale);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aLocale.getVariant() == <span class="string">"JP"</span> &amp;&amp; aLocale.getLanguage() == <span class="string">"ja"</span></span><br><span class="line">                     &amp;&amp; aLocale.getCountry() == <span class="string">"JP"</span>) &#123;</span><br><span class="line">              cal = <span class="keyword">new</span> <span class="type">JapaneseImperialCalendar</span>(zone, aLocale);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              cal = <span class="keyword">new</span> <span class="type">GregorianCalendar</span>(zone, aLocale);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> cal;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="工厂模式小结："><a href="#工厂模式小结：" class="headerlink" title="工厂模式小结："></a>工厂模式小结：</h3></li>
<li>工厂模式意义：<br>将实例化对象的代码提取出来，放到一个类中统一管理和维护，达到和主项目的依赖关系的解耦，从而提高项目的扩展和维护性。</li>
<li>三种工厂模式 简单(静态)工厂模式，工厂方法模式，抽象工厂模式</li>
<li>设计模式的依赖原则：<ol>
<li>创建对象实例时，不要直接new类，而是把这个new的动作放在一个工厂的方法中，并返回。有的书上说，变量不要直接持有具体类的引用。</li>
<li>不要让类继承具体的类，而是继承抽象的类或者是实现interface(接口)</li>
<li>不要覆盖基类中已经实现的方法。</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+原型模式</title>
    <url>/2020/01/26/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="原型模式-Prototype"><a href="#原型模式-Prototype" class="headerlink" title="原型模式(Prototype)"></a>原型模式(Prototype)</h3><ul>
<li><p>传统方法</p>
</li>
<li><p>类图<br><img src="images%5Csheep.png" alt="原型模式传统方法" title="原型模式传统方法"></p>
</li>
<li><p>应用代码</p>
</li>
<li><p>sheep实体类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">sheep</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">sheep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">sheep</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">int</span> age, <span class="keyword">String</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(<span class="keyword">String</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sheep&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", color='"</span> + color + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Client &#123;</span><br><span class="line">    public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">        <span class="comment">//传统方法</span></span><br><span class="line">        sheep sheep = <span class="keyword">new</span> sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"白色"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sheep sheep1 = <span class="keyword">new</span> sheep(sheep.get<span class="constructor">Name()</span>, sheep.get<span class="constructor">Age()</span>, sheep.get<span class="constructor">Color()</span>);</span><br><span class="line">        sheep sheep2 = <span class="keyword">new</span> sheep(sheep.get<span class="constructor">Name()</span>, sheep.get<span class="constructor">Age()</span>, sheep.get<span class="constructor">Color()</span>);</span><br><span class="line">        sheep sheep3 = <span class="keyword">new</span> sheep(sheep.get<span class="constructor">Name()</span>, sheep.get<span class="constructor">Age()</span>, sheep.get<span class="constructor">Color()</span>);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(sheep);</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(sheep1+<span class="string">"++++++"</span>+sheep2+<span class="string">"+++++++"</span>+sheep3+<span class="string">"++++++++"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>传统方法的优缺点：</p>
</li>
<li><p>1.优点是比较好理解,简单易操作。</p>
</li>
<li><p>2.在创建新的对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂时，效率较低</p>
</li>
<li><p>3.总是需要重新初始化对象，而不是动态地获得对象运行时的状态，不够灵活</p>
</li>
<li><p>改进思路：<br>Java中Object类是所有类的根类，Object类提供了一个clone()方法，该方法可以将一个Java对象复制一份，但是需要实现clone的Java类必须要实现一个接口Cloneable，该接口表示该类能够复制且具有复制的能力 ==&gt;原型模式</p>
<h4 id="原型模式基本介绍"><a href="#原型模式基本介绍" class="headerlink" title="原型模式基本介绍"></a>原型模式基本介绍</h4></li>
<li><p>1.原型模式(Prototype模式)是指：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
</li>
<li><p>2.原型模式是一种创建性设计模式，允许一个对象创建另一个可定制的对象，无需知道如何创建的细节</p>
</li>
<li><p>3.工作原理是：通过将一个原型对象传给那个要发动创建的对象通过请求原型对象拷贝他们自己来实施创建，即 对象.clone()</p>
</li>
<li><p>原型类</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pattern.pyototype.update;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建原型类实现Cloneable</span></span><br><span class="line"><span class="keyword">public</span> class sheep  implements Cloneable&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> <span class="built_in">color</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> sheep() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> sheep(<span class="keyword">String</span> name, <span class="built_in">int</span> age, <span class="keyword">String</span> <span class="built_in">color</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">color</span> = <span class="built_in">color</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setName(<span class="keyword">String</span> name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> getAge() &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setAge(<span class="built_in">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getColor() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">color</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> setColor(<span class="keyword">String</span> <span class="built_in">color</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">color</span> = <span class="built_in">color</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sheep&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", color='"</span> + <span class="built_in">color</span> + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//克隆该实例，使用默认的clone方法来完成</span></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">Object</span> clone()&#123;</span><br><span class="line">        sheep sheep = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sheep = (sheep) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sheep;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传统方法</span></span><br><span class="line">        sheep sheep = <span class="keyword">new</span> sheep(<span class="string">"tom"</span>, <span class="number">1</span>, <span class="string">"白色"</span>);</span><br><span class="line">        sheep sheep1 = (sheep) sheep.clone();<span class="comment">//克隆</span></span><br><span class="line">        sheep sheep2 = (sheep) sheep.clone();</span><br><span class="line">        sheep sheep4 = (sheep) sheep.clone();</span><br><span class="line">        sheep sheep3 = (sheep) sheep.clone();</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(sheep);</span><br><span class="line">        System.out.<span class="built_in">println</span>(sheep1+<span class="string">"+++++"</span>+sheep2+<span class="string">"+++++++"</span>+sheep3+<span class="string">"++++++"</span>+sheep4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用原型模式改进程序，让程序具有更高的效率和扩展型<br>比如添加一个默认属性private String address=”新疆羊”; sheep = (sheep) super.clone(); 重写克隆方法的时候会克隆其类的所有属性封装到Sheep对象中；无需修给客户端，同样可以打印。所以具有更高的效率和扩展型</p>
<h3 id="原型模式在Spring框架中的应用源码分析"><a href="#原型模式在Spring框架中的应用源码分析" class="headerlink" title="原型模式在Spring框架中的应用源码分析"></a>原型模式在Spring框架中的应用源码分析</h3></li>
<li><p>Spring中源码原型bean的创建，就是原型模式的应用。</p>
</li>
<li><p>代码分析 AbstractBeanFactory类中doGetBean()的createBean()方法中</p>
<h3 id="浅拷贝介绍："><a href="#浅拷贝介绍：" class="headerlink" title="浅拷贝介绍："></a>浅拷贝介绍：</h3></li>
<li><p>对于数据类型是基本数据的成员变量，浅拷贝会直接进行值传递，也就是将该属性的值复制一份给性的对象。</p>
</li>
<li><p>对于数据类型是引用数据类型的成员变量，比如说成员变量的某个数组，某个类的对象等，那么浅拷贝会进行应用传递，也就是只是将该成员变量的引用值(内村地址)复制一份给新的对象。应为实际上两个对象的该成员变量都指向同一个实例，在这种情况下，在一个对象中修改该成员变量会影响到另一个对象的该成员变量值。</p>
</li>
<li><p>上面案例就是浅拷贝</p>
</li>
<li><p>浅拷贝是使用默认的clone()方法来实现的 sheep = (sheep) super.clone();</p>
<h3 id="深拷贝介绍："><a href="#深拷贝介绍：" class="headerlink" title="深拷贝介绍："></a>深拷贝介绍：</h3></li>
<li><p>复制对象的所有基本数据类型的成员变量值</p>
</li>
<li><p>为所有引用数据类型的成员变量中申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象，也就是说，对象进行深考贝要对整个对象进行拷贝。</p>
</li>
<li><p>深拷贝实现方式1：重写clone方法来实现深拷贝</p>
</li>
<li><p>深拷贝实现方式2：通过对象序列化实现深拷贝</p>
</li>
<li><p>引用案例</p>
</li>
<li><p>实体类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现两个接口 Serializable(序列化)，Cloneable(克隆)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepCloneableTarget</span> <span class="keyword">implements</span> <span class="title">Serializable</span>,<span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String clonename;</span><br><span class="line">    <span class="keyword">private</span> String cloneClass;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeepCloneableTarget</span><span class="params">(String clonename, String cloneClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clonename = clonename;</span><br><span class="line">        <span class="keyword">this</span>.cloneClass = cloneClass;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为给类的属性，都是String，因此我们这里使用默认的clone完成即可</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function">Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepPrototype</span>  <span class="keyword">implements</span> <span class="title">Serializable</span>,<span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> DeepCloneableTarget  deepCloneableTarget;  <span class="comment">//引用类型</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeepPrototype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//完成深拷贝</span></span><br><span class="line">    <span class="comment">//方式1：使用克隆的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object deep = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//这里完成对基本数据类型和String的克隆</span></span><br><span class="line">        deep = <span class="keyword">super</span>.clone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理引用数据类型</span></span><br><span class="line">        DeepPrototype deepPrototype = (DeepPrototype)deep;</span><br><span class="line">        deepPrototype.deepCloneableTarget = (DeepCloneableTarget) deepCloneableTarget.clone();</span><br><span class="line">        <span class="keyword">return</span> deepPrototype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式2：通过对象的序列化（推荐）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建流对象</span></span><br><span class="line">        <span class="comment">//输出流</span></span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入流</span></span><br><span class="line">        ByteArrayInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//序列化操作</span></span><br><span class="line">            bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">            oos.writeObject(<span class="keyword">this</span>); <span class="comment">//当前这个对象以对象流的方式输出及序列化</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//反序列化</span></span><br><span class="line">            bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());<span class="comment">//把输出的对象 读进来 相当于 == 克隆</span></span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line">            DeepPrototype copeobj = (DeepPrototype) ois.readObject();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> copeobj;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bos.close();</span><br><span class="line">                oos.close();</span><br><span class="line">                bis.close();</span><br><span class="line">                ois.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.out.println(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试类</p>
<pre><code>public class Client {
  public static void main(String[] args) throws Exception {
      DeepPrototype deepPrototype = new DeepPrototype();
      deepPrototype.name = &quot;阿尔萨斯&quot;;
      deepPrototype.deepCloneableTarget = new DeepCloneableTarget(&quot;沐沐&quot;,&quot;DeepPrototype&quot;);

      //方式一：进行深拷贝 --重写clone方法

/*           DeepPrototype  d = (DeepPrototype) deepPrototype.clone();

</code></pre></li>
</ul>
<pre><code>System.out.println(&quot;deeprototype.name=&quot;+deepPrototype.name +&quot;deepPrototype.deepCloneableTarget=&quot;+deepPrototype.deepCloneableTarget.hashCode());

System.out.println(&quot;d.name=&quot;+deepPrototype.name +&quot;d.deepCloneableTarget=&quot;+ d.deepCloneableTarget.hashCode());*/</code></pre><p>//        方式二：进行深拷贝 序列化<br>        DeepPrototype  d = (DeepPrototype) deepPrototype.deepClone();</p>
<pre><code>    System.out.println(&quot;deeprototype.name=&quot;+deepPrototype.name +&quot;deepPrototype.deepCloneableTarget=&quot;+deepPrototype.deepCloneableTarget.hashCode());

    System.out.println(&quot;d.name=&quot;+deepPrototype.name +&quot;d.deepCloneableTarget=&quot;+ d.deepCloneableTarget.hashCode());
}</code></pre><p>}</p>
<p>``` </p>
<h4 id="原型模式总结："><a href="#原型模式总结：" class="headerlink" title="原型模式总结："></a>原型模式总结：</h4><ul>
<li>1.创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率。</li>
<li><ol start="2">
<li>不用重新初始化对象，而是动态的获得对象运行时的状态</li>
</ol>
</li>
<li>3.如果原始对象发生变化(增加或者减少属性)，其他克隆对象的也会发生相应的变化，无需修改代码</li>
<li>4.在实现深克隆的时候可能需要比较复杂的代码</li>
<li>5.缺点：需要为每一个类配置一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源码，违背了ocp(开闭原则)原则，注意。</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot微服务框架+缓存(六)</title>
    <url>/2020/01/26/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-%E7%BC%93%E5%AD%98-%E5%85%AD/</url>
    <content><![CDATA[<h3 id="JSR-107"><a href="#JSR-107" class="headerlink" title="JSR-107"></a>JSR-107</h3><h4 id="Java-Cacheing定义了5个核心接口，分别是CachingProvider，CacheManager，Cache，Entry和Expiry。"><a href="#Java-Cacheing定义了5个核心接口，分别是CachingProvider，CacheManager，Cache，Entry和Expiry。" class="headerlink" title="Java Cacheing定义了5个核心接口，分别是CachingProvider，CacheManager，Cache，Entry和Expiry。"></a>Java Cacheing定义了5个核心接口，分别是CachingProvider，CacheManager，Cache，Entry和Expiry。</h4><ul>
<li><p>CacheProvider(缓存提供者) ：定义了创建，配置，获取，管理，和控制多个CacheManager。一个应用可以在运行期访问多个CachingProvider。</p>
</li>
<li><p>CacheManager(缓存管理器) ：定义创建，配置，获取，管理，和控制多个唯一命名的Cache，这些Cache存于CacheManager的上下文中。一个CacheManager仅被一个CachingProvider所拥有。</p>
</li>
<li><p>Cache是一个类似Map的数据结构并临时存储以Key为索引的值。一个Cache仅被一个CacheManager所拥有</p>
</li>
<li><p>Entry是一个存储在Cache中的Key-value对。</p>
</li>
<li><p>Expiry每一个存储在Cache中的条目有一个定义的有效期。一旦超过这个时间，条目为过期的状态。一但过期，条目将不可访问，更新和删除。缓存有效期可以通过ExpriyPolicy设置</p>
<h3 id="Spring缓存抽象"><a href="#Spring缓存抽象" class="headerlink" title="Spring缓存抽象"></a>Spring缓存抽象</h3></li>
<li><p>org.springframeork.cache.Cache和org.springframework.cache.CacheManager接口来统一不同的缓存技术并且支持使用JCache(JSR-107)注解简化我们的开发；</p>
</li>
<li><p>Cache接口为缓存的组件规范定义，包含缓存的各种操作集合</p>
</li>
<li><p>Cache接口下Spring提供了各种xxxCache的实现;如RedisCache，EhCacheCache，ConcurrentMapCache等</p>
</li>
<li><p>每次调用需要缓存功能的方法时，spring会检查指定参数的指定方法是否已经被调用过，如果有就直接从缓存中获取方法调用后后的结果，如果没有就调用方法并缓存结果后返回给客户。下次调用直接从缓存中获取。</p>
</li>
<li><p>使用spring缓存抽象时我们需要关注以下两点</p>
<ul>
<li>1.确定方法需要被缓存以及他们的缓存策略</li>
<li>2.从缓存中读取之前缓存存储的数据</li>
</ul>
</li>
<li><p>几个重要概念和缓存注解</p>
<p>  名称|概念<br>  —|:–:|—:<br>  cache|缓存接口，定义缓存操作。实现有：RedisCache，EhCacheCache，ConcurrentMapCache等<br>  CacheManager|缓存管理器，管理各种缓存(Cache)组件<br>  @Cacheable|主要针对方法配置，能够根据方法的请求参数对其结过进行缓存<br>  @CachePut|保证方法被调用，有希望结果被缓存<br>  @CacheEvict|清空缓存<br>  @EnableCaching|开启基于注解的缓存<br>  @keyGenerator|缓存数据时Key的生成策略<br>  serialize|缓存数据时value序列化策略</p>
</li>
</ul>
<h3 id="整合Redis"><a href="#整合Redis" class="headerlink" title="整合Redis"></a>整合Redis</h3><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul>
<li><p>1.</p>
<ul>
<li>@Cacheable 将方法的运行结果进行缓存；以后再要相同的数据，直接从缓存中获取，不用调用方法；</li>
</ul>
</li>
<li><p>@CacheManager管理多个Cache组件的，对缓存的真正CRUD操作在Cache组件中，每一个缓存组件有自己唯一名字</p>
</li>
<li><p>@Cacheable几个属性：</p>
</li>
<li><p>cacheNames/value；指定缓存组件名字</p>
<ul>
<li><p>key：缓存数据使用的的key；可以用它来指定。默认使用方法参数的的值  1-方法的缓存值</p>
<ul>
<li>编写Spel表达式 #id;参数id的值 #a0，#p0，#root.args[0]</li>
<li>Cache SpEL available metadata</li>
</ul>
<table>
<thead>
<tr>
<th>名字</th>
<th align="center">位置</th>
<th align="right">描述</th>
<th align="right">示例</th>
</tr>
</thead>
<tbody><tr>
<td>methodName</td>
<td align="center">root object</td>
<td align="right">当前被调用的方法名</td>
<td align="right">#root. methodName</td>
</tr>
<tr>
<td>argumentname</td>
<td align="center">evaluation context</td>
<td align="right">方法参数的名字.可以直接 #参数名，也可以使用 #p0或#a0 的形式，0表示参数的索引</td>
<td align="right">#iban，#a0，#p0</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>案例</p>
</li>
<li><p>启动类</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 搭建基本环境</span></span><br><span class="line"><span class="comment">* 1.导入数据库文件，创建出department和emploee表</span></span><br><span class="line"><span class="comment">* 2.创建JavaBean封装数据</span></span><br><span class="line"><span class="comment">* 3.整合Mybatis操作数据库</span></span><br><span class="line"><span class="comment">*    a.设置数据源信息</span></span><br><span class="line"><span class="comment">*    b.使用注解版的MyBatis</span></span><br><span class="line"><span class="comment">*       1.@MapperScan指定需要扫描的mapper接口所在的包</span></span><br><span class="line"><span class="comment">* 4.快速体验缓存</span></span><br><span class="line"><span class="comment">*   步骤：</span></span><br><span class="line"><span class="comment">*      1.开启基于注解的缓存 @EnableCaching</span></span><br><span class="line"><span class="comment">*      2.标注缓存注解即可</span></span><br><span class="line"><span class="comment">*         @Cacheable，@CacheEvict，@CachePut</span></span><br><span class="line"><span class="comment">* 	   3.</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="variable">@MapperScan</span>(<span class="string">"com.zhao.democache.mapper"</span>)</span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line"><span class="variable">@EnableCaching</span></span><br><span class="line">public class DemoCacheApplication &#123;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">        <span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(DemoCacheApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实体类</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Integer id;</span><br><span class="line">	<span class="keyword">private</span> String lastName;</span><br><span class="line">	<span class="keyword">private</span> String email;</span><br><span class="line">	<span class="keyword">private</span> Integer gender; <span class="comment">//性别 1男  0女</span></span><br><span class="line">	<span class="keyword">private</span> Integer dId;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Employee() &#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Employee(Integer id, String lastName, String email, Integer gender, Integer dId) &#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.id = id;</span><br><span class="line">		<span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">		<span class="keyword">this</span>.email = email;</span><br><span class="line">		<span class="keyword">this</span>.gender = gender;</span><br><span class="line">		<span class="keyword">this</span>.dId = dId;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//getter,setter,toString方法......略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>整合Mybatis操作数据库<br>*设置数据源信息</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置数据源信息</span></span><br><span class="line"><span class="attr">spring.datasource.url</span> = jdbc:mysql://localhost:<span class="number">3306</span>/spring_cache</span><br><span class="line"><span class="attr">spring.datasource.username</span>=root</span><br><span class="line"><span class="attr">spring.datasource.password</span>=zhao1314520</span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启驼峰命名法</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#打印日志</span></span><br><span class="line"><span class="attr">logging.level.com.zhao.democache.mapper</span>=debug</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意配置数据源时，datasource.username</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用注解版的MyBatis(和EmployeeMapper.xml一样只是实现方式不同)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from employee where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update employee set lastName = #&#123;lastName&#125;,email = #&#123;email&#125;,gender = #&#123;gender&#125;,d_id=#&#123;dId&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from employee where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEmp</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into employee(lastName,email,gender,d_id)values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;dId&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>业务类(重点Cache)</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public <span class="keyword">class</span> EmployeeService &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="constructor">Autowired(<span class="params">required</span> = <span class="params">false</span>)</span></span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  @Cacheable 将方法的运行结果进行缓存；以后再要相同的数据，直接从缓存中获取，不用调用方法；</span></span><br><span class="line"><span class="comment">    *  @CacheManager管理多个Cache组件的，对缓存的真正CRUD操作在Cache组件中，每一个缓存组件有自己唯一名字</span></span><br><span class="line"><span class="comment">    *  @Cacheable几个属性：</span></span><br><span class="line"><span class="comment">    *  cacheNames/value；指定缓存组件名字；将方法的返回值结果放在那个缓存中，是数组的方式</span></span><br><span class="line"><span class="comment">    *  key：缓存数据使用的的key；可以用它来指定。默认使用方法参数的的值  1-方法的缓存值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    *   编写Spel表达式 #id;参数id的值 #a0，#p0，#root.args[0]</span></span><br><span class="line"><span class="comment">    *  keyGenerator:key的生成器；可以自己指定key的生成器组件id</span></span><br><span class="line"><span class="comment">    *  注意：key和keygenerator之间二选一使用</span></span><br><span class="line"><span class="comment">    *  CacheManager:指定缓存管理器或者指定缓存解析器CacheResolver指定获取解析器</span></span><br><span class="line"><span class="comment">    *  condition：自己定符合的条件下才缓存 condition = "#id&gt;0"</span></span><br><span class="line"><span class="comment">    *  unless:否定缓存;当unless指定条件为true，方法的返回值就不会被缓存； unless="#result == null"</span></span><br><span class="line"><span class="comment">    *  sysn:是否使用异步模式</span></span><br><span class="line"><span class="comment">    *  运行时机：</span></span><br><span class="line"><span class="comment">    *     1.先检查有没有缓存，没有缓存在执行目标方法</span></span><br><span class="line"><span class="comment">    *     2.将目标方法的结果缓存起来</span></span><br><span class="line"><span class="comment">    *  */</span></span><br><span class="line">    @<span class="constructor">Cacheable(<span class="params">cacheNames</span> = <span class="string">"emp"</span>,<span class="params">key</span> = <span class="string">"#id"</span>)</span></span><br><span class="line">    public Employee get<span class="constructor">EmpById(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"查询"</span>+id+<span class="string">"员工"</span>);</span><br><span class="line">        Employee emp = employeeMapper.get<span class="constructor">EmpById(<span class="params">id</span>)</span>;</span><br><span class="line">        return emp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>控制类</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"emp/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> Employee getEmployee(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> Integer id)&#123;</span><br><span class="line">        Employee emp = employeeService.getEmpById(id);</span><br><span class="line">        <span class="keyword">return</span> emp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="缓存原理"><a href="#缓存原理" class="headerlink" title="缓存原理"></a>缓存原理</h4><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">/<span class="strong">*</span></span><br><span class="line"><span class="strong">*</span> 原理</span><br><span class="line"><span class="bullet">* </span>1.自动配置类 CacheAutoConfiguration</span><br><span class="line"><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span> 2.缓存配置类</span><br><span class="line"><span class="bullet">* </span>org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration</span><br><span class="line"><span class="bullet">* </span>org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration</span><br><span class="line"><span class="bullet">* </span>org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration</span><br><span class="line"><span class="bullet">* </span>org.springframework.boot.autoconfigure.cache.HazelcastCacheConfiguration</span><br><span class="line"><span class="bullet">* </span>org.springframework.boot.autoconfigure.cache.InfinispanCacheConfiguration</span><br><span class="line"><span class="bullet">* </span>org.springframework.boot.autoconfigure.cache.CouchbaseCacheConfiguration</span><br><span class="line"><span class="bullet">* </span>org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration</span><br><span class="line"><span class="bullet">* </span>org.springframework.boot.autoconfigure.cache.CaffeineCacheConfiguration</span><br><span class="line"><span class="bullet">* </span>org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration</span><br><span class="line"><span class="bullet">* </span>org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration</span><br><span class="line"><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span> 3.那个配置类默认生效</span><br><span class="line"><span class="bullet">* </span>SimpleCacheConfiguration</span><br><span class="line"><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span> 4.该容器中注册了一个CacheManager(缓存管理器) ；  ConcurrentMapCacheManager</span><br><span class="line"><span class="bullet">* </span>5.可以获取和创建 ConcurrentMapCacheManager类型的缓存组件，他的作用就是将数据保存ConcurrentMap；</span><br><span class="line"><span class="bullet">* </span>运行流程：</span><br><span class="line"><span class="bullet">*  </span>1.方法运行之前，先去查询Cache(缓存组件)，按照cacheName指定的名称获取；</span><br><span class="line"><span class="bullet">* </span>即CacheManager获取相应的缓存；第一次获取缓存如果没有cache组件会自动创建出来</span><br><span class="line"><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>   2.去Cache中查找缓存的内容使用一个key，默认方法的参数</span><br><span class="line"><span class="bullet">*   </span>key是按照某种策略生成的，默认是使用keGenerator生成的 默认使用SimpleKeyGenerator生成key</span><br><span class="line"><span class="bullet">* 		</span>SimpleKeyGenerator生成key的策略：</span><br><span class="line"><span class="bullet">* 			</span>如果没有参数：key = new SimpleKey();</span><br><span class="line"><span class="bullet">*   		</span>如果有一个参数，key = 参数值</span><br><span class="line"><span class="bullet">* 			</span>如果有多个参数，key = new SimpleKey(params)</span><br><span class="line"><span class="bullet">*   </span>3.如果没有查到缓存就i调用目标方法</span><br><span class="line"><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span>   4.将目标方法返回的结果，放到缓存中</span><br><span class="line"><span class="bullet">*   </span>@Cacheable标注的方法执行之前先来检查缓存中有没有这个数据，默认参数的值做为key去查询缓存如果没有就运行方法并将结果放入缓存；</span><br><span class="line"><span class="bullet">*	</span></span><br><span class="line"><span class="bullet">* 	</span>核心：</span><br><span class="line"><span class="bullet">*     </span>1.使用CacheManager【ConcurrentMapCacheManager】按照名字得到Cache【ConcurrentMapCache】组件</span><br><span class="line"><span class="bullet">* 	  </span>2.key使用KeyGenerator生成的，默认是SimpleKeyGenerator</span><br><span class="line"><span class="strong">*</span></span><br><span class="line"><span class="strong">*</span> <span class="strong">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义缓存key的生成策略"><a href="#自定义缓存key的生成策略" class="headerlink" title="自定义缓存key的生成策略"></a>自定义缓存key的生成策略</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义key的生成策略</span></span><br><span class="line">@Configuration</span><br><span class="line">public <span class="keyword">class</span> MyCacheConfig &#123;</span><br><span class="line"></span><br><span class="line">   @<span class="constructor">Bean(<span class="string">"myKeyGenerator"</span>)</span></span><br><span class="line">   public KeyGenerator key<span class="constructor">Generator()</span>&#123;</span><br><span class="line"></span><br><span class="line">        return <span class="keyword">new</span> <span class="constructor">KeyGenerator()</span>&#123;</span><br><span class="line">            @Override <span class="comment">//生成key</span></span><br><span class="line">            public Object generate(Object o, Method <span class="keyword">method</span>, Object... objects) &#123;</span><br><span class="line">                return <span class="keyword">method</span>.get<span class="constructor">Name()</span>+<span class="string">"["</span>+ <span class="module-access"><span class="module"><span class="identifier">Arrays</span>.</span></span><span class="keyword">as</span><span class="constructor">List(<span class="params">objects</span>)</span>.<span class="keyword">to</span><span class="constructor">String()</span>+<span class="string">"]"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service层 </span><br><span class="line">@<span class="constructor">Cacheable(<span class="params">value</span> =&#123;<span class="string">"emp"</span>&#125;,<span class="params">keyGenerator</span>=<span class="string">"myKeyGenerator"</span>)</span></span><br></pre></td></tr></table></figure>
<h5 id="CachePut，即调用方法，有更新缓存数据"><a href="#CachePut，即调用方法，有更新缓存数据" class="headerlink" title="@CachePut，即调用方法，有更新缓存数据"></a>@CachePut，即调用方法，有更新缓存数据</h5></li>
<li><p>修改了数据库的某个数据，同时更新缓存</p>
</li>
<li><p>应用案例</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"><span class="bullet">    * </span>@CachePut；即调用方法有缓存数据</span><br><span class="line"><span class="bullet">    * </span>常见 ： 修改了数据库的某个数据。同时更新缓存</span><br><span class="line"><span class="bullet">    * </span>运行时机：</span><br><span class="line"><span class="bullet">    *       </span>1.先调用目标方法</span><br><span class="line"><span class="bullet">    *       </span>2.将目标方法的结果缓存起来</span><br><span class="line"><span class="bullet">    * </span>测试步骤：</span><br><span class="line"><span class="bullet">    *  </span>1.查询1号员工，查询的结果会放到缓存中</span><br><span class="line"><span class="bullet">    *      </span>key:1 value:;astname：zhangdan</span><br><span class="line"><span class="bullet">    *  </span>2.以后查询还是之前的结果</span><br><span class="line"><span class="code">    *</span></span><br><span class="line"><span class="bullet">    *  </span>3.更新1号员工【lastName：zhangdan，gender：0】</span><br><span class="line"><span class="bullet">    *       </span>将方法的返回值而放到缓存中了</span><br><span class="line"><span class="bullet">    *       </span>key;传入的employee对象  值就是返回的employee对象</span><br><span class="line"><span class="bullet">    *  </span>4.查询1号员工</span><br><span class="line"><span class="bullet">    *       </span>应该是更新后的员工</span><br><span class="line"><span class="bullet">    *       </span>key ="#employee.id" == key ="#result.id" 使用传入的参数的员工ID  此处增删改查要同一个缓存名</span><br><span class="line"><span class="bullet">    *       </span>注意：@Cacheable 不能用 key ="#result.id"返回值的形式</span><br><span class="line"><span class="bullet">    *       </span>为什么是没有更新前的？？？【1号员工没有在缓存中更新，也就是更新了用的名字不一样】</span><br><span class="line"><span class="code">    *</span></span><br><span class="line"><span class="bullet">    * </span>*/</span><br><span class="line"><span class="code">    @CachePut(value = "emp",key ="#employee.id")</span></span><br><span class="line"><span class="code">    public Employee updateEmp(Employee employee)&#123;</span></span><br><span class="line"><span class="code">        System.out.println("updateEmp:"+employee);</span></span><br><span class="line"><span class="code">        employeeMapper.updateEmp(employee);</span></span><br><span class="line"><span class="code">        return employee;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="CacheEvict-缓存清除"><a href="#CacheEvict-缓存清除" class="headerlink" title="@CacheEvict:缓存清除"></a>@CacheEvict:缓存清除</h5></li>
<li><p>应用案例</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   * @CacheEvict:清除缓存</span></span><br><span class="line"><span class="comment">   * key:指定清除的数据</span></span><br><span class="line"><span class="comment">   * allEntries = true 指定清除的缓存中的所有数据 默认false</span></span><br><span class="line"><span class="comment">   * beforeInvocation = false;缓存的清除是否在方法之前执行 </span></span><br><span class="line"><span class="comment">   *    默认false 在方法执行之后执行的</span></span><br><span class="line"><span class="comment">   * */</span></span><br><span class="line">   @<span class="constructor">CacheEvict(<span class="params">value</span> = <span class="string">"emp"</span>,<span class="params">key</span> = <span class="string">"#id"</span>)</span></span><br><span class="line">   public void delete<span class="constructor">Emp(Integer <span class="params">id</span>)</span>&#123;</span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"deleteEmp:"</span>+id);</span><br><span class="line">       employeeMapper.delete<span class="constructor">Emp(<span class="params">id</span>)</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h5 id="Caching-是以上三个的组合注解-Cacheable-CachePut-CacheEvict"><a href="#Caching-是以上三个的组合注解-Cacheable-CachePut-CacheEvict" class="headerlink" title="@Caching 是以上三个的组合注解 @Cacheable  @CachePut  @CacheEvict"></a>@Caching 是以上三个的组合注解 @Cacheable  @CachePut  @CacheEvict</h5></li>
<li><p>组合注解：用来定义复杂的缓存规则</p>
</li>
<li><p>应用案例</p>
<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* <span class="meta">@Caching</span> 是以上三个的组合注解 <span class="meta">@Cacheable</span>  <span class="meta">@CachePut</span>  <span class="meta">@CacheEvict</span></span><br><span class="line">* */</span><br><span class="line"><span class="meta">@Caching</span>(</span><br><span class="line">        cacheable = &#123;</span><br><span class="line">                <span class="meta">@Cacheable</span>(value = <span class="string">"emp"</span>,key = <span class="string">"#lastName"</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        put = &#123;</span><br><span class="line">            <span class="meta">@CachePut</span>(value = <span class="string">"emp"</span> ,key = <span class="string">"#result.id"</span>),</span><br><span class="line">                <span class="meta">@CachePut</span>(value = <span class="string">"emp"</span>,key = <span class="string">"#result.email"</span>)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">public Employee getEmpByLastName(<span class="built_in">String</span> lastName)&#123;</span><br><span class="line"></span><br><span class="line">    Employee empByLastName = employeeMapper.getEmpByLastName(lastName);</span><br><span class="line">    <span class="keyword">return</span> empByLastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="CacheConfig-由于在每个方法上写value-“emp”-太复杂从而引进-CacheConfig-可以指定公共缓存属性"><a href="#CacheConfig-由于在每个方法上写value-“emp”-太复杂从而引进-CacheConfig-可以指定公共缓存属性" class="headerlink" title="@CacheConfig  由于在每个方法上写value = “emp” 太复杂从而引进 @CacheConfig 可以指定公共缓存属性"></a>@CacheConfig  由于在每个方法上写value = “emp” 太复杂从而引进 @CacheConfig 可以指定公共缓存属性</h5></li>
<li><p>也可以说是抽取缓存中的公共配置</p>
</li>
<li><p>源码</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheConfig &#123;</span><br><span class="line">    <span class="built_in">String</span>[] cacheNames() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span> keyGenerator() <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span> cacheManager() <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span> cacheResolver() <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@CacheConfig(cacheNames = “emp”)</p>
<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5></li>
<li><p>缓存默认使用的是ConcurrentMapCacheManager==ConcurrentMapCache；将消息保存在ConcurrentMap&lt;Object,Object&gt;中的；</p>
</li>
<li><p>实际开发中，使用缓存中间件：redis，memcached，Ehcache</p>
<h4 id="整合redis作为缓存及redisTermpleate序列化机制"><a href="#整合redis作为缓存及redisTermpleate序列化机制" class="headerlink" title="整合redis作为缓存及redisTermpleate序列化机制"></a>整合redis作为缓存及redisTermpleate序列化机制</h4></li>
<li><p>安装redis； 使用docker  sudo yum install Docker</p>
</li>
<li><p>项目中引入redis的starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置redis application.properties</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">spring.redis.host=<span class="number">192.168</span><span class="number">.1</span><span class="number">.6</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试类</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoCacheApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired(required = false)</span></span><br><span class="line">	EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	StringRedisTemplate stringRedisTemplate; <span class="comment">//操作K-v都是字符串的模板</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	RedisTemplate redisTemplate;<span class="comment">//操作K-v都是对象的</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	RedisTemplate&lt;Object, Employee&gt; employeeRedisTemplate;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	* redis常见5大数据类型</span></span><br><span class="line"><span class="comment">	* String(字符串):List（列表）;set（集合）;hash（散列），zset（有序集合）</span></span><br><span class="line"><span class="comment">	* stringRedisTemplate.opsForValue();[String(字符串)]</span></span><br><span class="line"><span class="comment">	* stringRedisTemplate.opsForList();</span></span><br><span class="line"><span class="comment">	* stringRedisTemplate.opsForSet();</span></span><br><span class="line"><span class="comment">	* stringRedisTemplate.opsForHash();</span></span><br><span class="line"><span class="comment">	* .......</span></span><br><span class="line"><span class="comment">	*</span></span><br><span class="line"><span class="comment">	* */</span></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> void test01()&#123;</span><br><span class="line">		<span class="comment">//该redis数据库中保存数据</span></span><br><span class="line">		<span class="comment">//stringRedisTemplate.opsForValue().append("msg","hello");</span></span><br><span class="line">		String msg = stringRedisTemplate.opsForValue().<span class="keyword">get</span>(<span class="string">"msg"</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(msg);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">public</span> void test02()&#123;</span><br><span class="line">		Employee empById = employeeMapper.getEmpById(<span class="number">3</span>);</span><br><span class="line">		<span class="comment">//保存对象</span></span><br><span class="line">		<span class="comment">//默认保存对象，使用JDK序列化机制，然后序列化后的数据保存到redis中</span></span><br><span class="line">		<span class="comment">//redisTemplate.opsForValue().set("myset",empById);</span></span><br><span class="line">		<span class="comment">//1.将数据已json的方式保存</span></span><br><span class="line">		   <span class="comment">//方式一：自己将数据转换为json</span></span><br><span class="line">		   <span class="comment">//方式二：redisTemplate有自己的转换规则</span></span><br><span class="line">		employeeRedisTemplate.opsForValue().<span class="keyword">set</span>(<span class="string">"myset"</span>,empById);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置类，保存数据序列化，json格式 改变默认的序列化器</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">Configuration</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> myRedisConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    <span class="built_in">public</span> RedisTemplate&lt;<span class="keyword">Object</span>, Employee&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException &#123;</span><br><span class="line">        RedisTemplate&lt;<span class="keyword">Object</span>, Employee&gt; template = <span class="built_in">new</span> RedisTemplate();</span><br><span class="line">        <span class="keyword">template</span>.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="built_in">new</span> Jackson2JsonRedisSerializer&lt;Employee&gt;(Employee.<span class="keyword">class</span>);</span><br><span class="line">        <span class="keyword">template</span>.setDefaultSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">template</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="测试原理"><a href="#测试原理" class="headerlink" title="测试原理"></a>测试原理</h4></li>
<li><p>原理：</p>
<ul>
<li>1.CacheManager===Cache  缓存组件来实际该缓存中CRUD操作(存取数据)</li>
<li>2.引入redis的starter，容器保存的是 RedisCacheManager</li>
<li>3.RedisCacheManager 帮我们创建 RedisCache 来作为缓存组件；RedisCahe通过操作redis缓存数据</li>
<li>4.RedisTempleate&lt;Objec，Object&gt;是默认使用jdk的序列化机制<h5 id="自定义CacheManager"><a href="#自定义CacheManager" class="headerlink" title="自定义CacheManager"></a>自定义CacheManager</h5></li>
</ul>
</li>
<li><p>注意：知识点残留</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*自定义缓存规则*/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Primay  <span class="comment">//将某个缓存管理器作为默认的</span></span><br><span class="line">@Bean</span><br><span class="line">public CacheManager cache<span class="constructor">Manager(RedisConnectionFactory <span class="params">redisConnectionFactory</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//初始化一个RedisCacheWriter</span></span><br><span class="line">    RedisCacheWriter redisCacheWriter = <span class="module-access"><span class="module"><span class="identifier">RedisCacheWriter</span>.</span></span>non<span class="constructor">LockingRedisCacheWriter(<span class="params">redisConnectionFactory</span>)</span>;</span><br><span class="line">    <span class="comment">//设置CacheManager的值序列化方式为json序列化</span></span><br><span class="line">    RedisSerializer&lt;Object&gt; jsonSerializer = <span class="keyword">new</span> <span class="constructor">GenericJackson2JsonRedisSerializer()</span>;</span><br><span class="line">    RedisSerializationContext.SerializationPair&lt;Object&gt; pair = RedisSerializationContext.SerializationPair</span><br><span class="line">            .from<span class="constructor">Serializer(<span class="params">jsonSerializer</span>)</span>;</span><br><span class="line">    RedisCacheConfiguration defaultCacheConfig=<span class="module-access"><span class="module"><span class="identifier">RedisCacheConfiguration</span>.</span></span>default<span class="constructor">CacheConfig()</span></span><br><span class="line">            .serialize<span class="constructor">ValuesWith(<span class="params">pair</span>)</span>;</span><br><span class="line">    <span class="comment">//设置默认超过期时间是30秒</span></span><br><span class="line">    defaultCacheConfig.entry<span class="constructor">Ttl(Duration.<span class="params">ofSeconds</span>(30)</span>);</span><br><span class="line">    <span class="comment">//初始化RedisCacheManager</span></span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">RedisCacheManager(<span class="params">redisCacheWriter</span>, <span class="params">defaultCacheConfig</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Java消息中间件+AceiveMQ+主题队列(-)</title>
    <url>/2020/01/20/Java%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6-AceiveMQ(%E4%B8%80)-%E4%B8%BB%E9%A2%98%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h3 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h3><ul>
<li><p>MQ 规范，约束，理念</p>
</li>
<li><p>实现：</p>
<ul>
<li>ActiveMQ ：java/scala</li>
<li>Kafka :大数据</li>
<li>RebbitMQ ：arlang</li>
<li>RockerMQ ：阿里/java<h3 id="ActiveMQ消息中间件"><a href="#ActiveMQ消息中间件" class="headerlink" title="ActiveMQ消息中间件"></a>ActiveMQ消息中间件</h3></li>
</ul>
</li>
<li><p>api发送和接受</p>
</li>
<li><p>MQ的高可用性</p>
</li>
<li><p>MQ的集群和容错配置</p>
</li>
<li><p>MQ的持久化</p>
</li>
<li><p>延时发送/定是投递</p>
</li>
<li><p>签收机制</p>
</li>
<li><p>Spring整合</p>
</li>
<li><p>……</p>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3></li>
<li><p>在何种场景下使用了消息中间件？？？</p>
</li>
<li><p>为什么要在系统中引入消息中间件？？？</p>
</li>
<li><p>MQ能干嘛？？？</p>
<ul>
<li>解耦：要做到系统解耦，当新的模块接进来时，可以做到代码改动最小；能够解耦</li>
<li>削峰：设置流量缓冲池，可以让后端系统按照自身吞吐能力进行消费，不被冲垮；能够削峰</li>
<li>异步：强弱以来梳理能将非关键调用链路的操作异步化并提高整体系统的吞吐能力；能够异步 <h3 id="举个例子电商秒杀业务："><a href="#举个例子电商秒杀业务：" class="headerlink" title="举个例子电商秒杀业务："></a>举个例子电商秒杀业务：</h3>上游系统发起下单购买操作，我就是一个下单操作</li>
</ul>
</li>
</ul>
<p>下游系统完成秒杀业务逻辑<br>(读取订单，库存检查，库存冻结，余额检查，余额冻结，订单生成，余额扣减，库存扣减，生成流水，余额冻结，库存解冻)</p>
<h3 id="官网下载"><a href="#官网下载" class="headerlink" title="官网下载"></a>官网下载</h3><ul>
<li>ActiveMQ   http：//activemq.apache.org/</li>
<li>MQ最主要的功能<br>实现高可用，高性能，可伸缩，易用和安全的企业级开发</li>
<li>异步消息的消息和处理</li>
<li>控制消息的消费顺序和处理</li>
<li>可以和spring/springboot整合简化编程</li>
<li>配置叫集群容错的MQ集群<h4 id="安装ActiveMQ-–-CentOS8系统"><a href="#安装ActiveMQ-–-CentOS8系统" class="headerlink" title="安装ActiveMQ  – CentOS8系统"></a>安装ActiveMQ  – CentOS8系统</h4></li>
<li>1.安装java JDK 命令： <ul>
<li>检查 yum 中有没有 java1.8 包<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">yum <span class="type">list</span> java<span class="number">-1.8</span>*</span><br></pre></td></tr></table></figure>
<ul>
<li>开始安装   CentOS8系统自动配置环境变量<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">yum install java<span class="number">-1.8</span><span class="number">.0</span>-openjdk* -y</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>2.安装ActiveMQ <ul>
<li>1.本地下载好上传到虚拟机</li>
<li>2.解压压缩包<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-xzf</span> <span class="selector-tag">apache-activemq-5</span><span class="selector-class">.15</span><span class="selector-class">.11-bin</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure></li>
<li>3.进入到apache-activemq-5.15.11的bin目录<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">cd apache-activemq<span class="number">-5.15</span><span class="number">.11</span>/bin</span><br></pre></td></tr></table></figure></li>
<li>启动ActiveMQ<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">./activemq <span class="literal">start</span>（执行两次，第一次:生成配置信息，第二次：启动）</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>关闭防火墙<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">一、防火墙服务</span><br><span class="line"><span class="number">1</span>、启动、关闭、重启防火墙服务。</span><br><span class="line">systemctl start  firewalld.service</span><br><span class="line">systemctl stop  firewalld.service</span><br><span class="line">systemctl restart  firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>显示防火墙的状态。</span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、开机启动防火墙。</span><br><span class="line">systemctl enable firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、开机时禁用防火墙。</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、查看防火墙是否开机启动。</span><br><span class="line">systemctl  is-enabled  firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、查看已启动的服务列表。</span><br><span class="line">systemctl <span class="type">list</span>-unit-files|grep enabled</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、查看启动失败的服务列表。</span><br><span class="line">systemctl  --failed</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、启动、停止、重启httpd服务。</span><br><span class="line">systemctl   start    httpd</span><br><span class="line">systemctl   stop     httpd</span><br><span class="line">systemctl   restart  httpd</span><br><span class="line"></span><br><span class="line">二、配置防火墙</span><br><span class="line"><span class="number">1</span>、查看版本。</span><br><span class="line">firewall-cmd --version</span><br><span class="line"><span class="number">2</span>、查看帮助。</span><br><span class="line">firewall-cmd  --help</span><br><span class="line"><span class="number">3</span>、显示状态。</span><br><span class="line">firewall-cmd --<span class="section">state</span></span><br><span class="line"><span class="number">4</span>、查看所有打开的端口。</span><br><span class="line">firewall-cmd --zone=public --<span class="type">list</span>-ports</span><br><span class="line"><span class="number">5</span>、重新载入，更新防火墙规则。</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"><span class="number">6</span>、查看区域信息。</span><br><span class="line">firewall-cmd --get-active-zones</span><br><span class="line"><span class="number">7</span>、查看指定接口所属区域。</span><br><span class="line">firewall-cmd --get-zone-of-interface=eth0</span><br><span class="line"><span class="number">8</span>、拒绝所有包。</span><br><span class="line">firewall-cmd --panic-on</span><br><span class="line"><span class="number">9</span>、取消拒绝状态。</span><br><span class="line">firewall-cmd --panic-off</span><br><span class="line"><span class="number">10</span>、查看是否拒绝。</span><br><span class="line">firewall-cmd --query-panic</span><br><span class="line"><span class="number">11</span>、开启<span class="number">80</span>端口，–permanent永久生效，没有此参数重启后失效。</span><br><span class="line">firewall-cmd --zone=public --add-port=<span class="number">80</span>/tcp --permanent   </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">12</span>、查看<span class="number">80</span>端口是否开放。</span><br><span class="line">firewall-cmd --zone=public --query-port=<span class="number">80</span>/tcp </span><br><span class="line"><span class="number">13</span>、删除<span class="number">80</span>端口配置。</span><br><span class="line">firewall-cmd --zone=public --remove-port=<span class="number">80</span>/tcp --permanent</span><br></pre></td></tr></table></figure>
<h4 id="访问ActiveMQ"><a href="#访问ActiveMQ" class="headerlink" title="访问ActiveMQ"></a>访问ActiveMQ</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">页面控制台： <span class="string">http:</span><span class="comment">//ip:8161(监控)</span></span><br><span class="line">请求地址：  tcp：<span class="comment">//ip：61616 (java代码访问消息中间件)</span></span><br></pre></td></tr></table></figure>
<h4 id="linux查看服务-ps-ef-grep-activemq"><a href="#linux查看服务-ps-ef-grep-activemq" class="headerlink" title="linux查看服务 ps -ef|grep activemq"></a>linux查看服务 ps -ef|grep activemq</h4></li>
<li>ps -ef|grep activemq|grep -v grep<h4 id="带日志启动方式"><a href="#带日志启动方式" class="headerlink" title="带日志启动方式"></a>带日志启动方式</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./activemq</span> start &gt; <span class="string">/run_acivemq.log</span></span><br></pre></td></tr></table></figure>
<h3 id="JMS编码总体架构"><a href="#JMS编码总体架构" class="headerlink" title="JMS编码总体架构"></a>JMS编码总体架构</h3><img src="https://img-blog.csdnimg.cn/20190921140028573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODA1MjU1,size_16,color_FFFFFF,t_70" alt=""></li>
<li>通过ConnectionFactory创建一个Connection</li>
<li>由Connection创建一个Session</li>
<li>由Session创建消息Msg，创建消息的生产者Message Producer和消息消费者Message Consumer</li>
<li>消息的生产者将消息发送到Destination，消息的消费者从Destination(目的地 队列 主题)接收消息</li>
<li>创建消息msg，将其(send)发送Destination(目的地)中</li>
<li>Destination(目的地 —》队列Queue 一对一，主题Topic 一对多</li>
</ul>
<h4 id="JMS基本开发步骤"><a href="#JMS基本开发步骤" class="headerlink" title="JMS基本开发步骤"></a>JMS基本开发步骤</h4><ul>
<li>1.创建一个connection factory</li>
<li>2.通过connection factory来JMS connection</li>
<li>3.启动JMS connection</li>
<li>4.通过connection创建JMS session</li>
<li>5.创建JMS destination</li>
<li>6.创建JMS producer(生产者)或者创建JMS message并设置destination</li>
<li>7.创建JMS consumer或者是注册一个JMS message listener</li>
<li>8.发送或者接受JMS message(s)</li>
<li>9.关闭所有的JMS资源（connection，session,producer,consumer等） <h4 id="队列Queue-一对一-点对点-关系"><a href="#队列Queue-一对一-点对点-关系" class="headerlink" title="队列Queue 一对一(点对点)关系"></a>队列Queue 一对一(点对点)关系</h4></li>
<li>在点对点的消息传递域中，目的地被称之为队列<br><img src="https://img-blog.csdnimg.cn/20190921155027383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0ODA1MjU1,size_16,color_FFFFFF,t_70" alt=""></li>
</ul>
<table>
<thead>
<tr>
<th align="right">英文</th>
<th align="right">中文</th>
<th align="right">详解</th>
</tr>
</thead>
<tbody><tr>
<td align="right">NUmber Of Pending Messages</td>
<td align="right">等待消费的消息</td>
<td align="right">这个是当前未出对的消息数量；公式=总接受数-总出对数</td>
</tr>
<tr>
<td align="right">Namber Of Consumers</td>
<td align="right">消费者数量</td>
<td align="right">消费者端消费的数量</td>
</tr>
<tr>
<td align="right">Message Enqueued</td>
<td align="right">进对消息数</td>
<td align="right">进入队列的总数量，包括出队列的。这个数量只增不减</td>
</tr>
<tr>
<td align="right">Messages Dequeued</td>
<td align="right">出对消息数</td>
<td align="right">可以理解为是消费者消费掉的数量</td>
</tr>
<tr>
<td align="right">* 应用案例</td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right">* 生产者</td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right"><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsProduce</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> ACTIVEMQ_URL = <span class="string">"tcp://192.168.1.6:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> QUEUE_NAME = <span class="string">"tqueue01"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws JMSException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建连接工厂,按照给定的URL地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过连接工厂，获取连接connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话</span></span><br><span class="line">        <span class="comment">//有两个参数，第一个叫事务/第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建目的地(具体是队列还是主题) 接口</span></span><br><span class="line">        Queue <span class="built_in">queue</span> = session.createQueue(QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建消息生产者</span></span><br><span class="line">        MessageProducer messageProducer = session.createProducer(<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.通过消息的生产者messageProdecer生产3条消息发送到MQ的队列里面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">3</span> ; i++) &#123;</span><br><span class="line">            <span class="comment">//7.创建消息 ， 一定格式的消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"msg------"</span> + i);<span class="comment">//理解为一个字符串</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//8.通过messagerProducer发送给MQ</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//9.关闭资源</span></span><br><span class="line">        messageProducer.<span class="built_in">close</span>();</span><br><span class="line">        session.<span class="built_in">close</span>();</span><br><span class="line">        connection.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"*****消息发送到MQ完成******"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right">* pom文件</td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right"><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--activemq所需的包--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.activemq/activemq-all --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--整合Spring --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.xbean/xbean-spring --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0-alpha1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0-alpha5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right">* 总结：</td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right">* 1.当有一个消息进入这个队列时，等待消费的消息时1，进入队列的消息也是1</td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right">* 2.当消息消费后，等待消费的消息是0，进入队列的消息是1，出对的消息是1.</td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right">* 3.再来一条消息时，等待消费的消息是1，进入队列的消息就是2</td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right">* 消费者—–方式一：同步阻塞方式</td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right"><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsConsumer</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> ACTIVEMQ_URL = <span class="string">"tcp://192.168.1.6:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> QUEUE_NAME = <span class="string">"tqueue01"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws JMSException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建连接工厂,按照给定的URL地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过连接工厂，获取连接connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话</span></span><br><span class="line">        <span class="comment">//有两个参数，第一个叫事务/第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建目的地(具体是队列还是主题) 接口</span></span><br><span class="line">        Queue <span class="built_in">queue</span> = session.createQueue(QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建消费者</span></span><br><span class="line">        MessageConsumer consumer = session.createConsumer(<span class="built_in">queue</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//注意：生产者的消息类型与消费者对应</span></span><br><span class="line">    <span class="comment">//  TextMessage textMessage = (TextMessage)consumer.receive();//这里一直等待</span></span><br><span class="line">    <span class="comment">/* 上面 同步阻塞方式</span></span><br><span class="line"><span class="comment">     * 消息消费者代码实现的第一种方法：同步阻塞方式</span></span><br><span class="line"><span class="comment">     *  订阅者或接收者MessageConsumer的receive()方法来接收消息，</span></span><br><span class="line"><span class="comment">     * receive方法在能够接收到消息之前（超时之前）将一直阻塞</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费者将会等待4s后自动退出receive方法，不进行阻塞</span></span><br><span class="line">            TextMessage textMessage = (TextMessage)consumer.receive(<span class="number">4000</span>);<span class="comment">//这里有时间限制4秒</span></span><br><span class="line">            <span class="keyword">if</span> (null != textMessage)&#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"******消费者接收到消息："</span>+textMessage.getText());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6.关闭资源</span></span><br><span class="line">        consumer.<span class="built_in">close</span>();</span><br><span class="line">        session.<span class="built_in">close</span>();</span><br><span class="line">        connection.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right">* 消费者—–方式二：异步非同步阻塞方式(监听器 onMessage())</td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right">订阅者或者接收者通过MessageConsumer的setMessageListener(MessageListener listener)注册一个监听器</td>
<td align="right"></td>
<td align="right"></td>
</tr>
<tr>
<td align="right">* 但消息到达之后，系统自动调用监听器MessageListener的onMessage(Message message)方法</td>
<td align="right"></td>
<td align="right"></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL = <span class="string">"tcp://192.168.1.6:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"tqueue01"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建连接工厂,按照给定的URL地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过连接工厂，获取连接connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话</span></span><br><span class="line">        <span class="comment">//有两个参数，第一个叫事务/第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建目的地(具体是队列还是主题) 接口</span></span><br><span class="line">        Queue queue = session.createQueue(QUEUE_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建消费者</span></span><br><span class="line">        MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*        while(true)&#123;</span></span><br><span class="line"><span class="comment">            //注意：生产者的消息类型与消费者对应</span></span><br><span class="line"><span class="comment">//            TextMessage textMessage = (TextMessage)consumer.receive();//这里一直等待</span></span><br><span class="line"><span class="comment">            TextMessage textMessage = (TextMessage)consumer.receive(4000);//这里有时间限制4秒</span></span><br><span class="line"><span class="comment">            if (null != textMessage)&#123;</span></span><br><span class="line"><span class="comment">                System.out.println("******消费者接收到消息："+textMessage.getText());</span></span><br><span class="line"><span class="comment">            &#125;else&#123;</span></span><br><span class="line"><span class="comment">            break;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            //6.关闭资源</span></span><br><span class="line"><span class="comment">            consumer.close();</span></span><br><span class="line"><span class="comment">            session.close();</span></span><br><span class="line"><span class="comment">            connection.close();</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">    <span class="comment">//通过监听的方式</span></span><br><span class="line">        consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != message &amp;&amp; message <span class="keyword">instanceof</span> TextMessage)&#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"******消费者接收到消息："</span>+textMessage.getText());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//保证控制台不灭</span></span><br><span class="line">        System.in.read();</span><br><span class="line">        <span class="comment">//6.关闭资源</span></span><br><span class="line">        consumer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>注意：</p>
<ol>
<li>先生产，只启动1号消费者 问题：1号消费者还能消费消息吗？？？<br>YES</li>
<li>先生产，先启动1号消费者，在启动2号消费者，问题：2号消费者还能消费消息吗？？？<br>2.1 1号消费者可以消费？？  YES<br>2.2 2好消费者可以消费？？  NO</li>
<li>先启动两个消费者，在生产6条消息，请问消费情况如何？？<br>3.1 2个消费者都有6消息  NO<br>3.2 先到先得，6条全给一个 NO<br>3.3 一人一半  YES<br>#####小结：</li>
</ol>
</li>
<li><p>点对点消息传递域的特点如下：</p>
<ul>
<li>1.每个消息只能有一个消费者，类似于1对1的的关系 。好比个人快递自己领取自己的。</li>
<li>2.消息的生产者和消息的消费者之间没有时间上的相关性。无论消费者在生产者发送消息的时候是否处于运动状态消费者都可以提取消息。</li>
<li>3.消息被消费之后队列中不会在存储，所以消费者不会消费到已经被消费掉的消息。<h4 id="主题Topic，一对多（发布订阅）关系"><a href="#主题Topic，一对多（发布订阅）关系" class="headerlink" title="主题Topic，一对多（发布订阅）关系"></a>主题Topic，一对多（发布订阅）关系</h4></li>
</ul>
</li>
<li><p>再发布订阅消息传递域中，目的地称为主题</p>
</li>
<li><p>特点如下:</p>
</li>
<li><p>1.生产者将消息发布到topic中，每个消息可以有多个消费者，属于1：N的关系</p>
</li>
<li><p>2.生产者和消费者之间有时间上的相关性，订阅某一个主题的消费者只能消费自它订阅之后发布的消息。</p>
</li>
<li><p>3.生产者生产时，topic不保存消息他是无状态的不落地，加入无人订阅就去生产，那就是一条费消息，所以，一般先启动消费者在启动生产者。(重点)</p>
</li>
<li><p>JMS规范允许客户创建持久订阅，这在一定程度上放松了时间上的相关性要求。持久订阅允许消费者消费他在未处于激活状态是发送的消息。好比我们微信公众好订阅<br>####应用案例</p>
</li>
<li><p>发布消息的生产者</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主题生产者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsProduce</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> ACTIVEMQ_URL = <span class="string">"tcp://192.168.1.6:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final <span class="keyword">String</span> TOPIC_NAME = <span class="string">"topic-zhao"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> throws JMSException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建连接工厂,按照给定的URL地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过连接工厂，获取连接connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话</span></span><br><span class="line">        <span class="comment">//有两个参数，第一个叫事务/第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建目的地(具体是队列还是主题) 接口</span></span><br><span class="line">        Topic topic = session.createTopic(TOPIC_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建消息生产者</span></span><br><span class="line">        MessageProducer messageProducer = session.createProducer(topic);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.通过消息的生产者messageProdecer生产3条消息发送到MQ的队列里面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">3</span> ; i++) &#123;</span><br><span class="line">            <span class="comment">//7.创建消息 ， 一定格式的消息</span></span><br><span class="line">            TextMessage textMessage = session.createTextMessage(<span class="string">"topic---msg------"</span> + i);<span class="comment">//理解为一个字符串</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//8.通过messagerProducer发送给MQ</span></span><br><span class="line">            messageProducer.send(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//9.关闭资源</span></span><br><span class="line">        messageProducer.<span class="built_in">close</span>();</span><br><span class="line">        session.<span class="built_in">close</span>();</span><br><span class="line">        connection.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"*****主题消息发送到MQ完成******"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>主题消费者</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> JmsConsumer &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTIVEMQ_URL = <span class="string">"tcp://192.168.1.6:61616"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_NAME = <span class="string">"topic-zhao"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) <span class="keyword">throws</span> JMSException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.<span class="keyword">println</span>(<span class="string">"********我是1号消费者********"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建连接工厂,按照给定的URL地址，采用默认用户名和密码</span></span><br><span class="line">        ActiveMQConnectionFactory activeMQConnectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(ACTIVEMQ_URL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过连接工厂，获取连接connection并启动</span></span><br><span class="line">        Connection connection = activeMQConnectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话</span></span><br><span class="line">        <span class="comment">//有两个参数，第一个叫事务/第二个叫签收</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.创建目的地(具体是队列还是主题) 接口</span></span><br><span class="line">        Topic topic = session.createTopic(TOPIC_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.创建消费者</span></span><br><span class="line">        MessageConsumer consumer = session.createConsumer(topic);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过监听的方式(旧式写法)</span></span><br><span class="line">     <span class="comment">/*   consumer.setMessageListener(new MessageListener() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void onMessage(Message message) &#123;</span></span><br><span class="line"><span class="comment">            if (null != message &amp;&amp; message instanceof TextMessage)&#123;</span></span><br><span class="line"><span class="comment">                TextMessage textMessage = (TextMessage) message;</span></span><br><span class="line"><span class="comment">                try &#123;</span></span><br><span class="line"><span class="comment">                    System.out.println("******消费者接收到消息："+textMessage.getText());</span></span><br><span class="line"><span class="comment">                &#125; catch (JMSException e) &#123;</span></span><br><span class="line"><span class="comment">                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line">     <span class="comment">//此处技术点Java8特性之一 lambda表达式</span></span><br><span class="line">        consumer.setMessageListener((Message message)-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != message &amp;&amp; message <span class="keyword">instanceof</span> TextMessage)&#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.<span class="keyword">println</span>(<span class="string">"******消费者接收到消息："</span>+textMessage.<span class="keyword">getText</span>());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//保证控制台不灭</span></span><br><span class="line">        System.in.<span class="keyword">read</span>();</span><br><span class="line">        <span class="comment">//6.关闭资源</span></span><br><span class="line">        consumer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="注意先启动消费者，—生产者"><a href="#注意先启动消费者，—生产者" class="headerlink" title="注意先启动消费者，—生产者"></a>注意先启动消费者，—生产者</h6><h6 id="补充知识点-Java8的特性之一-lambda表达式"><a href="#补充知识点-Java8的特性之一-lambda表达式" class="headerlink" title="补充知识点 Java8的特性之一 lambda表达式"></a>补充知识点 Java8的特性之一 lambda表达式</h6></li>
<li><p>lambda表达式， 是Java8中的一个新特性。可以理解为一个匿名函数。</p>
</li>
<li><p>lambda表达式可以理解为将一个函数浓缩为一行代码，使代码更加简洁紧凑。</p>
</li>
<li><p>lambda表达式语法：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">(parameters)</span> -&gt;</span> statement;</span><br><span class="line">或</span><br><span class="line"><span class="function"><span class="params">(parameters)</span> -&gt;</span> &#123;statements;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>参数如下：<br>  parameters：参数， 可以指定或不指定参数类型， 当只有一个参数时可以不要圆括号<br>  statement：函数返回值，直接返回该值，无需大括号<br>  statements：函数体，当使用大括号时需要指明表达式返回的值</p>
</li>
<li><p>lambda表达式实例：</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参，返回5</span></span><br><span class="line">() -&gt; <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 接收参数x，返回2*x</span></span><br><span class="line"><span class="symbol">x</span> -&gt; <span class="number">2</span> * <span class="symbol">x</span>;</span><br><span class="line"><span class="comment">// 接收参数x y, 返回x+y</span></span><br><span class="line">(<span class="symbol">x</span>, <span class="symbol">y</span>) -&gt; <span class="symbol">x</span> + <span class="symbol">y</span>;</span><br><span class="line"><span class="comment">// 指明接收参数类型</span></span><br><span class="line">(int <span class="symbol">x</span>, int <span class="symbol">y</span>) -&gt; <span class="symbol">x</span> + <span class="symbol">y</span>;</span><br><span class="line"><span class="comment">// 接收字符串并打印，无返回值</span></span><br><span class="line">(String s) -&gt; System.out.print(s);</span><br><span class="line"><span class="comment">// 包括函数体</span></span><br><span class="line">(String s) -&gt; &#123;</span><br><span class="line"> System.out.print(s);</span><br><span class="line"> <span class="keywords">return</span> s; </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<h4 id="两大模式比较"><a href="#两大模式比较" class="headerlink" title="两大模式比较"></a>两大模式比较</h4><p>比较|topic(主题模式)|queue（队列模式）</p>
</li>
</ul>
<p>–|:–|:–<br>工作模式|”订阅发布”模式，如果当前没有订阅者，消息将被丢弃，如果有多个订阅者，那麽这些订阅者都会收到消息|”负载均衡”模式如果当前没有消费者消息也不回丢弃，如果有多个消费者，那么一条消息也会发送到其中一个消费者，并且要求消费者ack信息<br>有无状态|无状态|Queue数据默认会在mq服务器上以文件的形式保存，比如ActiveMQ一般保存在$AMQ_HOME\data\kr-store\data下面。也可以配置成DB存储<br>传递完整性|如果没有订阅者，消息将被丢弃|消息不会丢弃<br>处理效率|由于消息要按照订阅者的数量进行复制，所以处理性能会随着订阅者的增加而明显降低，并且还要结合不同消息协议自身的性能差异|由于一条消息只发送给一个消费者所以消费者，在多，性能额不会明显降低，当然不同的消息协议的具体性能也是有差异的 </p>
<h3 id="回顾-Java中-new-实例化-一个对象将其放在堆内存中新生区"><a href="#回顾-Java中-new-实例化-一个对象将其放在堆内存中新生区" class="headerlink" title="回顾 Java中 new(实例化)一个对象将其放在堆内存中新生区"></a>回顾 Java中 new(实例化)一个对象将其放在堆内存中新生区</h3><ul>
<li>堆内存 –》新生区，养老区</li>
</ul>
]]></content>
      <tags>
        <tag>Java消息中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+单例模式</title>
    <url>/2020/01/20/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="java设计模式概述"><a href="#java设计模式概述" class="headerlink" title="java设计模式概述"></a>java设计模式概述</h3><ul>
<li>模式不是代码,而是某类问题的通用解决方案</li>
<li>设计模式的本质提高软件的维护性，通用性和扩展性，并降低软件的复杂度。</li>
<li>设计模式分为三种类型，共23种</li>
<li>1.创建型模式：单例模式，抽象工厂模式，原型模式，建造者模式，工厂模式。</li>
<li>2.结构型模式：适配器模式，桥接模式，装饰模式，组合模式，外观模式，享元模式，代理模式</li>
<li>3.行为型模式：模板方式模式，命令模式，访问者模式，迭代器模式，观察者模式，中介模式，备忘录模式，解析器模式(Interperter模式)，<br>状态模式，策略模式，职责链模式(责任链模式)。<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4></li>
<li>所谓类的单例设计模式，就是采用一定的方法保证在整个的软件系统中，对某个类只能存在一个对象的实例，并且该类只提供一个取得其对象实例的方法(静态方法)</li>
<li>例如：Hibernate的SessionFactory，它充当数据存储的代理，并负责创建Session对象，SessionFactory并不都是轻量级的，一般情况下，一个项目只需要一个SessionFactory就够，这样就会使用到单例模式。<h5 id="单例设计模式八种方式"><a href="#单例设计模式八种方式" class="headerlink" title="单例设计模式八种方式"></a>单例设计模式八种方式</h5></li>
<li>1.饿汉式（静态常量）</li>
<li>2.饿汉式（静态代码块static）</li>
<li>3.懒汉式(线程不安全)</li>
<li>4.懒汉式（线程安全，同步方法）</li>
<li>5.懒汉式(线程不安全，同步代码块)</li>
<li>6.双重检查</li>
<li>7.静态内部类</li>
<li>8.枚举<h6 id="饿汉式-静态常量"><a href="#饿汉式-静态常量" class="headerlink" title="饿汉式(静态常量)"></a>饿汉式(静态常量)</h6></li>
<li>应用实例</li>
<li>步骤实例</li>
<li>1.构造器私有化(防止 new)</li>
<li>2.类的内部创建对象</li>
<li>3.向外暴露一个静态的公共方法。getInstance</li>
<li>代码实现<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package pattern.singleton;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">type1</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        Singleton singleton = Singleton.getInstance();</span><br><span class="line">        Singleton singleton2 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(singleton == singleton2); <span class="comment">//true</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"singleton.hashCode="</span>+singleton.hashCode());</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"singleton2.hashCode="</span>+singleton2.hashCode());</span><br><span class="line">        <span class="comment">/*singleton.hashCode=460141958</span></span><br><span class="line"><span class="comment">        singleton2.hashCode=460141958*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式(静态常量)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Singleton</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    1.添加 构造器私有化 防止new实例化 ，外部不能new</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    2.本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="comment">//    3.提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>优缺点说明：<ul>
<li>1.优点：这种写法比较简单，就是在类加载的时候就完全实例化。避免了线程同步的问题。</li>
<li>2.缺点：在类装载的时候就完成实例化，没有达到Lazy Loding(懒加载)的效果。如果从开始至终从未有使用过这个实例，则会造成内存的浪费</li>
<li>3.这种方式基于classloder(类装载)机制避免了多线程的同步问题，不过，instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他的方式(或者其他的静态方法)导致类装载，在这时候初始化instance就没有达到lazy loding(懒加载)的效果</li>
<li>4.结论：这种单例模式可用，可能造成内存浪费<h6 id="饿汉式-静态代码块"><a href="#饿汉式-静态代码块" class="headerlink" title="饿汉式(静态代码块)"></a>饿汉式(静态代码块)</h6></li>
</ul>
</li>
<li>应用实例<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">type2</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        Singleton singleton = Singleton.getInstance();</span><br><span class="line">        Singleton singleton2 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(singleton == singleton2); <span class="comment">//true</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"singleton.hashCode="</span>+singleton.hashCode());</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"singleton2.hashCode="</span>+singleton2.hashCode());</span><br><span class="line">        <span class="comment">/*singleton.hashCode=460141958</span></span><br><span class="line"><span class="comment">          singleton2.hashCode=460141958*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式(静态代码块)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Singleton</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    1.添加 构造器私有化 防止new实例化 ，外部不能new</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    2.本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> final <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="keyword">static</span>&#123;<span class="comment">//在静态代码块中，创建单例对象</span></span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    3.提供一个公有的静态方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>优缺点说明：<ul>
<li>1.这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也就是在类装载的时候，就执行静态代码块的中的代码，初始化类的实例。优缺点和上面是一样的。</li>
<li>2.结论：这种单例模式可用，但是可能造成内存浪费<h6 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式(线程不安全)"></a>懒汉式(线程不安全)</h6></li>
</ul>
</li>
<li>应用案例<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式(线程不安全)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        SingletonText singleton = SingletonText.getInstance();</span><br><span class="line">        SingletonText singleton2 = SingletonText.getInstance();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(singleton == singleton2); <span class="comment">//true</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"singleton.hashCode="</span>+singleton.hashCode());</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"singleton2.hashCode="</span>+singleton2.hashCode());</span><br><span class="line">        <span class="comment">/*singleton.hashCode=460141958</span></span><br><span class="line"><span class="comment">          singleton2.hashCode=460141958*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonText</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonText instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonText</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，当使用到方法时，才会创建instance</span></span><br><span class="line">    <span class="comment">//懒汉式（线程不安全）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> final <span class="keyword">static</span> SingletonText <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance == null)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonText();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>优缺点说明：<ul>
<li>1.起到了Lazy Loding的效果，但是只能在单线程下使用</li>
<li>2.如果在多线程下，一个线程进入了if(instance == null)判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这是便会产生多个实例。所以在多线程环境下不可使用这种方式</li>
<li>3.在实际开发中，不要使用这种方式<h6 id="懒汉式（线程安全，同步方法）"><a href="#懒汉式（线程安全，同步方法）" class="headerlink" title="懒汉式（线程安全，同步方法）"></a>懒汉式（线程安全，同步方法）</h6></li>
</ul>
</li>
<li>应用案例<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//懒汉式(线程安全，同步方法)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试</span></span><br><span class="line">        SingletonText singleton = SingletonText.getInstance();</span><br><span class="line">        SingletonText singleton2 = SingletonText.getInstance();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(singleton == singleton2); <span class="comment">//true</span></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"singleton.hashCode="</span>+singleton.hashCode());</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"singleton2.hashCode="</span>+singleton2.hashCode());</span><br><span class="line">        <span class="comment">/*singleton.hashCode=460141958</span></span><br><span class="line"><span class="comment">          singleton2.hashCode=460141958*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingletonText</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonText instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonText</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题，当使用到方法时，才会创建instance</span></span><br><span class="line">    <span class="comment">//懒汉式（线程安全，同步方法）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> final <span class="keyword">static</span> synchronized SingletonText <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance == null)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonText();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>优缺点说明：<ul>
<li>1.解决了线程不安全的问题</li>
<li>2.效率太低了，每个线程在想获得类的实例时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面想获取该代码实例，直接return就行了，方法进行同步效率太低</li>
<li>3.结论：在实际开发中，不推荐使用<h6 id="懒汉式-线程不安全，同步代码块"><a href="#懒汉式-线程不安全，同步代码块" class="headerlink" title="懒汉式(线程不安全，同步代码块)"></a>懒汉式(线程不安全，同步代码块)</h6></li>
</ul>
</li>
<li>应用案例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton  singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">               singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">           &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>优缺点说明：<ul>
<li>1.这种方式，本意是相对上面方式的改进，因其同步方法效率太低，改进同步产生实例化的代码块</li>
<li>2.但是这种同步并不能起到线程同步的作用，与上面实现方式遇到的情况一致，假如一个线程进入了if(singleton == null)判断语句块还未来得及往下执行，另一个线程也通过了这种判断语句，这是便会产生多个实例</li>
<li>3.结论：在实际开发中，不能使用这种方式<h6 id="双重检查—推荐使用"><a href="#双重检查—推荐使用" class="headerlink" title="双重检查—推荐使用"></a>双重检查—推荐使用</h6></li>
</ul>
</li>
<li>应用实例</li>
<li>补充知识点：<ul>
<li>1.volatile是一个特征修饰符（type specifier）.volatile的作用是作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值。<br>volatile的变量是说这变量可能会被意想不到地改变，这样，编译器就不会去假设这个变量的值了。</li>
<li>2.简单地说就是防止编译器对代码进行优化。</li>
<li>3.精确地说就是，编译器在用到这个变量时必须每次都小心地重新读取这个变量的值，而不是使用保存在寄存器里的备份。</li>
<li>4.保证了线程间的可见性，和一定程度的顺序性(不能保证原子性)，更好的方式就是用一个Boolean变量标识对象是否创建过(原子性)</li>
<li>5.volation可以立即从主内存中获取值，更新工作内存的值，还可以防止指令重排</li>
<li>6.只能修饰是变量，轻量级<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton  singleton;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//加入了双重检查的代码，解决线程安全问题，同时解决懒加载问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//双重检查针对的是第一次加载的时候，后面每次多个线程的调用会直接返回值；</span></span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">           <span class="keyword">synchronized</span>(Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(singgleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">                singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>优缺点说明：<ul>
<li>1.Double-Check概念是同步开发中常使用的，如代码中所示我们进行两次if(sinfleton == null)检查，这样就可以保证线程安全了</li>
<li>2.这样，实例代码只执行一次，后面再进行访问时判断if(singleton == null)直接return实例化对象，也避免的反复进行方法的同步，</li>
<li>3.线程安全:延迟加载，效率较高</li>
<li>4.结论：在实际开发中，推荐使用这种单例模式<h6 id="静态内部类-–-推荐使用"><a href="#静态内部类-–-推荐使用" class="headerlink" title="静态内部类 – 推荐使用"></a>静态内部类 – 推荐使用</h6></li>
</ul>
</li>
<li>应用案例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">//写一个静态内部类，该类中有一个静态属性Singleton</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，直接返回SingletonINstance.INSTANCE</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>优缺点说明：<ul>
<li>1.这种方式采用了类装载的机制来保证初始化实例时只有一个线程。</li>
<li>2.静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化时，调用getInstance方法，才会装载Singleton Instance类，从而完成SingLeton的实例化</li>
<li>3.类的静态属性只会在第一次加载类时侯初始化，所以在这里，JVM帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的</li>
<li><ol start="4">
<li>优点：避免了线程不安全，利用静态内部类特点实现延迟加载，效率高<h6 id="枚举—推荐使用"><a href="#枚举—推荐使用" class="headerlink" title="枚举—推荐使用"></a>枚举—推荐使用</h6></li>
</ol>
</li>
<li>应用案例<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package pattern.singleton.Enums;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//枚举</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletTest</span> &#123;</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">         Singleton singleton = Singleton.INSTANCE;</span><br><span class="line">         Singleton singleton1 = Singleton.INSTANCE;</span><br><span class="line">         System.out.<span class="built_in">println</span>(singleton == singleton1);</span><br><span class="line">         System.out.<span class="built_in">println</span>(singleton.hashCode());</span><br><span class="line">         System.out.<span class="built_in">println</span>(singleton1.hashCode());</span><br><span class="line"></span><br><span class="line">         singleton.sayOK();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//使用枚举可以实现单例，推荐使用</span></span><br><span class="line"> <span class="keyword">enum</span> Singleton&#123;   </span><br><span class="line">     INSTANCE;<span class="comment">//属性  保证单例</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOK</span><span class="params">()</span></span>&#123;</span><br><span class="line">         System.out.<span class="built_in">println</span>(<span class="string">"ok~~"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>优缺点说明：<ul>
<li>1.这借助JDK1.5中添加的枚举来实现单例模式，不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象<h6 id="单例模式在JDK应用的源码分析"><a href="#单例模式在JDK应用的源码分析" class="headerlink" title="单例模式在JDK应用的源码分析"></a>单例模式在JDK应用的源码分析</h6></li>
</ul>
</li>
<li>1.在JDK中，Java.lang.Runtime就是经典的单例模式</li>
<li>2.代码分析+Debug源码+代码说明<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="comment">//满足单例模式饿汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="keyword">Runtime</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">Runtime</span> currentRuntime = <span class="keyword">new</span> <span class="keyword">Runtime</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the runtime object associated with the current Java application.</span></span><br><span class="line"><span class="comment">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance</span></span><br><span class="line"><span class="comment">     * methods and must be invoked with respect to the current runtime object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @return  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class="line"><span class="comment">     *          Java application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">Runtime</span> getRuntime() &#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Don't let anyone else instantiate this class */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">Runtime</span>() &#123;&#125;</span><br></pre></td></tr></table></figure>
<h6 id="单例模式注意事项和细节说明"><a href="#单例模式注意事项和细节说明" class="headerlink" title="单例模式注意事项和细节说明"></a>单例模式注意事项和细节说明</h6></li>
<li>1.单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需求频繁创建销毁的对象，使用单例模式可以提高系统性能</li>
<li>2.当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new</li>
<li>3.单例模式使用的场景；需要频繁的进行创建和销毁的对象，创建对象时耗时过多或耗费资源过多(即：重量级对象)，但又经常用到的对象，工具类对象，频繁访问数据库或者文件对象(比如数据源，session工厂等)</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java设计模式+UML类图</title>
    <url>/2020/01/20/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-UML%E7%B1%BB%E5%9B%BE/</url>
    <content><![CDATA[<h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><ul>
<li>基本介绍</li>
<li>UML(统一建模语言)，是一种用于软件系统分析和设计的语言工具，它用于帮助软件开发人员进行思考和记录思路的结果</li>
<li>UML本身就是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素和他们之间的关系，比如类，接口，实现，泛化(继承)，依赖，组合，聚合，等</li>
<li>使用UNL来建模，常用的工具Rational Rose，也可以使用一些插件来建模<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4></li>
<li>有个A类，其中有个B类型成员变量，B类通过set方法传递的，那么就是A类聚合了B类<h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4></li>
<li>有个A类，其中有个实例化了A类（A a = new A()）;这样的方式称之为组合<h4 id="UML类图分类"><a href="#UML类图分类" class="headerlink" title="UML类图分类"></a>UML类图分类</h4></li>
<li>1.用例图(use case)+</li>
<li>2.静态结构图：类图，对象图，包图，组件图，部署图</li>
<li>3.动态行位图：交互图(时序图与协调图)，状态图，活动图</li>
<li>说明：<ul>
<li>1.类图是描述类与类之间的关系的，是UML图中最核心的</li>
</ul>
</li>
<li>详解：<ul>
<li>1.用于描述系统中的类(对象)本身的组成和类(对象)之间的各种静态关系</li>
<li>2.类之间的关系：依赖，泛化(继承)，实现，关联，组合和聚合</li>
<li>3.类图的简单举例：<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span><span class="comment">//代码形式</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="IDEA安装插件–PlantUML"><a href="#IDEA安装插件–PlantUML" class="headerlink" title="IDEA安装插件–PlantUML"></a>IDEA安装插件–PlantUML</h3></li>
</ul>
</li>
<li>在idea中Preferences -&gt; plugins -&gt;  Browse repositories -&gt; 搜索 plantUML -&gt; 安装即可</li>
<li>注意：安装PlantUML后需安装(本地)Graphviz<br>目的：安装此软件的原因是可以在画图的时候看到图的内容，不然只是一堆编码</li>
<li>使用：<a href="https://plantuml.com/zh/class-diagram" target="_blank" rel="noopener">https://plantuml.com/zh/class-diagram</a> 查看官网教程<h3 id="类之间六大关系"><a href="#类之间六大关系" class="headerlink" title="类之间六大关系"></a>类之间六大关系</h3><h4 id="依赖关系-Dependence"><a href="#依赖关系-Dependence" class="headerlink" title="依赖关系(Dependence)"></a>依赖关系(Dependence)</h4></li>
<li>只要是在类中用到对方，那么他们之间就存在依赖关系，如果没有对方法，连编译都通过不了。</li>
<li>应用案例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dependence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> personDao personDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Person person)</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IDCard <span class="title">getIDCard</span><span class="params">(Integer personId)</span></span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span></span>&#123;</span><br><span class="line">        department department = <span class="keyword">new</span> department(); <span class="comment">//注意此处违背了迪米特法则 局部变量不能是陌生的类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>类图：<br><img src="images%5Cdependence.png" alt="" title="依赖关系图"></li>
</ul>
<ul>
<li>类图代码<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">PersonServiceBean ..&gt; department</span><br><span class="line">PersonServiceBean ..&gt; IDCard</span><br><span class="line"></span><br><span class="line">PersonServiceBean ..&gt; Person</span><br><span class="line">PersonServiceBean ..&gt; PersonDao</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">department</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">IDCard</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">PersonDao</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">PersonServiceBean</span> &#123;</span><br><span class="line">-personDao：PersonDao</span><br><span class="line">+save(person Person):<span class="built_in">void</span></span><br><span class="line">+getIDCard(personId Integer):IDCard</span><br><span class="line">+modify():<span class="built_in">void</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>小结：满足以来的条件<ul>
<li>1.类中用到了对方</li>
<li>2.如果是类的成员属性</li>
<li>3.如果是方法的返回类型</li>
<li>4.是方法接收的参数类型</li>
<li>5.在方法中使用到<h4 id="泛化关系（generalizaation）"><a href="#泛化关系（generalizaation）" class="headerlink" title="泛化关系（generalizaation）"></a>泛化关系（generalizaation）</h4></li>
</ul>
</li>
<li>泛化关系实际上就是继承关系，他是依赖关系的特例</li>
<li>应用案例<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> generalizaation;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoSupport</span> </span>&#123;</span><br><span class="line">    public void save(<span class="type">Object</span> entity)&#123;&#125;</span><br><span class="line">    public void delete(<span class="type">Object</span> id)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonServiceBean</span> <span class="keyword">extends</span> <span class="title">DaoSupport</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li>类图–泛化（继承）关系图<br><img src="images%5Cgeneralizaation.png" alt="" title="泛化关系图"></li>
<li>类图代码<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@startuml</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoSupper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">+save(entity <span class="built_in">Object</span>):<span class="keyword">void</span></span><br><span class="line">+delete(id <span class="built_in">Object</span>):<span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line">DaoSupper&lt;|-- PersonServiceBean</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonServiceBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@enduml</span></span><br></pre></td></tr></table></figure></li>
<li>小结：<ul>
<li>泛化关系就是继承关系</li>
<li>如果A类继承B类，我们就说A和B之间存在泛化关系<h4 id="实现关系-Implementation"><a href="#实现关系-Implementation" class="headerlink" title="实现关系(Implementation)"></a>实现关系(Implementation)</h4></li>
</ul>
</li>
<li>实现关系实际上就i是A类实现B类，他是依赖关系的特例</li>
<li>应用案例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Implementation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonServiceBean</span> <span class="keyword">implements</span> <span class="title">PersonService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>类图–实现关系图<br><img src="images%5CImplementation.png" alt="" title="实现关系图"></li>
<li>类图代码<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@startuml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> personService&#123;</span><br><span class="line"><span class="keyword">delete</span>(id Integer):<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line">personService &lt;|.. personServiceBean</span><br><span class="line"><span class="keyword">class</span> personServiceBean &#123;</span><br><span class="line"><span class="keyword">delete</span>(id Integer):<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@enduml</span></span><br></pre></td></tr></table></figure>
<h4 id="关联关系-Association"><a href="#关联关系-Association" class="headerlink" title="关联关系(Association)"></a>关联关系(Association)</h4></li>
<li>关联关系实际上就是类与类之间的联系，他是依赖关系的的特例</li>
<li>关联具有导航性；及双向关系或单项关系</li>
<li>关系具有多重性：<br>如：<br>“1”（表示有且仅有一个），<br>“0….”(表示0个或多个)，<br>“0，1”（表示0个或者一个），<br>“n…m”（表示n到m个都可以），<br>“m…*”(表示至少m个)</li>
<li>小结：成员属性的依赖关系<h4 id="聚合关系（Aggregation）"><a href="#聚合关系（Aggregation）" class="headerlink" title="聚合关系（Aggregation）"></a>聚合关系（Aggregation）</h4></li>
<li>聚合关系表示的整体和部分的关系，整体与部分可以分开。聚合关系是关联关系的特例，所以它具有关联的导航性与多重性。</li>
<li>应用案例<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package Aggregation;</span><br><span class="line"><span class="comment">//聚合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">aggreation</span> &#123;</span></span><br><span class="line">    <span class="comment">//属性彼此可以分离</span></span><br><span class="line">    <span class="keyword">private</span>  Moniter moniter;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Mouse</span> mouse;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoniter</span><span class="params">(Moniter moniter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.moniter = moniter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMouse</span><span class="params">(<span class="built_in">Mouse</span> mouse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mouse = mouse;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Moniter</span>&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span>&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>类图–聚合关系图<br><img src="images%5CAggregation.png" alt="" title="聚合关系图"></li>
<li>类图代码<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@startuml</span></span><br><span class="line"></span><br><span class="line">computer o-- Mouse</span><br><span class="line">computer o-- Moniter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">computer</span> &#123;</span>  </span><br><span class="line">- <span class="string">mouse:</span>Mouse</span><br><span class="line">- <span class="string">montiner:</span>Moniter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@enduml</span></span><br></pre></td></tr></table></figure></li>
<li>小结：整体与部分可以分开<h4 id="组合关系-Composition"><a href="#组合关系-Composition" class="headerlink" title="组合关系(Composition)"></a>组合关系(Composition)</h4></li>
<li>组合关系：也是整体与部分的关系，但是整体与部分不可分离。组合关系关联关系的特例</li>
<li>应用案例<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> composition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">composition</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员属性和类不可分离，composition实例成员属性也实例，composition销毁成员属性也销毁</span></span><br><span class="line">    <span class="keyword">private</span> Mouse mouse = <span class="keyword">new</span> <span class="type">Mouse</span>();</span><br><span class="line">    <span class="keyword">private</span> Monitor monitor = <span class="keyword">new</span> <span class="type">Monitor</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monitor</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li>类图–组合关系图<br><img src="images%5Ccomposition.png" alt="" title="组合关系图"></li>
<li>类图代码<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@startuml</span></span><br><span class="line">computer *-- Mouse</span><br><span class="line">computer *-- Moniter</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">computer</span> &#123;</span></span><br><span class="line">- <span class="string">mouse:</span>Mouse = <span class="keyword">new</span> Mouse()</span><br><span class="line">- <span class="string">montiner:</span>Moniter = <span class="keyword">new</span> Moniter()</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@enduml</span></span><br></pre></td></tr></table></figure></li>
<li>案例2</li>
<li>在程序中我们定义实体.Person与IDCard，Head，那么Head和Person就是组合，IDCard和Person就是聚合。<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">package composition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> IDCard card;<span class="comment">//聚合</span></span><br><span class="line">    <span class="keyword">private</span> Head head = new Head();<span class="comment">//组合</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">IDCard</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Head</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li>注意：如果在程序中Person实体中定义了对IDCard进行级联删除，即删除Person时连同IDCard一起删除，那么IDCard和Person就是组合了</li>
<li>类图–组合+聚合关系图<br><img src="images%5CAggco.png" alt="" title="组合+聚合关系图"></li>
<li>类图代码<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@startuml</span></span><br><span class="line">Person o-- IDCard</span><br><span class="line">Person *-- Head</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">- <span class="string">card:</span>IDCard</span><br><span class="line">- <span class="string">head:</span>Head = <span class="keyword">new</span> Head()</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@enduml</span></span><br></pre></td></tr></table></figure></li>
<li>小结：整体与部分不可分离—组合（同生共死）</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式+七大原则</title>
    <url>/2020/01/16/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h3 id="设计模式-design-pattern"><a href="#设计模式-design-pattern" class="headerlink" title="设计模式(design pattern)"></a>设计模式(design pattern)</h3><h4 id="设计模式常用到的七大原则"><a href="#设计模式常用到的七大原则" class="headerlink" title="设计模式常用到的七大原则"></a>设计模式常用到的七大原则</h4><ul>
<li><p>单一职责原则</p>
</li>
<li><p>接口隔离原名则</p>
</li>
<li><p>依赖倒转(倒置)原则</p>
</li>
<li><p>里氏替换原则</p>
</li>
<li><p>开闭原则 ocp原则</p>
</li>
<li><p>迪米特法则</p>
</li>
<li><p>合成复用原则</p>
<h4 id="设计模式出现在软件中哪里？？？"><a href="#设计模式出现在软件中哪里？？？" class="headerlink" title="设计模式出现在软件中哪里？？？"></a>设计模式出现在软件中哪里？？？</h4></li>
<li><p>面向对象(oo)==&gt;功能模块[设计模式+算法(数据结构)]==&gt;框架[多种设计模式]==&gt;架构[服务器集群]</p>
</li>
<li><p>代码重用性(相同功能的代码不用读此编写）</p>
</li>
<li><p>可读性(编程的规范性,便于其他程序员的阅读和理解)</p>
</li>
<li><p>可扩展性(但需要添加新的功能时非常的方便,成本低，也称为可维护性)</p>
</li>
<li><p>可靠性(当我们增加新的功能后，对原有的功能没有影响)</p>
</li>
<li><p>程序高内聚，低偶合的特性</p>
<h4 id="金句分享："><a href="#金句分享：" class="headerlink" title="金句分享："></a>金句分享：</h4></li>
<li><p>设计模式包含了面向对象的精髓，“懂了设计模式，你就懂了面向对象分析和设计(OOA/D)的精髓”；</p>
<h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3></li>
<li><p>对类来说，即一个类应该只负责一项职则，如果A类负责两个不同的职责：职责1，职责2，但职责1需求变更而改变A类时，可能造成职责B执行错误，所以需要将类A的粒度分为解为A1，A2</p>
</li>
<li><p>应用案例</p>
<ul>
<li>方式一<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单一职责原则</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">singleResponsibility01</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Vehile v = <span class="keyword">new</span> Vehile();</span><br><span class="line">        v.<span class="built_in">run</span>(<span class="string">"摩托"</span>);</span><br><span class="line">        v.<span class="built_in">run</span>(<span class="string">"汽车"</span>);</span><br><span class="line">        v.<span class="built_in">run</span>(<span class="string">"飞机"</span>);<span class="comment">//飞机在公路上跑.... 违反了单一职责原则</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交通工具类</span></span><br><span class="line"><span class="comment">/*方式一</span></span><br><span class="line"><span class="comment">* 1.在方式一run()方法中违反了单一职责原则</span></span><br><span class="line"><span class="comment">* 2.解决方案：根据交通工具运行的方法不同，分解成不同的类即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehile</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">String</span> vehile)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(vehile + <span class="string">"在公路上跑....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>方式二:在类级别处理严格遵守单一原则职责<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单一职责原则</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">singleResponsibility2</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        RoadVehile v = <span class="keyword">new</span> RoadVehile();</span><br><span class="line">        v.<span class="built_in">run</span>(<span class="string">"摩托"</span>);</span><br><span class="line">        v.<span class="built_in">run</span>(<span class="string">"汽车"</span>);</span><br><span class="line">        AirVehile v1= <span class="keyword">new</span> AirVehile();</span><br><span class="line">        v1.<span class="built_in">run</span>(<span class="string">"飞机"</span>);</span><br><span class="line">        WaterVehile v2 =<span class="keyword">new</span> WaterVehile();</span><br><span class="line">        v2.<span class="built_in">run</span>(<span class="string">"航母"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交通工具类</span></span><br><span class="line"><span class="comment">/*方式二</span></span><br><span class="line"><span class="comment">* 1.遵守了单一职责原则</span></span><br><span class="line"><span class="comment">* 2.但是这样他的改动很大，即将类分解，还要修改客户端</span></span><br><span class="line"><span class="comment">* 3.直接修改Vehile这个类，改动的代码比较少==&gt;方案三</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RoadVehile</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">String</span> vehile)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(vehile + <span class="string">"在公路上跑....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirVehile</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">String</span> vehile)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(vehile + <span class="string">"在天空中跑....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaterVehile</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">String</span> vehile)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(vehile + <span class="string">"在水上跑....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>方式三：在方法级别处理在方法级遵守单一原则职责<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单一职责原则</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">singleResponsibility3</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        Vehile2 v = <span class="keyword">new</span> Vehile2();</span><br><span class="line">        v.<span class="built_in">run</span>(<span class="string">"摩托"</span>);</span><br><span class="line">        v.<span class="built_in">run</span>(<span class="string">"汽车"</span>);</span><br><span class="line">        v.runAri(<span class="string">"飞机"</span>);</span><br><span class="line">        v.runWater(<span class="string">"游艇"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//交通工具类</span></span><br><span class="line"><span class="comment">/*方式三</span></span><br><span class="line"><span class="comment">* 1.没有对原来的类做大的修改只是增加了方法</span></span><br><span class="line"><span class="comment">* 2.这里虽然再类这个级别上没有遵守单一职责原则，但在方法级别上遵守单一职责原则</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehile2</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">String</span> vehile)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(vehile + <span class="string">"在公路上跑....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAri</span><span class="params">(<span class="keyword">String</span> vehile)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(vehile + <span class="string">"在天空上跑....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWater</span><span class="params">(<span class="keyword">String</span> vehile)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(vehile + <span class="string">"在水上跑....."</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>总结：</p>
<ul>
<li>1.降低类的复杂度，一个类负责一线职责</li>
<li>2.提高 可读性，可维护性</li>
<li>3.降低变更引起的风险</li>
<li>4.通常情况下，我们应当遵守单一职责原则，只要逻辑足够简单，才可以在代码级别违反单一职责原则；只要类中方法数量足够少，可以在方法级别保持单一职责原则<h3 id="接口隔离原则-interface-Segregation-Principle"><a href="#接口隔离原则-interface-Segregation-Principle" class="headerlink" title="接口隔离原则(interface Segregation Principle)"></a>接口隔离原则(interface Segregation Principle)</h3></li>
</ul>
</li>
<li><p>客户端不应该依赖它不需要的接口，即一个类对另一个类的依赖应该建立在最小的接口上</p>
</li>
<li><p>应用案例</p>
</li>
<li><p>原始: 不遵守接口隔离原则(不是最小接口)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.principle.Segregation;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口隔离级别</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Segregation01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            A a = <span class="keyword">new</span> A();</span><br><span class="line">            a.depend1(<span class="keyword">new</span> B()); <span class="comment">//A类通过接口去依赖B</span></span><br><span class="line">            a.depend2(<span class="keyword">new</span> B());</span><br><span class="line">            a.depend3(<span class="keyword">new</span> B());</span><br><span class="line">            </span><br><span class="line">            C c = <span class="keyword">new</span> C();</span><br><span class="line">            c.depend1(<span class="keyword">new</span> D());</span><br><span class="line">            c.depend5(<span class="keyword">new</span> D());</span><br><span class="line">            c.depend6(<span class="keyword">new</span> D());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation6</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Interface1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"B 实现了 operation1"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"B 实现了 operation3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"B 实现了 operation4"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"B 实现了 operation5"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"B 实现了 operation6"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">D</span> <span class="keyword">implements</span> <span class="title">Interface1</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"D 实现了 operation1"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"D 实现了 operation3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"D 实现了 operation4"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"D 实现了 operation5"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"D 实现了 operation6"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;<span class="comment">//A类通过接口interface1 依赖(使用)B类，但是只会用到1，2，3方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">        i.operation2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">        i.operation3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;<span class="comment">//A类通过接口interface1 依赖(使用)B类，但是只会用到1，2，3方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend6</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">        i.operation6();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend5</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">        i.operation5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>改进：遵守接口隔离原则(处理：将接口拆封成独立的接口，类与类之间分别与他们需要的接口建立依赖关系)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.principle.Segregation.improve;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口隔离级别</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Segregation02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.depend1(<span class="keyword">new</span> B()); <span class="comment">//A类通过接口去依赖B</span></span><br><span class="line">        a.depend2(<span class="keyword">new</span> B());</span><br><span class="line">        a.depend3(<span class="keyword">new</span> B());</span><br><span class="line">        </span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        c.depend1(<span class="keyword">new</span> D());</span><br><span class="line">        c.depend5(<span class="keyword">new</span> D());</span><br><span class="line">        c.depend6(<span class="keyword">new</span> D());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Interface3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operation6</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">B</span> <span class="keyword">implements</span> <span class="title">Interface1</span>,<span class="title">Interface2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"B 实现了 operation2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"B 实现了 operation3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"B 实现了 operation1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">D</span> <span class="keyword">implements</span> <span class="title">Interface1</span>,<span class="title">Interface3</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"D 实现了 operation5"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"D 实现了 operation6"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        System.out.println(<span class="string">"D 实现了 operation1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;<span class="comment">//A类通过接口interface1，Interface2， 依赖(使用)B类，但是只会用到1，2，3方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend2</span><span class="params">(Interface2 i)</span> </span>&#123;</span><br><span class="line">        i.operation2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend3</span><span class="params">(Interface2 i)</span> </span>&#123;</span><br><span class="line">        i.operation3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;<span class="comment">//A类通过接口interface1，Interface3 依赖(使用)B类，但是只会用到1，2，3方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend1</span><span class="params">(Interface1 i)</span> </span>&#123;</span><br><span class="line">        i.operation1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend6</span><span class="params">(Interface3 i)</span> </span>&#123;</span><br><span class="line">        i.operation6();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depend5</span><span class="params">(Interface3 i)</span> </span>&#123;</span><br><span class="line">        i.operation5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="依赖倒转原则（Dependence-Inversion-Principle）"><a href="#依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒转原则（Dependence Inversion Principle）"></a>依赖倒转原则（Dependence Inversion Principle）</h3></li>
<li><p>1.高层模块不应该依赖底层模块，二者都应该依赖抽象</p>
</li>
<li><p>2.抽象不应该依赖细节，细节应该依赖抽象</p>
</li>
<li><p>3.依赖倒转(倒置)的中心思想是面向接口编程</p>
</li>
<li><p>4.依赖倒转是基于这样的的设计模式：</p>
<ul>
<li>相对于细节的多变性，抽象的东西要稳定的多。以抽象为基础搭建的架构比以细节为基础搭建的架构要稳定得多。在Java中抽象指的是接口或抽象类，细节就是具体的实现类</li>
</ul>
</li>
<li><p>5.使用接口或者抽象类的目的是制定好规范，而不涉及任何具体操作，把展示细节的任务交给他们的实现类去完成。</p>
</li>
<li><p>应用案例</p>
</li>
<li><p>方式1:普通方式</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.principle.inversion;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> &#123;</span></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">         <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">         Person p = <span class="keyword">new</span> Person();</span><br><span class="line">         p.receive(<span class="keyword">new</span> Email());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//完成Person接收消息的功能</span></span><br><span class="line"> <span class="comment">//方式一</span></span><br><span class="line"> <span class="comment">/* 简单，比较容易实现</span></span><br><span class="line"><span class="comment"> * 如果我们获取的对象是 微信，短信等等，则新增类，同时Person也要完成增加相应的接受方法</span></span><br><span class="line"><span class="comment"> * 解决思路：引入一个抽象的类的接口IReceover,表示接收者，这样Person类与接口IReceiver发生依赖</span></span><br><span class="line"><span class="comment"> * 因为Email，微信，等等属于接受的范围，他们各自实现IReceiver接口就ok。</span></span><br><span class="line"><span class="comment"> * 这样就遵守依赖倒转原则。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Email email)</span> </span>&#123;</span><br><span class="line">         System.out.<span class="built_in">println</span>(email.getInfo());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Email</span>&#123;</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">"电子邮件信息：Hello World"</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>方式2:遵守依赖倒转原则</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.principle.inversion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Person1 p = <span class="keyword">new</span> <span class="type">Person1</span>();</span><br><span class="line">        p.receive(<span class="keyword">new</span> <span class="type">Email1</span>());</span><br><span class="line">        p.receive(<span class="keyword">new</span> <span class="type">qq</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//完成Person接收消息的功能</span></span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="comment">/* 简单，比较容易实现</span></span><br><span class="line"><span class="comment">* 如果我们获取的对象是 微信，短信等等，则新增类，同时Person也要完成增加相应的接受方法</span></span><br><span class="line"><span class="comment">* 解决思路：引入一个抽象的类的接口IReceover,表示接收者，这样Person类与接口IReceiver发生依赖</span></span><br><span class="line"><span class="comment">* 因为Email，微信，等等属于接受的范围，他们各自实现IReceiver接口就ok。</span></span><br><span class="line"><span class="comment">* 这样就遵守依赖倒转原则。</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span>&#123;</span><br><span class="line">    <span class="comment">//这里是我们是对接口的依赖</span></span><br><span class="line">    <span class="keyword">public</span> void receive(IReceiver ireceiver) &#123;</span><br><span class="line">        System.out.println(ireceiver.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email1</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IReceiver</span></span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getInfo() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"电子邮件信息：Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//增加功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">qq</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">IReceiver</span></span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getInfo() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"QQ信息：你好你好！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReceiver</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> getInfo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>依赖关系传递的三种方式</p>
<ul>
<li>接口传递<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DendencyPass</span></span>&#123;</span><br><span class="line">      ChangHong changHong =  <span class="keyword">new</span> ChangHong();</span><br><span class="line">      OpenAndClose openAndClose = <span class="keyword">new</span> OpenAndClose();</span><br><span class="line">      openAndClose.open(changHong);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">IOpenAndClose</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">ITV</span></span>&#123;<span class="comment">//ITV接口</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">OpenAndClose</span> <span class="keyword">implements</span> <span class="title">IOpenAndClass</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(ITV tv)</span></span>&#123;</span><br><span class="line">         tv.play();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangHong</span> <span class="keyword">implements</span> <span class="title">ITV</span></span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"长虹电视机，打开"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>构造方法传递<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DendencyPass</span></span>&#123;</span><br><span class="line">     ChangHong changHong =  <span class="keyword">new</span> ChangHong();</span><br><span class="line">     <span class="comment">//通过构造器进行依赖的传递</span></span><br><span class="line">     OpenAndClose openAndClose = <span class="keyword">new</span> OpenAndClose(changHong);</span><br><span class="line">     opebAndClose.open();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">IOpenAndClose</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">ITV</span></span>&#123;<span class="comment">//ITV接口</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">OpenAndClose</span> <span class="keyword">implements</span> <span class="title">IOpenAndClass</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> ITV tv;<span class="comment">//成员</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">OpenAndClose</span><span class="params">(ITV tv)</span></span>&#123;<span class="comment">//构造器</span></span><br><span class="line">         <span class="keyword">this</span>.tv =tv;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.tv.play();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>setter方法依赖传递<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DendencyPass</span></span>&#123;</span><br><span class="line">    ChangHong changHong =  <span class="keyword">new</span> ChangHong();</span><br><span class="line">    <span class="comment">//通过setter方法传递</span></span><br><span class="line">    OpenAndClose openAndClose = <span class="keyword">new</span> OpenAndClose();</span><br><span class="line">    opebAndClose.setTv(changHong);</span><br><span class="line">    opebAndClose.open();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IOpenAndClose</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(ITV tv)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">interface ITV</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenAndClose</span> <span class="keyword">implements</span> <span class="title">IOpenAndClose</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ITV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIv</span><span class="params">(ITV tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangHong</span> <span class="keyword">implements</span> <span class="title">ITV</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"长虹电视机，打开"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li>总结:<ul>
<li>1.低层模块尽量都要有抽象类或接口，或者两者都有，程序的稳定性会更好</li>
<li>2.变量的声明类型尽量是抽象类或者接口，这样我们的变量引用和实际对象间，就存在一个缓存层，利于程序扩展和优化</li>
<li>3.继承时遵守里氏替换原则<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3></li>
</ul>
</li>
</ul>
<ul>
<li>就是告诉我们继承要遵守什么规则，注意什么问题</li>
<li>OO编程中的继承性的思考和说明<ul>
<li>1.继承包含这样一层含义：父类中凡是已经实现的方法，实际上是在设定规范和契约，虽然他不强制要求所有子类必须遵守这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏</li>
<li>2.集成在程序设计带来便利的同时，也得来了弊端，比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的偶合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有子类，并且父类修改后，所有涉及到子类的功能都有可能产生故障；</li>
<li>问题提出；在编程中，如何正确的使用继承？ == 里氏替换原则</li>
</ul>
</li>
<li>里式替换原则基本介绍：<ul>
<li>1.里氏替换原则(Lidkow Substitution Principle)在1988年，由麻省理工学院一位姓里的女士提出；</li>
<li>2.如果对每一个类型为T1的对象o1,都有类型T2的对象o2，使得以T1定义的所有的程序p在所有的对象o1,都代换成o2时，程序P的行为没有发生变化，那么类型T2是类型T1的子类型.换句话说，所有引用基类的地方必须能透明的使用其子类对象</li>
<li>3.在使用继承时，遵守里式替换原则，在子类中尽量不要重写父类的方法</li>
<li><ol start="4">
<li>里式替换原则告诉我们，继承实际上让两个类偶合性增强，在适当的情况下，可以通过聚合，组合，依赖来解决问题<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">package com.zhao.principle.Liskov;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Principle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        A a = new A();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"11-3="</span> + a.fun1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"1-8="</span> + a.fun1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----------"</span>);</span><br><span class="line">        B b = new B();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"11-3="</span> + b.fun1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"1-8="</span> + b.fun1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"11+3+9="</span> + b.fun1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A类</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">A</span> &#123;</span><br><span class="line"><span class="comment">//	返回两个数的差</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> fun1(<span class="built_in">int</span> num1, <span class="built_in">int</span> num2) </span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B继承A</span></span><br><span class="line"><span class="comment">//增加了一个新的功能:完成两个数相加然后和9求和</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">B</span> <span class="symbol">extends</span> <span class="symbol">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> fun1(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> fun2(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> fun1(a, b) + <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
</li>
<li>注意：上面我们发现原来运行的减法功能发生错误。原因就是类B无意中重写了父类的方法，造成原有功能出现错误，在实际编程中，在实际编程中，我们常常通过重写父类的方法完成新的功能，这样写起来虽然简单，但整个继承体系的复用会比较差，特别是运行多态比较频繁的时候</li>
<li>解决方法：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系代替<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">Principle2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> static <span class="built_in">void</span> main(String[] args) &#123;</span><br><span class="line">        A a = new A();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"11-3="</span> + a.fun1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"1-8="</span> + a.fun1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"-----------"</span>);</span><br><span class="line"></span><br><span class="line">        B b = new B();</span><br><span class="line">        <span class="comment">// 因为B类不在继承A类，因此调用者，不会再fun1是求减法</span></span><br><span class="line">        <span class="comment">//调用的功能就会明确</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"11+3="</span> + b.fun1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"1+8="</span> + b.fun1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"11+3+9="</span> + b.fun2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//任然可以使用到A类的相关方法</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"11-3="</span>+b.fun3(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个更加基础的基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Base</span>&#123;</span><br><span class="line"><span class="comment">//	把更加基础的方法和成员写到Basic类中</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//A类</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">A</span> <span class="symbol">extends</span> <span class="symbol">Base</span>&#123;</span><br><span class="line"><span class="comment">//	返回两个数的差</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> fun1(<span class="built_in">int</span> num1, <span class="built_in">int</span> num2) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//B继承A</span></span><br><span class="line"><span class="comment">//增加了一个新的功能:完成两个数相加然后和9求和</span></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">B</span> <span class="symbol">extends</span> <span class="symbol">Base</span> &#123;</span><br><span class="line">    <span class="comment">//如果B类需要使用A类的方法，使用组合关系</span></span><br><span class="line">    <span class="keyword">private</span> A a = new A();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> fun1(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> fun2(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> fun1(a, b) + <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果我仍然想使用A的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> fun3(<span class="built_in">int</span> a,<span class="built_in">int</span> b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a.fun1(a,b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="开闭原则-Open-Closed-Principle"><a href="#开闭原则-Open-Closed-Principle" class="headerlink" title="开闭原则(Open Closed Principle)"></a>开闭原则(Open Closed Principle)</h3></li>
<li>1.开闭原则是编程中最基础的，最重要的设计原则</li>
<li>2.一个软件实体类，模块和函数应该对扩展开放(对提供方)，对修改关闭(对使用方)，用抽象构建框架，用实现扩展细节</li>
<li>3.但软件需要变化时，尽量扩展软件实体的行为来实现变化，而不是通过修改已有的代码来实现变化。</li>
<li>4.编程中遵守其他原则，以及使用设计模式的目的就是 遵守开闭原则</li>
<li>应用案例<br>*方式一：<ul>
<li>1.优点是好理解，简单易操作</li>
<li>2.缺点是违反了设计模式的ocp原则，即对扩展开放发，对修改关闭。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码，</li>
<li>3.比如我们则时要增加一个图形类，我们需要做以下修改，修改的地方比较多 <figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.principle.ocp;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ocp</span> </span>&#123;</span><br><span class="line">    public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> g = <span class="keyword">new</span> <span class="type">GraphicEditor</span>();</span><br><span class="line">        g.drawShape(<span class="keyword">new</span> <span class="type">Rectangle</span>());</span><br><span class="line">        g.drawShape(<span class="keyword">new</span> <span class="type">Circle</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个绘制图形的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span></span>&#123;</span><br><span class="line">    <span class="comment">//接受Shape对象，然后根据type绘制不同的图形</span></span><br><span class="line">    public void drawShape(<span class="type">Shape</span> s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.m_type == <span class="number">1</span>) &#123;</span><br><span class="line">            drawRectangle(s);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.m_type == <span class="number">2</span>) &#123;</span><br><span class="line">            drawCircle(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public  void drawRectangle(<span class="type">Shape</span> r) &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"矩形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    public void drawCircle(<span class="type">Shape</span> r) &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"圆形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">        int m_type;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">        <span class="type">Rectangle</span>()&#123;</span><br><span class="line">            <span class="keyword">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">        <span class="type">Circle</span>()&#123;</span><br><span class="line">            <span class="keyword">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>方式二：满足ocp原则</li>
<li>改进思路分析：</li>
<li>思路：把创建Shape类做成抽象类，并提供一个抽象的draw方法，让子类去实现即可，这样就满足开闭原则“对扩展开放(对提供方)，对修改关闭(使用方)”<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.principle.ocp.update;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ocp</span> </span>&#123;</span><br><span class="line">    public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">        <span class="type">GraphicEditor</span> g = <span class="keyword">new</span> <span class="type">GraphicEditor</span>();</span><br><span class="line">        g.drawShape(<span class="keyword">new</span> <span class="type">Rectangle</span>());</span><br><span class="line">        g.drawShape(<span class="keyword">new</span> <span class="type">Circle</span>());</span><br><span class="line">        g.drawShape(<span class="keyword">new</span> <span class="type">Other</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个绘制图形的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span></span>&#123;</span><br><span class="line">    <span class="comment">//接受Shape对象，然后根据type绘制不同的图形</span></span><br><span class="line">    public void drawShape(<span class="type">Shape</span> s) &#123;</span><br><span class="line">        s.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基类 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">        int m_type;</span><br><span class="line">        public <span class="keyword">abstract</span> void draw();<span class="comment">//抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">        <span class="type">Rectangle</span>()&#123;</span><br><span class="line">            <span class="keyword">super</span>.m_type = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public void draw() &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="type">System</span>.out.println(<span class="string">"绘制矩形"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">        <span class="type">Circle</span>()&#123;</span><br><span class="line">            <span class="keyword">super</span>.m_type = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        public void draw() &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            <span class="type">System</span>.out.println(<span class="string">"绘制三角形"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//新增图形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="type">Other</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>.m_type = <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"绘制立方体"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="迪米特法则-Demeter-Principle"><a href="#迪米特法则-Demeter-Principle" class="headerlink" title="迪米特法则(Demeter Principle)"></a>迪米特法则(Demeter Principle)</h3></li>
</ul>
</li>
</ul>
</li>
<li>基本介绍：</li>
<li>1.一个对象应该对其他对象保持最小的了解</li>
<li>2.类与类关系越密切，耦合度越大</li>
<li>3.迪米特法则又叫最小知道法则，即一个类对自己依赖的类知道越少越好。也就是说，对于被依赖的类不管多麽复杂，都尽量见逻辑封装在类内部。对外除了提供的public方法，  不对外泄露任何消息</li>
<li>4.迪米特法则还有个更简单的定义：只与直接的朋友通信；</li>
<li>5.直接的朋友：每个对象都会与其他对象有偶合关系，只要两个对象之间有偶合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖，关联，组合，聚合，等。<br>其中，我们称出现成员变量，方法参数，方法返回值中的类为直接的朋友，而出现在局部变量中的类不是直接朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</li>
<li>应用案例</li>
<li>方式一：不满足迪米特法则<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.principle.demeter.update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demeter1</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建了一个SchoolManager对象</span></span><br><span class="line">        SchoolManager schoolMansger =  <span class="keyword">new</span> SchoolManager();</span><br><span class="line">        <span class="comment">//输出学院的id和学校的Id</span></span><br><span class="line">        schoolMansger.printAllEmployee(<span class="keyword">new</span> CollegeManager());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学校员工</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">String</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学院员工</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeEmployee</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">String</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//管理学院员工</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeManager</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CollegeEmployee&gt; getAllEmployee()&#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;CollegeEmployee&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">            CollegeEmployee emp = <span class="keyword">new</span> CollegeEmployee();</span><br><span class="line">            emp.setId(<span class="string">"学院员工id="</span>+i);</span><br><span class="line">            <span class="built_in">list</span>.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学院管理类</span></span><br><span class="line"><span class="comment">//分析直接朋友 Employee CollegeManager</span></span><br><span class="line"><span class="comment">//这个不是直接朋友 CollegeEmployee 而是陌生类,这样就违背了迪米特原则</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolManager</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; getAllEmployee()&#123;</span><br><span class="line">        List&lt;Employee&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">            Employee emp = <span class="keyword">new</span> Employee();</span><br><span class="line">            emp.setId(<span class="string">"学校员工Id="</span>+i);</span><br><span class="line">            <span class="built_in">list</span>.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//该方法完成输出学校总部和学院员工信息的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printAllEmployee</span><span class="params">(CollegeManager sub)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//分析问题</span></span><br><span class="line">        <span class="comment">//1.这里的CollegeEmployee不是SchoolManager的直接朋友</span></span><br><span class="line">        <span class="comment">//2.CollegeEmployee是以局部变量方式出现在SchoolManager</span></span><br><span class="line">        <span class="comment">//3.违反了迪米特法则</span></span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"------学院员工------"</span>);</span><br><span class="line">        <span class="keyword">for</span>(CollegeEmployee e : list1) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Employee&gt; list2 = <span class="keyword">this</span>.getAllEmployee();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"-------学校总部员工--------"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Employee e : list2) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(e.getId());</span><br><span class="line">        &#125;		</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>方式二：满足迪米特法则<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.principle.demeter.update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demeter1</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"使用迪米特法则的改进"</span>);</span><br><span class="line">        <span class="comment">//创建了一个SchoolManager对象</span></span><br><span class="line">        SchoolManager schoolMansger =  <span class="keyword">new</span> SchoolManager();</span><br><span class="line">        <span class="comment">//输出学院的id和学校的Id</span></span><br><span class="line">        schoolMansger.printAllEmployee(<span class="keyword">new</span> CollegeManager());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学校员工</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">String</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学院员工</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeEmployee</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">String</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//管理学院员工</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeManager</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CollegeEmployee&gt; getAllEmployee()&#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;CollegeEmployee&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">            CollegeEmployee emp = <span class="keyword">new</span> CollegeEmployee();</span><br><span class="line">            emp.setId(<span class="string">"学院员工id="</span>+i);</span><br><span class="line">            <span class="built_in">list</span>.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出学院员工的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">printEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将输出学院员工方法，封装到CollegeManager</span></span><br><span class="line">            List&lt;CollegeEmployee&gt; list1 = <span class="keyword">this</span>.getAllEmployee();</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"------学院员工------"</span>);</span><br><span class="line">            <span class="keyword">for</span>(CollegeEmployee e : list1) &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(e.getId());</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学院管理类</span></span><br><span class="line"><span class="comment">//分析直接朋友 Employee CollegeManager</span></span><br><span class="line"><span class="comment">//这个不是直接朋友 CollegeEmployee 而是陌生类,这样就违背了迪米特原则</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolManager</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; getAllEmployee()&#123;</span><br><span class="line">        List&lt;Employee&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">            Employee emp = <span class="keyword">new</span> Employee();</span><br><span class="line">            emp.setId(<span class="string">"学校员工Id="</span>+i);</span><br><span class="line">            <span class="built_in">list</span>.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//该方法完成输出学校总部和学院员工信息的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printAllEmployee</span><span class="params">(CollegeManager sub)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//分析问题</span></span><br><span class="line">        <span class="comment">//将输出学院员工方法，封装到CollegeManager</span></span><br><span class="line">        sub.printEmployee();</span><br><span class="line">        List&lt;Employee&gt; list2 = <span class="keyword">this</span>.getAllEmployee();</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"-------学校总部员工--------"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Employee e : list2) &#123;</span><br><span class="line">            System.out.<span class="built_in">println</span>(e.getId());</span><br><span class="line">        &#125;		</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>总结：<ul>
<li>1.迪米特法则的核心是降低类之间的耦合</li>
<li>2.但是注意：由于每个类都是减少了不必要的依赖，因此迪米特法则只是要求降低类之间(对象间)耦合关系，并不是要求完全没有依赖关系<h3 id="合成复用原则-Composite-Reuse-Principle"><a href="#合成复用原则-Composite-Reuse-Principle" class="headerlink" title="合成复用原则(Composite Reuse Principle)"></a>合成复用原则(Composite Reuse Principle)</h3></li>
</ul>
</li>
<li>基本介绍：<br>原则是尽量使用合成/聚合的方式，而不是使用继承</li>
</ul>
<h3 id="设计原则的核心思想"><a href="#设计原则的核心思想" class="headerlink" title="设计原则的核心思想"></a>设计原则的核心思想</h3><ul>
<li>1.找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混合在一起</li>
<li>2.针对接口编程，而不是针对实现编程</li>
<li>3.为了交互对象之间的松耦合设计而努力</li>
</ul>
]]></content>
      <tags>
        <tag>Java设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot微服务框架+Docker+数据访问整合(五)</title>
    <url>/2020/01/16/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-Docker-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E6%95%B4%E5%90%88-%E4%BA%94/</url>
    <content><![CDATA[<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul>
<li>Docker是一个开源的应用容器引擎；</li>
<li>Docker支持将软件编译成一个镜像；然后 在镜像中各种软件做好配置，<br>将镜像发布 出去，其他使用者可以直接使用这个镜像。 运行中的这个镜像称为容器，容器启动是 非常快速的<h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4></li>
<li>docker主机：安装了Docker程序的机器(Docker直接安装在系统上面)</li>
<li>docker客户端(Client):连接Docker主机进行操作 API与Docker守护进程通行</li>
<li>docker仓库(Regjistries):Docker仓库用来保存镜像，可以理解为代码控制中的代码仓库。</li>
<li>docker镜像(Images):软件打包好的镜像；放在docker仓库中；</li>
<li>dovker容器(Container):镜像启动后的实例称为一个容器:容器时独立运行的 一个人或一组应用；</li>
</ul>
<ul>
<li>使用Daocker步骤：<ul>
<li>安装Docker</li>
<li>去Docker仓库找到这个软件的镜像</li>
<li>直接使用Docker运行这个镜像，这个镜像就会生成一个Docker容器</li>
<li>对容器的启动停止就是对软件的启动停止<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3></li>
</ul>
</li>
</ul>
<ul>
<li><p>虚拟机manajor</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>安装命令：sudo pacman -S docker</span><br><span class="line"><span class="bullet">* </span>注意：出现报错：必须删除 /var/pacman/...</span><br><span class="line"><span class="bullet">* </span>删除命令：sudo pacman rm -rf /var/pacman/...</span><br><span class="line"><span class="bullet">* </span>启动docker服务:sudo systemctl start docker </span><br><span class="line"><span class="bullet">* </span>查看docker服务的状态:sudo systemctl status docker</span><br><span class="line"><span class="bullet">* </span>设置docker开机启动服务:sudo systemctl enable docker </span><br><span class="line"><span class="bullet">* </span>停止docker：systemctl stop  docker</span><br><span class="line"><span class="bullet">* </span>查找所有镜像命令：sudo docker search mysql</span><br><span class="line"><span class="bullet">* </span>拉取或下载镜像：sudo docker pull mysql   (latest之默认最新版本)</span><br><span class="line"><span class="bullet">* </span>查看所有本地镜像：sudo docker images</span><br><span class="line"><span class="bullet">* </span>删除指定的本地镜像：sudo docker rmi image-id （image-id镜像id）</span><br></pre></td></tr></table></figure>
<h4 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h4></li>
<li><p>软件操作—》运行镜像–产生一个容器（正在运行的软件）；</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">* 运行镜像命令：sudo docker <span class="builtin-name">run</span> --name mytomcat(自定义的名字) -d(表示后台运行) tomcat：latest(镜像名，latest就是tag，是默认的可省略)</span><br><span class="line">* 查看运行中的容器：sudo docker ps</span><br><span class="line">* 停止运行中的容器：sudo docker stop mytomcat/id（名字或者容器Id）</span><br><span class="line">* 查看所有容器：sudo docker ps -a</span><br><span class="line">* 删除指定容器：sudo rm container-id（容器Id ）</span><br><span class="line">* 启动指定容器：sudo docker start 容器Id</span><br><span class="line">* 端口映射：-p   把当前主机的端口(映射到)容器内部的端口</span><br><span class="line">* 启动一个做了端口映射的Tomcat</span><br><span class="line">    命令：sudo docker <span class="builtin-name">run</span> -d -p 8888:8080</span><br><span class="line">    -d:后台运行</span><br><span class="line">    -p：将主机端口映射到容器中的一个端口     格式： 8888:8080(主机端口：容器端口)</span><br><span class="line">*manjaro中自带的查看网络的命令是:<span class="built_in"> ip </span>addr<span class="built_in">/ip </span>address</span><br><span class="line">* window访问 虚拟机ip地址：8888</span><br><span class="line">    注意：要关闭linux的防火墙</span><br><span class="line">    1.查看防火墙状态</span><br><span class="line">     查看防火墙状态 systemctl status firewalld</span><br><span class="line">     开启防火墙 systemctl start firewalld  </span><br><span class="line">     关闭防火墙 systemctl stop firewalld</span><br><span class="line">     若遇到无法开启</span><br><span class="line">     先用：systemctl unmask firewalld.service </span><br><span class="line">     然后：systemctl start firewalld.service</span><br><span class="line">*查看容器日志：sudo docker logs 容器名/容器Id</span><br><span class="line">*更多命令查看官方文档：https:docs.docker.com/engine/reference/commandline/docker/</span><br></pre></td></tr></table></figure>
<h4 id="数据访问JDBC自动配置"><a href="#数据访问JDBC自动配置" class="headerlink" title="数据访问JDBC自动配置"></a>数据访问JDBC自动配置</h4></li>
<li><p>pom.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>application.yml文件</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">spring</span>:</span><br><span class="line"><span class="attribute">datasource</span>:</span><br><span class="line">    <span class="attribute">username</span>: root</span><br><span class="line">    <span class="attribute">password</span>: zhao1314520</span><br><span class="line">    <span class="attribute">url</span>: <span class="attribute">jdbc</span>:<span class="attribute">mysql</span>:<span class="comment">//localhost:3306/jdbc</span></span><br><span class="line">    <span class="attribute">driver-class-name</span>: com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure></li>
<li><p>默认数据源：com.zaxxer.hikari.HikariDataSource</p>
</li>
<li><p>数据源的相关配置都在： DataSourceProperties里面</p>
</li>
<li><p>自动配置原理:spring-boot-autoconfigure-2.2.2.RELEASE.jar!\org\springframework\boot\autoconfigure\jdbc</p>
<ul>
<li><p>1.参考DataSourceConfiguration，根据配置创建数据源</p>
</li>
<li><p>2.可使用spring.datasource.type指定自定义的数据源类</p>
</li>
<li><p>3.SpringBoot默认支持</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.commons</span><span class="selector-class">.dbcp2</span><span class="selector-class">.BasicDataSource</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.zaxxer</span><span class="selector-class">.hikari</span><span class="selector-class">.HikariDataSource</span></span><br><span class="line"><span class="selector-tag">org</span><span class="selector-class">.apache</span><span class="selector-class">.tomcat</span><span class="selector-class">.jdbc</span><span class="selector-class">.pool</span><span class="selector-class">.DataSource</span></span><br></pre></td></tr></table></figure></li>
<li><p>4.自定义数据源类型</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Configuration</span>(</span><br><span class="line">    proxyBeanMethods = false</span><br><span class="line">)</span><br><span class="line"><span class="variable">@ConditionalOnMissingBean</span>(&#123;DataSource.class&#125;)</span><br><span class="line"><span class="variable">@ConditionalOnProperty</span>(</span><br><span class="line">    name = &#123;<span class="string">"spring.datasource.type"</span>&#125;</span><br><span class="line">)</span><br><span class="line">static class Generic &#123;</span><br><span class="line">    <span class="selector-tag">Generic</span>() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Bean</span></span><br><span class="line">    DataSource dataSource(DataSourceProperties properties) &#123;</span><br><span class="line">        <span class="comment">//使用DataSourceBuilder（建造者模式）创建数据源 ，利用反射创建响应type的数据源，并且绑定相关属性</span></span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">properties</span><span class="selector-class">.initializeDataSourceBuilder</span>()<span class="selector-class">.build</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>5.DataSourceInitializer<ul>
<li>runScripts() 运行建表语句；插入数据的sql语句</li>
<li>默认只需要将文件命名为：schema-<em>sql， data-</em>sql<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> private <span class="built_in">List</span>&lt;Resource&gt; getScripts(<span class="built_in">String</span> propertyName, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; resources, <span class="built_in">String</span> fallback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (resources != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getResources(propertyName, resources, <span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">String</span> platform = <span class="keyword">this</span>.properties.getPlatform();</span><br><span class="line">        <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; fallbackResources = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        fallbackResources.add(<span class="string">"classpath*:"</span> + fallback + <span class="string">"-"</span> + platform + <span class="string">".sql"</span>);</span><br><span class="line">        fallbackResources.add(<span class="string">"classpath*:"</span> + fallback + <span class="string">".sql"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getResources(propertyName, fallbackResources, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>自动建表application.yml配置(注意表明命名： schema=classpath: schema.sql)</p>
<ul>
<li>第一种方式：<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">zhao1314520</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/jdbc</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="comment">#必须加上下面两个</span></span><br><span class="line">        <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">        <span class="string">schema=classpath:</span> <span class="string">schema.sql</span></span><br></pre></td></tr></table></figure></li>
<li>第二种方式：指定位置<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta">#此处schma为list 可以多个表</span></span><br><span class="line"><span class="symbol">schema:</span></span><br><span class="line">    - classpath:department.sql</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>6.操作数据库：自动配置了jdbcTemplate操作数据库</p>
  <figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">jdbcTemlater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query"</span>)</span><br><span class="line">    public <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; map()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">List</span>&lt;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;&gt; list = jdbcTemplate.queryForList(<span class="string">"select * from department"</span>);</span><br><span class="line">        <span class="keyword">return</span> list.<span class="keyword">get</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>7.注意测试和SpringBoot主程序运是两回事</p>
<h3 id="阿里数据源druid"><a href="#阿里数据源druid" class="headerlink" title="阿里数据源druid"></a>阿里数据源druid</h3></li>
<li><p>1.引入druid</p>
<ul>
<li>在maven仓库(mvnrepository.com)中找到druid  <!--引入自定义的数据源阿里 druid-->
<!-- https://mvnrepository.com/artifact/com.alibaba/druid -->
<dependency>
  <groupId>com.alibaba</groupId>
  <artifactId>druid</artifactId>
  <version>1.1.20</version>
</dependency></li>
</ul>
</li>
<li><p>2.配置属性</p>
<ul>
<li>application.yml<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 引入自定义数据源</span></span><br><span class="line">   <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#详细配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">datasource:</span></span><br><span class="line">   <span class="comment">#   数据源基本配置</span></span><br><span class="line">       <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">       <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">       <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">       <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_crud</span></span><br><span class="line">       <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">   <span class="comment">#   数据源其他配置</span></span><br><span class="line">       <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">       <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">       <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">       <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">       <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">       <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">       <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">       <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">       <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">       <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">       <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">   <span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙  </span></span><br><span class="line">       <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">       <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">       <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span>  </span><br><span class="line">       <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">   <span class="comment">#   注意上面 数据源其他配置  配置监控统计拦截的filters SpringBoot解析不到需要自己配置</span></span><br></pre></td></tr></table></figure></li>
<li>config 配置类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   将配置属性绑定  已spring.datasource开始的...</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>3.配置druid数据源监控</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">@Configuration</span><br><span class="line">public <span class="keyword">class</span> DruidConfig &#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = <span class="module-access"><span class="module"><span class="identifier">LoggerFactory</span>.</span></span>get<span class="constructor">Logger(DruidConfig.<span class="params">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//   将配置属性绑定  已spring.datasource开始的...</span></span><br><span class="line">    @<span class="constructor">ConfigurationProperties(<span class="params">prefix</span> = <span class="string">"spring.datasource"</span>)</span></span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource druid<span class="constructor">DataSource()</span>&#123;</span><br><span class="line">        return <span class="keyword">new</span> <span class="constructor">DruidDataSource()</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1。配置一个管理后台的Servlet</span></span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean start<span class="constructor">ViewServlet()</span>&#123;</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> <span class="constructor">ServletRegistrationBean(<span class="params">new</span> StatViewServlet()</span>, <span class="string">"/druid/*"</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> <span class="constructor">HashMap()</span>;</span><br><span class="line">    initParams.put(<span class="string">"jmxUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"jmxPasswordd"</span>,<span class="string">"123456"</span>);</span><br><span class="line"><span class="comment">/*        initParams.put("allow",""); //默认就是允许所有访问</span></span><br><span class="line"><span class="comment">        initParams.put("deny","192.168.15.21");  //拒绝IP地址访问*/</span></span><br><span class="line"></span><br><span class="line">        bean.set<span class="constructor">InitParameters(<span class="params">initParams</span>)</span>;</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.配置一个web监控的filter</span></span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean  web<span class="constructor">StatFilter()</span>&#123;</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> <span class="constructor">FilterRegistrationBean()</span>;</span><br><span class="line">        bean.set<span class="constructor">Filter(<span class="params">new</span> WebStatFilter()</span>);</span><br><span class="line">        Map&lt;String,String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</span><br><span class="line">        bean.set<span class="constructor">InitParameters(<span class="params">initParams</span>)</span>;</span><br><span class="line">        bean.set<span class="constructor">UrlPatterns(Arrays.<span class="params">asList</span>(<span class="string">"/*"</span>)</span>);</span><br><span class="line"></span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h3></li>
<li><p>1.添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--mybatis整合Springboot依赖  由mybatis出的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>2.数据库建表(自动application.yml文件配置)</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">initialization-<span class="string">mode:</span> always</span><br><span class="line"><span class="string">schema:</span></span><br><span class="line">- <span class="string">classpath:</span>sql/employee.sql</span><br><span class="line">- <span class="string">classpath:</span>sql/department.sql</span><br></pre></td></tr></table></figure></li>
<li><p>3.创建javaBean(实体类)</p>
</li>
<li><p>4.mybatis注解版</p>
<ol>
<li>mapper<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptId</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"id"</span>)  <span class="comment">//是不是使用自动生成的主键 ,Department 里面id是封装主键的</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into department(departmentName) values(#&#123;departmentName&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Controller<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Autowired(required = false)</span></span><br><span class="line">        DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping(<span class="meta-string">"/dept/&#123;id&#125;"</span>)</span></span><br><span class="line">        <span class="keyword">public</span> Department getDept(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> Integer id)&#123;</span><br><span class="line">            <span class="keyword">return</span> departmentMapper.getDeptId(id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@GetMapping(<span class="meta-string">"/dept"</span>)</span></span><br><span class="line">        <span class="keyword">public</span> Department insertDept(Department department) &#123;</span><br><span class="line">            departmentMapper.insertDept(department);</span><br><span class="line">            <span class="keyword">return</span> department;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<ul>
<li><p>1.在遇到表中字段与实体类字段不统一即Xml配置中的<resultMap>;<br>解决方法：在不写配置Xml文件基础上，添加配置类Config</p>
<ul>
<li>自定义Mybatis的配置规则,即给容器中添加一个ConfigurationCustomizer；<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">@org.springframework.context.<span class="keyword">annotation</span>.<span class="title">Configuration</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    /<span class="regexp">/配置定制器</span></span><br><span class="line"><span class="regexp">    @Bean</span></span><br><span class="line"><span class="regexp">    public ConfigurationCustomizer configurationCustomizer()&#123;</span></span><br><span class="line"><span class="regexp">        return new ConfigurationCustomizer()&#123;</span></span><br><span class="line"><span class="regexp">            @Override</span></span><br><span class="line"><span class="regexp">            public void customize(Configuration configuration) &#123;</span></span><br><span class="line"><span class="regexp">                configuration.setMapUnderscoreToCamelCase(true);</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>2.注意：在通过@GetMapping注解是通过路径添加数据会报以下错<br>javax.servlet.ServletException: Circular view path [url]: would dispatch back to the current handler URL [/url] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.)</p>
<ul>
<li>大概意思就是没得视图可跳转</li>
</ul>
</li>
<li><p>解决方法：将@Controller注解改为@RestController</p>
</li>
<li><p>@Controller和@RestController的区别？</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">            知识点：<span class="meta">@RestController</span>注解相当于<span class="meta">@ResponseBody</span> ＋ <span class="meta">@Controller</span>合在一起的作用。</span><br><span class="line"></span><br><span class="line">            <span class="number">1</span>) 如果只是使用<span class="meta">@RestController</span>注解Controller，则Controller中的方法无法返回jsp页面，或者html，配置的视图解析器 InternalResourceViewResolver不起作用，返回的内容就是Return 里的内容。</span><br><span class="line">            <span class="number">2</span>) 如果需要返回到指定页面，则需要用 <span class="meta">@Controller</span>配合视图解析器InternalResourceViewResolver才行。</span><br><span class="line">                如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上<span class="meta">@ResponseBody</span>注解。</span><br><span class="line"></span><br><span class="line">            例如：</span><br><span class="line"></span><br><span class="line">            <span class="number">1</span>.使用<span class="meta">@Controller</span> 注解，在对应的方法上，视图解析器可以解析<span class="keyword">return</span> 的jsp,html页面，并且跳转到相应页面</span><br><span class="line">            若返回json等内容到页面，则需要加<span class="meta">@ResponseBody</span>注解</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="meta">@CrossOrigin</span></span><br><span class="line">            <span class="meta">@Controller</span></span><br><span class="line">            <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploadController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//跳转到上传文件的页面</span></span><br><span class="line">            <span class="meta">@RequestMapping(value=<span class="meta-string">"/gouploadimg"</span>, method = RequestMethod.GET)</span></span><br><span class="line">            <span class="keyword">public</span> String goUploadImg() &#123;</span><br><span class="line">            <span class="comment">//跳转到 templates 目录下的 uploadimg.html</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"uploadimg"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理文件上传</span></span><br><span class="line">            <span class="meta">@RequestMapping(value=<span class="meta-string">"/testuploadimg"</span>, method = RequestMethod.POST)</span></span><br><span class="line">            <span class="keyword">public</span> <span class="meta">@ResponseBody</span> String uploadImg(<span class="meta">@RequestParam(<span class="meta-string">"file"</span>)</span> MultipartFile file,</span><br><span class="line">            HttpServletRequest request) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">"调用文件上传方法"</span>);</span><br><span class="line">            String contentType = file.getContentType();</span><br><span class="line">            String fileName = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">            <span class="number">2</span>.<span class="meta">@RestController</span>注解，相当于<span class="meta">@Controller</span>+<span class="meta">@ResponseBody</span>两个注解的结合，返回json数据不需要在方法前面加<span class="meta">@ResponseBody</span>注解了，但使用<span class="meta">@RestController</span>这个注解，就不能返回jsp,html页面，视图解析器无法解析jsp,html页面</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="meta">@CrossOrigin</span></span><br><span class="line">            <span class="meta">@RestController</span> <span class="comment">/* @Controller + @ResponseBody*/</span></span><br><span class="line">            <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HospitalController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//注入Service服务对象</span></span><br><span class="line">                <span class="meta">@Autowired</span></span><br><span class="line">                <span class="keyword">private</span> HospitalService hospitalService;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                * 查询所有医院信息（未分页）</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line"></span><br><span class="line">                <span class="meta">@RequestMapping(value = <span class="meta-string">"findAllHospital"</span>,method = RequestMethod.GET)</span></span><br><span class="line">                <span class="keyword">public</span>  List&lt;Hospital&gt; findAllHospital()&#123;</span><br><span class="line">                    List&lt;Hospital&gt; hospitalList= hospitalService.findAllHospital();</span><br><span class="line">                    <span class="keyword">return</span> hospitalList;</span><br><span class="line">                &#125;</span><br><span class="line">        ```  </span><br><span class="line">* 可以在启动类上配置批量扫描<span class="meta">@MapperScan</span></span><br></pre></td></tr></table></figure>
<p>//配置映射扫描器<br>@MapperScan(value = “com.zhao.demomybatis.mapper”)</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### 配置文件版</span><br><span class="line">* application.yml文件中添加配置</span><br></pre></td></tr></table></figure>
<p>mybatis:<br>config-location: classpath:mybatis/mybatis-config.xml<br>mapper-locations: classpath:mybatis/mapper/*.xml</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>核心配置类</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
 <settings>
<!--            //开启驼峰命名法-->
     <setting name="mapUnderscoreToCamelCase" value="true"/>
 </settings>
</configuration>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>映射文件</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhao.demomybatis.mapper.EmployeementMapper">
<select id="getEmp" resultType="com.zhao.demomybatis.entiry.Employee">
select * from employee where id = #{id}
</select>
<insert id="insertEmp">
 insert into employee(lastName,email,gender,d_id) values(#{lastName},#{email},#{gender},#{did})
</insert>
</mapper>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">### SpringBoot数据访问整合JPA</span><br><span class="line">* JPA基于ORM思想(Object, Relational, mapping)</span><br><span class="line">    * <span class="number">1.</span>编写一个实体类(bean)和数据表进行映射，并且配置好映射关系；</span><br></pre></td></tr></table></figure>
//使用JPA注解配置映射关系
@Entity //告诉JPA这是一个 实体类(和数据表映射的类)
@Table(name = "tb1_user") //@Table来指定和那个数据表对应，如果省略默认表明就是user；
public class User {

<p> @Id //这是一个主键<br> @GeneratedValue(strategy = GenerationType.IDENTITY) //自增<br> private Integer id;</p>
<p> @Column(name = “last_name”,length = 50)//这是和数据表对应的一个列<br> private String lastName;</p>
<p> @Column //省略默认列名就是属性名<br> private String email;</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">* <span class="number">2.</span>编写一个Dao接口来操作实体类对应的数据表(Reposiyory)</span><br></pre></td></tr></table></figure>
<p>//Dao层<br>import com.zhao.demojpa.entity.User;<br>import org.springframework.data.jpa.repository.JpaRepository;</p>
<p>//继承JpaRepository&lt;User,Integer&gt; 参数表示实体类，主键类型<br>public interface UserRepository extends JpaRepository&lt;User,Integer&gt; {</p>
<p>}</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">* <span class="number">3.</span>基本配置(application.yml) 源码参考JpaProperties类</span><br></pre></td></tr></table></figure>
<p>spring:<br>jpa:<br> hibernate:</p>
<h1 id="更新或者创建数据表-数据表的生成策略"><a href="#更新或者创建数据表-数据表的生成策略" class="headerlink" title="更新或者创建数据表(数据表的生成策略)"></a>更新或者创建数据表(数据表的生成策略)</h1><pre><code>ddl-auto: update</code></pre><h1 id="控制台显示sql语句"><a href="#控制台显示sql语句" class="headerlink" title="控制台显示sql语句"></a>控制台显示sql语句</h1><p> show-sql: true</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>Controller</span><br></pre></td></tr></table></figure>
<p>@RestController<br>public class UserController {</p>
<p> @Autowired<br> UserRepository userRepository;</p>
<p> @GetMapping(“/user/{id}”)<br> public User getUser(@PathVariable(“id”) Integer id){</p>
<pre><code>User user = userRepository.findById(id).orElse(null);
return user;</code></pre><p> }</p>
<p> @GetMapping(“/user”)<br> public User insertUser(User user){</p>
<pre><code>User user1 = userRepository.save(user);
return user1;</code></pre><p> }<br>}<br>如果出现json报错 在实体类上加上@JsonlgnoreProperties({“handler”,”hibernateLazyInitiaLizer”})</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### SpringBoot启动原理</span></span><br><span class="line"><span class="bullet">- </span>run()</span><br><span class="line"><span class="bullet">  * </span>准备环境</span><br><span class="line"><span class="bullet">    - </span>执行ApplicationContextIniaializer.initialize()</span><br><span class="line"><span class="bullet">    - </span>监听器SpringApplicationRunListener回调contextPrepared</span><br><span class="line"><span class="bullet">    - </span>加载主配置类定义信息</span><br><span class="line"><span class="bullet">    - </span>监听器SpringApplicationRunListener回调contextLoaded</span><br><span class="line"><span class="bullet">  * </span>刷新启动IOC容器；</span><br><span class="line"><span class="bullet">    - </span>扫描加载所有容器中的组件</span><br><span class="line"><span class="bullet">    - </span>包括从META-INF/sping.factories中获取的所有EnableAutoConfiguration组件</span><br><span class="line"><span class="bullet">  * </span>回调容器中所有的ApplicationRunner，CommandLineRunner的run方法</span><br><span class="line"><span class="bullet">  * </span>监听器SpringApplicationRunListener回调finished </span><br><span class="line"><span class="section">#### 事件监听机制</span></span><br><span class="line"><span class="section">#### 自定义场景启动器(starters)</span></span><br><span class="line"><span class="bullet">* </span>starters原理</span><br><span class="line"><span class="bullet">    * </span>1.场景启动器使用的依赖？？？</span><br><span class="line"><span class="bullet">    * </span>2.如何自动配置</span><br></pre></td></tr></table></figure>
<p>@Configuration //指定配置类<br>@CodeitionalOnxxx  //在指定条件成立的情况下自动配置生效<br>@AutoConfigOrder  //指定排序顺序<br>@AutoConfigureAfter //指定自动配置类的顺序<br>@Bean  //该容器中添加组件<br>@ConfigurationProperties 结合相关xxxProperties类来绑定相关配置<br>@EnableConfigurationProperties  //让XXXProperties文件生效加入到容器中</p>
<p>自动配置类要能加载<br>必须在calsspath下META-INF/spring.factories文件中配置</p>
<h1 id="Auto-Configure"><a href="#Auto-Configure" class="headerlink" title="Auto Configure"></a>Auto Configure</h1><p>org.springframework.boot.autoconfigure.EnableAutoConfiguration=<br>org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,<br>org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,<br>```</p>
</li>
</ul>
</li>
<li><p>自定义starters</p>
<ul>
<li>自动装配Bean；<ul>
<li>自动装配使用配置类(@Configuration)结合Spring4提供的条件判断注解@Codeitional及SpringBoot的派注解如@CodeitionOnClass完成</li>
</ul>
</li>
</ul>
</li>
<li><p>配置自动装配Bean</p>
<ul>
<li>将标注@Configuration的自动配置类，放在Classpath  下META-INF/spring.factories文件中配置</li>
</ul>
</li>
<li><p>模式：</p>
<ul>
<li>启动器(starter)</li>
</ul>
<ul>
<li>启动器模块是一个空的JAR文件，仅提供辅助性依赖管理，这些依赖可能用于自动装配或者其他类库</li>
<li>命名规范：<br>推荐以下命名规则：<br>xxx-starter —》xxxx-starter-autoconfigurer<ul>
<li>官方命名空间<ul>
<li>前缀：“Spring-boot-starter-”</li>
<li>模式：“Spring-boot-starter-模块名”</li>
<li>举例：spring-boot-starter-web,spring-boot-starter-actuator,spring-boot-starter-jdbc,</li>
</ul>
</li>
<li>自定义命名空间：<ul>
<li>后缀；“-spring-boot-starter”</li>
<li>模式：模块-spring-boot-starter</li>
<li>举例：mybatis-spring-boot-starter</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot微服务框架(四)</title>
    <url>/2020/01/08/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-%E5%9B%9B/</url>
    <content><![CDATA[<h3 id="如何修改SpringBoot的默认配置"><a href="#如何修改SpringBoot的默认配置" class="headerlink" title="如何修改SpringBoot的默认配置"></a>如何修改SpringBoot的默认配置</h3><ul>
<li><p>模式：</p>
<ul>
<li>1.SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean ， @Component），如果有就用用户配置的，如果没有，才自动配置；<br>如果有些组件偶多个(viewResolver)将用户配置的和默认的组合起来；</li>
<li>2.SpringBoot中会有非常多的XXXConfigurer帮助我们进行扩展配置;</li>
<li>3.在SpringBoot中会有很多的XXXCustomizer帮助我们进行定制配置;<h3 id="SpringBoot默认使用（Tomcat）作为嵌入式的Servlet容器："><a href="#SpringBoot默认使用（Tomcat）作为嵌入式的Servlet容器：" class="headerlink" title="SpringBoot默认使用（Tomcat）作为嵌入式的Servlet容器："></a>SpringBoot默认使用（Tomcat）作为嵌入式的Servlet容器：</h3></li>
</ul>
</li>
<li><p>1.如何定制和修改Tomcat容器的相关配置</p>
<ul>
<li>a.第一种方式：修改和server有关的配置(ServerProperties)<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">server<span class="selector-class">.servlet</span>.context-path=/crud</span><br><span class="line"></span><br><span class="line"><span class="comment">//通用的Servlet容器设置</span></span><br><span class="line">server.xxx</span><br><span class="line"><span class="comment">//Tomcat的设置</span></span><br><span class="line">server<span class="selector-class">.tomcat</span>.xxx</span><br><span class="line">server<span class="selector-class">.tomcat</span>.uri-encoding=UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure></li>
<li>b.第二种方式：编写一个 WebServerFactoryCustomizer<TomcatServletWebServerFactory>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编写一个 WebServerFactoryCustomizer：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</span></span><br><span class="line">  <span class="comment">// 向IoC容器中添加servlet容器工厂定制器 WebServerFactoryCustomizer</span></span><br><span class="line">  <span class="comment">//向IoC容器中添加servlet容器工厂定制器</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WebServerFactoryCustomizer&lt;TomcatServletWebServerFactory&gt; <span class="title">myWebServerFactoryCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> WebServerFactoryCustomizer&lt;TomcatServletWebServerFactory&gt;() &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//定制嵌入式的Sevlet容器相关规则</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(TomcatServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//设置相关配置</span></span><br><span class="line">              factory.setPort(<span class="number">8082</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>c.第三种方式：向IoC容器中添加可配置的servlet容器工厂 ConfigurableServletWebServerFactory<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyServerConfigurer</span> </span>&#123;</span><br><span class="line">  <span class="comment">//向IoC容器中添加servlet容器工厂</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  public ConfigurableServletWebServerFactory  myConfigurableServletWebServerFactory() &#123;</span><br><span class="line">    TomcatServletWebServerFactory <span class="keyword">factory</span> = <span class="keyword">new</span> TomcatServletWebServerFactory(); </span><br><span class="line">    <span class="keyword">factory</span>.setPort(<span class="number">8083</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">factory</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Web开发-注册Servlert三大组件"><a href="#Web开发-注册Servlert三大组件" class="headerlink" title="Web开发 注册Servlert三大组件"></a>Web开发 注册Servlert三大组件</h3></li>
</ul>
</li>
<li><p>注册Servlet，Filter，Listener</p>
</li>
<li><p>ServletRegisterationBear</p>
<ol>
<li>创建Servlet<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理Get请求</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">      doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理Post请求</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> req, <span class="type">HttpServletResponse</span> resp) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"Hello MyServlet!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建配置类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyservletConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注册三大组件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">"/myservletr"</span>);</span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>FilterRegisterationBean</p>
<ol>
<li>创建Filter过滤器实现javax.servlet.*;包下Filter接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyFilter process......"</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建配置类将其加载到容器中<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">  public FilterRegistrationBean my<span class="constructor">Filter()</span>&#123;</span><br><span class="line">      FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> <span class="constructor">FilterRegistrationBean()</span>;</span><br><span class="line">      filterRegistrationBean.set<span class="constructor">Filter(<span class="params">new</span> MyFilter()</span>);</span><br><span class="line">      filterRegistrationBean.set<span class="constructor">UrlPatterns(Arrays.<span class="params">asList</span>(<span class="string">"/hello"</span>,<span class="string">"/myservlet"</span>)</span>);</span><br><span class="line">      return filterRegistrationBean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>ServletListenerRegisterationBean</p>
<ol>
<li>创建监听器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//监听器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Servlet启动</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" contextInitialized web应用启动了"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Servlet销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"contextDestroyed web应用销毁了"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在配置类中将其添加到容器中<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletListenerRegistrationBean listenerRegistrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean(<span class="keyword">new</span> MyListener());</span><br><span class="line">        <span class="keyword">return</span> listenerRegistrationBean;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot帮我们在自动配置SpringMvc的时候，自动的注册了SpringMvc的前端控制器；DispatcherServlet；-自动配置类DispatcherServletAutoConfiguration"><a href="#SpringBoot帮我们在自动配置SpringMvc的时候，自动的注册了SpringMvc的前端控制器；DispatcherServlet；-自动配置类DispatcherServletAutoConfiguration" class="headerlink" title="SpringBoot帮我们在自动配置SpringMvc的时候，自动的注册了SpringMvc的前端控制器；DispatcherServlet；(自动配置类DispatcherServletAutoConfiguration)"></a>SpringBoot帮我们在自动配置SpringMvc的时候，自动的注册了SpringMvc的前端控制器；DispatcherServlet；(自动配置类DispatcherServletAutoConfiguration)</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">        proxyBeanMethods = <span class="literal">false</span></span><br><span class="line">    )</span><br><span class="line">    <span class="meta">@Conditional</span>(&#123;<span class="type">DispatcherServletAutoConfiguration</span>.<span class="type">DispatcherServletRegistrationCondition</span><span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">@ConditionalOnClass</span>(<span class="params">&#123;<span class="type">ServletRegistration</span>.class&#125;</span>)</span></span><br><span class="line"><span class="class">    <span class="title">@EnableConfigurationProperties</span>(<span class="params">&#123;<span class="type">WebMvcProperties</span>.class&#125;</span>)</span></span><br><span class="line"><span class="class">    <span class="title">@Import</span>(<span class="params">&#123;<span class="type">DispatcherServletAutoConfiguration</span>.<span class="type">DispatcherServletConfiguration</span>.class&#125;</span>)</span></span><br><span class="line"><span class="class">    <span class="title">protected</span> <span class="title">static</span> <span class="title">class</span> <span class="title">DispatcherServletRegistrationConfiguration</span> </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="type">DispatcherServletRegistrationConfiguration</span>() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span>(</span><br><span class="line">            name = &#123;<span class="string">"dispatcherServletRegistration"</span>&#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="meta">@ConditionalOnBean</span>(</span><br><span class="line">            value = &#123;<span class="type">DispatcherServlet</span><span class="class">.<span class="keyword">class</span>&#125;,</span></span><br><span class="line"><span class="class">            <span class="title">name</span> </span>= &#123;<span class="string">"dispatcherServlet"</span>&#125;</span><br><span class="line">        )</span><br><span class="line">        public <span class="type">DispatcherServletRegistrationBean</span> dispatcherServletRegistration(<span class="type">DispatcherServlet</span> dispatcherServlet, <span class="type">WebMvcProperties</span> webMvcProperties, <span class="type">ObjectProvider</span>&lt;<span class="type">MultipartConfigElement</span>&gt; multipartConfig) &#123;</span><br><span class="line">            <span class="type">DispatcherServletRegistrationBean</span> registration = <span class="keyword">new</span> <span class="type">DispatcherServletRegistrationBean</span>(dispatcherServlet, webMvcProperties.getServlet().getPath());</span><br><span class="line">            <span class="comment">//确认拦截：/ 所有请求：包括静态资源文件，但不拦截jsp请求，以前/*拦截所有包括jsp请求</span></span><br><span class="line">            <span class="comment">//可通过server.servletPath来修改SpringMvc前端控制器默认拦截的请求</span></span><br><span class="line">            registration.setName(<span class="string">"dispatcherServlet"</span>);</span><br><span class="line">            registration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">            multipartConfig.ifAvailable(registration::setMultipartConfig);</span><br><span class="line">            <span class="keyword">return</span> registration;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot切换其他Servlet容器"><a href="#SpringBoot切换其他Servlet容器" class="headerlink" title="SpringBoot切换其他Servlet容器"></a>SpringBoot切换其他Servlet容器</h3></li>
</ol>
</li>
<li><p>2.SpringBoot能不能支持其他的Servlet容器；</p>
</li>
<li><p>SpringBoot默认支持：</p>
<ul>
<li>Tomcat（默认使用）<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--引入web模块--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     //引入web模块默认使用嵌入式的Tomcat做为Servlet容器；</span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>Jetty（长连接）</li>
<li>Undertow(不支持JSP)特点：高性能非阻塞,并发性能高<br>案例切换Jetty（Undertow一样的方式）<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入web模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--排除Tomcat容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--引入其他Servlet容器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="快捷键-ctrl-h-打开继承树"><a href="#快捷键-ctrl-h-打开继承树" class="headerlink" title="快捷键 ctrl+h 打开继承树"></a>快捷键 ctrl+h 打开继承树</h3><h3 id="嵌入式Servlet容器自动配置原理"><a href="#嵌入式Servlet容器自动配置原理" class="headerlink" title="嵌入式Servlet容器自动配置原理;"></a>嵌入式Servlet容器自动配置原理;</h3></li>
</ul>
</li>
<li><p>在Spring Boot的自动配置包下，找到web模块中的servlet文件夹下的ServletWebServerFactoryConfiguration类* </p>
</li>
<li><p>ServletWebServerFactoryConfiguration:嵌入式的servlet容器自动配置</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">@<span class="type">Configuration</span>(</span><br><span class="line">    proxyBeanMethods = false</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">ServletWebServerFactoryConfiguration</span> &#123;</span></span><br><span class="line"><span class="class">    <span class="type">ServletWebServerFactoryConfiguration</span>() &#123;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    @<span class="type">Configuration</span>(</span></span><br><span class="line"><span class="class">        <span class="title">proxyBeanMethods</span> = <span class="title">false</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    @<span class="type">ConditionalOnClass</span>(&#123;<span class="type">Servlet</span>.<span class="title">class</span>, <span class="type">Undertow</span>.<span class="title">class</span>, <span class="type">SslClientAuthMode</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">    @<span class="type">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">        <span class="title">value</span> = &#123;<span class="type">ServletWebServerFactory</span>.<span class="title">class</span>&#125;,</span></span><br><span class="line"><span class="class">        <span class="title">search</span> = <span class="type">SearchStrategy</span>.<span class="type">CURRENT</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    public static <span class="keyword">class</span> <span class="type">EmbeddedUndertow</span> &#123;</span></span><br><span class="line"><span class="class">        public <span class="type">EmbeddedUndertow</span>() &#123;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        @<span class="type">Bean</span></span></span><br><span class="line"><span class="class">        public <span class="type">UndertowServletWebServerFactory</span> undertowServletWebServerFactory(<span class="type">ObjectProvider</span>&lt;<span class="type">UndertowDeploymentInfoCustomizer</span>&gt; <span class="title">deploymentInfoCustomizers</span>, <span class="type">ObjectProvider</span>&lt;<span class="type">UndertowBuilderCustomizer</span>&gt; <span class="title">builderCustomizers</span>) &#123;</span></span><br><span class="line"><span class="class">            <span class="type">UndertowServletWebServerFactory</span> factory = new <span class="type">UndertowServletWebServerFactory</span>();</span></span><br><span class="line"><span class="class">            factory.getDeploymentInfoCustomizers().addAll((<span class="type">Collection</span>)deploymentInfoCustomizers.orderedStream().collect(<span class="type">Collectors</span>.<span class="title">toList</span>()));</span></span><br><span class="line"><span class="class">            factory.getBuilderCustomizers().addAll((<span class="type">Collection</span>)builderCustomizers.orderedStream().collect(<span class="type">Collectors</span>.<span class="title">toList</span>()));</span></span><br><span class="line"><span class="class">            return factory;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    @<span class="type">Configuration</span>(</span></span><br><span class="line"><span class="class">        <span class="title">proxyBeanMethods</span> = <span class="title">false</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    @<span class="type">ConditionalOnClass</span>(&#123;<span class="type">Servlet</span>.<span class="title">class</span>, <span class="type">Server</span>.<span class="title">class</span>, <span class="type">Loader</span>.<span class="title">class</span>, <span class="type">WebAppContext</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">    @<span class="type">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">        <span class="title">value</span> = &#123;<span class="type">ServletWebServerFactory</span>.<span class="title">class</span>&#125;,</span></span><br><span class="line"><span class="class">        <span class="title">search</span> = <span class="type">SearchStrategy</span>.<span class="type">CURRENT</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    public static <span class="keyword">class</span> <span class="type">EmbeddedJetty</span> &#123;</span></span><br><span class="line"><span class="class">        public <span class="type">EmbeddedJetty</span>() &#123;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        @<span class="type">Bean</span></span></span><br><span class="line"><span class="class">        public <span class="type">JettyServletWebServerFactory</span> <span class="type">JettyServletWebServerFactory</span>(<span class="type">ObjectProvider</span>&lt;<span class="type">JettyServerCustomizer</span>&gt; <span class="title">serverCustomizers</span>) &#123;</span></span><br><span class="line"><span class="class">            <span class="type">JettyServletWebServerFactory</span> factory = new <span class="type">JettyServletWebServerFactory</span>();</span></span><br><span class="line"><span class="class">            factory.getServerCustomizers().addAll((<span class="type">Collection</span>)serverCustomizers.orderedStream().collect(<span class="type">Collectors</span>.<span class="title">toList</span>()));</span></span><br><span class="line"><span class="class">            return factory;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    @<span class="type">Configuration</span>(</span></span><br><span class="line"><span class="class">        <span class="title">proxyBeanMethods</span> = <span class="title">false</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    @<span class="type">ConditionalOnClass</span>(&#123;<span class="type">Servlet</span>.<span class="title">class</span>, <span class="type">Tomcat</span>.<span class="title">class</span>, <span class="type">UpgradeProtocol</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class">    //判断当前是否引入了<span class="type">Tomcat</span>依赖</span></span><br><span class="line"><span class="class">    @<span class="type">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">        <span class="title">value</span> = &#123;<span class="type">ServletWebServerFactory</span>.<span class="title">class</span>&#125;,</span></span><br><span class="line"><span class="class">        <span class="title">search</span> = <span class="type">SearchStrategy</span>.<span class="type">CURRENT</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line"><span class="class">    //判断当前容器没有用户自己定义<span class="type">ServletWebServerFactory</span>：嵌入式servlet容器工厂 作用：创建嵌入式的<span class="type">Servlet</span>容器</span></span><br><span class="line"><span class="class">    public static <span class="keyword">class</span> <span class="type">EmbeddedTomcat</span> &#123;</span></span><br><span class="line"><span class="class">        public <span class="type">EmbeddedTomcat</span>() &#123;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        //<span class="type">TomcatServletWebServerFactory</span> <span class="type">Tomcat</span>容器工厂</span></span><br><span class="line"><span class="class">        @<span class="type">Bean</span></span></span><br><span class="line"><span class="class">        public <span class="type">TomcatServletWebServerFactory</span> tomcatServletWebServerFactory(<span class="type">ObjectProvider</span>&lt;<span class="type">TomcatConnectorCustomizer</span>&gt; <span class="title">connectorCustomizers</span>, <span class="type">ObjectProvider</span>&lt;<span class="type">TomcatContextCustomizer</span>&gt; <span class="title">contextCustomizers</span>, <span class="type">ObjectProvider</span>&lt;<span class="type">TomcatProtocolHandlerCustomizer</span>&lt;?&gt;&gt; <span class="title">protocolHandlerCustomizers</span>) &#123;</span></span><br><span class="line"><span class="class">            <span class="type">TomcatServletWebServerFactory</span> factory = new <span class="type">TomcatServletWebServerFactory</span>();</span></span><br><span class="line"><span class="class">            factory.getTomcatConnectorCustomizers().addAll((<span class="type">Collection</span>)connectorCustomizers.orderedStream().collect(<span class="type">Collectors</span>.<span class="title">toList</span>()));</span></span><br><span class="line"><span class="class">            factory.getTomcatContextCustomizers().addAll((<span class="type">Collection</span>)contextCustomizers.orderedStream().collect(<span class="type">Collectors</span>.<span class="title">toList</span>()));</span></span><br><span class="line"><span class="class">            factory.getTomcatProtocolHandlerCustomizers().addAll((<span class="type">Collection</span>)protocolHandlerCustomizers.orderedStream().collect(<span class="type">Collectors</span>.<span class="title">toList</span>()));</span></span><br><span class="line"><span class="class">            return factory;</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure></li>
<li><p>一、嵌入式Servlet容器默认的配置原理<br>1、该类中有三个静态内部类（都是配置类）：<br>EmbeddedUndertow、EmbeddedJetty、EmbeddedTomcat<br>这里拿EmbeddedTomcat来举例说明<br>@ConditionalOnClass({Servlet.class, Tomcat.class, UpgradeProtocol.class})<br>判断classpath下有没有Servlet, Tomcat, UpgradeProtocol这三个类，也就是看maven有没有引入对应的依赖，如果引入了对应的依赖，下面的配置就生效。<br>2、@ConditionalOnMissingBean(<br>value = {ServletWebServerFactory.class},<br>search = SearchStrategy.CURRENT<br>)<br>如果容器中没有ServletWebServerFactory这个组件下面的配置就生效<br>点进ServletWebServerFactory看，该接口只有一个方法，前面只判断这个类型的组件有没有在容器中，而该类型又只有一个方法，说明最终Spring Boot会调用该接口实现类中的getWebServer方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取嵌入式Servlet工厂</span></span><br><span class="line">  <span class="meta">@FunctionalInterface</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletWebServerFactory</span> </span>&#123;</span><br><span class="line">      <span class="function">WebServer <span class="title">getWebServer</span><span class="params">(ServletContextInitializer... initializers)</span></span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>tomcat</li>
<li>Jetty（长连接）</li>
<li>Undertow(不支持JSP)特点：高性能非阻塞,并发性能高 </li>
</ul>
<p>3、查看ServletWebServerFactory接口的实现，有三个很面熟的实现类，就是上面ServletWebServerFactoryConfiguration类中要往容器中添加的组件<br>4、进入TomcatServletWebServerFactory类中查看getWebServer方法。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public WebServer get<span class="constructor">WebServer(ServletContextInitializer<span class="operator">...</span> <span class="params">initializers</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (this.disableMBeanRegistry) &#123;</span><br><span class="line">          <span class="module-access"><span class="module"><span class="identifier">Registry</span>.</span></span>disable<span class="constructor">Registry()</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//创建一个Tomcat</span></span><br><span class="line">      Tomcat tomcat = <span class="keyword">new</span> <span class="constructor">Tomcat()</span>;</span><br><span class="line">      File baseDir = this.baseDirectory != null ? this.baseDirectory : this.create<span class="constructor">TempDir(<span class="string">"tomcat"</span>)</span>;</span><br><span class="line">      <span class="comment">//配置Tomcat环节</span></span><br><span class="line">      tomcat.set<span class="constructor">BaseDir(<span class="params">baseDir</span>.<span class="params">getAbsolutePath</span>()</span>);</span><br><span class="line">      Connector connector = <span class="keyword">new</span> <span class="constructor">Connector(<span class="params">this</span>.<span class="params">protocol</span>)</span>;</span><br><span class="line">      connector.set<span class="constructor">ThrowOnFailure(<span class="params">true</span>)</span>;</span><br><span class="line">      tomcat.get<span class="constructor">Service()</span>.add<span class="constructor">Connector(<span class="params">connector</span>)</span>;</span><br><span class="line">      this.customize<span class="constructor">Connector(<span class="params">connector</span>)</span>;</span><br><span class="line">      tomcat.set<span class="constructor">Connector(<span class="params">connector</span>)</span>;</span><br><span class="line">      tomcat.get<span class="constructor">Host()</span>.set<span class="constructor">AutoDeploy(<span class="params">false</span>)</span>;</span><br><span class="line">      this.configure<span class="constructor">Engine(<span class="params">tomcat</span>.<span class="params">getEngine</span>()</span>);</span><br><span class="line">      Iterator var5 = this.additionalTomcatConnectors.iterator<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(var5.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">          Connector additionalConnector = (Connector)var5.next<span class="literal">()</span>;</span><br><span class="line">          tomcat.get<span class="constructor">Service()</span>.add<span class="constructor">Connector(<span class="params">additionalConnector</span>)</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      this.prepare<span class="constructor">Context(<span class="params">tomcat</span>.<span class="params">getHost</span>()</span>, initializers);</span><br><span class="line">      <span class="comment">//将配置好的Tomcat传入进来,并且启动Tomcat服务器 返回TomcatWebServer</span></span><br><span class="line">      return this.get<span class="constructor">TomcatWebServer(<span class="params">tomcat</span>)</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>首先会创建一个Tomcat对象，给其设置连接器等一些配置<br>最终还会调用getTomcatWebServer方法<br>this.getTomcatWebServer(tomcat);<br>–&gt;return new TomcatWebServer(tomcat, this.getPort() &gt;= 0);<br>端口号默认是8080所以上面传过去的是true，进入TomcatWebServer的构造方法TomcatWebServer中，在构造方法中又调用了this.initialize();进入initialize方法，该方法就会启动tomcat。(所以这一切都是建立在创建好嵌入式Servlet容器之后)</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">  protected TomcatWebServer get<span class="constructor">TomcatWebServer(Tomcat <span class="params">tomcat</span>)</span> &#123;</span><br><span class="line">    return <span class="keyword">new</span> <span class="constructor">TomcatWebServer(<span class="params">tomcat</span>, <span class="params">this</span>.<span class="params">getPort</span>()</span> &gt;= <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>对嵌入式容器的修改</p>
<ul>
<li><p>方法1：修改application配置<br>从官方文档可以看出支持的配置有如下所示，所以要修改servlet容器配置，直接在application配置文件修改即可：</p>
<p>网络设置: 监听端口(server.port)、服务器地址(server.address)等等<br>Session设置: 会话是否持久 (server.servlet.session.persistent),会话超时(server.servlet.session.timeout), 会话数据的位置 (server.servlet.session.store-dir), 会话对应的cookie配置 (server.servlet.session.cookie.*) 等等<br>错误管理: 错误页面位置 (server.error.path)等等<br>SSL设置：具体参考Configure SSL<br>HTTP compression：具体参考Enable HTTP Response Compression<br>application文件</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ServerProperties</span> ， TomcatWebServer</span><br></pre></td></tr></table></figure></li>
<li><p>方法2：自定义WebServerFactoryCustomizer定制器类<br>从文档里还找到了通过新建自定义的WebServerFactoryCustomizer类来实现属性配置修改，WebServerFactoryCustomizer也就是一种定制器类：</p>
</li>
</ul>
</li>
</ul>
<ul>
<li>ServerProperties也是定制器</li>
<li>注册后置处理器webServerFactoryCustomizerBeanPostProcessor<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ServletRequest<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span>(<span class="title">type</span> </span>= Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties<span class="class">.<span class="keyword">class</span>)//使<span class="title">ServerProperties</span>配置类起效</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedTomcat</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedJetty</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">ServletWebServerFactoryConfiguration</span>.<span class="title">EmbeddedUndertow</span>.<span class="title">class</span> &#125;)//@<span class="title">Import</span>是<span class="title">Spring</span>框架的注解，作用是将对应组件加载到容器，这里关键的是<span class="title">BeanPostProcessorsRegistrar</span>，一个后置处理类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletWebServerFactoryCustomizer <span class="title">servletWebServerFactoryCustomizer</span><span class="params">(ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServletWebServerFactoryCustomizer(serverProperties);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tomcat的定制器类，起作用的条件是有Tomcat对应jar有引入项目的情况，默认是引入的，所以会执行Tomcat的servletWeb工厂定制类</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(name = <span class="string">"org.apache.catalina.startup.Tomcat"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> TomcatServletWebServerFactoryCustomizer <span class="title">tomcatServletWebServerFactoryCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ServerProperties serverProperties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TomcatServletWebServerFactoryCustomizer(serverProperties);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ....</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//注册重要的后置处理器类WebServerFactoryCustomizerBeanPostProcessor，在ioc容器启动的时候会调用后置处理器</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorsRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置ConfigurableListableBeanFactory</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = (ConfigurableListableBeanFactory) beanFactory;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">        BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      registerSyntheticBeanIfMissing(registry, <span class="string">"webServerFactoryCustomizerBeanPostProcessor"</span>,</span><br><span class="line">          WebServerFactoryCustomizerBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      registerSyntheticBeanIfMissing(registry, <span class="string">"errorPageRegistrarBeanPostProcessor"</span>,</span><br><span class="line">          ErrorPageRegistrarBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerSyntheticBeanIfMissing</span><span class="params">(BeanDefinitionRegistry registry, String name, Class&lt;?&gt; beanClass)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (ObjectUtils.isEmpty(<span class="keyword">this</span>.beanFactory.getBeanNamesForType(beanClass, <span class="keyword">true</span>, <span class="keyword">false</span>))) &#123;</span><br><span class="line">        RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(beanClass);</span><br><span class="line">        beanDefinition.setSynthetic(<span class="keyword">true</span>);</span><br><span class="line">        registry.registerBeanDefinition(name, beanDefinition);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Springboot的ServletWebServerFactoryAutoConfiguration是嵌入式Servlet容器的自动配置类，这个类的主要作用是创建TomcatServletWebServerFactory工厂类，创建定制器类TomcatServletWebServerFactoryCustomizer，创建FilterRegistrationBean类，同时很关键的一步是注册后置处理器webServerFactoryCustomizerBeanPostProcessor，然后Springboot的Application类一启动，就会执行run方法，run经过一系列调用会通过ServletWebServerApplicationContext的onRefresh方法创建ioc容器，然后通过createWebServer方法，createWebServer方法会去ioc容器里扫描是否有对应的ServletWebServerFactory工厂类(TomcatServletWebServerFactory是其中一种)，扫描得到，就会触发webServerFactoryCustomizerBeanPostProcessor后置处理器类，这个处理器类会获取TomcatServletWebServerFactoryCustomizer定制器，并调用customize方法进行定制，这时候工厂类起作用，调用getWebServer方法进行Tomcat属性配置和引擎设置等等，再创建TomcatWebServer启动Tomcat容器</li>
</ul>
<ul>
<li>步骤：<ul>
<li>SpringBoot根据导入的后依赖情况该容器中添加相应的组件<br>ServletWebServerFactoryConfiguration【TomcatServletWebServerFactory】</li>
<li>容器中某个组件要创建对象就会惊动后处理器；(ServletWebServerFactoryAutoConfiguration类中)<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static <span class="keyword">class</span> BeanPostProcessorsRegistrar implements ImportBeanDefinitionRegistrar, BeanFactoryAware &#123;</span><br><span class="line">    <span class="keyword">private</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    public <span class="constructor">BeanPostProcessorsRegistrar()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void set<span class="constructor">BeanFactory(BeanFactory <span class="params">beanFactory</span>)</span> throws BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span> (beanFactory instanceof ConfigurableListableBeanFactory) &#123;</span><br><span class="line">            this.beanFactory = (ConfigurableListableBeanFactory)beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void register<span class="constructor">BeanDefinitions(AnnotationMetadata <span class="params">importingClassMetadata</span>, BeanDefinitionRegistry <span class="params">registry</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (this.beanFactory != null) &#123;</span><br><span class="line">            this.register<span class="constructor">SyntheticBeanIfMissing(<span class="params">registry</span>, <span class="string">"webServerFactoryCustomizerBeanPostProcessor"</span>, WebServerFactoryCustomizerBeanPostProcessor.<span class="params">class</span>)</span>;</span><br><span class="line">            this.register<span class="constructor">SyntheticBeanIfMissing(<span class="params">registry</span>, <span class="string">"errorPageRegistrarBeanPostProcessor"</span>, ErrorPageRegistrarBeanPostProcessor.<span class="params">class</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> void register<span class="constructor">SyntheticBeanIfMissing(BeanDefinitionRegistry <span class="params">registry</span>, String <span class="params">name</span>, Class&lt;?&gt; <span class="params">beanClass</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">ObjectUtils</span>.</span></span>is<span class="constructor">Empty(<span class="params">this</span>.<span class="params">beanFactory</span>.<span class="params">getBeanNamesForType</span>(<span class="params">beanClass</span>, <span class="params">true</span>, <span class="params">false</span>)</span>)) &#123;</span><br><span class="line">            RootBeanDefinition beanDefinition = <span class="keyword">new</span> <span class="constructor">RootBeanDefinition(<span class="params">beanClass</span>)</span>;</span><br><span class="line">            beanDefinition.set<span class="constructor">Synthetic(<span class="params">true</span>)</span>;</span><br><span class="line">            registry.register<span class="constructor">BeanDefinition(<span class="params">name</span>, <span class="params">beanDefinition</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>只要是嵌入式的Servlet容器工厂，后置处理器就工作</li>
<li>后置处理器，从容器中获取所有的定制器</li>
</ul>
</li>
</ul>
<h3 id="嵌入式Servlet启动原理；"><a href="#嵌入式Servlet启动原理；" class="headerlink" title="嵌入式Servlet启动原理；"></a>嵌入式Servlet启动原理；</h3><ul>
<li>什么时候创建嵌入式的servlet容器工厂？什么时候获取嵌入式的servlet容器并启动Tomcat;</li>
<li>获取嵌入式的Servlet容器工厂</li>
</ul>
<ol>
<li>SpringBoot应用启动运行run方法</li>
<li>refreshContext(context);SpringBoot刷新Ioc容器【创建IOC容器，并初始化容器，创建容器中的每一个组件】；如果是web应用创建  AnnotaionConfigEmbeddedWebApplicationContext;否则创建AnnotationConfigApplicationContext</li>
<li>refresh(context);刷新刚才创建好的IOC容器；</li>
<li>onRefresh();webIOC容器重写onRefresh()方法</li>
<li>webioc容器会创建嵌入式的Servlet容器；createServletContainer(); </li>
<li>获取嵌入式容器工厂    TomcatServletContainerFactory 创建对象，后置处理器一看是这个对象，就获取所有的的定制器来先定制servlet容器的相关配置</li>
<li>使用容器工厂获取嵌入式的Servlet容器 触发后处理器BeanPostProcessorsRegistrar</li>
<li>嵌入式的Servlet容器创建对象并启动Servlet容器<br>先启动嵌入式的Servlet容器，再将IOC容器中剩下没有创建出的对象获取出来；<br>Ioc容器启动创建嵌入式的Servlet容器<h3 id="使用外置的Servlet容器"><a href="#使用外置的Servlet容器" class="headerlink" title="使用外置的Servlet容器"></a>使用外置的Servlet容器</h3></li>
</ol>
<ul>
<li>外置的Servlet容器：外面安装的Tomcat–应用war包方式打包<ul>
<li>创建步骤：<ol>
<li>必须创建一个war项目(利用idea创建好目录结构)</li>
<li>在pom文件中将嵌入式的Tomcat指定为provided；<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>必须编写一个SpringBootServletInitializer的子类，并调用configure()方法<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="type">SpringApplicationBuilder</span> configure(<span class="type">SpringApplicationBuilder</span> application) &#123;</span><br><span class="line">    <span class="comment">//传入SpringBoot应用的主程序</span></span><br><span class="line">    <span class="keyword">return</span> application.sources(<span class="type">DemoWarApplication</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>启动服务器就可以使用<h4 id="使用SpringBoot创建向导快速创建（外置的Servlet容器）"><a href="#使用SpringBoot创建向导快速创建（外置的Servlet容器）" class="headerlink" title="使用SpringBoot创建向导快速创建（外置的Servlet容器）"></a>使用SpringBoot创建向导快速创建（外置的Servlet容器）</h4></li>
</ol>
</li>
</ul>
</li>
</ul>
<ol>
<li>File –》project–》Spring initializr</li>
<li>在packing中选择war包方式（默认jar）下一步创建项目</li>
<li>在Project structure下选择Models–》选中此项目–》web–》<ol start="4">
<li>在web Resource Directories下添加路径如“G:\IDEA\Maven-SpringBoot\demo-war\src\main\webapp” 自动创建此文件夹</li>
<li>创建web.xml文件 在Demployment Descriptors 下添加web.xml文件 路径“G:\IDEA\Maven-SpringBoot\demo-war\src\main\webapp\WEB-INF\web.xml”即可；</li>
</ol>
</li>
</ol>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>jar包:执行SpringBoot主类的main方法，启动IOC容器，创建嵌入式的Servlet容器；<br>war包；启动服务器，服务器启动SpringBoot应用【SpringBootServletinitializer】，启动IOC容器；</p>
<ul>
<li><p>规则</p>
<ul>
<li><p>1.服务器启动(web应用启动)会创建当前web应用里面每一个jar包里面ServletContainerIntialiservlet.Servletzer实例；</p>
</li>
<li><p>2.ServletContainitializer的实现类放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainitializer的文件，内容是ServletContainitializer的实现类全类名</p>
</li>
<li><p>3.还可以使用@HandlesTypes，在应用启动类的时候加载我们感兴趣的类；</p>
</li>
<li><p>流程：</p>
<ul>
<li>1.启动Tomcat</li>
<li>2.org\springframework\spring-web\5.2.2.RELEASE\spring-web-5.2.2.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer<br>Spring的web模块里面有这个文件，其内容就是“org.springframework.web.SpringServletContainerInitializer”</li>
<li>3.SpringServletContainerInitializer将@HandlesTypes({WebApplicationInitializer.class})标注的所有这个类型的类都是传入到onStarup方法 Set&lt;Class&lt;?&gt;&gt;集合里面（不是接口类，不是抽象类），为WebApplicationInitializer这个类型的类创建实例<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">HandlesTypes(&#123;WebApplicationInitializer.<span class="params">class</span>&#125;)</span></span><br><span class="line">public <span class="keyword">class</span> SpringServletContainerInitializer implements ServletContainerInitializer &#123;</span><br><span class="line">    public <span class="constructor">SpringServletContainerInitializer()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void on<span class="constructor">Startup(@Nullable Set&lt;Class&lt;?&gt;&gt; <span class="params">webAppInitializerClasses</span>, ServletContext <span class="params">servletContext</span>)</span> throws ServletException &#123;</span><br><span class="line">        List&lt;WebApplicationInitializer&gt; initializers = <span class="keyword">new</span> <span class="constructor">LinkedList()</span>;</span><br><span class="line">        Iterator var4;</span><br><span class="line">        <span class="keyword">if</span> (webAppInitializerClasses != null) &#123;</span><br><span class="line">            var4 = webAppInitializerClasses.iterator<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var4.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">                Class&lt;?&gt; waiClass = (Class)var4.next<span class="literal">()</span>;</span><br><span class="line">                <span class="keyword">if</span> (!waiClass.is<span class="constructor">Interface()</span><span class="operator"> &amp;&amp; </span>!<span class="module-access"><span class="module"><span class="identifier">Modifier</span>.</span></span>is<span class="constructor">Abstract(<span class="params">waiClass</span>.<span class="params">getModifiers</span>()</span>)<span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">WebApplicationInitializer</span>.</span></span><span class="keyword">class</span>.is<span class="constructor">AssignableFrom(<span class="params">waiClass</span>)</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        initializers.add((WebApplicationInitializer)<span class="module-access"><span class="module"><span class="identifier">ReflectionUtils</span>.</span></span>accessible<span class="constructor">Constructor(<span class="params">waiClass</span>, <span class="params">new</span> Class[0])</span>.<span class="keyword">new</span><span class="constructor">Instance()</span>);</span><br><span class="line">                    &#125; catch (Throwable var7) &#123;</span><br><span class="line">                        throw <span class="keyword">new</span> <span class="constructor">ServletException(<span class="string">"Failed to instantiate WebApplicationInitializer class"</span>, <span class="params">var7</span>)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (initializers.is<span class="constructor">Empty()</span>) &#123;</span><br><span class="line">            servletContext.log(<span class="string">"No Spring WebApplicationInitializer types detected on classpath"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            servletContext.log(initializers.size<span class="literal">()</span> + <span class="string">" Spring WebApplicationInitializers detected on classpath"</span>);</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">AnnotationAwareOrderComparator</span>.</span></span>sort(initializers);</span><br><span class="line">            var4 = initializers.iterator<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(var4.has<span class="constructor">Next()</span>) &#123;</span><br><span class="line">                WebApplicationInitializer initializer = (WebApplicationInitializer)var4.next<span class="literal">()</span>;</span><br><span class="line">                initializer.on<span class="constructor">Startup(<span class="params">servletContext</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>4.每一个 WebApplicationInitializer都调用自己的onStartup()方法<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>WebApplicationInitializer &#123;</span><br><span class="line">    void onStartup(ServletContext var1) throws ServletException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>5.相当于我们的SpringBootServletInitializer(WebApplicationInitializer的实现类)的类会被创建对象，并执行onStartup方法 .</li>
<li>6.SpringBootServletInitializer实例 执行onStartup的时候会createRootApplicationContext；创建容器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootServletInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.logger = LogFactory.getLog(<span class="keyword">this</span>.getClass());</span><br><span class="line">    WebApplicationContext rootAppContext = <span class="keyword">this</span>.createRootApplicationContext(servletContext);</span><br><span class="line">    <span class="keyword">if</span> (rootAppContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">        servletContext.addListener(<span class="keyword">new</span> ContextLoaderListener(rootAppContext) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.logger.debug(<span class="string">"No ContextLoaderListener registered, as createRootApplicationContext() did not return an application context"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>7.创建容器方法<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public abstract <span class="keyword">class</span> SpringBootServletInitializer implements WebApplicationInitializer &#123;</span><br><span class="line"></span><br><span class="line">  ......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> protected WebApplicationContext create<span class="constructor">RootApplicationContext(ServletContext <span class="params">servletContext</span>)</span> &#123;</span><br><span class="line">   <span class="comment">//创建SpringApplicationBuilder(Spring应用的构建器)</span></span><br><span class="line">     SpringApplicationBuilder builder = this.create<span class="constructor">SpringApplicationBuilder()</span>;</span><br><span class="line">     builder.main(this.get<span class="constructor">Class()</span>);</span><br><span class="line">     ApplicationContext parent = this.get<span class="constructor">ExistingRootWebApplicationContext(<span class="params">servletContext</span>)</span>;</span><br><span class="line">     <span class="keyword">if</span> (parent != null) &#123;</span><br><span class="line">         this.logger.info(<span class="string">"Root context already created (using as parent)."</span>);</span><br><span class="line">         servletContext.set<span class="constructor">Attribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, (Object)</span>null);</span><br><span class="line">         builder.initializers(<span class="keyword">new</span> ApplicationContextInitializer<span class="literal">[]</span>&#123;<span class="keyword">new</span> <span class="constructor">ParentContextApplicationContextInitializer(<span class="params">parent</span>)</span>&#125;);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     builder.initializers(<span class="keyword">new</span> ApplicationContextInitializer<span class="literal">[]</span>&#123;<span class="keyword">new</span> <span class="constructor">ServletContextApplicationContextInitializer(<span class="params">servletContext</span>)</span>&#125;);</span><br><span class="line">     builder.context<span class="constructor">Class(AnnotationConfigServletWebServerApplicationContext.<span class="params">class</span>)</span>;</span><br><span class="line">     <span class="comment">//调用configure方法，子类重写了这个方法，将springBoot的主程序类传了进来</span></span><br><span class="line">     builder = this.configure(builder);</span><br><span class="line">     builder.listeners(<span class="keyword">new</span> ApplicationListener<span class="literal">[]</span>&#123;<span class="keyword">new</span> SpringBootServletInitializer.<span class="constructor">WebEnvironmentPropertySourceInitializer(<span class="params">servletContext</span>)</span>&#125;);</span><br><span class="line">     <span class="comment">//使用builder创建一个Spring应用</span></span><br><span class="line">     SpringApplication application = builder.build<span class="literal">()</span>;</span><br><span class="line">     <span class="keyword">if</span> (application.get<span class="constructor">AllSources()</span>.is<span class="constructor">Empty()</span><span class="operator"> &amp;&amp; </span><span class="module-access"><span class="module"><span class="identifier">MergedAnnotations</span>.</span></span>from(this.get<span class="constructor">Class()</span>, SearchStrategy.TYPE_HIERARCHY).is<span class="constructor">Present(Configuration.<span class="params">class</span>)</span>) &#123;</span><br><span class="line">         application.add<span class="constructor">PrimarySources(Collections.<span class="params">singleton</span>(<span class="params">this</span>.<span class="params">getClass</span>()</span>));</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="module-access"><span class="module"><span class="identifier">Assert</span>.</span></span>state(!application.get<span class="constructor">AllSources()</span>.is<span class="constructor">Empty()</span>, <span class="string">"No SpringApplication sources have been defined. Either override the configure method or add an @Configuration annotation"</span>);</span><br><span class="line">     <span class="keyword">if</span> (this.registerErrorPageFilter) &#123;</span><br><span class="line">         application.add<span class="constructor">PrimarySources(Collections.<span class="params">singleton</span>(ErrorPageFilterConfiguration.<span class="params">class</span>)</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//启动Spring应用</span></span><br><span class="line">     return this.run(application);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) &#123;</span><br><span class="line">   return builder;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.<span class="type">SpringApplicationBuilder</span>;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.support.<span class="type">SpringBootServletInitializer</span>;</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ServletInitializer</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//重写了Configure方法，把SpringBoot的主程序类加了进去</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="type">SpringApplicationBuilder</span> configure(<span class="type">SpringApplicationBuilder</span> application) &#123;</span><br><span class="line">    <span class="keyword">return</span> application.sources(<span class="type">DemoWarApplication</span><span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>8.Spring的应用就启动并创建IOC容器<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public ConfigurableApplicationContext run(String... args) &#123;</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> <span class="constructor">StopWatch()</span>;</span><br><span class="line">    stopWatch.start<span class="literal">()</span>;</span><br><span class="line">    ConfigurableApplicationContext context = null;</span><br><span class="line">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> <span class="constructor">ArrayList()</span>;</span><br><span class="line">    this.configure<span class="constructor">HeadlessProperty()</span>;</span><br><span class="line">    SpringApplicationRunListeners listeners = this.get<span class="constructor">RunListeners(<span class="params">args</span>)</span>;</span><br><span class="line">    listeners.starting<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">    Collection exceptionReporters;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ApplicationArguments applicationArguments = <span class="keyword">new</span> <span class="constructor">DefaultApplicationArguments(<span class="params">args</span>)</span>;</span><br><span class="line">        ConfigurableEnvironment environment = this.prepare<span class="constructor">Environment(<span class="params">listeners</span>, <span class="params">applicationArguments</span>)</span>;</span><br><span class="line">        this.configure<span class="constructor">IgnoreBeanInfo(<span class="params">environment</span>)</span>;</span><br><span class="line">        Banner printedBanner = this.print<span class="constructor">Banner(<span class="params">environment</span>)</span>;</span><br><span class="line">        context = this.create<span class="constructor">ApplicationContext()</span>;</span><br><span class="line">        exceptionReporters = this.get<span class="constructor">SpringFactoriesInstances(SpringBootExceptionReporter.<span class="params">class</span>, <span class="params">new</span> Class[]&#123;ConfigurableApplicationContext.<span class="params">class</span>&#125;, <span class="params">context</span>)</span>;</span><br><span class="line">        this.prepare<span class="constructor">Context(<span class="params">context</span>, <span class="params">environment</span>, <span class="params">listeners</span>, <span class="params">applicationArguments</span>, <span class="params">printedBanner</span>)</span>;</span><br><span class="line">        <span class="comment">//刷新IOC容器</span></span><br><span class="line">        this.refresh<span class="constructor">Context(<span class="params">context</span>)</span>;</span><br><span class="line">        this.after<span class="constructor">Refresh(<span class="params">context</span>, <span class="params">applicationArguments</span>)</span>;</span><br><span class="line">        stopWatch.stop<span class="literal">()</span>;</span><br><span class="line">        <span class="keyword">if</span> (this.logStartupInfo) &#123;</span><br><span class="line">            (<span class="keyword">new</span> <span class="constructor">StartupInfoLogger(<span class="params">this</span>.<span class="params">mainApplicationClass</span>)</span>).log<span class="constructor">Started(<span class="params">this</span>.<span class="params">getApplicationLog</span>()</span>, stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        listeners.started(context);</span><br><span class="line">        this.call<span class="constructor">Runners(<span class="params">context</span>, <span class="params">applicationArguments</span>)</span>;</span><br><span class="line">    &#125; catch (Throwable var10) &#123;</span><br><span class="line">        this.handle<span class="constructor">RunFailure(<span class="params">context</span>, <span class="params">var10</span>, <span class="params">exceptionReporters</span>, <span class="params">listeners</span>)</span>;</span><br><span class="line">        throw <span class="keyword">new</span> <span class="constructor">IllegalStateException(<span class="params">var10</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        listeners.running(context);</span><br><span class="line">        return context;</span><br><span class="line">    &#125; catch (Throwable var9) &#123;</span><br><span class="line">        this.handle<span class="constructor">RunFailure(<span class="params">context</span>, <span class="params">var9</span>, <span class="params">exceptionReporters</span>, (SpringApplicationRunListeners)</span>null);</span><br><span class="line">        throw <span class="keyword">new</span> <span class="constructor">IllegalStateException(<span class="params">var9</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>先启动Sevlet容器，在启动SpringBoot应用(与之相反)</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot微服务框架(三)</title>
    <url>/2020/01/04/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-%E4%B8%89/</url>
    <content><![CDATA[<h3 id="配置debug-true，控制台打印自动配置报告"><a href="#配置debug-true，控制台打印自动配置报告" class="headerlink" title="配置debug=true，控制台打印自动配置报告"></a>配置debug=true，控制台打印自动配置报告</h3><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><h4 id="日志框架"><a href="#日志框架" class="headerlink" title="日志框架"></a>日志框架</h4><table>
<thead>
<tr>
<th>日志门面(日志的抽象层)</th>
<th align="center">日志实现</th>
</tr>
</thead>
<tbody><tr>
<td>slf4j</td>
<td align="center">Log4j jul(java.util.logging) log4j2 logback</td>
</tr>
</tbody></table>
<ul>
<li>springBoot底层是Spring框架，Spring默认的是JCL(commons-loggin.jar );</li>
<li>springBoot选用slf4j和logback</li>
</ul>
<h3 id="slf4j的使用"><a href="#slf4j的使用" class="headerlink" title="slf4j的使用"></a>slf4j的使用</h3><ul>
<li>开发的时候，日志方法的调用，不应该直接调用日志的实现类，<br>而是调用日志抽象层里面的方法;</li>
</ul>
<ol>
<li>导包slf4j的jar包和logback实现的jar包；<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import org.slf4j.Logger;</span><br><span class="line">import org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Main &#123;</span><br><span class="line">   final Logger logger = <span class="module-access"><span class="module"><span class="identifier">LoggerFactory</span>.</span></span>get<span class="constructor">Logger(<span class="params">getClass</span>()</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 日志操作对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Logger logger = <span class="module-access"><span class="module"><span class="identifier">LoggerFactory</span>.</span></span>get<span class="constructor">Logger(CommonController.<span class="params">class</span>)</span>;</span><br></pre></td></tr></table></figure>
图示:<br><img src="http://www.slf4j.org/images/concrete-bindings.png" alt="slf4j"></li>
</ol>
<ul>
<li>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件；</li>
<li>遗留问题<ul>
<li>SpringBoot(slf4j+logback)</li>
<li>Spring(commons-logging)</li>
<li>Hibernate(jboss-logging).等</li>
</ul>
</li>
</ul>
<ul>
<li>统一日志记录，即使是别的框架和我一起使用slf4j+logback进行输出<br>图示:<br><img src="http://www.slf4j.org/images/legacy.png" alt="统一日志记录"><h5 id="如何在系统中所有的日志都统一到slf4j；"><a href="#如何在系统中所有的日志都统一到slf4j；" class="headerlink" title="如何在系统中所有的日志都统一到slf4j；"></a>如何在系统中所有的日志都统一到slf4j；</h5><ul>
<li>1.将系统中其他的日志框架先排除；</li>
<li>2.用中间包类替换原有的日志框架；</li>
<li>3.我们导入slf4j其他的实现<h3 id="springBoot日志关系"><a href="#springBoot日志关系" class="headerlink" title="springBoot日志关系"></a>springBoot日志关系</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li>springBoot使用他来做日志功能：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>总结：<ul>
<li>1.SpringBoot底层也是使用slf4j+logback的方式记录日志</li>
<li>2.SpringBoot也把替他的日志都替换成了slf4j</li>
<li>3.中间替换包？<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jul-to-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>如果我们要引入其他框架？一定要把这个框架的默认依赖移除掉<br>Spring框架日志文件（commons-logging）<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>注意：SpringBoot能自动适配所有的日志，而且底层使用slfj+logback的方式记录日志，引入其他框架的时候，只需要把这个框架的依赖日志排除</li>
<li>加上Log4j2日志框架依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="测试案例"><a href="#测试案例" class="headerlink" title="测试案例"></a>测试案例</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.zhao;</span><br><span class="line"> <span class="keyword">import</span> org.junit.jupiter.api.<span class="type">Test</span>;</span><br><span class="line"> <span class="keyword">import</span> org.junit.runner.<span class="type">RunWith</span>;</span><br><span class="line"> <span class="keyword">import</span> org.slf4j.<span class="type">Logger</span>;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.boot.test.context.<span class="type">SpringBootTest</span>;</span><br><span class="line"> <span class="keyword">import</span> org.springframework.test.context.junit4.<span class="type">SpringRunner</span>;</span><br><span class="line"> <span class="keyword">import</span> org.slf4j.<span class="type">LoggerFactory</span>;</span><br><span class="line"> &lt;!-- 注意：</span><br><span class="line"> 添加注解：<span class="meta">@RunWith</span>(<span class="type">SpringRunner</span><span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"> <span class="title">导入的包：org</span>.<span class="title">springframework</span>.<span class="title">test</span>.<span class="title">context</span>.<span class="title">junit4</span>.<span class="title">SpringRunner</span></span>;</span><br><span class="line"> 添加记录器工厂  <span class="type">LoggerFactory</span> </span><br><span class="line"> 导入的包：org.slf4j.<span class="type">LoggerFactory</span>;--&gt;</span><br><span class="line"> <span class="meta">@RunWith</span>(<span class="type">SpringRunner</span><span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"> <span class="title">@SpringBootTest</span></span></span><br><span class="line"><span class="class"> <span class="title">class</span> <span class="title">DemoTest03ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//记录器</span></span><br><span class="line">	<span class="keyword">final</span> <span class="type">Logger</span> logger = <span class="type">LoggerFactory</span>.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	void contextLoads() &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//日志级别</span></span><br><span class="line">		<span class="comment">//由高到底 trace&lt;debug&lt;info&lt;wran&lt;error</span></span><br><span class="line"></span><br><span class="line">		logger.trace(<span class="string">"这是trace日志。。。。"</span>);</span><br><span class="line">		logger.debug(<span class="string">"这是debug调试日志。。。。"</span>);</span><br><span class="line">		logger.info(<span class="string">"这是info日志。。。。。"</span>);</span><br><span class="line">		logger.warn(<span class="string">"这是警告wran日志。。。。"</span>);</span><br><span class="line">		<span class="comment">//SpringBoot默认Info级别</span></span><br><span class="line">		<span class="comment">//可以调正输出的日志级别：日志就只会在这个级别以后的级别高级别生效</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 *trace：追踪，就是程序推进一下，可以写个trace输出</span></span><br><span class="line"><span class="comment">		 *debug：调试，一般作为最低级别，trace基本不用。</span></span><br><span class="line"><span class="comment">		 *info：输出重要的信息，使用较多</span></span><br><span class="line"><span class="comment">		 *warn：警告，有些信息不是错误信息，但也要给程序员一些提示。</span></span><br><span class="line"><span class="comment">		 *error：错误信息。用的也很多。</span></span><br><span class="line"><span class="comment">		 *fatal：致命错误。</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="指定日志的输出位置"><a href="#指定日志的输出位置" class="headerlink" title="指定日志的输出位置"></a>指定日志的输出位置</h3><ul>
<li>properties文件中配置<br>logging.level.com.atguigu=trace<br>第一种方式：<br>//在当前磁盘的根路径下创建spring文件夹和里面的log文件夹，默认生成spring.log日志文件<br>logging.path=/spring/log<br>第二种方式：<br>//当前项目下生成springboot.log日志文件<br>loging.file=springboot.log<br>第三种方式：<br>//指定路径下生成springboot.log日志文件<br>loging.file=G:/springboot.log<br>第四种方式：<br>//在控制台输出日志的格式<br>logging.pattern.console=%d{yyyy-MM-dd HH-mm-ss.SSS} [%thread] %-5level %logger{50} - %msg%n<br>// 指定文件中日志的输出格式<br>logging.pattern.file=<h3 id="日志的输出格式："><a href="#日志的输出格式：" class="headerlink" title="日志的输出格式："></a>日志的输出格式：</h3><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line"><span class="tag">%<span class="selector-tag">d</span></span>表示日期时间</span><br><span class="line"><span class="tag">%<span class="selector-tag">thread</span></span>表示当前线程</span><br><span class="line"><span class="tag">%</span>-5level：级别从左显示5个字符宽度</span><br><span class="line"><span class="tag">%<span class="selector-tag">logger</span>&#123;50&#125;</span>：表示logger&#123;50&#125;名字最长50个字符，否则按照据点分割；</span><br><span class="line"><span class="tag">%<span class="selector-tag">msg</span></span>：日志消息</span><br><span class="line"><span class="tag">%<span class="selector-tag">n</span></span>：换行符</span><br><span class="line"><span class="tag">%<span class="selector-tag">d</span>&#123;yyyy-MM-dd HH-mm-ss.SSS&#125;</span> [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure></li>
<li>自定义日志</li>
</ul>
<table>
<thead>
<tr>
<th>logging System（日志框架)</th>
<th align="center">Customization</th>
</tr>
</thead>
<tbody><tr>
<td>logback</td>
<td align="center">logback-spring.xml , logback-spring.groovy , logback.xml or logback.groovy</td>
</tr>
<tr>
<td>Logf4j</td>
<td align="center">log4j-spring.xml or logf4j.xml</td>
</tr>
<tr>
<td>JDK(java util Logging)</td>
<td align="center">logging.properties</td>
</tr>
</tbody></table>
<ul>
<li>logback.xml:直接被日志框架识别了</li>
<li>ligback-spring.xml：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用高级Profile功能，否则会报错</li>
<li>高级功能<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">  可以直接指定某段配置只有某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下报错<br>  no applicable action for [springProfile 888]</li>
</ul>
<h3 id="切换日志框架"><a href="#切换日志框架" class="headerlink" title="切换日志框架"></a>切换日志框架</h3><ul>
<li><p>可以按照slf4j的日志适配图，进行相关的切换</p>
<h3 id="web开发"><a href="#web开发" class="headerlink" title="web开发"></a>web开发</h3></li>
<li><p>SpringBoot对静态资源的映射规则（WebMvcAutoConfiguration）</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//访问路径配置</span></span><br><span class="line"> public void add<span class="constructor">ResourceHandlers(ResourceHandlerRegistry <span class="params">registry</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!this.resourceProperties.is<span class="constructor">AddMappings()</span>) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Duration cachePeriod = this.resourceProperties.get<span class="constructor">Cache()</span>.get<span class="constructor">Period()</span>;</span><br><span class="line">                CacheControl cacheControl = this.resourceProperties.get<span class="constructor">Cache()</span>.get<span class="constructor">Cachecontrol()</span>.<span class="keyword">to</span><span class="constructor">HttpCacheControl()</span>;</span><br><span class="line">                <span class="keyword">if</span> (!registry.has<span class="constructor">MappingForPattern(<span class="string">"/webjars/**"</span>)</span>) &#123;</span><br><span class="line">                    this.customize<span class="constructor">ResourceHandlerRegistration(<span class="params">registry</span>.<span class="params">addResourceHandler</span>(<span class="params">new</span> String[]&#123;<span class="string">"/webjars/**"</span>&#125;)</span>.add<span class="constructor">ResourceLocations(<span class="params">new</span> String[]&#123;<span class="string">"classpath:/META-INF/resources/webjars/"</span>&#125;)</span>.set<span class="constructor">CachePeriod(<span class="params">this</span>.<span class="params">getSeconds</span>(<span class="params">cachePeriod</span>)</span>).set<span class="constructor">CacheControl(<span class="params">cacheControl</span>)</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String staticPathPattern = this.mvcProperties.get<span class="constructor">StaticPathPattern()</span>;</span><br><span class="line">                <span class="keyword">if</span> (!registry.has<span class="constructor">MappingForPattern(<span class="params">staticPathPattern</span>)</span>) &#123;</span><br><span class="line">                    this.customize<span class="constructor">ResourceHandlerRegistration(<span class="params">registry</span>.<span class="params">addResourceHandler</span>(<span class="params">new</span> String[]&#123;<span class="params">staticPathPattern</span>&#125;)</span>.add<span class="constructor">ResourceLocations(WebMvcAutoConfiguration.<span class="params">getResourceLocations</span>(<span class="params">this</span>.<span class="params">resourceProperties</span>.<span class="params">getStaticLocations</span>()</span>)).set<span class="constructor">CachePeriod(<span class="params">this</span>.<span class="params">getSeconds</span>(<span class="params">cachePeriod</span>)</span>).set<span class="constructor">CacheControl(<span class="params">cacheControl</span>)</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//首页配置</span></span><br><span class="line">         @Bean</span><br><span class="line">        public WelcomePageHandlerMapping welcome<span class="constructor">PageHandlerMapping(ApplicationContext <span class="params">applicationContext</span>, FormattingConversionService <span class="params">mvcConversionService</span>, ResourceUrlProvider <span class="params">mvcResourceUrlProvider</span>)</span> &#123;</span><br><span class="line">            WelcomePageHandlerMapping welcomePageHandlerMapping = <span class="keyword">new</span> <span class="constructor">WelcomePageHandlerMapping(<span class="params">new</span> TemplateAvailabilityProviders(<span class="params">applicationContext</span>)</span>, applicationContext, this.get<span class="constructor">WelcomePage()</span>, this.mvcProperties.get<span class="constructor">StaticPathPattern()</span>);</span><br><span class="line">            welcomePageHandlerMapping.set<span class="constructor">Interceptors(<span class="params">this</span>.<span class="params">getInterceptors</span>(<span class="params">mvcConversionService</span>, <span class="params">mvcResourceUrlProvider</span>)</span>);</span><br><span class="line">            return welcomePageHandlerMapping;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>1.所有/webjars/**，都去classpath:/META-INF/resources/webjars/这里找资源<br>webjars：以jar包的方式引入静态资源；<br>网站<a href="http://www.webjars.org" target="_blank" rel="noopener">www.webjars.org</a><br>在pom.xml文件中引入webjars依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="comment">&lt;!--引入Jquery的Webjar--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问的时候只需要写webjars下面的资源名称即可<br>下面在<a href="http://localhost:8080/webjars/jquery/3.3.1/jquery.js就可访问的到" target="_blank" rel="noopener">http://localhost:8080/webjars/jquery/3.3.1/jquery.js就可访问的到</a></p>
</li>
<li><p>2.”/**”访问当前项目的任何资源(静态资源的文件夹)</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span></span><br><span class="line"> <span class="keyword">String</span>[] CLASSPATH_RESOURCE_LOCATIONS = <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;</span><br><span class="line">   <span class="string">"classpath:/META-INF/resources/"</span>, </span><br><span class="line">   <span class="string">"classpath:/resources/"</span>, </span><br><span class="line">   <span class="string">"classpath:/static/"</span>, </span><br><span class="line">   <span class="string">"classpath:/public/"</span>&#125;;</span><br></pre></td></tr></table></figure></li>
<li><ol start="3">
<li>首页：静态资源文件夹下的所有index.html页面，被”/**”映射<br>localhost:8080/   找到index页面</li>
</ol>
</li>
<li><p>4.图标：所有**/favicon.ico都在静态资源文件夹下找；</p>
<h3 id="静态文件夹配置"><a href="#静态文件夹配置" class="headerlink" title="静态文件夹配置"></a>静态文件夹配置</h3></li>
<li><p>定义静态文件夹SpringBoot默认的静态文件夹不生效</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">#数组</span><br><span class="line">spring.resources.<span class="keyword">static</span>-locations=<span class="keyword">classpath</span>:<span class="regexp">/webapp/</span>,<span class="keyword">classpath</span>:<span class="regexp">/page/</span></span><br></pre></td></tr></table></figure>
<h3 id="模板引擎Thymeleaf"><a href="#模板引擎Thymeleaf" class="headerlink" title="模板引擎Thymeleaf"></a>模板引擎Thymeleaf</h3></li>
<li><p>1.引入模板引擎thymeleaf：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--引入Thymeleaf模块引擎--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>2.Thymeleaf使用和语法</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">@ConfigurationProperties(</span><br><span class="line">   prefix = <span class="string">"spring.thymeleaf"</span></span><br><span class="line">)</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">boolean</span> checkTemplate = <span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">boolean</span> checkTemplateLocation = <span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> prefix = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line">   <span class="comment">//只要我们把Html页面放在classparh：/templates/下就可以自动渲染渲染</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> suffix = <span class="string">".html"</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> mode = <span class="string">"HTML"</span>;</span><br><span class="line">   <span class="keyword">private</span> Charset encoding;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">boolean</span> cache;</span><br><span class="line">   <span class="keyword">private</span> Integer templateResolverOrder;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span>[] viewNames;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span>[] excludedViewNames;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">boolean</span> enableSpringElCompiler;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">boolean</span> renderHiddenMarkersBeforeCheckboxes;</span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">boolean</span> enabled;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ThymeleafProperties.Servlet servlet;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ThymeleafProperties.Reactive reactive;</span><br></pre></td></tr></table></figure>
<h3 id="Html文件位置在templates文件夹下"><a href="#Html文件位置在templates文件夹下" class="headerlink" title="Html文件位置在templates文件夹下"></a>Html文件位置在templates文件夹下</h3></li>
<li><p>1.导入Thymeleaf名称空间xmlns:th=”<a href="http://www.thymeleaf.org&quot;" target="_blank" rel="noopener">http://www.thymeleaf.org&quot;</a></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;html <span class="attribute">lang</span>=<span class="string">"en"</span> xmlns:<span class="attribute">th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>2.不经过控制层controller不显示数据，只显示前台页面有的数据</p>
</li>
<li><p>3.语法规则</p>
<ul>
<li>3.1 th:text;改变当前元素的文本内容<pre><code>th:任意html属性，来替换原生属性的值</code></pre></li>
</ul>
</li>
<li><p>4.表达式</p>
<ul>
<li>4.1 语法<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line"><span class="type">Simple</span> expressions:(表达式语法)</span><br><span class="line">      <span class="type">Variable</span> <span class="type">Expressions</span>: $<span class="meta">&#123;...&#125;</span> 获取变量值：<span class="type">OGNL</span></span><br><span class="line">               <span class="number">1</span>. 获取对象的属性，调用方法</span><br><span class="line">               <span class="number">2</span>. 使用内置的基本对象</span><br><span class="line">                  <span class="comment">#ctx : the context object. 当前上下文文对象</span></span><br><span class="line">                  <span class="comment">#vars: the context variables.  当前上下文变量值</span></span><br><span class="line">                  <span class="comment">#locale : the context locale.  当前上下文区域信息</span></span><br><span class="line">                  <span class="comment">#request : (only in Web Contexts) the HttpServletRequest object. </span></span><br><span class="line">                  <span class="comment">#response : (only in Web Contexts) the HttpServletResponse object.</span></span><br><span class="line">                  <span class="comment">#session : (only in Web Contexts) the HttpSession object.</span></span><br><span class="line">                  <span class="comment">#servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class="line">                <span class="number">3</span>. 内置工具对象</span><br><span class="line">                    <span class="comment">#execInfo : information about the template  being processed.</span></span><br><span class="line">                    <span class="comment">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they</span></span><br><span class="line">                    would be obtained <span class="keyword">using</span> <span class="comment">#&#123;…&#125; syntax.</span></span><br><span class="line">                    <span class="comment">#uris : methods for escaping parts of URLs/URIs</span></span><br><span class="line">                    <span class="type">Page</span> <span class="number">20</span> <span class="keyword">of</span> <span class="number">106</span></span><br><span class="line">                    <span class="comment">#conversions : methods for executing the configured conversion service (if any).</span></span><br><span class="line">                    <span class="comment">#dates : methods for java.util.Date objects: formatting, component extraction, etc.</span></span><br><span class="line">                    <span class="comment">#calendars : analogous to #dates , but for java.util.Calendar objects.</span></span><br><span class="line">                    <span class="comment">#numbers : methods for formatting numeric objects.</span></span><br><span class="line">                    <span class="comment">#strings : methods for String objects: contains, startsWith, prepending/appending, etc.</span></span><br><span class="line">                    <span class="comment">#objects : methods for objects in general.</span></span><br><span class="line">                    <span class="comment">#bools : methods for boolean evaluation.</span></span><br><span class="line">                    <span class="comment">#arrays : methods for arrays.</span></span><br><span class="line">                    <span class="comment">#lists : methods for lists.</span></span><br><span class="line">                    <span class="comment">#sets : methods for sets.</span></span><br><span class="line">                    <span class="comment">#maps : methods for maps.</span></span><br><span class="line">                    <span class="comment">#aggregates : methods for creating aggregates on arrays or collections.</span></span><br><span class="line">                    <span class="comment">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class="line"></span><br><span class="line">      <span class="type">Selection</span> <span class="type">Variable</span> <span class="type">Expressions</span>: *<span class="meta">&#123;...&#125;</span> 变量选择表达式</span><br><span class="line">      和$&#123;&#125;在功能上是一样的</span><br><span class="line">      补充：配合th:<span class="keyword">object</span>=<span class="string">"$&#123;session.user&#125;"</span> 使用 th:text=<span class="string">"*&#123;name&#125;"</span>  *相当于$&#123;session.user&#125;</span><br><span class="line">      &lt;<span class="keyword">div</span> th:<span class="keyword">object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span><br><span class="line">          &lt;p&gt;<span class="type">Name</span>: &lt;span th:text=<span class="string">"*&#123;firstName&#125;"</span>&gt;<span class="type">Sebastian</span>&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">          &lt;p&gt;<span class="type">Surname</span>: &lt;span th:text=<span class="string">"*&#123;lastName&#125;"</span>&gt;<span class="type">Pepper</span>&lt;/span&gt;.&lt;/p&gt;</span><br><span class="line">      &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">      <span class="type">Message</span> <span class="type">Expressions</span>: <span class="comment">#&#123;...&#125; 获取国际化内容</span></span><br><span class="line">      <span class="type">Link</span> <span class="type">URL</span> <span class="type">Expressions</span>: @<span class="meta">&#123;...&#125;</span> 定义url链接</span><br><span class="line">      <span class="type">Fragment</span> <span class="type">Expressions</span>: ~<span class="meta">&#123;...&#125;</span> 片段引用表达式</span><br><span class="line"><span class="type">Literals</span>：(字面量)</span><br><span class="line">    <span class="type">Text</span> literals: 'one text' , '<span class="type">Another</span> one!' ,…</span><br><span class="line">    <span class="type">Number</span> literals: <span class="number">0</span> , <span class="number">34</span> , <span class="number">3</span>.<span class="number">0</span> , <span class="number">12</span>.<span class="number">3</span> ,…</span><br><span class="line">    <span class="type">Boolean</span> literals: <span class="literal">true</span> , <span class="literal">false</span></span><br><span class="line">    <span class="type">Null</span> literal: null</span><br><span class="line">    <span class="type">Literal</span> tokens: one , sometext , main ,…</span><br><span class="line"><span class="type">Text</span> operations:(文本操作)</span><br><span class="line">    <span class="type">String</span> concatenation: +</span><br><span class="line">    <span class="type">Literal</span> substitutions: |<span class="type">The</span> name <span class="keyword">is</span> $&#123;name&#125;|</span><br><span class="line"><span class="type">Arithmetic</span> operations:</span><br><span class="line">    <span class="type">Binary</span> operators: + , - , * , / , %</span><br><span class="line">    <span class="type">Minus</span> sign (unary operator): -</span><br><span class="line"><span class="type">Boolean</span> operations:（布尔运算）</span><br><span class="line">    <span class="type">Binary</span> operators: <span class="keyword">and</span> , <span class="keyword">or</span></span><br><span class="line">    <span class="type">Boolean</span> negation (unary operator): ! , <span class="keyword">not</span></span><br><span class="line"><span class="type">Comparisons</span> <span class="keyword">and</span> equality:（比较运算）</span><br><span class="line">    <span class="type">Comparators</span>: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">    <span class="type">Equality</span> operators: == , != ( eq , ne )</span><br><span class="line"><span class="type">Conditional</span> operators:(条件运算)</span><br><span class="line">    <span class="type">If</span>-then: (<span class="keyword">if</span>) ? (then)</span><br><span class="line">    <span class="type">If</span>-then-<span class="keyword">else</span>: (<span class="keyword">if</span>) ? (then) : (<span class="keyword">else</span>)</span><br><span class="line">    <span class="type">Default</span>: (value) ?: (defaultvalue)</span><br><span class="line"><span class="type">Special</span> tokens:</span><br><span class="line">    <span class="type">Page</span> <span class="number">17</span> <span class="keyword">of</span> <span class="number">106</span></span><br><span class="line">    <span class="type">No</span>-<span class="type">Operation</span>: _</span><br></pre></td></tr></table></figure>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3></li>
<li>1.html代码<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--导入thymelesf名称空间作用语法提示</span></span></span><br><span class="line"><span class="xml">  xmlns:th="http://www.thymeleaf.org"--&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>成佛那个！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- th:text="$</span></span><span class="template-variable">&#123;&#125;</span><span class="xml"><span class="comment">" 件div里面的文件内容设置为指定的内容--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;hello&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:utext</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;hello&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> //utext不会转移</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--th:each=""每次遍历都会生成当前这个标签 3个h4--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">th:each</span>=<span class="string">"user:$</span></span></span><span class="template-variable">&#123;users&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="comment">&lt;!----&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:each</span>=<span class="string">"user:$</span></span></span><span class="template-variable">&#123;users&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>[[$</span><span class="template-variable">&#123;user&#125;</span><span class="xml">]]<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>2.Controllor控制层<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*    @RequestMapping(&#123;"/","/login.html"&#125;)</span></span><br><span class="line"><span class="comment">    public String index()&#123;</span></span><br><span class="line"><span class="comment">        return "login";</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    @ResponseBody</span><br><span class="line">    @RequestMapping(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello world!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查出一些数据在页面显示</span></span><br><span class="line">    @RequestMapping(<span class="string">"/success"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">success</span><span class="params">(Map&lt;<span class="keyword">String</span>,Object&gt; <span class="built_in">map</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"hello"</span>,<span class="string">"&lt;h1&gt;你好！&lt;/h1&gt;"</span>);</span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"users"</span>,Arrays.asList(<span class="string">"沐沐"</span>,<span class="string">"离奇"</span>,<span class="string">"哈克"</span>));</span><br><span class="line">        <span class="comment">//classpath:/templates/success.html</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="如何修改SpringBoot的默认配置"><a href="#如何修改SpringBoot的默认配置" class="headerlink" title="如何修改SpringBoot的默认配置"></a>如何修改SpringBoot的默认配置</h3></li>
<li>模式：<ol>
<li>SpringBoot在容器中自动配置很多组件的时候，先看容器中有没有用户自己配（@bean，@Component），如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver，视图解析器）将用户配置的和SpringBoot默认配置的组合起来</li>
<li><h3 id="扩展SprinMVC"><a href="#扩展SprinMVC" class="headerlink" title="扩展SprinMVC"></a>扩展SprinMVC</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:view-controller</span> <span class="attr">path</span>=<span class="string">"/hello"</span> <span class="attr">view-name</span>=<span class="string">"success"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hean</span>&gt;</span><span class="tag">&lt;<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>编写一个配置类（@Configuration），是WebMvcConfigurer类型，不能标注@EnableWebMvc</li>
<li>如果标注了@EnableWebMvc表示SpringBoot所有的配置类都不要了，所有的都是我们自己的配置，全面接管SpringMvc</li>
<li>特点：既保留了所有的自动配置，也能用我们的扩展</li>
<li>在SpringBoot中会有很多xxxConfigurer(如webMvcConfigurer)</li>
<li>注意：快捷键ctrl+o 弹出父类的所有方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurer扩展SpringMvc的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span>   </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浏览器发送/zhao请求 也来到success页面</span></span><br><span class="line">    registry.addViewController(<span class="string">"/zhao"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>原理：<ul>
<li>WebMvcAutoConfiguration是SpringMvc的自动配置类</li>
<li>在做其他配置时会导入：@import(EnablewebMvcConfiguration.class)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Configuration</span>(</span><br><span class="line">  proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">   )</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableWebMvcConfiguration</span> <span class="keyword">extends</span>    <span class="title">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title">ResourceLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">EnableWebMvcConfiguration</span><span class="params">(ResourceProperties resourceProperties, ObjectProvider&lt;WebMvcProperties&gt; mvcPropertiesProvider, ObjectProvider&lt;WebMvcRegistrations&gt; mvcRegistrationsProvider, ListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">      <span class="keyword">this</span>.mvcProperties = (WebMvcProperties)mvcPropertiesProvider.getIfAvailable();</span><br><span class="line">      <span class="keyword">this</span>.mvcRegistrations = (WebMvcRegistrations)mvcRegistrationsProvider.getIfUnique();</span><br><span class="line">      <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//从容器中获取所有的WebMvcConfigurer</span></span><br><span class="line"> <span class="meta">@Autowired</span>(</span><br><span class="line">  required = <span class="keyword">false</span></span><br><span class="line">   )</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConfigurers</span><span class="params">(List&lt;WebMvcConfigurer&gt; configurers)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!CollectionUtils.isEmpty(configurers)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.configurers.addWebMvcConfigurers(configurers);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>容器中所有的WebmvcConfigurer都会自己其作用用</li>
<li>我们配置也会起作用</li>
<li>效果：SpringMVC的自己起作用和我们的配置也会起作用</li>
<li>@EnableWebMvcConfigurationSupport组件导入进来；</li>
<li>导入的WebMvcConfigurationSupport只是SpringMvc最基本的功能；<h3 id="加载首页方法"><a href="#加载首页方法" class="headerlink" title="加载首页方法"></a>加载首页方法</h3></li>
</ul>
</li>
</ul>
</li>
<li><p>1.Controller写的方法</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&#123;<span class="meta-string">"/"</span>,<span class="meta-string">"/login.html"</span>&#125;)</span></span><br><span class="line">   <span class="keyword">public</span> String index()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>2.自己写配置类继承WebMvcConfigurer类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有的WebMvcConfigurer组件都会起作用</span></span><br><span class="line">   <span class="meta">@Bean</span> <span class="comment">//把组件加入到容器中</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function">WebMvcConfigurer <span class="title">webMvcConfigurer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       WebMvcConfigurer config = <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">               registry.addViewController(<span class="string">"/"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">               registry.addViewController(<span class="string">"/login.html"</span>).setViewName(<span class="string">"login"</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;;</span><br><span class="line">       <span class="keyword">return</span> config;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h4 id="通过Webjars方式加入boootstrap"><a href="#通过Webjars方式加入boootstrap" class="headerlink" title="通过Webjars方式加入boootstrap"></a>通过Webjars方式加入boootstrap</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">通过webjars官网找到bootstrap添加到Maven依赖</span><br><span class="line"><span class="comment">&lt;!--引入Bootstrop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="通过模板引擎引入外部文件"><a href="#通过模板引擎引入外部文件" class="headerlink" title="通过模板引擎引入外部文件"></a>通过模板引擎引入外部文件</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!--Webjars方式引入bootstaap.css文件</span></span></span><br><span class="line"><span class="xml">	第一部导入Maven依赖--&gt;</span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!--引入CSS等外部文件 th:href="@</span></span><span class="template-tag">&#123;/<span class="name">webjars</span>/bootstrap/4.0.0/css/bootstrap.css&#125;</span><span class="xml"><span class="comment">"--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">webjars</span>/bootstrap/4.0.0/css/bootstrap.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span>  <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-variable">&#123;asserts/css/signin.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">th:src</span>=<span class="string">"@</span></span></span><span class="template-variable">&#123;asserts/img/bootstrap-solid.svg&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4></li>
<li><p>SpringMvc使用过程</p>
<ul>
<li>1.编写国际化配置文件</li>
<li>2.使用ResourceBundleMessageSource管理国际化资源</li>
<li>3.在页面使用fmt:message去除国际化内容</li>
</ul>
</li>
<li><p>SpringBoot配置</p>
<ul>
<li><p>步骤：</p>
<ul>
<li>1.编写国际化配置文件，抽取页面需要显示的内容(创建i18n文件夹，创建默认显示文件login.properties,中文状态显示文件login_zh_CN.properties,英文状态下显示文件login_en_US.properties)在创建中文状态显示的文件，可以快捷方式创建(New –&gt;Add Property File)</li>
<li>2.显示内容通过页面Resource Bulid进行创建 属性=值的方式</li>
<li>3.SpringBoot已经自动配置好了管理国际化资源文件的组件</li>
<li>4.application.properties文件中配置spring.messages.basename=i18n.login<br>源码：<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">   prefix = <span class="string">"spring.messages"</span></span><br><span class="line">)</span><br><span class="line"> <span class="comment">//我们的配置文件可以直接放在类路径下加message.properties;</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">   ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">     <span class="comment">//设置国际化资源文件的基础名（去掉语言国家的代码）</span></span><br><span class="line">       messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">       messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>去页面获取国际化的值th:text=”#{login.tip}”<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> &gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--Webjars方式引入bootstaap.css文件</span></span></span><br><span class="line"><span class="xml">    第一部导入Maven依赖--&gt;</span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--引入CSS等外部文件 th:href="@</span></span><span class="template-tag">&#123;/<span class="name">webjars</span>/bootstrap/4.0.0/css/bootstrap.css&#125;</span><span class="xml"><span class="comment">"--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/bootstrap.min.css"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">webjars</span>/bootstrap/4.0.0/css/bootstrap.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!-- Custom styles for this template --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"asserts/css/signin.css"</span>  <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-variable">&#123;asserts/css/signin.css&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">src</span>=<span class="string">"asserts/img/bootstrap-solid.svg"</span> <span class="attr">th:src</span>=<span class="string">"@</span></span></span><span class="template-variable">&#123;asserts/img/bootstrap-solid.svg&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.tip&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">th:placeholder</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.username&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">th:placeholder</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.password&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">required</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="comment">&lt;!-- 注意此处单选框 --&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>&gt;</span> [[#</span><span class="template-variable">&#123;login.Remember&#125;</span><span class="xml">]]</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;login.btn&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>效果：根据浏览器语言设置信息切换国际化</li>
</ul>
<ul>
<li>国际化Locale(区域信息对象)；LocaleResolver</li>
<li>源码<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//区域信息解析器</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">  <span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">      prefix = <span class="meta-string">"spring.mvc"</span>,</span></span><br><span class="line"><span class="meta">      name = &#123;<span class="meta-string">"locale"</span>&#125;</span></span><br><span class="line"><span class="meta">  )</span></span><br><span class="line">  <span class="keyword">public</span> LocaleResolver localeResolver() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == org.springframework.boot.autoconfigure.web.servlet.WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">          <span class="keyword">return</span> new FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();</span><br><span class="line">          localeResolver.setDefaultLocale(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">          <span class="keyword">return</span> localeResolver;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  默认的就是根据请求头带来的区域性息获取Locale进行国际化</span><br></pre></td></tr></table></figure></li>
<li>自定义区域信息解析器</li>
</ul>
<ul>
<li>1.html添加访问路径<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"> 	<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">login.html</span>(L='zh_CN')&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span> <span class="attr">th:href</span>=<span class="string">"@</span></span></span><span class="template-tag">&#123;/<span class="name">login.html</span>(L='en_US')&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>2.创建MyLocaleResolver继承LocaleResolver  //区域信息解析器<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">  import org.springframework.util.StringUtils;</span><br><span class="line">  import org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"></span><br><span class="line">  import javax.servlet.http.HttpServletRequest;</span><br><span class="line">  import javax.servlet.http.HttpServletResponse;</span><br><span class="line">  import java.util.Locale;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 可以在链接上携带上区域信息</span></span><br><span class="line"><span class="comment">  * */</span></span><br><span class="line"> public <span class="keyword">class</span> MyLocaleResolver implements LocaleResolver &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*解析区域性息*/</span></span><br><span class="line">    @Override</span><br><span class="line">    public Locale resolve<span class="constructor">Locale(HttpServletRequest <span class="params">httpServletRequest</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String L = httpServletRequest.get<span class="constructor">Parameter(<span class="string">"L"</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(L);</span><br><span class="line"></span><br><span class="line">        Locale locale = <span class="module-access"><span class="module"><span class="identifier">Locale</span>.</span></span>get<span class="constructor">Default()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(locale);</span><br><span class="line">        <span class="comment">//注意此处判断条件！StringUtils.isEmplaty(L) 不为空</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="module-access"><span class="module"><span class="identifier">StringUtils</span>.</span></span>is<span class="constructor">Empty(L)</span>)&#123;</span><br><span class="line">          String<span class="literal">[]</span> split = <span class="module-access"><span class="module"><span class="identifier">L</span>.</span></span>split(<span class="string">"_"</span>);</span><br><span class="line">          <span class="comment">//注意此处为变量，不是字符串</span></span><br><span class="line">          locale = <span class="keyword">new</span> <span class="constructor">Locale(<span class="params">split</span>[0],<span class="params">split</span>[1])</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(locale);</span><br><span class="line">        return locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void set<span class="constructor">Locale(HttpServletRequest <span class="params">httpServletRequest</span>, HttpServletResponse <span class="params">httpServletResponse</span>, Locale <span class="params">locale</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>3.在配置类中将自定义的MyLocaleResolver加入Springboot容器中<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocaleResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>5.效果：可根据页面链接转换语言信息，此时浏览器的语言选择 对其不起作用<h3 id="开发技巧ctrl-F9重新编译"><a href="#开发技巧ctrl-F9重新编译" class="headerlink" title="开发技巧ctrl+F9重新编译"></a>开发技巧ctrl+F9重新编译</h3></li>
</ul>
</li>
</ul>
</li>
<li><p>开发期间模板引擎页面修改之后，要实时生效</p>
<ul>
<li>1.application.properties禁用模板引擎的缓存<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#禁用模板引擎的缓存</span></span><br><span class="line"><span class="attr">pring.thymeleaf.cache</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
<li>2.页面修改后ctrl+F9重新编译<h4 id="错误消息显示及判断"><a href="#错误消息显示及判断" class="headerlink" title="错误消息显示及判断"></a>错误消息显示及判断</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--判断msg是否为空，后执行text标签内容 此处if标签优先级高于text标签优先级  --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red"</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;msg&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">th:if</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;not #strings.isEmpty(msg)&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="拦截器机制进行登陆检查"><a href="#拦截器机制进行登陆检查" class="headerlink" title="拦截器机制进行登陆检查"></a>拦截器机制进行登陆检查</h3></li>
</ul>
</li>
<li><p>1.创建拦截器对象实现HandlerInterceptor接口</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 登陆检查,拦截器</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*目标方法执行之前*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//未登录，返回登陆界面</span></span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限请先登录"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/login.html"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//已登录，放行请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object <span class="keyword">handler</span>, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>2.将拦截器对象加载到配置类容器中</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注册拦截器</span></span><br><span class="line">          @Override</span><br><span class="line">          public void add<span class="constructor">Interceptors(InterceptorRegistry <span class="params">registry</span>)</span> &#123;</span><br><span class="line">              <span class="comment">//静态资源；*.css , *.js</span></span><br><span class="line">              <span class="comment">//SpringBoot已经做好了静态资源映射</span></span><br><span class="line">              registry.add<span class="constructor">Interceptor(<span class="params">new</span> LoginHandlerInterceptor()</span>).add<span class="constructor">PathPatterns(<span class="string">"/**"</span>)</span>.</span><br><span class="line">                      exclude<span class="constructor">PathPatterns(<span class="string">"/login.html"</span>,<span class="string">"/"</span>,<span class="string">"/user/login"</span>)</span>;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure>
<h3 id="CRUD操作——员工列表"><a href="#CRUD操作——员工列表" class="headerlink" title="CRUD操作——员工列表"></a>CRUD操作——员工列表</h3></li>
</ul>
<h3 id="模板引擎Thymeleaf公共页面元素抽取"><a href="#模板引擎Thymeleaf公共页面元素抽取" class="headerlink" title="模板引擎Thymeleaf公共页面元素抽取"></a>模板引擎Thymeleaf公共页面元素抽取</h3><ul>
<li>1.抽取公共片段 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>     </span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span>     </span><br><span class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>2.引入公共模块<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~</span></span></span><span class="template-variable">&#123;footer :: copy&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="xml">~</span><span class="template-variable">&#123;templatename::selector&#125;</span><span class="xml">:模块名：：片段名</span></span><br><span class="line"><span class="xml">~</span><span class="template-variable">&#123;templatename：：fragmentname&#125;</span><span class="xml">：模块名：：片段名</span></span><br></pre></td></tr></table></figure></li>
<li>3.默认效果 insert的功能片段在div标签里</li>
<li>4.注意：如果使用th:insert等属性进行引入，可以不用写<del>{};<br>行内写法必须写</del>{}方式 [[~{}]];<h3 id="三种引入功能片段的th-属性"><a href="#三种引入功能片段的th-属性" class="headerlink" title="三种引入功能片段的th:属性"></a>三种引入功能片段的th:属性</h3></li>
<li>1.th:insert   :将公共的片段整个插入到声明引入的元素里面</li>
<li>2.th:replace  ：将声明引入的元素替换为公共片段</li>
<li>3.th:include  ：将被引入的片段的内容包含进这个标签中<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span></span><br><span class="line">  &amp;copy; 2011 The Good Thymes Virtual Grocery</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>     </span><br><span class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>   </span><br><span class="line">    &amp;copy; 2011 The Good Thymes Virtual Grocery  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>   </span><br><span class="line">   &amp;copy; 2011 The Good Thymes Virtual Grocery  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="模板引擎使用的一些小技巧"><a href="#模板引擎使用的一些小技巧" class="headerlink" title="模板引擎使用的一些小技巧"></a>模板引擎使用的一些小技巧</h3></li>
<li>1.th:if=”” 通过三目运算的判断改变其样式<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--引入侧边栏--&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"commons/bar::#sidebar(activeUri='emps')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  th:class="$</span><span class="template-variable">&#123;activeUri=='emps'?'nav-link active':'nav-link'&#125;</span><span class="xml">"</span></span><br></pre></td></tr></table></figure></li>
<li>2.Thymeleaf日期格式的转换<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&lt;td&gt;<span class="string">[[$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;]]</span>&lt;/td&gt;</span><br></pre></td></tr></table></figure></li>
<li>3.bootstrap前端框架button按钮样式小技巧<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">通过添加class选择器 <span class="keyword">btn </span><span class="keyword">btn-sm </span><span class="keyword">btn-颜色 </span> </span><br><span class="line"> eg： &lt;<span class="keyword">button </span>class=<span class="string">"btn btb-sm btn-danger"</span>&gt;删除&lt;/<span class="keyword">button&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>4.行内Teymeleaf表达式的写法[()]表示转义 [[]]不转义<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&lt;td&gt;<span class="string">[[$&#123;emp.department.departmentName&#125;]]</span>&lt;/td&gt;</span><br><span class="line">&lt;td&gt;<span class="string">[[$&#123;#dates.format(emp.birth, 'yyyy-MM-dd HH:mm')&#125;]]</span>&lt;/td&gt;</span><br></pre></td></tr></table></figure></li>
<li>5.Teymeleaf表达式做三目运算最好将其写在{}大括号外面<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;emp.gender&#125;</span><span class="xml"><span class="tag"><span class="string">==0?'女':'男'"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>6.遍历集合只需在标签内部加入th:each=””即可<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">tr</span> th:<span class="keyword">each</span>=<span class="string">"emp:<span class="subst">$&#123;emps&#125;</span>"</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>7.controller层操作<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeDao employeeDao;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//查询所偶员工列表页面</span></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/emps"</span>)</span></span><br><span class="line">    <span class="keyword">public</span> String list(Model model)&#123;</span><br><span class="line"></span><br><span class="line">        Collection&lt;Employee&gt; employees = employeeDao.getAll();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//放在请求域中进行共享</span></span><br><span class="line">        model.addAttribute(<span class="string">"emps"</span>,employees);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//thymeleaf（模板引擎）默认就会拼串到类路径下classpath:/templates/...html</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"emp/list"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Controller层增删改查"><a href="#Controller层增删改查" class="headerlink" title="Controller层增删改查"></a>Controller层增删改查</h4><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   EmployeeDao employeeDao;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   DepartmentDao departmentDao;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//查询所偶员工列表页面</span></span><br><span class="line">   <span class="meta">@GetMapping(<span class="meta-string">"/emps"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String list(Model model)&#123;</span><br><span class="line"></span><br><span class="line">       Collection&lt;Employee&gt; employees = employeeDao.getAll();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//放在请求域中进行共享</span></span><br><span class="line">       model.addAttribute(<span class="string">"emps"</span>,employees);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//thymeleaf（模板引擎）默认就会拼串到类路径下classpath:/templates/...html</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"emp/list"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//来到与员工添加页面</span></span><br><span class="line">   <span class="meta">@GetMapping(<span class="meta-string">"/emp"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String toAddPage(Model model)&#123;</span><br><span class="line">       <span class="comment">//来到所有页面,查出所有的部门，在页面显示</span></span><br><span class="line">       Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class="line">       model.addAttribute(<span class="string">"depts"</span>,departments);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"emp/add"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//员工添加功能</span></span><br><span class="line">   <span class="comment">//SpringMvc自动将请求参数和入参的对象的属性进一一绑定；要求请求参数的名字和参数的名字和JavaBean入参的对象里面的属性名</span></span><br><span class="line">   <span class="meta">@PostMapping(<span class="meta-string">"/emp"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String addEmp(Employee employee01)&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//来到员工列表页面</span></span><br><span class="line">       System.<span class="keyword">out</span>.println(<span class="string">"保存员工信息："</span>+employee01);</span><br><span class="line">       <span class="comment">//保存员工</span></span><br><span class="line">       employeeDao.save(employee01);</span><br><span class="line">       <span class="comment">//redirect:表示重定向，到一个地址</span></span><br><span class="line">       <span class="comment">//forword：表示转发到一个地址</span></span><br><span class="line">       <span class="comment">//  /表示当前项目路径你</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//@PathVariable("id") 获取路径变量</span></span><br><span class="line">   <span class="comment">//来到修改页面，查出当前员工，在页面回显</span></span><br><span class="line">   <span class="meta">@GetMapping(<span class="meta-string">"/emp/&#123;id&#125;"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String toEditPage(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> Integer id,Model model)&#123;</span><br><span class="line"></span><br><span class="line">       Employee employee = employeeDao.<span class="keyword">get</span>(id);</span><br><span class="line">       model.addAttribute(<span class="string">"emp"</span>,employee);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//来到所有页面,查出所有的部门，在页面显示</span></span><br><span class="line">       Collection&lt;Department&gt; departments = departmentDao.getDepartments();</span><br><span class="line">       model.addAttribute(<span class="string">"depts"</span>,departments);</span><br><span class="line">       <span class="comment">//回到修改页面</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"emp/add"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//员工修改,需要提交员工id</span></span><br><span class="line">   <span class="meta">@PutMapping(<span class="meta-string">"/emp"</span>)</span></span><br><span class="line">   <span class="keyword">public</span> String updateEmp(Employee employee)&#123;</span><br><span class="line">       System.<span class="keyword">out</span>.println(<span class="string">"修改数据:"</span>+employee);</span><br><span class="line">       employeeDao.save(employee);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//员工删除</span></span><br><span class="line">   <span class="meta">@DeleteMapping(<span class="meta-string">"/emp/&#123;id&#125;"</span>)</span> <span class="comment">//@PathVariable("id") 获取路径变量</span></span><br><span class="line">   <span class="keyword">public</span> String deleteEmp(<span class="meta">@PathVariable(<span class="meta-string">"id"</span>)</span> Integer id)&#123;</span><br><span class="line">       employeeDao.delete(id);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"redirect:/emps"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">package com.zhao.democrud.config;</span><br><span class="line"></span><br><span class="line">import com.zhao.democrud.componennt.LoginHandlerInterceptor;</span><br><span class="line">import com.zhao.democrud.componennt.MyLocaleResolver;</span><br><span class="line">import org.springframework.context.<span class="keyword">annotation</span>.<span class="title">Bean</span>;</span><br><span class="line">import org.springframework.context.<span class="keyword">annotation</span>.<span class="title">Configuration</span>;</span><br><span class="line">import org.springframework.web.servlet.LocaleResolver;</span><br><span class="line">import org.springframework.web.servlet.config.<span class="keyword">annotation</span>.<span class="title">InterceptorRegistry</span>;</span><br><span class="line">import org.springframework.web.servlet.config.<span class="keyword">annotation</span>.<span class="title">ViewControllerRegistry</span>;</span><br><span class="line">import org.springframework.web.servlet.config.<span class="keyword">annotation</span>.<span class="title">WebMvcConfigurer</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/<span class="regexp">/使用WebMvcConfigurer扩展SpringMvc的功能</span></span><br><span class="line"><span class="regexp">@Configuration</span></span><br><span class="line"><span class="regexp">public class MyMvcConfig implements WebMvcConfigurer &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    @Override</span></span><br><span class="line"><span class="regexp">    public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/浏览器发送/zhao</span>请求 也来到success页面</span><br><span class="line">        registry.addViewController(<span class="string">"/zhao"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /<span class="regexp">/所有的WebMvcConfigurer组件都会起作用</span></span><br><span class="line"><span class="regexp">    @Bean /</span><span class="regexp">/把组件加入到容器中</span></span><br><span class="line"><span class="regexp">    public WebMvcConfigurer webMvcConfigurer()&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        WebMvcConfigurer config = new WebMvcConfigurer() &#123;</span></span><br><span class="line"><span class="regexp">            @Override</span></span><br><span class="line"><span class="regexp">            public void addViewControllers(ViewControllerRegistry registry) &#123;</span></span><br><span class="line"><span class="regexp">                registry.addViewController("/</span><span class="string">").setViewName("</span>login<span class="string">");</span></span><br><span class="line"><span class="string">                registry.addViewController("</span>/login.html<span class="string">").setViewName("</span>login<span class="string">");</span></span><br><span class="line"><span class="string">                registry.addViewController("</span>/main.html<span class="string">").setViewName("</span>dashboard<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            //注册拦截器</span></span><br><span class="line"><span class="string">            @Override</span></span><br><span class="line"><span class="string">            public void addInterceptors(InterceptorRegistry registry) &#123;</span></span><br><span class="line"><span class="string">                //静态资源；*.css , *.js</span></span><br><span class="line"><span class="string">                //SpringBoot已经做好了静态资源映射</span></span><br><span class="line"><span class="string">                registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns("</span>/**<span class="string">").</span></span><br><span class="line"><span class="string">                        excludePathPatterns("</span>/login.html<span class="string">","</span>/<span class="string">","</span>/user/login<span class="string">");</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        return config;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Bean</span></span><br><span class="line"><span class="string">    public LocaleResolver localeResolver()&#123;</span></span><br><span class="line"><span class="string">        return new MyLocaleResolver();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot微服务框架(二)--自动配置详解</title>
    <url>/2019/12/28/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-%E4%BA%8C-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="SpringBoot-配置文件"><a href="#SpringBoot-配置文件" class="headerlink" title="SpringBoot 配置文件"></a>SpringBoot 配置文件</h3><h4 id="Spring-Boot使用一个全局的配置文件"><a href="#Spring-Boot使用一个全局的配置文件" class="headerlink" title="Spring Boot使用一个全局的配置文件"></a>Spring Boot使用一个全局的配置文件</h4><pre><code>- application.properties
- application.yml</code></pre><ul>
<li>配置文件放在src/main/resources目录或者类路径/config下</li>
<li>.yml是YAML(YUML Ain`t Markup Language)语言的文件，以数据为中心，比json,xml等更适合做配置文件</li>
<li>注意：.yml文件，以数据为中心</li>
<li>全局配置文件的可以对一些默认的值进行修改<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4></li>
<li>配置文件的作用：修改SpringBoot自动配置的默认值；<br>SpringBoot在底层都给我们配置好；<h3 id="yml语法"><a href="#yml语法" class="headerlink" title=".yml语法"></a>.yml语法</h3><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4></li>
<li>键值对： K:(空格)V  空格必须有</li>
<li>已空格的缩进来控制层级关系；<ul>
<li>只要左对齐的一列数据，都是同一个级别的数据</li>
<li>属性和值大小写敏感<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">   <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">   <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>值的写法<br>  字面量：普通的值（数字，字符串，布尔）<br>  k：v   v直接来写即可<br>  字符串默认不用加单引号或者双引号<br>  注意：单引号会转移特殊字符</li>
<li>对象,map(属性和值)；<br>  对象还是k：v的方式<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">friends：</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></li>
<li>行内写法<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">friends:</span> ( <span class="string">name:</span> zhangsan,<span class="string">age:</span> <span class="number">20</span>)</span><br></pre></td></tr></table></figure></li>
<li>数组（list，set）:<br>用- 值表示数组中的一个元素<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">pets:</span><br><span class="line"><span class="bullet">  - </span>cat</span><br><span class="line"><span class="bullet">  - </span>dog</span><br><span class="line"><span class="bullet">  - </span>pig</span><br></pre></td></tr></table></figure></li>
<li>行内写法<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">pet<span class="variable">s:</span> [<span class="keyword">cat</span>,dog.pig]</span><br></pre></td></tr></table></figure>
<h3 id="pml属性配置文件"><a href="#pml属性配置文件" class="headerlink" title=".pml属性配置文件"></a>.pml属性配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/springboot-web</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">沐沐</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">brith:</span> <span class="number">2019</span><span class="string">/12/19</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">里斯</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">天天</span></span><br><span class="line">  <span class="attr">maps:</span> <span class="string">&#123;k1:</span> <span class="string">v1,k2:</span> <span class="number">12</span><span class="string">&#125;</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">西西</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">18</span></span><br></pre></td></tr></table></figure>
<h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo-test02<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>demo-test02<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--导入配置文件处理器，配置文件进行绑定--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment"> * @ConfigurationProperties 告诉SpringBoot将本类中所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @Component 这个注解表示被加上这个注解的类成为容器中的一个组件</span></span><br><span class="line"><span class="comment"> * 只有这个组件是容器的组件，才能让容器提供@ConfigurationProperties(prefix = "person")的功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 此处要导入依赖,属性配置文件会有提示</span></span><br><span class="line"><span class="comment"> * &lt;!--导入配置文件处理器，配置文件进行绑定--&gt;</span></span><br><span class="line"><span class="comment"> *		&lt;dependency&gt;</span></span><br><span class="line"><span class="comment"> *			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment"> *			&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment"> *			&lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line"><span class="comment"> *		&lt;/dependency&gt;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *@ConfigurationProperties(prefix = "person")默认从全局配置文件中获取值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"> @Component</span><br><span class="line"> @ConfigurationProperties(prefix = <span class="string">"person"</span>)</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;Int&gt; &#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date brith;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; <span class="built_in">list</span>;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;<span class="keyword">String</span>,Object&gt; maps;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", boss="</span> + boss +</span><br><span class="line">                <span class="string">", brith="</span> + brith +</span><br><span class="line">                <span class="string">", list="</span> + <span class="built_in">list</span> +</span><br><span class="line">                <span class="string">", maps="</span> + maps +</span><br><span class="line">                <span class="string">", dog="</span> + dog +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getBoss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBoss</span><span class="params">(Boolean boss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.boss = boss;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBrith</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> brith;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrith</span><span class="params">(Date brith)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brith = brith;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; getList() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Object&gt; <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">list</span> = <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;<span class="keyword">String</span>, Object&gt; getMaps() &#123;</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaps</span><span class="params">(Map&lt;<span class="keyword">String</span>, Object&gt; maps)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">String</span> name, Integer age, Boolean boss, Date brith, List&lt;Object&gt; <span class="built_in">list</span>, Map&lt;<span class="keyword">String</span>, Object&gt; maps, Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.boss = boss;</span><br><span class="line">        <span class="keyword">this</span>.brith = brith;</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">list</span> = <span class="built_in">list</span>;</span><br><span class="line">        <span class="keyword">this</span>.maps = maps;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Dog&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* SpringBoot启动类，启动Spring容器，启动内嵌tomcat</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest01Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	SpringApplication.run(DemoTest01Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入juint4 --&gt;</span></span><br><span class="line">@RunWith(SpringRunner.class)   //告诉他用spring驱动器运行</span><br><span class="line">@SpringBootTest</span><br><span class="line">class test &#123;</span><br><span class="line">    <span class="comment">&lt;!-- @Resource是J2EE的注解 @AutoWrited也可 自动注入 --&gt;</span></span><br><span class="line">@Resource</span><br><span class="line">private Person person;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">void contextLoads() &#123;</span><br><span class="line">	System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>自我评估：遇到报错，不要慌仔细阅读，看不懂英文百度。。。。<h3 id="properties文件配置"><a href="#properties文件配置" class="headerlink" title=".properties文件配置"></a>.properties文件配置</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置person的值</span></span><br><span class="line"><span class="attr">person.name</span>=米粒</span><br><span class="line"><span class="attr">person.age</span>=<span class="number">20</span></span><br><span class="line"><span class="attr">person.boss</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">person.brith</span>=<span class="number">2019</span>/<span class="number">12</span>/<span class="number">12</span></span><br><span class="line"><span class="attr">person.list</span>=a,bc,egf</span><br><span class="line"><span class="attr">person.maps.k1</span>=丽丽</span><br><span class="line"><span class="attr">person.maps.k2</span>=咪咪</span><br><span class="line"><span class="attr">person.dog.name</span>=小狗</span><br><span class="line"><span class="attr">person.dog.age</span>=<span class="number">12</span></span><br><span class="line"><span class="comment"># 注意会有乱码情况编码格式UTF-8</span></span><br></pre></td></tr></table></figure>
<h3 id="Value-“”-注解"><a href="#Value-“”-注解" class="headerlink" title="@Value(“”)注解"></a>@Value(“”)注解</h3><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* <span class="title">@value</span>(<span class="string">""</span>)注解</span><br><span class="line">* 相当于</span><br><span class="line">* &lt;bean class=<span class="string">"Person"</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">"name"</span> value=<span class="string">"字面量/$&#123;key&#125;从环境变量，配置文件中获取值/#&#123;SPEL&#125;"</span>&gt;&lt;/property&gt;</span><br><span class="line">* &lt;/bean&gt;</span><br><span class="line">* */</span><br><span class="line">//<span class="title">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String name<span class="comment">;</span></span><br><span class="line"><span class="comment">//@Value("#&#123;11*2&#125;")</span></span><br><span class="line"><span class="comment">private Integer age;</span></span><br><span class="line"><span class="comment">//@Value("true")</span></span><br><span class="line"><span class="comment">private Boolean boss;</span></span><br></pre></td></tr></table></figure>
<h3 id="Value获取数据与-ConfigurationProperties获取比较"><a href="#Value获取数据与-ConfigurationProperties获取比较" class="headerlink" title="@Value获取数据与@ConfigurationProperties获取比较"></a>@Value获取数据与@ConfigurationProperties获取比较</h3></li>
</ul>
<table>
<thead>
<tr>
<th>对比</th>
<th align="center">@ConfigurationProperties</th>
<th align="right">@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td align="center">批量注入配置文件中的属性</td>
<td align="right">单一指定</td>
</tr>
<tr>
<td>松散绑定</td>
<td align="center">支持lastName对应last-name</td>
<td align="right">不支持</td>
</tr>
<tr>
<td>SpEl</td>
<td align="center">不支持</td>
<td align="right">支持</td>
</tr>
<tr>
<td>JSPR303数据效验</td>
<td align="center">支持如@Email，@NotNull</td>
<td align="right">不支持</td>
</tr>
<tr>
<td>复杂类型数据(map)</td>
<td align="center">支持</td>
<td align="right">不支持(基本数据类型)</td>
</tr>
</tbody></table>
<ul>
<li>注意：在业务逻辑中获取配置文件中某项值，使用@Value<br>JavaBean和配置文件映射使用@ConfigurationProperties</li>
</ul>
<h3 id="PropertySource-只能用于perperties文件-和-ImportResource读取外部配置文件"><a href="#PropertySource-只能用于perperties文件-和-ImportResource读取外部配置文件" class="headerlink" title="@PropertySource(只能用于perperties文件)和@ImportResource读取外部配置文件"></a>@PropertySource(只能用于perperties文件)和@ImportResource读取外部配置文件</h3><ul>
<li><p>@PropertySource 加载指定路径下的文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">PropertySource</span>(<span class="keyword">value</span> = &#123;"<span class="selector-tag">classpath</span><span class="selector-pseudo">:person.properties"</span>&#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>@ImportResource: 导入Spring的配置文件，让Spring的配置文件生效</p>
</li>
<li><p>Spring 配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.example.service.helloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>注意：在启动类上加入@ImportResource(locations = {“classpath:beans.xml”})注解</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@ImportResource</span>(locations = &#123;<span class="string">"classpath:beans.xml"</span>&#125;)</span><br><span class="line"><span class="variable">@SpringBootApplication</span></span><br><span class="line">public class DemoTest02Application &#123;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">void</span> <span class="selector-tag">main</span>(String[] args) &#123;</span><br><span class="line">	<span class="selector-tag">SpringApplication</span><span class="selector-class">.run</span>(DemoTest02Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot推荐该容器中添加组建的方式：全注解"><a href="#SpringBoot推荐该容器中添加组建的方式：全注解" class="headerlink" title="SpringBoot推荐该容器中添加组建的方式：全注解"></a>SpringBoot推荐该容器中添加组建的方式：全注解</h3></li>
<li><p>配置类 config(使用@Bean给容器添加组件)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//配置类</span></span><br><span class="line"> <span class="meta">@Configuration</span>   <span class="comment">//指明当前类是一个配置类，就是来代替之前的Spring配置文件</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppconfig</span> </span>&#123;</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Bean</span></span><br><span class="line"><span class="comment"> * 相当于</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;/bean&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中，容器中默认组件的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> helloService <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> helloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置文件占位符"><a href="#配置文件占位符" class="headerlink" title="配置文件占位符"></a>配置文件占位符</h3></li>
<li><p>RandomValuepropertySource:配置文件中可以使用随机数<br>${random.value},${random.int},${random.long}<br>${random.int(10)},${random.int[1024,65536]}</p>
</li>
<li><p>属性配置占位符</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">app.name</span>=MyApp</span><br><span class="line"><span class="attr">app.description</span>=<span class="variable">$&#123;app.name&#125;</span>_lili</span><br></pre></td></tr></table></figure></li>
<li><p>可以在配置文件中应用之前那个配置过的属性(优先级前面配置过的这里都能使用)。<br>${app.name:默认值}来指定找不到属性时的默认值</p>
</li>
</ul>
<h3 id="Profile多文件配置（默认使用application-properties）"><a href="#Profile多文件配置（默认使用application-properties）" class="headerlink" title="Profile多文件配置（默认使用application.properties）"></a>Profile多文件配置（默认使用application.properties）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 激活使用那个配置文件 --&gt;</span></span><br><span class="line">spring.profiles.active=test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如以下文件 --&gt;</span></span><br><span class="line">application-dev.properties //开发配置</span><br><span class="line">application-test.properties //测试配置</span><br><span class="line">application-online.properties //上线配置</span><br></pre></td></tr></table></figure>
<h3 id="yml多文档块模式"><a href="#yml多文档块模式" class="headerlink" title=".yml多文档块模式"></a>.yml多文档块模式</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">   <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">profiles:</span> </span><br><span class="line">   <span class="attr">active:</span> <span class="string">dev</span>   <span class="comment">#激活</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">   <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"> <span class="attr">server:</span></span><br><span class="line">   <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">   <span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure>
<h3 id="命令行激活"><a href="#命令行激活" class="headerlink" title="命令行激活"></a>命令行激活</h3><ul>
<li>Run–》Edit–&gt;program arguments: –spring.profiles.active=dev<br>  打包 执行 Java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev;</li>
<li>虚拟机参数：<pre><code>-Dspring.properties.active=dev4m</code></pre></li>
</ul>
<h3 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h3><ul>
<li>springBoot启动会扫描已下位置的application.properties/.yml文件作为Springboot的默认文件</li>
</ul>
<ul>
<li>file: ./config/</li>
<li>file: ./</li>
<li>classpath:/config/</li>
<li>classpath：/</li>
</ul>
<ul>
<li>注意：优先级由高到低，高优先级配置会覆盖低优先级的配置</li>
<li>SpringBoot会从这四个位置全部加载主配置文件：互补配置<h5 id="我们还可以通过spring-config-location-G-application-properties来改变默认的配置文件位置（外部部配置加载）"><a href="#我们还可以通过spring-config-location-G-application-properties来改变默认的配置文件位置（外部部配置加载）" class="headerlink" title="我们还可以通过spring.config.location=G:/application.properties来改变默认的配置文件位置（外部部配置加载）"></a>我们还可以通过spring.config.location=G:/application.properties来改变默认的配置文件位置（外部部配置加载）</h5></li>
<li>项目打包后，我们可使用命令行参数的模式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用的形式互补配置；<h4 id="SpringBoot自动配置原理"><a href="#SpringBoot自动配置原理" class="headerlink" title="SpringBoot自动配置原理"></a>SpringBoot自动配置原理</h4></li>
<li>配置文件能写什么？怎么写？自动配原理？<h5 id="自动配置原理："><a href="#自动配置原理：" class="headerlink" title="自动配置原理："></a>自动配置原理：</h5></li>
</ul>
<ol>
<li>Spring启动的时候加载主配置类，开启自动配置功能@EnableAutoConfiguration</li>
<li>@EnableAutoConfiguration的作用：<ul>
<li>利用EnableAutoConfigurationImportSelector该容器中导入一些组件？</li>
<li>可以查看selectImports()方法的内容：</li>
<li>List<String> configurations = getCandidateConfigurations(annotationMetadata,attributes);<br>获取候选的配置<ul>
<li>SpringFactoriesLoader.loadFactorynames()扫描所有jar包下类路径的META-INF/Spring.factories</li>
<li>把扫描到的文件内容包装成properties对象</li>
<li>从properties文件中获取到EnableAutoConfiguration.class类(类名)对应的值然后把它们添加到容器中；</li>
<li>将类路径下META-INF/Spring.factories里面的配置的所用EnableAutoConfiguration的值加入到容器中；</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>META-INF/Spring.factories配置文件(位置：spring-boot-autocongfigure)      <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">org.springframework.context.ApplicationListener=\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.BackgroundPreinitializer</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"># </span>Auto Configuration Import Listeners</span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.AutoConfigurationImportListener=\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.condition.ConditionEvaluationReportAutoConfigurationImportListener</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"># </span>Auto Configuration Import Filters</span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.AutoConfigurationImportFilter=\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.condition.OnBeanCondition,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.condition.OnClassCondition,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.condition.OnWebApplicationCondition</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"># </span>Auto Configure</span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.cloud.CloudServiceConnectorsAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveRestClientAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.elasticsearch.rest.RestClientAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.influx.InfluxDbAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration,\</span></span><br><span class="line"><span class="keyword">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span></span><br></pre></td></tr></table></figure></li>
<li>注意：上面每一个这样的 xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们做自动配置；</li>
</ul>
<ol start="3">
<li>每一个自动配置类进行自动配置功能：<ul>
<li>已HttpEncodingAutoConfiguration(Http编码自动配置<br>)为例解释自动配置原理；<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">   proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span>   <span class="comment">//表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span>  <span class="comment">//启用指定类(&#123;HttpProperties.class&#125;)configurationProperties功能,</span></span><br><span class="line">将配置文件这种对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到IOC容器中</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">   type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span>      <span class="comment">//Spring底层 @Conditional注解，根据不同的条件，如果满足指定条件，整个配置类里面的配置就会立即生效； 判断当前应用是否Web应用，如果是当前配置内生效</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span>  <span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter：SpringMVC中经行乱码解决的过滤器</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">   prefix = <span class="meta-string">"spring.http.encoding"</span>,</span></span><br><span class="line"><span class="meta">   value = &#123;<span class="meta-string">"enabled"</span>&#125;,</span></span><br><span class="line"><span class="meta">   matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span>   <span class="comment">//判断配置文件中是否存在某个配置 spring.http.encoding.enabled; 如果不存在判断也是成立的</span></span><br><span class="line"><span class="comment">//相当于，即使我们配置文件中不配置spring.http.encoding.enabled=true;，也是默认生效的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//它已经和SpringBoot配置文件映射了</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//只有一个有参构造器的情况，参数的值就会从容器中拿</span></span><br><span class="line">   <span class="keyword">public</span> HttpEncodingAutoConfiguration(HttpProperties properties) &#123;</span><br><span class="line">       <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Bean</span>  <span class="comment">//给容器中添加一个组件，这个组件中的某些值要从properties文件中获取</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">   <span class="keyword">public</span> CharacterEncodingFilter characterEncodingFilter() &#123;</span><br><span class="line">       CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();</span><br><span class="line">       filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">       filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));</span><br><span class="line">       filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));</span><br><span class="line">       <span class="keyword">return</span> filter;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li>注意：根据当前文件中不同条件判断，决定这个配置是否生效？<br>  一旦这个配置内生效：这个配置类就会该容器中添加各种组件：这些组件的属性是从对应的properties类中获取的，这些组件中的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和properties文件绑定的</li>
<li>配置properties<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我们能配置的属性都类源于这个功能的properties类</span></span><br><span class="line"><span class="attr">spring.http.encoding.enabled</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">spring.http.encoding.charset</span>= utf-<span class="number">8</span></span><br><span class="line"><span class="attr">spring.http.encoding.force</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot的精髓："><a href="#SpringBoot的精髓：" class="headerlink" title="SpringBoot的精髓："></a>SpringBoot的精髓：</h3></li>
</ul>
<ol>
<li>SpringBoot启动会加载大量的自动配置类</li>
<li>我们要看到我们需要的功能有没有SpringBoot默认配置写好的自动配置类，</li>
<li>这个自动配置类中到底有哪些组件;(如果我们配置的组件有，我们就不需要配置)</li>
<li>给容器中自动配置添加组件的时候，会从properties类中获取某些属性，我们就可以在配置文件中指定这些属性的的值；</li>
</ol>
<ul>
<li>xxxAutoConfiguration:自动配置类；<br>给容器中添加组件<br>xxxProperties:封装配置文件中相关属性；<h4 id="IDEA快捷键，快捷搜索ctrl-N（如输入”-AutoConfiguration”）"><a href="#IDEA快捷键，快捷搜索ctrl-N（如输入”-AutoConfiguration”）" class="headerlink" title="IDEA快捷键，快捷搜索ctrl+N（如输入”*AutoConfiguration”）"></a>IDEA快捷键，快捷搜索ctrl+N（如输入”*AutoConfiguration”）</h4></li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 微服务框架(一)</title>
    <url>/2019/12/17/Spring-Boot-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="SpringBoot框架-Maven包管理工具"><a href="#SpringBoot框架-Maven包管理工具" class="headerlink" title="SpringBoot框架+Maven包管理工具"></a>SpringBoot框架+Maven包管理工具</h3><h3 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h3><h3 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zhao<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--父项目--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--这个插件，可以将应用打包成一个可执行的jar包--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--&lt;build&gt;</span></span><br><span class="line"><span class="comment">       &lt;plugins&gt;</span></span><br><span class="line"><span class="comment">           &lt;plugin&gt;</span></span><br><span class="line"><span class="comment">               &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">               &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">               &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">                   &lt;source&gt;1.8&lt;/source&gt;</span></span><br><span class="line"><span class="comment">                   &lt;target&gt;1.8&lt;/target&gt;</span></span><br><span class="line"><span class="comment">               &lt;/configuration&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           &lt;/plugin&gt;</span></span><br><span class="line"><span class="comment">       &lt;/plugins&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   &lt;/build&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意添加插件时加入以下代码，否则会报错 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="SpringBoot启动类"><a href="#SpringBoot启动类" class="headerlink" title="SpringBoot启动类"></a>SpringBoot启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao;</span><br><span class="line"><span class="keyword">import</span> com.sun.deploy.uitoolkit.impl.fx.AppletStageManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span>      org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @SpringBootApplication</span></span><br><span class="line"><span class="comment">* 标注主程序类，说明SpringBoot 应用</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWordmainApplication</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//spring应用启动</span></span><br><span class="line">       SpringApplication.run(HelloWordmainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">package com.zhao.controller;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.<span class="keyword">annotation</span>.<span class="title">RequestMapping</span>;</span><br><span class="line">import org.springframework.web.bind.<span class="keyword">annotation</span>.<span class="title">ResponseBody</span>;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   @ResponseBody</span><br><span class="line">   @RequestMapping(<span class="string">"/hello"</span>)</span><br><span class="line">   public String hello()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"helloWord"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>运行项目 浏览器输入“localhost：8080/hello”即可<h3 id="项目打jar包，"><a href="#项目打jar包，" class="headerlink" title="项目打jar包，"></a>项目打jar包，</h3></li>
<li>在Maven项目管理中 Lifecycle–》单击package在项目中其打包到target文件中如：springboot01-1.0-SNAPSHOT.jar</li>
<li>cmd进入管理员命令行执行:java -jar springboot01-1.0-SNAPSHOT.jar 启动项目</li>
<li>在浏览器端查看localhost：8080/hello</li>
</ul>
<h3 id="pom-xml详解"><a href="#pom-xml详解" class="headerlink" title="pom.xml详解"></a>pom.xml详解</h3><ul>
<li>父项目<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--父项目--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- tadefu他的父项目 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../spring-boot-dependencies<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 他来真正管理Spring Boot应用里的的所有的依赖版本； --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Boot Dependencies<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- Spring boot 的版本仲裁中心（以及我们导入的默认的是不需要写版本）；没有在Dependencies里面管理的自然需要声明版本号 --&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>导入的依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>spring-boot-starter-web ：springBoot场景启动器：帮我们导入了web模块正常运行所依赖的组件</li>
</ul>
<h3 id="主程序类详解"><a href="#主程序类详解" class="headerlink" title="主程序类详解"></a>主程序类详解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @SpringBootApplication</span></span><br><span class="line"><span class="comment"> * 标注主程序类，说明SpringBoot 应用</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"> <span class="meta">@SpringBootApplication</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWordmainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//spring应用启动</span></span><br><span class="line">        SpringApplication.run(HelloWordmainApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> &lt;!-- run方法必须加载<span class="meta">@SpringBootController</span>标注的类 --&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>@SpringBootApplication：springBoot标注在某个类上说明这个类是SpringBoot的主配置类，springboot就应该运行这个类的main方法来启动SpringBoot应用；</li>
<li>组合注解<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@Documented</span></span><br><span class="line"><span class="variable">@Inherited</span></span><br><span class="line"><span class="variable">@SpringBootConfiguration</span></span><br><span class="line"><span class="variable">@EnableAutoConfiguration</span></span><br><span class="line"><span class="variable">@ComponentScan</span>(</span><br><span class="line">   excludeFilters = &#123;<span class="variable">@Filter</span>(</span><br><span class="line">   type = FilterType.CUSTOM,</span><br><span class="line">   classes = &#123;TypeExcludeFilter.class&#125;</span><br><span class="line">), <span class="variable">@Filter</span>(</span><br><span class="line">   type = FilterType.CUSTOM,</span><br><span class="line">   classes = &#123;AutoConfigurationExcludeFilter.class&#125;</span><br><span class="line">)&#125;</span><br><span class="line">)</span><br><span class="line">public <span class="variable">@interface</span> SpringBootApplication &#123;</span><br></pre></td></tr></table></figure></li>
<li>@SpringBootConfiguration：Spring Boot配置类<br>标注在某个类上，表示这是一个SpringBoot的配置类；</li>
<li>@EnableAutoConfiguration：开启自动配置功能<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">   String ENABLED_OVERRIDE_PROPERTY = <span class="string">"spring.boot.enableautoconfiguration"</span>;</span><br><span class="line"></span><br><span class="line">   Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>@AutoConfigurationPackage:自动配包<br>@Import({Registrar.class})<br>Spring底层注解@import，给容器中导入一个组件；导入的组件由Registrar.class；<br>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；<br>@Import({AutoConfigurationImportSelector.class})<br>该容器中导入组件<br>AutoConfigurationImportSelector：导入那些组件的选择器；<br>将所有需要导入的组件已全类名的方式返回；这些组件就会被添加到容器中；<br>会该容器中导入非常多的自动配置类（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件；并配置好这些组件；</li>
<li>J2EE的整体整合解决方案和自动配置都在   <pre><code>E:\Maven\repository\org\springframework\boot\spring-boot-autoconfigure\2.2.2.RELEASE\spring-boot-autoconfigure-2.2.2.RELEASE.jar</code></pre><h3 id="使用Spring-Initializer快速创建SpringBoot项目"><a href="#使用Spring-Initializer快速创建SpringBoot项目" class="headerlink" title="使用Spring Initializer快速创建SpringBoot项目"></a>使用Spring Initializer快速创建SpringBoot项目</h3></li>
<li>IDEA都支持使用Spring的项目创建向导快速创建一个项目；</li>
<li>File –》New project–》Spring Initializr<br>![项目结构](images/批注 2019-12-16 225236.png,”项目结构”)<ul>
<li>默认生成的Spring Boot项目<ul>
<li>主程序生成好，我们只需要我们自己的逻辑</li>
<li>resources文件夹中的目录：<ul>
<li>static：保存所有的静态资源：js css html</li>
<li>templates：保存所有的模板页面：（SpringBoot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker，thymeleaf）</li>
<li>application.properties:Spring Boot应用的配置为文件；（如配置端口 server.port=8081）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis框架(一)</title>
    <url>/2019/12/16/mybatis%E6%A1%86%E6%9E%B6-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="官网地址：https-mybatis-org-mybatis-3-zh-index-html"><a href="#官网地址：https-mybatis-org-mybatis-3-zh-index-html" class="headerlink" title="官网地址：https://mybatis.org/mybatis-3/zh/index.html"></a>官网地址：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></h3><h3 id="mybatis结构图"><a href="#mybatis结构图" class="headerlink" title="mybatis结构图"></a>mybatis结构图</h3><p><img src="https://static.oschina.net/uploads/space/2017/1008/165811_hvXz_1400519.png" alt="mybatis"></p>
<h3 id="配置文件介绍…"><a href="#配置文件介绍…" class="headerlink" title="配置文件介绍…."></a>配置文件介绍….</h3><ol>
<li>mybatis配置<br>SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。<br>mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。<br>SqlMapConfig.xml是mybatis的核心文件。mybatis将dao层与sql语句分离开来，虽然写的时候分离开来了，但是执行的时候还是要依靠sql语句，所以我们的sql语句写在Mapper.xml中。我们在加载核心的时候，会加载他下面的Mapper.xml，所以sql语句便会加载进去了。我们只需要在SqlMapConfig.xml中引入Mapper.xml就可以了，所以最后只需要加载SqlMapConfig.xml这一个核心配置文件。</li>
</ol>
<ul>
<li>实例 SqlMapConfig.xml配置文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">       PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.direct.cleanking.backstage.entity"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/direct/cleanking/backstage/dao/AdminMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/direct/cleanking/backstage/dao/TypeMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/direct/cleanking/backstage/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>实例 mapper.xml映射文件<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper</span></span></span><br><span class="line"><span class="xml"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="xml"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.direct.cleanking.backstage.dao.AdminDao"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.direct.cleanking.backstage.entity.Admin"</span> <span class="attr">id</span>=<span class="string">"adminMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"nickname"</span> <span class="attr">property</span>=<span class="string">"nickname"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"description"</span> <span class="attr">property</span>=<span class="string">"description"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"head_icon"</span> <span class="attr">property</span>=<span class="string">"headIcon"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"login"</span> <span class="attr">resultMap</span>=<span class="string">"adminMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select  id,username,nickname,description,head_icon  from admin </span></span><br><span class="line"><span class="xml">	where username = #</span><span class="template-variable">&#123;username&#125;</span></span><br><span class="line"><span class="xml">	and password =  #</span><span class="template-variable">&#123;password&#125;</span><span class="xml">   </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"adminMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select  *  from  admin </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username!=null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			username like #</span><span class="template-variable">&#123;username&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"nickname!=null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			and nickname like #</span><span class="template-variable">&#123;nickname&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description!=null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			and description like #</span><span class="template-variable">&#123;description&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">	limit #</span><span class="template-variable">&#123;pageNum&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;pageSize&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"count"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select count(id) from admin</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">resultMap</span>=<span class="string">"adminMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	select * from  admin where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.direct.cleanking.backstage.entity.Admin"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	update admin  </span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">set</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			username = #</span><span class="template-variable">&#123;username&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"nickname != null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			,nickname = #</span><span class="template-variable">&#123;nickname&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			,password = #</span><span class="template-variable">&#123;password&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"headIcon != null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			,head_icon = #</span><span class="template-variable">&#123;headIcon&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"description != null"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			,description = #</span><span class="template-variable">&#123;description&#125;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">		where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml">			</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">set</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"admin"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	insert into `admin`(`username`,nickname,password,description,head_icon) </span></span><br><span class="line"><span class="xml">	value(#</span><span class="template-variable">&#123;username&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;nickname&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;password&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;description&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;headIcon&#125;</span><span class="xml">);</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delOne"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	delete from admin where id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li><p>通过mybatis环境等配置信息构造SqlSessionFactory即会话工厂。工厂能帮我们去加载核心配置文件。加载了核心配置文件后就创建session,通过session可以对数据库进行操作。</p>
</li>
<li><p>由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。</p>
</li>
<li><p>mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。Executor是执行者，我们不需要管，因为mybatis已经为我们封装好了。mybatis直接执行sql语句。</p>
</li>
<li><p>Mapped Statement也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。</p>
</li>
<li><p>Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对preparedStatement设置参数。</p>
</li>
<li><p>Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql后将输出结果映射至java对象中，输出结果映射过程相当于jdbc编程中对结果的解析处理过程。</p>
</li>
<li><p>Mapped Statement是输入与输出中间过程中产生的一些对象，通过这些对象去访问数据库。</p>
<h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p><img src="https://images2018.cnblogs.com/blog/1268854/201803/1268854-20180301135834041-259560906.png" alt=""></p>
</li>
</ol>
<ul>
<li>数据处理层四大对象：<ol>
<li>SQL执行： executor、</li>
<li>参数映射：parameterHandler、</li>
<li>结果处理和映射：ResultSetHandler /      StatementHandler</li>
<li>SQL解析：SqlSource<br><img src="https://img-blog.csdn.net/20180722095805935?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hMTU3MzI2MjUyNjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></li>
</ol>
</li>
</ul>
<h3 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h3><h4 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h4><ul>
<li>MyBatis的核心包和依赖包<br>mybatis-3.2.7.jar(核心包)<br>asm-3.3.1.jar(依赖包)<br>cglib-2.2.2.jar(依赖包)<br>commons-logging-1.1.1.jar(依赖包)<br>javassist-3.17.1-GA.jar(依赖包)<br>log4j-1.2.17.jar(依赖包)<br>log4j-api-2.0-rc1.jar(依赖包)<br>log4j-core-2.0-rc1.jar(依赖包)<br>slf4j-api-1.7.5.jar(依赖包)<br>slf4j-log4j12-1.7.5.jar(依赖包)</li>
<li>MyBatis和Spring的整合包<br>mybatis-spring-1.2.2.jar<h3 id="实例-增删改查"><a href="#实例-增删改查" class="headerlink" title="实例 增删改查"></a>实例 增删改查</h3></li>
<li>mybatis全局配置文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta"> PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 环境列表，并指定环境 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 定义环境，并指定名称  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 指定事物处理管理 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 设置数据源参数  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><span class="comment">&lt;!--设置驱动管理器  --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/mybatis"</span>/&gt;</span><span class="comment">&lt;!--设置数据库地址  --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span><span class="comment">&lt;!--设置数据库账号--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span><span class="comment">&lt;!--设置数据库密码  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">&lt;!-- 映射文件列表  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 引入映射文件  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/direct/mybatis/entity/ClassesMapper.xml"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/direct/mybatis/entity/StudentMapper.xml"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>实体类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.direct.mybatis.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classes</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> className;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> desc;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Classes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Classes</span><span class="params">(Integer id, <span class="keyword">String</span> className, <span class="keyword">String</span> desc)</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">	<span class="keyword">this</span>.className = className;</span><br><span class="line">	<span class="keyword">this</span>.desc = desc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> className;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassName</span><span class="params">(<span class="keyword">String</span> className)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.className = className;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> desc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(<span class="keyword">String</span> desc)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.desc = desc;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"Classes [id="</span> + id + <span class="string">", className="</span> + className + <span class="string">", desc="</span> + desc + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>映射文件<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper</span></span></span><br><span class="line"><span class="xml"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="xml"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- namespace 名称空间 ,名称空间不能重复，代理模式名称名称必须设置标准,和对应的dao类的全限名称相同--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.direct.mybatis.dao.ClassesDao"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"com.direct.mybatis.entity.Classes"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 select c_id id,c_name className,c_desc `desc` from Classes; </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- select标签定义的是查询语句  --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- select标签中的属性，parameterType：指定传入的参数类型 </span></span></span><br><span class="line"><span class="xml"> 					    resultType:指定返回值的类型</span></span><br><span class="line"><span class="xml"> 		sql语句中，指定参数，使用 #</span><span class="template-variable">&#123;任意的字符&#125;</span><span class="xml">			    </span></span><br><span class="line"><span class="xml">  --&gt;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>  <span class="attr">resultType</span>=<span class="string">"com.direct.mybatis.entity.Classes"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	 select c_id id,c_name className,c_desc `desc` from Classes where c_id=#</span><span class="template-variable">&#123;qq&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper</span></span></span><br><span class="line"><span class="xml"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="xml"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- namespace 名称空间 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- select标签定义的是查询语句  --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- select标签中的属性，parameterType：指定传入的参数类型 </span></span></span><br><span class="line"><span class="xml"> 					    resultType:指定返回值的类型</span></span><br><span class="line"><span class="xml"> 		sql语句中，指定参数，使用 #</span><span class="template-variable">&#123;任意的字符&#125;</span><span class="xml">			    </span></span><br><span class="line"><span class="xml">  --&gt;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>  <span class="attr">resultType</span>=<span class="string">""</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">//更新的</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE mapper</span></span></span><br><span class="line"><span class="xml"> PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="xml"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- namespace 名称空间 ,名称空间不能重复，代理模式名称名称必须设置标准,和对应的dao类的全限定名称相同--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.direct.mybatis.dao.ClassesDao"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- #</span></span><span class="template-variable">&#123;id&#125;</span><span class="xml"><span class="comment">指定参数，使用#</span></span><span class="template-variable">&#123;任意字符&#125;</span><span class="xml"><span class="comment">   --&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="comment">&lt;!-- 实体类和表名字段要对应</span></span></span><br><span class="line"><span class="xml">若不对应解决方法：</span></span><br><span class="line"><span class="xml">	1.sql语句加别名   select c_id id。。。。。</span></span><br><span class="line"><span class="xml"> 	2.如下添加<span class="tag">&lt;<span class="name">resultMap</span>&gt;</span>标签</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 对象属性和结果集的列名映射  --&gt;</span>	</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"classesMap"</span> <span class="attr">type</span>=<span class="string">"com.direct.mybatis.entity.Classes"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"className"</span> <span class="attr">column</span>=<span class="string">"c_name"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"desc"</span> <span class="attr">column</span>=<span class="string">"c_desc"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!--  条件查询 --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"classesMap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 select * from Classes </span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 条件标签，根据条件拼sql  --&gt;</span></span></span><br><span class="line"><span class="xml">	 <span class="tag">&lt;<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 <span class="comment">&lt;!-- if判断标签  --&gt;</span></span></span><br><span class="line"><span class="xml">	 	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"cName != null "</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 		c_name like #</span><span class="template-variable">&#123;cName&#125;</span></span><br><span class="line"><span class="xml">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		 <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"desc != null "</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 		and c_desc like #</span><span class="template-variable">&#123;desc&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">	 	<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span></span><br><span class="line"><span class="xml">	 limit #</span><span class="template-variable">&#123;pageNum&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;pageSize&#125;</span><span class="xml">; </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- select标签定义的是查询语句  --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- select标签中的属性，parameterType：指定传入的参数类型 </span></span></span><br><span class="line"><span class="xml"> 					    resultType:指定返回值的类型</span></span><br><span class="line"><span class="xml"> 		sql语句中，指定参数，使用 #</span><span class="template-variable">&#123;任意的字符&#125;</span><span class="xml">			    </span></span><br><span class="line"><span class="xml">  --&gt;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>  <span class="attr">resultType</span>=<span class="string">"com.direct.mybatis.entity.Classes"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	 select c_id id,c_name className,c_desc `desc` from Classes where c_id=#</span><span class="template-variable">&#123;qq&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- delete标签定义的是删除语句  --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteOneById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> &gt;</span></span></span><br><span class="line"><span class="xml"> 	 delete from classes where c_id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addOne"</span> <span class="attr">parameterType</span>=<span class="string">"com.direct.mybatis.entity.Classes"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	insert into classes(c_name,c_desc) value(#</span><span class="template-variable">&#123;className&#125;</span><span class="xml">,#</span><span class="template-variable">&#123;desc&#125;</span><span class="xml">);</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!-- parameterType:设置需要传入的对象的类型  --&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateOne"</span> <span class="attr">parameterType</span>=<span class="string">"com.direct.mybatis.entity.Classes"</span>&gt;</span></span></span><br><span class="line"><span class="xml"> 	update classes set c_name=#</span><span class="template-variable">&#123;className&#125;</span><span class="xml">,c_desc=#</span><span class="template-variable">&#123;desc&#125;</span><span class="xml"> where c_id=#</span><span class="template-variable">&#123;id&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span></span><br><span class="line"><span class="xml"> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>数据持久层Dao<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.direct.mybatis.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.direct.mybatis.entity.Classes;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Connection;</span><br><span class="line">   <span class="comment">//	注意：增删改需要提交事务否则回滚事务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassesDao</span> &#123;</span></span><br><span class="line"><span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">	<span class="comment">//获取配置文件输入流</span></span><br><span class="line">	InputStream inputStream=null;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		inputStream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//创建会话工厂构造者</span></span><br><span class="line">	SqlSessionFactoryBuilder sqlSessionFactoryBuilder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">	<span class="comment">//通过工厂会话构造者根据配置文件构造会话工厂</span></span><br><span class="line">	  sqlSessionFactory =  sqlSessionFactoryBuilder.build(inputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//条件查询</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Classes&gt; findAll(Map <span class="built_in">map</span>)&#123;</span><br><span class="line">	List&lt;Classes&gt; cList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//通过会话工厂获取会话</span></span><br><span class="line">	SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">	<span class="comment">//查询数据,根据sql语句的id值指定调用的sql语句</span></span><br><span class="line">	cList = sqlSession.selectList(<span class="string">"findAll"</span>,<span class="built_in">map</span>);</span><br><span class="line">	<span class="comment">//释放资源,关闭会话</span></span><br><span class="line">	sqlSession.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> cList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据id查询班级</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Classes <span class="title">selectOneById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//通过会话工厂获取会话</span></span><br><span class="line">	SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">	<span class="comment">//查询数据,根据sql语句的id值指定调用的sql语句,并传入指定的参数</span></span><br><span class="line">	Classes classes = sqlSession.selectOne(<span class="string">"selectOneById"</span>, id);</span><br><span class="line">	<span class="comment">//释放资源,关闭会话</span></span><br><span class="line">	sqlSession.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> classes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据id删除班级</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delOneById</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">	<span class="comment">//获取会话</span></span><br><span class="line">	SqlSession sqlSession =  sqlSessionFactory.openSession();</span><br><span class="line">	<span class="comment">//执行删除</span></span><br><span class="line">	<span class="keyword">int</span> num =  sqlSession.<span class="keyword">delete</span>(<span class="string">"deleteOneById"</span>,id);</span><br><span class="line">	<span class="comment">//事物提交,所有的数据更新操作都需要提交事物</span></span><br><span class="line">	sqlSession.commit();</span><br><span class="line">	<span class="comment">//关闭回话</span></span><br><span class="line">	sqlSession.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加班级</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addOne</span><span class="params">(Classes classes)</span></span>&#123;</span><br><span class="line">	<span class="comment">//获取会话</span></span><br><span class="line">	SqlSession sqlSession =  sqlSessionFactory.openSession();</span><br><span class="line">	<span class="comment">//执行删除</span></span><br><span class="line">	<span class="keyword">int</span> num =  sqlSession.<span class="keyword">delete</span>(<span class="string">"addOne"</span>,classes);</span><br><span class="line">	<span class="comment">//事物提交,所有的数据更新操作都需要提交事物</span></span><br><span class="line">	sqlSession.commit();</span><br><span class="line">	<span class="comment">//关闭回话</span></span><br><span class="line">	sqlSession.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改班级</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateOne</span><span class="params">(Classes classes)</span></span>&#123;</span><br><span class="line">	<span class="comment">//获取会话</span></span><br><span class="line">	SqlSession sqlSession =  sqlSessionFactory.openSession();</span><br><span class="line">	<span class="comment">//执行删除</span></span><br><span class="line">	<span class="keyword">int</span> num =  sqlSession.<span class="keyword">delete</span>(<span class="string">"updateOne"</span>,classes);</span><br><span class="line">	<span class="comment">//事物提交,所有的数据更新操作都需要提交事物</span></span><br><span class="line">	sqlSession.commit();</span><br><span class="line">	<span class="comment">//关闭回话</span></span><br><span class="line">	sqlSession.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.direct.mybatis.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.direct.mybatis.dao.ClassesDao;</span><br><span class="line"><span class="keyword">import</span> com.direct.mybatis.entity.Classes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisDaoTest</span> &#123;</span></span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	ClassesDao classDao = <span class="keyword">new</span> ClassesDao();</span><br><span class="line">	<span class="comment">//参数集合Map,设置模糊查询条件</span></span><br><span class="line">	Map&lt;<span class="keyword">String</span>, Object&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"desc"</span>, <span class="string">"%哈%"</span>);</span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"pageNum"</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"pageSize"</span>, <span class="number">2</span>);</span><br><span class="line">	</span><br><span class="line">	List&lt;Classes&gt; cList = classDao.findAll(<span class="built_in">map</span>);</span><br><span class="line">	</span><br><span class="line">	System.out.<span class="built_in">println</span>(cList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectOneTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	ClassesDao classDao = <span class="keyword">new</span> ClassesDao();</span><br><span class="line">	</span><br><span class="line">	Classes classes = classDao.selectOneById(<span class="number">4</span>);</span><br><span class="line">	</span><br><span class="line">	System.out.<span class="built_in">println</span>(classes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delOneTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	ClassesDao classDao = <span class="keyword">new</span> ClassesDao();</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> num = classDao.delOneById(<span class="number">5</span>);</span><br><span class="line">	</span><br><span class="line">	System.out.<span class="built_in">println</span>(<span class="string">"删除了"</span>+num+<span class="string">"条数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOneTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	ClassesDao classDao = <span class="keyword">new</span> ClassesDao();</span><br><span class="line">	</span><br><span class="line">	Classes classes = <span class="keyword">new</span> Classes(<span class="string">"a1802"</span>,null);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> num = classDao.addOne(classes);</span><br><span class="line">	</span><br><span class="line">	System.out.<span class="built_in">println</span>(<span class="string">"添加了"</span>+num+<span class="string">"条数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateOneTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	ClassesDao classDao = <span class="keyword">new</span> ClassesDao();</span><br><span class="line">	</span><br><span class="line">	Classes classes = <span class="keyword">new</span> Classes(<span class="number">9</span>,<span class="string">"a1802"</span>,<span class="string">"哈哈哈"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> num = classDao.updateOne(classes);</span><br><span class="line">	</span><br><span class="line">	System.out.<span class="built_in">println</span>(<span class="string">"修改了"</span>+num+<span class="string">"条数据"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
————————————————<br>本文参考：CSDN博主「shuaibi.1」<br>原文链接：<a href="https://blog.csdn.net/sinat_37064286/article/details/86768268" target="_blank" rel="noopener">https://blog.csdn.net/sinat_37064286/article/details/86768268</a></li>
</ul>
]]></content>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>java 反射机制详解</title>
    <url>/2019/12/02/java-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h3><pre><code>* 框架：半成品软件，可以在框架的基础上进行软件开发，简化编码
* 反射：将类的各个组成部分封装为其他对象，这就是反射机制；
    * 好处：
          1. 可以在程序运行过程中，操作这些对象。
          2. 可以解耦，提高程序的可扩展性 </code></pre><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ul>
<li><p>定义：JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p>
</li>
<li><p>用途：在日常的第三方应用开发过程中，经常会遇到某个类的某个成员变量、方法或是属性是私有的或是只对系统应用开放，这时候就可以利用Java的反射机制通过反射来获取所需的私有成员或是方法。</p>
<h4 id="反射机制的相关类"><a href="#反射机制的相关类" class="headerlink" title="反射机制的相关类"></a>反射机制的相关类</h4></li>
<li><p>获取Class(字节码文件)对象的方式：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td>Class.forName(“全类名”)</td>
<td align="center">将字节码文件加载进内存，返回class对象(一般用于：配置文件，将类名定义在配置文件中。读取文件，加载类)</td>
</tr>
<tr>
<td>类名.class</td>
<td align="center">通过类名属性class属性获取(一般用于：参数的传递)</td>
</tr>
<tr>
<td>对象.getClass()</td>
<td align="center">getClass()方法在Object类中定义的(一般用于：对象获取字节码方式)</td>
</tr>
<tr>
<td>- 注意：同一个字节码文件(*.class)在一次程序运行过程中，只被加载一次，不论那种方式获取的class对象都是同一个。</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>与Java反射相关的类如下：<br>类名|用途<br>–|:–:<br>Class类|代表类的实体，在运行的Java应用程序中表示类和接口<br>Field类|代表类的成员变量（成员变量也称为类的属性）<br>Method类|代表类的方法<br>Constructor类|代表类的构造方法</p>
<h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><ul>
<li>Class代表类的实体，在运行的Java应用程序中表示类和接口。在这个类中提供了很多有用的方法，这里对他们简单的分类介绍。<h5 id="获得类相关的方法"><a href="#获得类相关的方法" class="headerlink" title="获得类相关的方法"></a>获得类相关的方法</h5></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th align="center">用途</th>
</tr>
</thead>
<tbody><tr>
<td>asSubclass(Class<U> clazz)</td>
<td align="center">把传递的类的对象转换成代表其子类的对象</td>
</tr>
<tr>
<td>Cast</td>
<td align="center">把对象转换成代表类或是接口的对象</td>
</tr>
<tr>
<td>getClassLoader()</td>
<td align="center">获得类的加载器</td>
</tr>
<tr>
<td>getClasses()</td>
<td align="center">返回一个数组，数组中包含该类中所有公共类和接口类的对象</td>
</tr>
<tr>
<td>getDeclaredClasses()</td>
<td align="center">返回一个数组，数组中包含该类中所有类和接口类的对象</td>
</tr>
<tr>
<td>forName(String className)</td>
<td align="center">根据类名返回类的对象</td>
</tr>
<tr>
<td>getName()</td>
<td align="center">获得类的完整路径名字</td>
</tr>
<tr>
<td>newInstance()</td>
<td align="center">创建类的实例</td>
</tr>
<tr>
<td>getPackage()</td>
<td align="center">获得类的包</td>
</tr>
<tr>
<td>getSimpleName()</td>
<td align="center">获得类的名字</td>
</tr>
<tr>
<td>getSuperclass()</td>
<td align="center">获得当前类继承的父类的名字</td>
</tr>
<tr>
<td>getInterfaces()</td>
<td align="center">获得当前类实现的类或是接口</td>
</tr>
</tbody></table>
<h5 id="获得类中属性相关的方法"><a href="#获得类中属性相关的方法" class="headerlink" title="获得类中属性相关的方法"></a>获得类中属性相关的方法</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>Field[] getField(String name)</td>
<td align="left">获得某个公有的属性对象</td>
</tr>
<tr>
<td>Field[] getFields()</td>
<td align="left">获得所有公有的属性对象</td>
</tr>
<tr>
<td>Field[] getDeclaredField(String name)</td>
<td align="left">获得某个属性对象</td>
</tr>
<tr>
<td>Field[] getDeclaredFields()</td>
<td align="left">获得所有属性对象</td>
</tr>
</tbody></table>
<h5 id="获得类中注解相关的方法"><a href="#获得类中注解相关的方法" class="headerlink" title="获得类中注解相关的方法"></a>获得类中注解相关的方法</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>Field[] getAnnotation(Class<A> annotationClass)</td>
<td align="left">返回该类中与参数类型匹配的公有注解对象</td>
</tr>
<tr>
<td>Field[] getAnnotations()</td>
<td align="left">返回该类所有的公有注解对象</td>
</tr>
<tr>
<td>Field[] getDeclaredAnnotation(Class<A> annotationClass)</td>
<td align="left">返回该类中与参数类型匹配的所有注解对象</td>
</tr>
<tr>
<td>Field[] getDeclaredAnnotations()</td>
<td align="left">返回该类所有的注解对象</td>
</tr>
</tbody></table>
<h5 id="获得类中构造器相关的方法"><a href="#获得类中构造器相关的方法" class="headerlink" title="获得类中构造器相关的方法"></a>获得类中构造器相关的方法</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>Constructor<?>[] getConstructor(Class...<?> Constructor&lt;?&gt;[] parameterTypes)</td>
<td align="left">获得该类中与参数类型匹配的公有构造方法</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getConstructors()</td>
<td align="left">获得该类的所有公有构造方法</td>
</tr>
<tr>
<td>Constructor<?>[] getDeclaredConstructor(Class...<?> parameterTypes)</td>
<td align="left">获得该类中与参数类型匹配的构造方法</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td>
<td align="left">获得该类所有构造方法</td>
</tr>
</tbody></table>
<h5 id="获得类中方法相关的方法"><a href="#获得类中方法相关的方法" class="headerlink" title="获得类中方法相关的方法"></a>获得类中方法相关的方法</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>Method[] getMethod(String name, Class…&lt;?&gt; parameterTypes)</td>
<td align="left">获得该类某个公有的方法</td>
</tr>
<tr>
<td>Method[] getMethods()</td>
<td align="left">获得该类所有公有的方法</td>
</tr>
<tr>
<td>Method[] getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td>
<td align="left">获得该类某个方法</td>
</tr>
<tr>
<td>Method[] getDeclaredMethods()</td>
<td align="left">获得该类所有方法</td>
</tr>
</tbody></table>
<h5 id="类中其他重要的方法"><a href="#类中其他重要的方法" class="headerlink" title="类中其他重要的方法"></a>类中其他重要的方法</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>isAnnotation()</td>
<td align="left">如果是注解类型则返回true</td>
</tr>
<tr>
<td>isAnnotationPresent(Class&lt;? extends Annotation&gt; annotationClass)</td>
<td align="left">如果是指定类型注解类型则返回true</td>
</tr>
<tr>
<td>isAnonymousClass()</td>
<td align="left">如果是匿名类则返回true</td>
</tr>
<tr>
<td>isArray()</td>
<td align="left">如果是一个数组类则返回true</td>
</tr>
<tr>
<td>isEnum()</td>
<td align="left">如果是枚举类则返回true</td>
</tr>
<tr>
<td>isInstance(Object obj)</td>
<td align="left">如果obj是该类的实例则返回true</td>
</tr>
<tr>
<td>isInterface()</td>
<td align="left">如果是接口类则返回true</td>
</tr>
<tr>
<td>isLocalClass()</td>
<td align="left">如果是局部类则返回true</td>
</tr>
<tr>
<td>isMemberClass()</td>
<td align="left">如果是内部类则返回true</td>
</tr>
</tbody></table>
<h5 id="Field类-Field代表类的成员变量（成员变量也称为类的属性）。"><a href="#Field类-Field代表类的成员变量（成员变量也称为类的属性）。" class="headerlink" title="Field类|Field代表类的成员变量（成员变量也称为类的属性）。"></a>Field类|Field代表类的成员变量（成员变量也称为类的属性）。</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>equals(Object obj)</td>
<td align="left">属性与obj相等则返回true</td>
</tr>
<tr>
<td>get(Object obj)</td>
<td align="left">获得obj中对应的属性值</td>
</tr>
<tr>
<td>set(Object obj, Object value)</td>
<td align="left">设置obj中对应属性值</td>
</tr>
</tbody></table>
<h5 id="Method类-Method代表类的方法。"><a href="#Method类-Method代表类的方法。" class="headerlink" title="Method类|Method代表类的方法。"></a>Method类|Method代表类的方法。</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>invoke(Object obj, Object… args)</td>
<td align="left">传递object对象及参数调用该对象对应的方法</td>
</tr>
</tbody></table>
<h5 id="Constructor类-Constructor代表类的构造方法。"><a href="#Constructor类-Constructor代表类的构造方法。" class="headerlink" title="Constructor类|Constructor代表类的构造方法。"></a>Constructor类|Constructor代表类的构造方法。</h5><table>
<thead>
<tr>
<th>方法</th>
<th align="left">用途</th>
</tr>
</thead>
<tbody><tr>
<td>newInstance(Object… initargs)</td>
<td align="left">根据传递的参数创建类的对象</td>
</tr>
</tbody></table>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul>
<li><p>获取成员变量</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*1. 获取成员变量们</span></span><br><span class="line"><span class="comment">  * Field[] getFields();  获取public修饰的成员变量</span></span><br><span class="line"><span class="comment">  * Field[] getField(String name); 获取指定的public修饰的成员变量</span></span><br><span class="line"><span class="comment">  * Field[] getDeclaredFields();</span></span><br><span class="line"><span class="comment">  * Field[] getDeclaredField(String name);</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> test &#123;</span><br><span class="line">   <span class="built_in">public</span> static <span class="type">void</span> main(String[] args) throws NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">       //<span class="number">0.</span>获取Person的<span class="keyword">class</span>对象</span><br><span class="line">       <span class="keyword">Class</span> personClass = Person.<span class="keyword">class</span>;</span><br><span class="line">       //<span class="number">1.</span>Field[] getFields() 获取所有<span class="built_in">public</span>修饰的成员变量</span><br><span class="line">       Field[] fields = personClass.getFields();</span><br><span class="line">       <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println(field);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println("---------");</span><br><span class="line">       //<span class="number">1.</span>Field[] getFields(String <span class="type">name</span>) 获取指定<span class="built_in">public</span>修饰的成员变量</span><br><span class="line">       Field mimi = personClass.getField("mimi");</span><br><span class="line">       //操作<span class="keyword">get</span>|<span class="keyword">set</span></span><br><span class="line">       Person p = <span class="built_in">new</span> Person();</span><br><span class="line">       <span class="keyword">Object</span> <span class="keyword">value</span> = mimi.<span class="keyword">get</span>(p);</span><br><span class="line">       //mimi.<span class="keyword">set</span>("咪咪");</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">value</span>);</span><br><span class="line">       mimi.<span class="keyword">set</span>(p, "咪咪");</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(p);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println("-----------");</span><br><span class="line">       //<span class="number">3.</span>Field[] getDeclareFields() 获取所有的成员变量,不考虑修饰符</span><br><span class="line">       Field[] declaredFields = personClass.getDeclaredFields();</span><br><span class="line">       <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println(field);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println("-----------");</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       *4.Field[] getDeclareFields(String name)</span></span><br><span class="line"><span class="comment">       * 获取指定的成员变量,注意设置私有的属性是汇报错</span></span><br><span class="line"><span class="comment">       * 解决方法：暴力反射</span></span><br><span class="line"><span class="comment">       * 忽略访问修饰符的安全检查</span></span><br><span class="line"><span class="comment">       * 对象.setAccessible()</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       Field <span class="type">name</span> = personClass.getDeclaredField("name");</span><br><span class="line">       //忽略访问修饰符的安全检查</span><br><span class="line">       <span class="type">name</span>.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">Object</span> value2 = <span class="type">name</span>.<span class="keyword">get</span>(p);</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(value2);</span><br><span class="line">       <span class="type">name</span>.<span class="keyword">set</span>(p, "赵明");</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(p);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>获取构造器</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static void main(String<span class="literal">[]</span> args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">      <span class="comment">//0.获取Person的class对象</span></span><br><span class="line">      Class personClass = <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*2. 获取构造方法们</span></span><br><span class="line"><span class="comment">      * Constructor&lt;?&gt;[] getConstructors();</span></span><br><span class="line"><span class="comment">      * Constructor&lt;T&gt;[] getConstructor(类&lt;?&gt;... parameterTypes);</span></span><br><span class="line"><span class="comment">      * Constructor&lt;?&gt;[] getDeclaredConstructors();</span></span><br><span class="line"><span class="comment">      * Constructor&lt;T&gt;[] getDeclaredConstructor(类&lt;?&gt;... parameterTypes);</span></span><br><span class="line"><span class="comment">      **/</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取构造器Constructor&lt;T&gt; getConstructor（类&lt;?&gt;.... parameterTypes）  创建对象的</span></span><br><span class="line">      Constructor constructor = personClass.get<span class="constructor">Constructor(String.<span class="params">class</span>,<span class="params">int</span>.<span class="params">class</span>)</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(constructor);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建对象.newInstance("莉莉",23);</span></span><br><span class="line">      Object person  = constructor.<span class="keyword">new</span><span class="constructor">Instance(<span class="string">"莉莉"</span>,23)</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(person);</span><br><span class="line"></span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"======================="</span>);</span><br><span class="line">      <span class="comment">//空参的构造方法</span></span><br><span class="line">      Constructor constructor1 = personClass.get<span class="constructor">Constructor()</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(constructor1);</span><br><span class="line">      <span class="comment">//创建对象</span></span><br><span class="line">      Object person1  = constructor1.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(person1);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Class类创建对象方法,一般使用此方法比较简单</span></span><br><span class="line">      Object o = personClass.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br><span class="line">      <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(o);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取成员方法</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static void main(String<span class="literal">[]</span> args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">//0.获取Person的class对象</span></span><br><span class="line">        Class personClass = <span class="module-access"><span class="module"><span class="identifier">Person</span>.</span></span><span class="keyword">class</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*3. 获取成员方法们</span></span><br><span class="line"><span class="comment">         * Method[] getMethod()</span></span><br><span class="line"><span class="comment">         * Method getMethod(String name,类&lt;?&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment">         * Method[] getDeclaredMethod()</span></span><br><span class="line"><span class="comment">         * Method getDeclaredMethod(String name,类&lt;?&gt;... parameterTypes)</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        <span class="comment">//获取指定名称的方法  无参</span></span><br><span class="line">        Method eat = personClass.get<span class="constructor">Method(<span class="string">"eat"</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行方法 Object invoke(Object);</span></span><br><span class="line">        Person person = <span class="keyword">new</span> <span class="constructor">Person()</span>;</span><br><span class="line">        eat.invoke(person);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取指定名称的方法  有参</span></span><br><span class="line">        Method eat_method = personClass.get<span class="constructor">Method(<span class="string">"eat"</span>,String.<span class="params">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行方法 Object invoke(Object);</span></span><br><span class="line">        Person person1 = <span class="keyword">new</span> <span class="constructor">Person()</span>;</span><br><span class="line">        eat_method.invoke(person1,<span class="string">"好吃的"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"+++++++++++++++++++++++++++++++++++++"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有public修饰的方法</span></span><br><span class="line">        Method<span class="literal">[]</span> methods = personClass.get<span class="constructor">Methods()</span>;</span><br><span class="line">        for (Method <span class="keyword">method</span> : methods)&#123;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="keyword">method</span>);</span><br><span class="line">            <span class="comment">//获取方法名称</span></span><br><span class="line">            String name = <span class="keyword">method</span>.get<span class="constructor">Name()</span>;</span><br><span class="line">            <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(name);</span><br><span class="line">            <span class="comment">//method.setAccessible(true);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全限定类名 4. 获取类名 String getName()</span></span><br><span class="line">        String classname = personClass.get<span class="constructor">Name()</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(classname);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h3></li>
<li><p>需求：写一个”框架”,可以帮我们 创建任意类的对象，并且执行其中任意方法</p>
</li>
<li><p>不改变类的任何代码，可以创建任意类的对象，可以执行任意方法</p>
</li>
<li><p>pro.properties配置文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全部限定类名</span></span><br><span class="line"><span class="attr">className</span> = Test.Person</span><br><span class="line"><span class="comment">#方法名</span></span><br><span class="line"><span class="attr">methodName</span> = eat</span><br><span class="line"></span><br><span class="line"><span class="comment">#className = Test.Student</span></span><br><span class="line"><span class="comment">#methodName = sleep</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试类</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public static void main(String<span class="literal">[]</span> args) throws IOException, ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">      <span class="comment">//可以执行创建任意类的对象，可以执行任意方法</span></span><br><span class="line">      <span class="comment">//不改变类的任何代码，可以创建任意类的对象，可以执行任意方法</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//Person person = new Person();</span></span><br><span class="line">      <span class="comment">//person.eat();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//加载配置文件</span></span><br><span class="line">      <span class="comment">//1.创建properties对象</span></span><br><span class="line">      Properties pro = <span class="keyword">new</span> <span class="constructor">Properties()</span>;</span><br><span class="line">      <span class="comment">//2.加载配置文件，转换为一个集合</span></span><br><span class="line">      <span class="comment">//2.1获取Class目录下的配置文件</span></span><br><span class="line">      ClassLoader classLoader = <span class="module-access"><span class="module"><span class="identifier">Refleat</span>.</span></span><span class="keyword">class</span>.get<span class="constructor">ClassLoader()</span>;</span><br><span class="line">      InputStream is = classLoader.get<span class="constructor">ResourceAsStream(<span class="string">"pro.properties"</span>)</span>;</span><br><span class="line">      pro.load(is);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//3.获取配置文件中定义的数据</span></span><br><span class="line">      String classname = pro.get<span class="constructor">Property(<span class="string">"className"</span>)</span>;</span><br><span class="line">      String <span class="keyword">method</span> = pro.get<span class="constructor">Property(<span class="string">"methodName"</span>)</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//4.加载该类进内存</span></span><br><span class="line">      Class cls = <span class="module-access"><span class="module"><span class="identifier">Class</span>.</span></span>for<span class="constructor">Name(<span class="params">classname</span>)</span>;</span><br><span class="line">      <span class="comment">//5.创建对象</span></span><br><span class="line">      Object obj = cls.<span class="keyword">new</span><span class="constructor">Instance()</span>;</span><br><span class="line">      <span class="comment">//6.获取方法对象</span></span><br><span class="line">      Method method1 = cls.get<span class="constructor">Method(<span class="params">method</span>)</span>;</span><br><span class="line">      <span class="comment">//7.执行方法</span></span><br><span class="line">      method1.invoke(obj);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2 框架(三)</title>
    <url>/2019/11/30/Struts2-%E6%A1%86%E6%9E%B6-%E4%B8%89/</url>
    <content><![CDATA[<h4 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> <span class="attr">prefix</span>=<span class="string">"s"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>ognl表达式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- ognl表达式</span></span></span><br><span class="line"><span class="xml">	1.s:property表示从作用域取值 有‘’号表示字符串 </span></span><br><span class="line"><span class="xml">	2.可调用方法</span></span><br><span class="line"><span class="xml">	3.访问静态属性</span></span><br><span class="line"><span class="xml">	默认情况下，struts2把静态属性访问禁止，如果使用需要打开</span></span><br><span class="line"><span class="xml">	4.封装list数据，数组  Map集合#</span><span class="template-variable">&#123;key:value&#125;</span><span class="xml">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">" 'java struts' "</span>/&gt;</span>的长度</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">" 'java struts'.length() "</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">int的最大值<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"@java.lang.Integer@MAX_VALUE"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">随机数：<span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"@java.lang.Math@random()*10"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="xml">数组：<span class="tag">&lt;<span class="name">s:radio</span> <span class="attr">list</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;'男','女'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">name</span>=<span class="string">"Sex"</span> <span class="attr">label</span>=<span class="string">"性别"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:radio</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">Map集合:<span class="tag">&lt;<span class="name">s:radio</span> <span class="attr">list</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;'nan':'男','nv':'女'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">name</span>=<span class="string">"Sex"</span> <span class="attr">label</span>=<span class="string">"性别"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:radio</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="ActionContext"><a href="#ActionContext" class="headerlink" title="ActionContext"></a>ActionContext</h3><ul>
<li><p>ActionContext它是action上下文，strtus2框架它使用actionContext来保存Action在执行过程中所需要的一些对象，例如 session, application…</p>
</li>
<li><p>意思就是:<br>Struts2会根据每一次的http请求来创建对应的ActionContext,它是与当前线程绑定的。</p>
</li>
<li><p>每一次请求，就是一个线程，对应着一个request,每一次请求，会创建一个Action,每一个action对应一个ActionContext.每一次请求也对应着一个valueStack.</p>
</li>
<li><p>request—ActionContext—-Action—–ValueStack它们都对应着一次请求(一个线程).</p>
</li>
<li><p>只有存在了action才会存在action上下文(也就是ActionContext)</p>
</li>
<li><p>在ActionContext中持有valuestack中context的引用,而在context中持有root的引用</p>
</li>
<li><p>ValueStack存储数据:<br>如果通过valueStack.set(name,value)存储的,可以在页面是使用&lt;s:property value=”name”&gt;获取<br>如果通过valuestack.push(value)存储的,可以根据它在root中的序号来获取.例如<br>&lt;s:property value=”[1].top”&gt;</p>
</li>
<li><p>ActionContext就是ValueStack中的context,(就是一个容器)属于Map集合,存储session,request,response等对象,只有有了action才会有  ActionContext;所在它持有对root的引用,也就是持有对valuestack中compoundRoot(对象栈)的引用,里面主要存储action的相关数据;</p>
<h4 id="valueStack内部结构"><a href="#valueStack内部结构" class="headerlink" title="valueStack内部结构"></a>valueStack内部结构</h4></li>
<li><p>ValueStack的组成:<br>它就是一个ArrayList 和 context<br>在struts2框架中我们通过ognl表达式来获取valueStack中数据，没有使用#就会从CompoundRoot中获取数据，<br>如果使用#来获取，这时就会从context中来获取<br>CompoundRoot主要存储的是action的相关数据;其实就是一个ArrayList<br>context 其实就是一个Map集合</p>
</li>
<li><p>主要存储了一些引用，这个引用主要是关于web开发中相关信息<br>pameters :请求 参数<br>request:请求对象中所有属性<br>session:会话对象中所有属性<br>application:application对象中的所有发展<br>其中的context对象是OGNLContext，它实现了map接口，在valueStack的默认实现类中，OgnlValueStack中调用OGNL方法，返回一个OgnlContext对象。</p>
</li>
<li><p>往ActionContext中存数据</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TextAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line">	public <span class="type">String</span> execute()&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//往ActionContext中存数据</span></span><br><span class="line">	    <span class="type">ActionContext</span> contextMap = <span class="type">ActionContext</span>.getContext();</span><br><span class="line">	    contextMap.put(<span class="string">"username"</span>, <span class="string">"zhao2"</span>);</span><br><span class="line">	    contextMap.put(<span class="string">"password"</span>, <span class="string">"zhao1256"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>struts.xml 核心配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置常量  struts.action.extension表示后缀--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--&lt;constant name="struts.action.extension" value="php"&gt;&lt;/constant&gt;--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.ognl.allowStaticMethodAccess"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- abstract="true"抽象 用于继承 若包有abstract="true"属性  有包继承此包即可是有所有功能</span></span><br><span class="line"><span class="comment">	          一般抽象包不声明Action --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- namespace="/" 命名空间， 访问路径，默认为空字符串</span></span><br><span class="line"><span class="comment">	      可有用于模块划分--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;package name="p1" extends="struts-default" namespace="/" abstract="true"&gt; --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.TextAction"</span>&gt;</span></span><br><span class="line">  			<span class="tag">&lt;<span class="name">result</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>取值</p>
<figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="ruby">    pageEncoding=<span class="string">"UTF-8"</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ taglib uri=<span class="string">"/struts-tags"</span> prefix=<span class="string">"s"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 取值&lt;s:property value=""/&gt; </span></span></span><br><span class="line"><span class="xml">	value写ONGL表达式</span></span><br><span class="line"><span class="xml">	取contextMap，写 #+key</span></span><br><span class="line"><span class="xml">	取valueStack，写key</span></span><br><span class="line"><span class="xml">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--  valueStack：&lt;s:property value="zhao"/&gt;--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--&lt;%</span></span><span class="ruby">session.setAttribute(<span class="string">"github"</span>, <span class="string">"outstanding99"</span>); </span><span class="xml"><span class="comment">%&gt;--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:debug</span>&gt;</span><span class="tag">&lt;/<span class="name">s:debug</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="往值栈（ValueStack）存数据"><a href="#往值栈（ValueStack）存数据" class="headerlink" title="往值栈（ValueStack）存数据"></a>往值栈（ValueStack）存数据</h3><h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Domo1Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">public <span class="type">String</span> execute() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="comment">//往值栈（ValueStack）存数据</span></span><br><span class="line">	<span class="type">ValueStack</span> vs = <span class="type">ActionContext</span>.getContext().getValueStack();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//put方法</span></span><br><span class="line">	vs.push(<span class="keyword">new</span> <span class="type">User</span>(<span class="string">"zhao"</span>,<span class="string">"123456"</span>));</span><br><span class="line">	vs.push(<span class="keyword">new</span> <span class="type">User</span>(<span class="string">"ji"</span>,<span class="string">"789456"</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//setvalue</span></span><br><span class="line">	</span><br><span class="line">	vs.setValue(<span class="string">"iiik"</span>, <span class="string">"rgsdg"</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//contextMap里存值</span></span><br><span class="line">	vs.setValue(<span class="string">"#iiik"</span>, <span class="string">"rgsdg"</span>);</span><br><span class="line">	<span class="comment">//valueStack存map类型的值</span></span><br><span class="line">	vs.set(<span class="string">"user"</span>,<span class="keyword">new</span> <span class="type">User</span>(<span class="string">"120"</span>,<span class="string">"130"</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>取值</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;s:property/&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	ValueStack vs = ActionContext.getContext().getValueStack();</span><br><span class="line">	String <span class="keyword">value</span> =(String)vs.findValue("user");</span><br><span class="line">    //<span class="keyword">out</span>.<span class="keyword">write</span>(<span class="keyword">value</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;s:<span class="keyword">debug</span>&gt;&lt;/s:<span class="keyword">debug</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="iterator-迭代"><a href="#iterator-迭代" class="headerlink" title="iterator 迭代"></a>iterator 迭代</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@page</span> <span class="attr">import</span>=<span class="string">"com.opensymphony.xwork2.util.ValueStack"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@page</span> <span class="attr">import</span>=<span class="string">"com.opensymphony.xwork2.ActionContext"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> <span class="attr">prefix</span>=<span class="string">"s"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:debug</span>&gt;</span><span class="tag">&lt;/<span class="name">s:debug</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">1</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">th</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- value 值栈变量名</span></span></span><br><span class="line"><span class="xml">		var:遍历的变量名 存到contextMap中 </span></span><br><span class="line"><span class="xml">		status 遍历状态--&gt;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"user"</span> <span class="attr">var</span>=<span class="string">"u"</span> <span class="attr">status</span>=<span class="string">"st"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">			</span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#u.name"</span>/&gt;</span>-$</span><span class="template-variable">&#123;u.name&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#u.age"</span>/&gt;</span>-$</span><span class="template-variable">&#123;u.age&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#u.city"</span>/&gt;</span>-$</span><span class="template-variable">&#123;u.city&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;st.odd&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span>	</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 往作用域存数据</span></span></span><br><span class="line"><span class="xml">	value：值</span></span><br><span class="line"><span class="xml">	var：变量名</span></span><br><span class="line"><span class="xml">	scope：作用域 可写类型 application session request page action</span></span><br><span class="line"><span class="xml">	不写就是action</span></span><br><span class="line"><span class="xml"> --&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:set</span> <span class="attr">value</span>=<span class="string">"'阿尔提尔'"</span>  <span class="attr">var</span>=<span class="string">"username"</span> <span class="attr">scope</span>=<span class="string">"application"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:set</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:set</span> <span class="attr">value</span>=<span class="string">"'阿尔提尔1'"</span>  <span class="attr">var</span>=<span class="string">"username1"</span> <span class="attr">scope</span>=<span class="string">"session"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:set</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:set</span> <span class="attr">value</span>=<span class="string">"'阿尔提尔2'"</span>  <span class="attr">var</span>=<span class="string">"username2"</span> <span class="attr">scope</span>=<span class="string">"request"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:set</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:set</span> <span class="attr">value</span>=<span class="string">"'阿尔提尔3'"</span>  <span class="attr">var</span>=<span class="string">"username3"</span> <span class="attr">scope</span>=<span class="string">"action"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:set</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 取值 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#application.username"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#session.username1"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#request.username2"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"#action.username3"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:debug</span>&gt;</span><span class="tag">&lt;/<span class="name">s:debug</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 表单提交 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:form</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 下拉框 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:select</span> <span class="attr">list</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;'重庆','甘肃','哈密','陇西','通渭县'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">label</span>=<span class="string">"城市"</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">headerkey</span>=<span class="string">""</span> <span class="attr">headerValue</span>=<span class="string">"-请选择城市-"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:select</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:select</span> <span class="attr">list</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;'-请选择城市-','重庆','甘肃','哈密','陇西','通渭县'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">label</span>=<span class="string">"城市"</span> <span class="attr">name</span>=<span class="string">"city"</span> &gt;</span><span class="tag">&lt;/<span class="name">s:select</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 文本域 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:textarea</span> <span class="attr">label</span>=<span class="string">"备注"</span> <span class="attr">rows</span>=<span class="string">'10'</span> <span class="attr">clos</span>=<span class="string">'50'</span>&gt;</span><span class="tag">&lt;/<span class="name">s:textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:reset</span> <span class="attr">value</span>=<span class="string">'重置'</span>&gt;</span><span class="tag">&lt;/<span class="name">s:reset</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:submit</span> <span class="attr">value</span>=<span class="string">"提交"</span> <span class="attr">theme</span>=<span class="string">'simple'</span>&gt;</span><span class="tag">&lt;/<span class="name">s:submit</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:debug</span>&gt;</span><span class="tag">&lt;/<span class="name">s:debug</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:url</span> <span class="attr">action</span>=<span class="string">"domo1"</span> <span class="attr">var</span>=<span class="string">"myurl"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span>jojo<span class="tag">&lt;/<span class="name">s:param</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span>228<span class="tag">&lt;/<span class="name">s:param</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">s:param</span> <span class="attr">name</span>=<span class="string">"city"</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">s:param</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">s:url</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;s:property value='#myurl'/&gt;"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="token令牌（表单重复提交）"><a href="#token令牌（表单重复提交）" class="headerlink" title="token令牌（表单重复提交）"></a>token令牌（表单重复提交）</h3></li>
<li><p>Struts 2标签中的token标签，可以用来生成一个独一无二的标记。</p>
</li>
<li><p>这个标记必须嵌套在form标签中使用，它会在表单里插入一个隐藏字段并把标记保存到HttpSession对象里。</p>
</li>
<li><p>toke标签必须与Token或Token Session拦截器配合使用，两个拦截器都能对token标签进行处理。</p>
</li>
<li><p>Token拦截器遇到重复提交表单的情况，会返回一个”invalid.token”结果并加上一个动作级别的错误。</p>
</li>
<li><p>Token Session拦截器扩展了Token拦截器并提供了一种更复杂的服务，它采取的做法与Token拦截器不同，它只是阻断了后续的提交，这样用户不提交多少次，就好像只是提交了一次。 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"Login"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.acton.LoginAction"</span>&gt;</span></span><br><span class="line">		    <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/scccess.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"token"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"invalid.token"</span>&gt;</span>/invalidtoken.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:form</span> <span class="attr">action</span>=<span class="string">"avoid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:token</span>&gt;</span><span class="tag">&lt;/<span class="name">s:token</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">label</span>=<span class="string">"Enter your name"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:textfield</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">label</span>=<span class="string">"Enter your birthday"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:textfield</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">s:submit</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:submit</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <tags>
        <tag>Struts2框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2 框架(二)</title>
    <url>/2019/11/30/Struts2-%E6%A1%86%E6%9E%B6-%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="struts2表单验证"><a href="#struts2表单验证" class="headerlink" title="struts2表单验证"></a>struts2表单验证</h3><h4 id="JSP页面"><a href="#JSP页面" class="headerlink" title="JSP页面"></a>JSP页面</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">    pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span> <span class="attr">prefix</span>=<span class="string">"s"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:head</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:fielderror</span>&gt;</span><span class="tag">&lt;/<span class="name">s:fielderror</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/regirster.action"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	密&amp;emsp;码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	生&amp;emsp;日：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"brithday"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	爱&amp;emsp;好：</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"写代码"</span>/&gt;</span>写代码</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"泡妞"</span>/&gt;</span>泡妞</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"运动"</span>/&gt;</span>运动</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	是否已婚：</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"married"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>未婚</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"married"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span>已婚</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="properties文件"><a href="#properties文件" class="headerlink" title="properties文件"></a>properties文件</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#连接设置</span></span><br><span class="line"><span class="attr">driverClassName</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">url</span>=jdbc:mysql://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>/struts2?useUnicode=<span class="literal">true</span>&amp;characterEncoding=UTF-<span class="number">8</span></span><br><span class="line"><span class="attr">username</span>=root</span><br><span class="line"><span class="attr">password</span>=</span><br><span class="line"><span class="comment">#初始化连接</span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="number">5</span></span><br><span class="line"><span class="comment">#最大连接数量</span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="number">10</span></span><br><span class="line"><span class="comment">#最大空闲连接</span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h4 id="dbcp连接数据库工具类"><a href="#dbcp连接数据库工具类" class="headerlink" title="dbcp连接数据库工具类"></a>dbcp连接数据库工具类</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">package com.zhao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBCPUtils</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">DataSource</span> ds = null;</span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		<span class="type">Properties</span> prop = new <span class="type">Properties</span>();</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			<span class="type">InputStream</span> <span class="keyword">in</span> =new <span class="type">DBCPUtils</span>().getClass().getClassLoader().getResourceAsStream(<span class="string">"dbcp.properties"</span>);</span><br><span class="line">			prop.load(<span class="keyword">in</span>);</span><br><span class="line">			ds = <span class="type">BasicDataSourceFactory</span>.createDataSource(prop);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(<span class="type">Exception</span> e)&#123;</span><br><span class="line">			<span class="keyword">throw</span> new <span class="type">ExceptionInInitializerError</span>(e);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	提供一个数据源的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">DataSource</span> getDataSource()&#123;</span><br><span class="line">		<span class="keyword">return</span> ds;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	提供一个获取连接的方法，注意以后获取链接，必须使用该方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Connection</span> getConnection() <span class="keyword">throws</span> <span class="type">SQLException</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ds.getConnection();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//	 public static void release(Connection conn,Statement stmt,ResultSet rs)&#123;</span></span><br><span class="line"><span class="comment">//	         if(rs!=null)&#123;</span></span><br><span class="line"><span class="comment">//		            try&#123;</span></span><br><span class="line"><span class="comment">//		                  //关闭存储查询结果的ResultSet对象</span></span><br><span class="line"><span class="comment">//		                 rs.close();</span></span><br><span class="line"><span class="comment">//		            &#125;catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//		                 e.printStackTrace();</span></span><br><span class="line"><span class="comment">//		             &#125;</span></span><br><span class="line"><span class="comment">//		            rs = null;</span></span><br><span class="line"><span class="comment">//		        &#125;</span></span><br><span class="line"><span class="comment">//		         if(stmt!=null)&#123;</span></span><br><span class="line"><span class="comment">//		             try&#123;</span></span><br><span class="line"><span class="comment">//		                  //关闭负责执行SQL命令的Statement对象</span></span><br><span class="line"><span class="comment">//		                 stmt.close();</span></span><br><span class="line"><span class="comment">//		             &#125;catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//		                  e.printStackTrace();</span></span><br><span class="line"><span class="comment">//		            &#125;</span></span><br><span class="line"><span class="comment">//		          &#125;</span></span><br><span class="line"><span class="comment">//		         </span></span><br><span class="line"><span class="comment">//		         if(conn!=null)&#123;</span></span><br><span class="line"><span class="comment">//		             try&#123;</span></span><br><span class="line"><span class="comment">//		                 //将Connection连接对象还给数据库连接池</span></span><br><span class="line"><span class="comment">//		                 conn.close();</span></span><br><span class="line"><span class="comment">//		              &#125;catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//		                  e.printStackTrace();</span></span><br><span class="line"><span class="comment">//		              &#125;</span></span><br><span class="line"><span class="comment">//		          &#125;</span></span><br><span class="line"><span class="comment">//		     &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line">	<span class="keyword">private</span> Date brithday;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">String</span> hobby;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> married;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> username;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"User [username="</span> + username + <span class="string">", password="</span> + password + <span class="string">", brithday="</span> + brithday + <span class="string">", hobby="</span> + hobby</span><br><span class="line">				+ <span class="string">", married="</span> + married + <span class="string">"]"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(<span class="keyword">String</span> username)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.username = username;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(<span class="keyword">String</span> password)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.password = password;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Date <span class="title">getBrithday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> brithday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrithday</span><span class="params">(Date brithday)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.brithday = brithday;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getHobby</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> hobby;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(<span class="keyword">String</span> hobby)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMarried</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> married;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMarried</span><span class="params">(<span class="keyword">boolean</span> married)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.married = married;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建数据持久层"><a href="#创建数据持久层" class="headerlink" title="创建数据持久层"></a>创建数据持久层</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package com.zhao.dao.impl;</span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhao.dao1.IUserDao;</span><br><span class="line"><span class="keyword">import</span> com.zhao.model.<span class="keyword">User</span>;</span><br><span class="line"><span class="keyword">import</span> com.zhao.util.DBCPUtils;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserDaoImpl implements IUserDao&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> addUser(<span class="keyword">User</span> <span class="keyword">user</span>) throws SQLException&#123;</span><br><span class="line">		</span><br><span class="line">		QueryRunner runner = <span class="built_in">new</span> QueryRunner(DBCPUtils.getDataSource());</span><br><span class="line">		String <span class="keyword">sql</span> ="insert into user values(?,?,?,?,?)";</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> runner.<span class="keyword">update</span>(<span class="keyword">sql</span>, <span class="keyword">user</span>.getUsername(),<span class="keyword">user</span>.getPassword(),<span class="keyword">user</span>.getBrithday(),<span class="keyword">user</span>.getHobby(),<span class="keyword">user</span>.isMarried());	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建业务层"><a href="#创建业务层" class="headerlink" title="创建业务层"></a>创建业务层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	IUserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regirster</span><span class="params">(User user)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		userDao.addUser(user);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建控制层（struts2-Action）"><a href="#创建控制层（struts2-Action）" class="headerlink" title="创建控制层（struts2 Action）"></a>创建控制层（struts2 Action）</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserAction extends ActionSupport implements ModelDriven&lt;<span class="keyword">User</span>&gt;&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 采用模型注入</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	private static final long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">	<span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * struts2自带表单验证</span></span><br><span class="line"><span class="comment">	 * 第一种： 重写validate方法</span></span><br><span class="line"><span class="comment">	 * org.apache.commons.lang3.StringUtils;</span></span><br><span class="line"><span class="comment">	 * @return</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">//	@Override</span><br><span class="line">//	<span class="built_in">public</span> <span class="type">void</span> <span class="keyword">validate</span>() &#123;</span><br><span class="line">//		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">////		判断用户名是否为空</span><br><span class="line">////		<span class="keyword">if</span>(StringUtils.isEmpty(<span class="keyword">user</span>.getUsername()))相当于<span class="keyword">if</span>(username == <span class="keyword">null</span> &amp;&amp; "".equals(username));</span><br><span class="line">//		<span class="keyword">if</span>(StringUtils.isEmpty(<span class="keyword">user</span>.getUsername()))&#123;</span><br><span class="line">//			addFieldError("username", "用户名不能为空！");</span><br><span class="line">//		&#125;</span><br><span class="line">//	&#125;</span><br><span class="line">	<span class="built_in">public</span> String regirster() throws SQLException&#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line">		IUserService us = <span class="built_in">new</span> UserServiceImpl();</span><br><span class="line">		us.regirster(<span class="keyword">user</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">NONE</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="keyword">User</span> getModel() &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">user</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="struts-xml核心配置文件"><a href="#struts-xml核心配置文件" class="headerlink" title="struts.xml核心配置文件"></a>struts.xml核心配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Action --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"regirster"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"regirster"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/regirster.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="I18n国际化资源-resources里的properties文件"><a href="#I18n国际化资源-resources里的properties文件" class="headerlink" title="I18n国际化资源(resources里的properties文件)"></a>I18n国际化资源(resources里的properties文件)</h3><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> I18nTest &#123;</span><br><span class="line">	@Test</span><br><span class="line">	public void test1<span class="literal">()</span>&#123;</span><br><span class="line">		<span class="comment">//要读取国际化资源resources里的properties文件</span></span><br><span class="line">		<span class="comment">//baseName = 包名+文件名</span></span><br><span class="line">		ResourceBundle rb =<span class="module-access"><span class="module"><span class="identifier">ResourceBundle</span>.</span></span>get<span class="constructor">Bundle(<span class="string">"resources.message"</span>,Locale.US)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(rb.get<span class="constructor">String(<span class="string">"login.username"</span>)</span>);</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(rb.get<span class="constructor">String(<span class="string">"login.passord"</span>)</span>);</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(rb.get<span class="constructor">String(<span class="string">"login.Submit"</span>)</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="国际化资源properties文件"><a href="#国际化资源properties文件" class="headerlink" title="国际化资源properties文件"></a>国际化资源properties文件</h4><ul>
<li>文件名(必须)：message_en_US.properties<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">login.username</span>=USERNAME</span><br><span class="line"><span class="attr">login.password</span>=PASSWORD</span><br><span class="line"><span class="attr">login.Submit</span>=SUBMIT</span><br></pre></td></tr></table></figure></li>
<li><ul>
<li>文件名(必须)：message_zh_CN.properties<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">login.username</span>=用户名</span><br><span class="line"><span class="attr">login.password</span>=密码</span><br><span class="line"><span class="attr">login.Submit</span>=注册</span><br></pre></td></tr></table></figure>
<h3 id="拦截器-登录表单拦截"><a href="#拦截器-登录表单拦截" class="headerlink" title="拦截器(登录表单拦截)"></a>拦截器(登录表单拦截)</h3><h4 id="登陆页面JSP"><a href="#登陆页面JSP" class="headerlink" title="登陆页面JSP"></a>登陆页面JSP</h4><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/login.action"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	密&amp;emsp;码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/studentlist"</span>&gt;</span>学生列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;pageContext.request.contextPath &#125;</span><span class="xml"><span class="tag"><span class="string">/teacherlist"</span>&gt;</span>老师列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ModelDriven</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="keyword">private</span> User user = <span class="keyword">new</span> User();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//		1.接收参数</span></span><br><span class="line">		</span><br><span class="line"><span class="comment">//		2.判断登录成功与否</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"zhao"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"123"</span>.equals(user.getPassword()))&#123;</span><br><span class="line"><span class="comment">//			登录成功后，把user保存到session中</span></span><br><span class="line">			ServletActionContext.getRequest().getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> SUCCESS;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> NONE;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> User <span class="title">getModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="拦截器-继承-MethodFilterInterceptor类"><a href="#拦截器-继承-MethodFilterInterceptor类" class="headerlink" title="拦截器 继承 MethodFilterInterceptor类"></a>拦截器 继承 MethodFilterInterceptor类</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CheckLoginInterceptor</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="type">String</span> doIntercept(<span class="type">ActionInvocation</span> invocation) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">		<span class="comment">//		获取session域对象user</span></span><br><span class="line">		<span class="type">User</span> user =(<span class="type">User</span>)<span class="type">ServletActionContext</span>.getRequest().getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line"><span class="comment">//		判断</span></span><br><span class="line">		<span class="keyword">if</span>(user != <span class="literal">null</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> invocation.invoke();</span><br><span class="line">		&#125;</span><br><span class="line"><span class="comment">//		如果没有登陆，回到登录页面</span></span><br><span class="line">		<span class="keyword">return</span> <span class="string">"tologinPage"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="struts2核心配置-（拦截器局部配置）"><a href="#struts2核心配置-（拦截器局部配置）" class="headerlink" title="struts2核心配置 （拦截器局部配置）"></a>struts2核心配置 （拦截器局部配置）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"> <span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 声明登录校验 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zhao.interceptor.CheckLoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"tologinPage"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/main.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"studentlist"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.StudentAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 拦截器引用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/student.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"teacherlist"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.TeacherAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 拦截器引用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/teacher.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"> <span class="comment">&lt;!--	&lt;package name="p2" extends="struts-default" namespace="/student"&gt;</span></span><br><span class="line"><span class="comment">		&lt;action name="list" class="com.zhao.web.action.StudentAction" method="list"&gt;</span></span><br><span class="line"><span class="comment">			&lt;result name="success"&gt;/WEB-INF/student.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">		&lt;/action&gt;</span></span><br><span class="line"><span class="comment">	&lt;/package&gt;</span></span><br><span class="line"><span class="comment">	&lt;package name="p3" extends="struts-default" namespace="/teacher"&gt;</span></span><br><span class="line"><span class="comment">		&lt;action name="list" class="com.zhao.web.action.TeacherAction" method="list"&gt;</span></span><br><span class="line"><span class="comment">			&lt;result name="success"&gt;/WEB-INF/teacher.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">		&lt;/action&gt;</span></span><br><span class="line"><span class="comment">	&lt;/package&gt;</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="struts2核心配置-（拦截器全局配置）"><a href="#struts2核心配置-（拦截器全局配置）" class="headerlink" title="struts2核心配置 （拦截器全局配置）"></a>struts2核心配置 （拦截器全局配置）</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 声明登录校验 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zhao.interceptor.CheckLoginInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 拦截器分组 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"mydefaultStack"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 拦截器引用 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"tologinPage"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/main.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"studentlist"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.StudentAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 拦截器引用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"mydefaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/student.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"teacherlist"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.TeacherAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 拦截器引用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"mydefaultStack"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/teacher.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"> <span class="comment">&lt;!--	&lt;package name="p2" extends="struts-default" namespace="/student"&gt;</span></span><br><span class="line"><span class="comment">		&lt;action name="list" class="com.zhao.web.action.StudentAction" method="list"&gt;</span></span><br><span class="line"><span class="comment">			&lt;result name="success"&gt;/WEB-INF/student.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">		&lt;/action&gt;</span></span><br><span class="line"><span class="comment">	&lt;/package&gt;</span></span><br><span class="line"><span class="comment">	&lt;package name="p3" extends="struts-default" namespace="/teacher"&gt;</span></span><br><span class="line"><span class="comment">		&lt;action name="list" class="com.zhao.web.action.TeacherAction" method="list"&gt;</span></span><br><span class="line"><span class="comment">			&lt;result name="success"&gt;/WEB-INF/teacher.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">		&lt;/action&gt;</span></span><br><span class="line"><span class="comment">	&lt;/package&gt;</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="配置不要拦截其方法"><a href="#配置不要拦截其方法" class="headerlink" title="配置不要拦截其方法"></a>配置不要拦截其方法</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明登录校验 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.zhao.interceptor.CheckLoginInterceptor"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 不要拦截login方法</span></span><br><span class="line"><span class="comment">			      excludeMethods排除方法，写方法名 </span></span><br><span class="line"><span class="comment">			            多个方法拦截用（，）号连接--&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">" excludeMethods"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 拦截器分组 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"mydefaultStack"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 拦截器引用 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"CheckLoginInterceptor"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 修改默认拦截器 使用拦截器分组 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"mydefaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-interceptor-ref</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"tologinPage"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/main.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"studentlist"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.StudentAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/student.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"teacherlist"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.TeacherAction"</span> <span class="attr">method</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/teacher.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--	&lt;package name="p2" extends="struts-default" namespace="/student"&gt;</span></span><br><span class="line"><span class="comment">	&lt;action name="list" class="com.zhao.web.action.StudentAction" method="list"&gt;</span></span><br><span class="line"><span class="comment">		&lt;result name="success"&gt;/WEB-INF/student.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">	&lt;/action&gt;</span></span><br><span class="line"><span class="comment">&lt;/package&gt;</span></span><br><span class="line"><span class="comment">&lt;package name="p3" extends="struts-default" namespace="/teacher"&gt;</span></span><br><span class="line"><span class="comment">	&lt;action name="list" class="com.zhao.web.action.TeacherAction" method="list"&gt;</span></span><br><span class="line"><span class="comment">		&lt;result name="success"&gt;/WEB-INF/teacher.jsp&lt;/result&gt;</span></span><br><span class="line"><span class="comment">	&lt;/action&gt;</span></span><br><span class="line"><span class="comment">&lt;/package&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Action-1"><a href="#Action-1" class="headerlink" title="Action"></a>Action</h4><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.<span class="type">ServletActionContext</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.<span class="type">ActionSupport</span>;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.<span class="type">ModelDriven</span>;</span><br><span class="line"><span class="keyword">import</span> com.zhao.model.<span class="type">User</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="title">implements</span> <span class="title">ModelDriven&lt;User&gt;</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">User</span> user = <span class="keyword">new</span> <span class="type">User</span>();</span><br><span class="line">	public <span class="type">String</span> login()&#123;</span><br><span class="line"><span class="comment">//		1.接收参数</span></span><br><span class="line">		</span><br><span class="line"><span class="comment">//		2.判断登录成功与否</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"zhao"</span>.equals(user.getUsername()) &amp;&amp; <span class="string">"123"</span>.equals(user.getPassword()))&#123;</span><br><span class="line"><span class="comment">//			登录成功后，把user保存到session中</span></span><br><span class="line">			<span class="type">ServletActionContext</span>.getRequest().getSession().setAttribute(<span class="string">"user"</span>, user);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">NONE</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	public <span class="type">User</span> getModel() &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> user;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> public <span class="class"><span class="keyword">class</span> <span class="title">TeacherAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">String</span> list()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> public <span class="class"><span class="keyword">class</span> <span class="title">StudentAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">String</span> list()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="struts2表单标签"><a href="#struts2表单标签" class="headerlink" title="struts2表单标签"></a>struts2表单标签</h3><figure class="highlight erb"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="ruby">   pageEncoding=<span class="string">"UTF-8"</span></span><span class="xml">%&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby">@taglib uri=<span class="string">"/struts-tags"</span> prefix=<span class="string">"s"</span> </span><span class="xml"><span class="tag">%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:textfield</span> <span class="attr">lable</span>=<span class="string">"用户名"</span> <span class="attr">name</span>=<span class="string">"username"</span> &gt;</span><span class="tag">&lt;/<span class="name">s:textfield</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:password</span> <span class="attr">lable</span>=<span class="string">"密码"</span> <span class="attr">name</span>=<span class="string">"password"</span> &gt;</span><span class="tag">&lt;/<span class="name">s:password</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:file</span> <span class="attr">label</span>=<span class="string">"图片"</span> <span class="attr">name</span>=<span class="string">"photo"</span> &gt;</span><span class="tag">&lt;/<span class="name">s:file</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">s:submit</span> <span class="attr">value</span>=<span class="string">"上传"</span>&gt;</span><span class="tag">&lt;/<span class="name">s:submit</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">s:form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="文件上传Struts2-xml核心配置"><a href="#文件上传Struts2-xml核心配置" class="headerlink" title="文件上传Struts2.xml核心配置"></a>文件上传Struts2.xml核心配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置国际化 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.custom.i18n.resources"</span> <span class="attr">value</span>=<span class="string">"fileUploadmessage"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置最大的文件上传大小为20M --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.multipart.maxSize"</span> <span class="attr">value</span>=<span class="string">"20971520"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"upload"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UploadAction"</span> <span class="attr">method</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 默认拦截器defaultStack下有其子类fileUpload类</span></span><br><span class="line"><span class="comment">				其有属性allowedTypes及MIME类型【文件类型-image/png,image/jpeg,image/bmp】 </span></span><br><span class="line"><span class="comment">				其有属性allowedExtensions及MIME可扩展名【文件扩展名.png,.jpeg,.bmp】 </span></span><br><span class="line"><span class="comment">				下面方法为依赖注入--&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"fileUpload.allowedTypes"</span>&gt;</span>image/png,image/jpeg,image/bmp<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"fileUpload.allowedExtensions"</span>&gt;</span>.jpeg,jpg,png<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="文件上传properties文件"><a href="#文件上传properties文件" class="headerlink" title="文件上传properties文件"></a>文件上传properties文件</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">struts<span class="selector-class">.messages</span><span class="selector-class">.error</span>.uploading=Error uploading: &#123;<span class="number">0</span>&#125;</span><br><span class="line">struts<span class="selector-class">.messages</span><span class="selector-class">.error</span><span class="selector-class">.file</span><span class="selector-class">.too</span>.large=The file is to large to be uploaded: &#123;<span class="number">0</span>&#125; <span class="string">"&#123;1&#125;"</span> <span class="string">"&#123;2&#125;"</span> &#123;<span class="number">3</span>&#125;</span><br><span class="line">struts<span class="selector-class">.messages</span><span class="selector-class">.error</span><span class="selector-class">.content</span><span class="selector-class">.type</span><span class="selector-class">.not</span>.allowed=&#123;<span class="number">3</span>&#125;\u6587\u4EF6\u7C7B\u578B\u4E0D\u6B63\u786E\uFF1: &#123;<span class="number">0</span>&#125; <span class="string">"&#123;1&#125;"</span> <span class="string">"&#123;2&#125;"</span> </span><br><span class="line">struts<span class="selector-class">.messages</span><span class="selector-class">.error</span><span class="selector-class">.file</span><span class="selector-class">.extension</span><span class="selector-class">.not</span>.allowed=\u6587\u4EF6\u6269\u5C55\u540D\u4E0D\u6B63\u786E: &#123;<span class="number">0</span>&#125; <span class="string">"&#123;1&#125;"</span> <span class="string">"&#123;2&#125;"</span> &#123;<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<h4 id="文件下载Action"><a href="#文件下载Action" class="headerlink" title="文件下载Action"></a>文件下载Action</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">package com.zhao.web.action;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.ServletActionContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.interceptor.ServletRequestAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadAction</span> <span class="title">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 步骤：</span></span><br><span class="line"><span class="comment">	 * 1.写个Action</span></span><br><span class="line"><span class="comment">	 * 2.在action中写个输入流属性，提供get方法</span></span><br><span class="line"><span class="comment">	 * 3.在Action中写Download方法给inputStream赋值</span></span><br><span class="line"><span class="comment">	 * 4.添加struts配置文件</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> long serialVersionUID = 1L;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">InputStream</span> inputStream;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">InputStream</span> getInputStream() &#123;</span><br><span class="line">		<span class="keyword">return</span> inputStream;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">String</span> <span class="type">Download</span>() <span class="keyword">throws</span> <span class="type">FileNotFoundException</span>&#123;</span><br><span class="line">		<span class="comment">//1.路径</span></span><br><span class="line">		<span class="type">String</span> path = <span class="string">"F:/1.jpg"</span>;</span><br><span class="line">		<span class="comment">//2.给输入流赋值</span></span><br><span class="line">		inputStream = new <span class="type">FileInputStream</span>(path);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//3.struts中不需要自己写数据返回给客户端  以前通过outputstream返回客户端数据</span></span><br><span class="line">		<span class="keyword">return</span> <span class="type">SUCCESS</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="文件下载Struts-xml核心配置文件"><a href="#文件下载Struts-xml核心配置文件" class="headerlink" title="文件下载Struts.xml核心配置文件"></a>文件下载Struts.xml核心配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"download"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.DownloadAction"</span> <span class="attr">method</span>=<span class="string">"Download"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- stream表示已流的方式返回给客户端 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"stream"</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 读取输入流 --&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"inputName"</span>&gt;</span>inputStream<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 响应头 --&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentDisposition"</span>&gt;</span>attachment;filename=1.jpg<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 响应头类型 --&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>application/octet-stream<span class="tag">&lt;/<span class="name">param</span>&gt;</span>	</span><br><span class="line">				<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Struts2框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Struts2 框架(一)</title>
    <url>/2019/11/30/Struts2-%E6%A1%86%E6%9E%B6-%E4%B8%80/</url>
    <content><![CDATA[<h4 id="struts2框架执行流程图"><a href="#struts2框架执行流程图" class="headerlink" title="struts2框架执行流程图"></a>struts2框架执行流程图</h4><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573586858256&di=9a6128e13e4f09150bf63d78bed0bc09&imgtype=0&src=http%3A%2F%2Fstatic.zybuluo.com%2FYano%2F84bw9li87dg4p3ytl00uhq6x%2FStruts2%25E5%258E%259F%25E7%2590%2586.png" alt="流程图"></p>
<ul>
<li><p>应用流程注解</p>
<ol>
<li><p>当Web容器收到请求（HttpServletRequest）它将请求传递给一个标准的的过滤链包括（ActionContextCleanUp）过滤器。经过Other filters(SiteMesh ,etc)，需要调用FilterDispatcher核心控制器，然后它调用ActionMapper确定请求哪个Action，ActionMapper返回一个收集Action详细信息的ActionMaping对象。</p>
</li>
<li><p>FilterDispatcher将控制权委派给ActionProxy,ActionProxy调用配置管理器(ConfigurationManager) 从配置文件中读取配置信息(struts.xml)，然后创建ActionInvocation对象。</p>
</li>
<li><p>ActionInvocation在调用Action之前会依次的调用所用配置拦截器（Interceptor N）一旦执行结果返回结果字符串ActionInvocation负责查找结果字符串对应的(Result）然后执行这个Result Result会调用一些模版（JSP）来呈现页面。</p>
</li>
<li><p>拦截器(Interceptor N)会再被执行（顺序和Action执行之前相反）最后响应(HttpServletResponse)被返回在web.xml中配置的那些过滤器和核心控制器（FilterDispatcher）。</p>
</li>
</ol>
</li>
</ul>
<ol>
<li><p>导包（基本包）<br>asm-5.2、asm-commons-5.2、asm-tree-5.2：反射的替代方案。asm是小巧便捷的java字节码操控框架，它能方便的动态生成和改造java代码<br>commons-fileupload-1.3.3：上传文件<br>commons-io-2.5：对本地文件、流进行操作<br>commons-lang3-3.6：基础文件包<br>commons-logging-1.1.3：日志包<br>freemarker-2.3.23：生成各种文本：html、xml、rtf、java源代码等<br>javassist-3.20.0-GA：使java字节码操控更加简便，是一个编译java字节码的类库，提高效率<br>log4j-api-2.8.2：日志<br>ognl-3.1.15：struts2独有的标签库<br>struts2-core-2.5.13：struts2的核心包</p>
</li>
<li><p>配置Struts2核心过滤器<br>在web.xml文件中进行如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/   XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">	 <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> </span></span><br><span class="line"><span class="tag">	 <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee </span></span></span><br><span class="line"><span class="tag"><span class="string">	 http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Struts2-domo2<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意：Struts的核心控制器默认拦截以下请求<br> .action为后缀的请求<br> 没有任何后缀的请求</li>
</ul>
</li>
<li><p>编写Action</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAction</span> <span class="title">extends</span> <span class="title">ActionSupport</span> &#123;</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *Action中处理请求的方法(动作方法)一般有以下特点</span></span><br><span class="line"><span class="comment">     *访问修饰符均为public</span></span><br><span class="line"><span class="comment">     *方法的返回值一般为String(可以为void)</span></span><br><span class="line"><span class="comment">    *方法均没有参数 </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> final <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SUCCESS;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SUCCESS;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SUCCESS;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">find</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> SUCCESS;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>在src目录下创建核心配置文件struts.xml文件<br>动作访问之通配符<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"> <span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span></span><br><span class="line"><span class="xml">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="xml">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- &lt;package name="p1" extends="struts-default" namespace="/user"&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"add"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"add"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"remove"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"remove"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/remove.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"update"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/update.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"find"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"find"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/find.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span>--&gt;</span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 动作访问之通配符‘*’ 简化上面重复操作 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/user"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;1&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/</span><span class="template-variable">&#123;1&#125;</span><span class="xml">.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 两个*的通配符 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p2"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/stu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!--&lt;action name="addStu" class="com.zhao.web.action.StuAction" method="addStu"&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/addStu.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"findStu"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.StuAction"</span> <span class="attr">method</span>=<span class="string">"findStu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/findStu.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span>--&gt;</span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 下面方法访问不到 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*_*"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.StuAction"</span> <span class="attr">method</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;1&#125;</span><span class="xml"><span class="tag"><span class="string"></span></span></span><span class="template-variable">&#123;2&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/</span><span class="template-variable">&#123;2&#125;</span><span class="xml">/</span><span class="template-variable">&#123;1&#125;</span><span class="xml">.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">package</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="struts2加载文件顺序"><a href="#struts2加载文件顺序" class="headerlink" title="struts2加载文件顺序"></a>struts2加载文件顺序</h3></li>
</ol>
</li>
</ol>
<ul>
<li>struts2框架要能执行，必须先加载StrutsPrepareAndExecuteFilter.<br>在StrutsPrepareAndExecuteFilter的init方法中对Dispatcher进行了初始化.<br>在Dispatcher类中定义的init方法内就描述了struts2配置文件加载的顺序</li>
</ul>
<ol>
<li><p>default.properties文件<br> 作用:定义了struts2框架中所有常量<br> 位置: org/apache/struts2/default.properties </p>
</li>
<li><p>struts-default.xml<br> 作用:配置了bean,interceptor,result等。<br> 位置:在struts的core核心jar包. </p>
</li>
<li><p>struts-plugin.xml<br> 它是struts2框架中所使用的插件的配置文件。 </p>
</li>
<li><p>struts.xml<br> 我们使struts2所使用的配置文件。</p>
</li>
<li><p>struts.properties<br> 就是可以自定义常量。</p>
</li>
<li><p>web.xml   </p>
</li>
</ol>
<ul>
<li>在Struts.xml中配置常量(后缀)<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">	"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置开发模式 可以显示跟详细的错误信息--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.devMode"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置常量  struts.action.extension表示后缀--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.action.extension"</span> <span class="attr">value</span>=<span class="string">"php"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- abstract="true"抽象 用于继承 若包有abstract="true"属性  有包继承此包即可是有所有功能</span></span><br><span class="line"><span class="comment">	          一般抽象包不声明Action --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- namespace="/" 命名空间， 访问路径，默认为空字符串</span></span><br><span class="line"><span class="comment">	      可有用于模块划分--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;package name="p1" extends="struts-default" namespace="/" abstract="true"&gt; --&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.zhao.web.action.HelloAction"</span> <span class="attr">method</span>=<span class="string">"sayHello"</span>&gt;</span></span><br><span class="line">  			<span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">  		<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在struts.properties中配置常量<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">struts.action.extension</span>=asp</span><br></pre></td></tr></table></figure>
<ul>
<li>log4j.xml文件<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d %-5p [%t] %C</span></span></span><span class="template-variable">&#123;2&#125;</span><span class="xml"><span class="tag"><span class="string"> (%F:%L) - %m%n"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFile"</span> <span class="attr">fileName</span>=<span class="string">"logs/strutslog1.log"</span></span></span></span><br><span class="line"><span class="xml">                    filePattern="logs/$$</span><span class="template-variable">&#123;date:yyyy-MM&#125;</span><span class="xml">/app-%d</span><span class="template-variable">&#123;MM-dd-yyyy&#125;</span><span class="xml">-%i.log.gz"&gt;</span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">PatternLayout</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d</span><span class="template-variable">&#123;MM-dd-yyyy&#125;</span><span class="xml"> %p %c</span><span class="template-variable">&#123;1.&#125;</span><span class="xml"> [%t] -%M-%L- %m%n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> /&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"1 KB"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">fileIndex</span>=<span class="string">"max"</span> <span class="attr">max</span>=<span class="string">"2"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"com.opensymphony.xwork2"</span> <span class="attr">level</span>=<span class="string">"WAN"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.struts2"</span> <span class="attr">level</span>=<span class="string">"WAN"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"warn"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="结果集"><a href="#结果集" class="headerlink" title="结果集"></a>结果集</h3></li>
</ul>
</li>
<li>自定义结果集  继承 StrutsResultSupport<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义结果集</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Cqudate</span> <span class="keyword">extends</span> <span class="title">StrutsResultSupport</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> void doExecute(<span class="type">String</span> arg0, <span class="type">ActionInvocation</span> arg1) <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">```              </span><br><span class="line">* struts.xml文件</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE struts PUBLIC
  "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
  "http://struts.apache.org/dtds/struts-2.3.dtd">

</li>
</ul>
<struts>
<!-- 配置开发模式 可以显示跟详细的错误信息-->
    <constant name="struts.devMode" value="true"></constant>
    <!-- 全局结果集视图 继承 声明抽象类属性-->
    <package name="MyResult" extends="struts-default" abstract="true">
            <result-types>
                    <result-type name="captche" class="/Struts2-domo3/src/com/zhao/web/result/Cqudate">
                    </result-type>
            </result-types>
    </package>


</struts>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">### 获取servlet 的api方式</span><br><span class="line">* 通过SrevletActionContext</span><br></pre></td></tr></table></figure>
public class TestAction extends ActionSupport {


<pre><code>/**
 * 
 */
private static final long serialVersionUID = 1L;

public String text() {
    // 获取servlet 的api方式</code></pre><p> //        第一种方式：通过SrevletActionContext<br> //        1.response<br>        HttpServletResponse  response = ServletActionContext.getResponse();<br> //        2.request<br>        HttpServletRequest request = ServletActionContext.getRequest();<br> //        3.session<br>        HttpSession session =request.getSession();</p>
<p> //        4.application(sercletContext)<br>        ServletContext context = ServletActionContext.getServletContext();<br> //        NONE不跳转，不去找result标签<br>        System.out.println(response);<br>        System.out.println(request);<br>        System.out.println(session);<br>        System.out.println(context);</p>
<p> //        org.apache.struts2.dispatcher.StrutsRequestWrapper@34374916 ruquest 属于<br> //        org.apache.catalina.session.StandardSessionFacade@40e7fb20  属于Tomcat<br> //        org.apache.catalina.core.ApplicationContextFacade@20dc66ff 属于Tomcat<br> //        org.apache.catalina.connector.ResponseFacade@5973cd44 属于Tomcat</p>
<pre><code>    return NONE;
}</code></pre><p>}</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>通过实现ServletRequestAware接口，让Struts自动注入</span><br></pre></td></tr></table></figure>
<p> public class Test2Action extends ActionSupport implements ServletRequestAware{</p>
<pre><code>private static final long serialVersionUID = 1L;
HttpServletResponse  response;
HttpServletRequest request;
public String text() {
    // 获取servlet 的api方式</code></pre><p> //        第二种方式：通过实现接口，让Struts自动注入<br> //        Aware :注入，调用方法，注入参数<br> //        1.response<br>        HttpServletResponse  response = ServletActionContext.getResponse();<br> //        request<br>        HttpServletRequest request = ServletActionContext.getRequest();<br> //        session</p>
<p> //        application(sercletContext)</p>
<pre><code>System.out.println(response);
System.out.println(request);

return NONE;</code></pre><p> //        NONE不跳转，不去找result标签<br>    }<br>    @Override<br>    public void setServletRequest(HttpServletRequest request) {<br>        // TODO Auto-generated method stub<br>        this.request = request;<br>    }</p>
<p>}</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>struts.xml</span><br></pre></td></tr></table></figure>
 <?xml version="1.0" encoding="UTF-8" ?>
 <!DOCTYPE struts PUBLIC
    "-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"
    "http://struts.apache.org/dtds/struts-2.3.dtd">

 <struts>
 <!-- 配置开发模式 可以显示跟详细的错误信息-->
    <constant name="struts.devMode" value="true"></constant>

<pre><code>&lt;package name=&quot;p1&quot; extends=&quot;struts-default&quot; namespace=&quot;/&quot;&gt;
        &lt;action name=&quot;test&quot; class=&quot;com.zhao.web.action.TestAction&quot; method=&quot;text&quot;&gt;
        &lt;/action&gt;
        &lt;action name=&quot;test2&quot; class=&quot;com.zhao.web.action.Test2Action&quot; method=&quot;text&quot;&gt;
        &lt;/action&gt;
&lt;/package&gt;</code></pre> </struts>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">### 获取请求参数</span><br><span class="line">* 实体类</span><br></pre></td></tr></table></figure>
 public class User {
    private String username;
    private String password;
    public String getUsername() {
        return username;
    }
    public void setUsername(String username) {
        this.username = username;
    }
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    @Override
    public String toString() {
        return "User [username=" + username + ", password=" + password + "]";
    }

<p> }</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">* <span class="number">1.</span> Action获取请求参数两种方式：ServletActionContext</span><br></pre></td></tr></table></figure>
<pre><code> public class LoginAction extends ActionSupport {

    private String username;
    private String password;
    public void setUsername(String username) {
        System.out.println(&quot;setUsername&quot;);
        this.username = username;
    }

    public void setPassword(String password) {
        System.out.println(&quot;SetPassword&quot;);
        this.password = password;
    }


    public String login() throws Exception {
 //        获取求参数
 //        第一种方式：ServletActionContext
 //        HttpServletRequest request = ServletActionContext.getRequest();
 //        String username = request.getParameter(&quot;username&quot;);
 //        String password = request.getParameter(&quot;password&quot;);


 //        第二种方式：通过属性的Set注入

        System.out.println(username);
        System.out.println(password);
        HttpServletResponse response = ServletActionContext.getResponse();

        return NONE;
    }

}</code></pre><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>前端页面login.jsp</span><br></pre></td></tr></table></figure>
<pre><code>&lt;form action=&quot;${pageContext.request.contextPath }/login.action&quot;&gt;
    用户名：&lt;input name=&quot;username&quot; type=&quot;text&quot;/&gt;&lt;br&gt;
    密&amp;emsp;码：&lt;input name=&quot;password&quot; type=&quot;password&quot;/&gt;&lt;br&gt;
    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;
&lt;/form&gt;</code></pre> <figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">* 第三种方式：<span class="keyword">set</span>模型属性注入</span><br></pre></td></tr></table></figure>
<pre><code>public class LoginSetModelAction extends ActionSupport {
//    获取请求参数
//    第三种方式：set模型属性注入
   private User user;
   public User getUser() {
       System.out.println(&quot;getUser&quot;);
       return user;
   }

   public void setUser(User user) {
       System.out.println(&quot;setUser&quot;);
       this.user = user;
   }

   public String login(){
       System.out.println(user);
       return NONE;
   }
}</code></pre><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">* 前端页面<span class="module-access"><span class="module"><span class="identifier">LoginSetModel</span>.</span></span>jsp</span><br></pre></td></tr></table></figure>
 <form action="${pageContext.request.contextPath }/LoginSetModel.action">
    用户名：<input name="user.username" type="text"/><br>
    密&emsp;码：<input name="user.password" type="user.password"/><br>
    <input type="submit" value="登录"/>
 </form>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">* 第四种方式：通过模型注入，在action里实现一个模型驱动接口ModelDriven<span class="tag">&lt;<span class="name">User</span>&gt;</span></span><br></pre></td></tr></table></figure>
    public class LoginModelAction extends ActionSupport implements ModelDriven<User>{
        /** 第四种方式：通过模型注入，在action里实现一个模型驱动接口
         *  提供一个模型属性，并一定要赋值
         *  通过这种方式，不用在jsp页面写user.
         *  
         */
        private User user = new User();
        @Override
        public User getModel() {
            // TODO Auto-generated method stub
            return user;
        }
        public String login(){
            System.out.println(user);
            return NONE;
        }

<pre><code>}</code></pre><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>前端页面modellogin.jsp</span><br></pre></td></tr></table></figure>
 <form action="${pageContext.request.contextPath }/Model.action">
    用户名：<input name="username" type="text"/><br>
    密&emsp;码：<input name="password" type="password"/><br>
    <input type="submit" value="登录"/>
 </form>
```]]></content>
      <tags>
        <tag>Struts2框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Servlect+Jsp实现账户管理</title>
    <url>/2019/11/26/Servlect-Jsp%E5%AE%9E%E7%8E%B0%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="Servlet-jsp增删改查-分页"><a href="#Servlet-jsp增删改查-分页" class="headerlink" title="Servlet+jsp增删改查+分页"></a>Servlet+jsp增删改查+分页</h3><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><h4 id="1-创建JavaBean实体类"><a href="#1-创建JavaBean实体类" class="headerlink" title="1. 创建JavaBean实体类"></a>1. 创建JavaBean实体类</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> pwd;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">String</span> name, <span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> pwd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(<span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", pwd="</span> + pwd + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-创建JDBC工具类"><a href="#2-创建JDBC工具类" class="headerlink" title="2. 创建JDBC工具类"></a>2. 创建JDBC工具类</h4><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JDBCUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">	e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	Connection conn = <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/t_user?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai"</span>,</span><br><span class="line">				<span class="string">"root"</span>,<span class="string">"zhao1314520"</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;<span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span>(<span class="params">Connection conn, PreparedStatement pstm,ResultSet rs</span>)</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(rs!=<span class="literal">null</span>) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			rs.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(pstm!=<span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				pstm.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(conn!=<span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					conn.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span>(<span class="params">Connection conn, PreparedStatement pstm</span>)</span> &#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(pstm!=<span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				pstm.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(conn!=<span class="literal">null</span>) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					conn.close();</span><br><span class="line">				&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-创建数据持久层Dao"><a href="#3-创建数据持久层Dao" class="headerlink" title="3. 创建数据持久层Dao"></a>3. 创建数据持久层Dao</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.zhao.dao;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.zhao.entity.User;</span><br><span class="line">import com.zhao.util.JDBCUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public <span class="keyword">class</span> UserDao &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//登录</span></span><br><span class="line">	public User login(User u) &#123;</span><br><span class="line">		User user =null;</span><br><span class="line">		ResultSet rs = null;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">	</span><br><span class="line">		String sql = <span class="string">"select * from user where name=? &amp;&amp; pwd=?"</span>;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">		</span><br><span class="line">			pstm.set<span class="constructor">String(1,<span class="params">u</span>.<span class="params">getName</span>()</span>);</span><br><span class="line">			pstm.set<span class="constructor">String(2,<span class="params">u</span>.<span class="params">getPwd</span>()</span>);</span><br><span class="line">			rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">if</span>(rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">				user = <span class="keyword">new</span> <span class="constructor">User(<span class="params">rs</span>.<span class="params">getInt</span>(1)</span>,rs.get<span class="constructor">String(2)</span>,rs.get<span class="constructor">String(3)</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; catch (SQLException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">	&#125;finally &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn,pstm,rs);</span><br><span class="line">	&#125;</span><br><span class="line">	return user;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//注册</span></span><br><span class="line">	public <span class="built_in">int</span> add<span class="constructor">User(User <span class="params">u</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//User user =null;</span></span><br><span class="line">		<span class="built_in">int</span> num =<span class="number">0</span>;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">	</span><br><span class="line">		String sql = <span class="string">"insert into user(name,pwd)value(?,?)"</span>;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">		</span><br><span class="line">			pstm.set<span class="constructor">String(1,<span class="params">u</span>.<span class="params">getName</span>()</span>);</span><br><span class="line">			pstm.set<span class="constructor">String(2,<span class="params">u</span>.<span class="params">getPwd</span>()</span>);</span><br><span class="line">			num = pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">		</span><br><span class="line">			<span class="comment">//if(num == 1) &#123;</span></span><br><span class="line">				<span class="comment">//user = new User(num.getInt(1),num.getString(2),num.getString(3));</span></span><br><span class="line">		<span class="comment">//&#125;</span></span><br><span class="line">	&#125; catch (SQLException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">	&#125;finally &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn,pstm);</span><br><span class="line">	&#125;</span><br><span class="line">		return num;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//查询User列表</span></span><br><span class="line">	public List&lt;User&gt; find<span class="constructor">All()</span>&#123;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		ResultSet rs = null;</span><br><span class="line">		<span class="comment">//创建集合</span></span><br><span class="line">		List&lt;User&gt; userlist = <span class="keyword">new</span> ArrayList&lt;User&gt;<span class="literal">()</span>;</span><br><span class="line">		String sql=<span class="string">"select * from user"</span>;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">      		rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">      		</span><br><span class="line">      		<span class="keyword">while</span>(rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">      			<span class="built_in">int</span> id = rs.get<span class="constructor">Int(1)</span>;</span><br><span class="line">      			String name = rs.get<span class="constructor">String(2)</span>;</span><br><span class="line">      			String pwd = rs.get<span class="constructor">String(3)</span>;</span><br><span class="line">      			userlist.add(<span class="keyword">new</span> <span class="constructor">User(<span class="params">id</span>,<span class="params">name</span>,<span class="params">pwd</span>)</span>);</span><br><span class="line">      		&#125;</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn,pstm,rs);</span><br><span class="line">		&#125;</span><br><span class="line">		return userlist;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">	public <span class="built_in">int</span> del<span class="constructor">ById(<span class="params">int</span> <span class="params">id</span>)</span> &#123;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		<span class="built_in">int</span> num = <span class="number">0</span> ;</span><br><span class="line">		String sql=<span class="string">"delete from user where id=?"</span>;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			pstm.set<span class="constructor">Int(1,<span class="params">id</span>)</span>;</span><br><span class="line">      		num  = pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn,pstm);</span><br><span class="line">		&#125;</span><br><span class="line">		return num ;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//更新</span></span><br><span class="line">	public <span class="built_in">int</span> user<span class="constructor">Update(User <span class="params">user</span>)</span> &#123;</span><br><span class="line">		<span class="built_in">int</span> num = <span class="number">0</span>;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		String sql=<span class="string">"update user set name=?,pwd=? where id=?"</span>;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			<span class="comment">// 这里的1,2..必须要按上面的新增的顺序来定义</span></span><br><span class="line">			pstm.set<span class="constructor">String(1,<span class="params">user</span>.<span class="params">getName</span>()</span>);</span><br><span class="line">			pstm.set<span class="constructor">String(2, <span class="params">user</span>.<span class="params">getPwd</span>()</span>);</span><br><span class="line">			pstm.set<span class="constructor">Int(3,<span class="params">user</span>.<span class="params">getId</span>()</span>);</span><br><span class="line">			</span><br><span class="line">      		num = pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">      	</span><br><span class="line">      		</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn,pstm);</span><br><span class="line">		&#125;</span><br><span class="line">		return num;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//根据条件查询列表页面检索</span></span><br><span class="line">	public List&lt;User&gt; select<span class="constructor">All(User <span class="params">user</span>,<span class="params">int</span> <span class="params">pageNum</span>,<span class="params">int</span> <span class="params">pageSize</span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">//创建集合</span></span><br><span class="line">		List&lt;User&gt; userlist = <span class="keyword">new</span> ArrayList&lt;User&gt;<span class="literal">()</span>;</span><br><span class="line">		List&lt;Object&gt; parList = <span class="keyword">new</span> ArrayList&lt;Object&gt;<span class="literal">()</span>;</span><br><span class="line">		</span><br><span class="line">		String sql=<span class="string">"select id,name,pwd from user where 1=1"</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(user.get<span class="constructor">Id()</span> != <span class="number">0</span>) &#123;</span><br><span class="line">			sql = sql + <span class="string">" and id=?"</span>;</span><br><span class="line">			parList.add(user.get<span class="constructor">Id()</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(user.get<span class="constructor">Name()</span> != null<span class="operator"> &amp;&amp; </span>!<span class="string">""</span>.equals(user.get<span class="constructor">Name()</span>)) &#123;</span><br><span class="line">			sql = sql + <span class="string">" and name like ?"</span>;</span><br><span class="line">			parList.add(user.get<span class="constructor">Name()</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		sql = sql + <span class="string">" limit "</span>+(pageNum-<span class="number">1</span>)*pageSize+<span class="string">","</span>+pageSize;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(sql);</span><br><span class="line">		</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		ResultSet rs = null;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			for(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt; parList.size<span class="literal">()</span>;i++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(i==<span class="number">0</span><span class="operator"> &amp;&amp; </span>user.get<span class="constructor">Id()</span>!=<span class="number">0</span>) &#123;</span><br><span class="line">					pstm.set<span class="constructor">Int(1, <span class="params">user</span>.<span class="params">getId</span>()</span>);</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="comment">//不懂请教老师</span></span><br><span class="line">					pstm.set<span class="constructor">String(<span class="params">i</span>+1, <span class="string">"%"</span>+(String)</span>parList.get(i)+<span class="string">"%"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">      		rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">      		</span><br><span class="line">      		<span class="keyword">while</span>(rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">      			<span class="built_in">int</span> id = rs.get<span class="constructor">Int(1)</span>;</span><br><span class="line">      			String name = rs.get<span class="constructor">String(2)</span>;</span><br><span class="line">      			String pwd =rs.get<span class="constructor">String(3)</span>;</span><br><span class="line">      		<span class="comment">// 将当前行的数据封装到user对象中，然后将user对象保存到userList集合中</span></span><br><span class="line">      			userlist.add(<span class="keyword">new</span> <span class="constructor">User(<span class="params">id</span>,<span class="params">name</span>,<span class="params">pwd</span>)</span>);</span><br><span class="line">      		&#125;</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;</span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn,pstm,rs);</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(userlist);</span><br><span class="line">		return userlist;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//单条记录详情</span></span><br><span class="line">	public User find<span class="constructor">ById(<span class="params">int</span> <span class="params">id</span>)</span> &#123;</span><br><span class="line">		User user = null;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		ResultSet rs = null;</span><br><span class="line">		Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line">		String sql = <span class="string">"select id,name,pwd  from user where id=?"</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			pstm.set<span class="constructor">Int(1,<span class="params">id</span>)</span>;</span><br><span class="line">			rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">			<span class="keyword">while</span>(rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">				<span class="comment">//此处int uid = rs.getInt(1); 用SQL语句索引也行</span></span><br><span class="line">				<span class="comment">//但是若用字段名称必须是String型</span></span><br><span class="line">				<span class="comment">//若是变量会报异常SQLExecption  column Index</span></span><br><span class="line">				<span class="built_in">int</span> uid = rs.get<span class="constructor">Int(<span class="string">"id"</span>)</span>;</span><br><span class="line">				String name = rs.get<span class="constructor">String(2)</span>;</span><br><span class="line">				String pwd = rs.get<span class="constructor">String(3)</span>;</span><br><span class="line">				</span><br><span class="line">				user = <span class="keyword">new</span> <span class="constructor">User(<span class="params">uid</span>,<span class="params">name</span>,<span class="params">pwd</span>)</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		return user;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 查询记录总数</span></span><br><span class="line">	public <span class="built_in">int</span> total<span class="constructor">Count(User <span class="params">user</span>)</span> &#123;</span><br><span class="line">			<span class="built_in">int</span> total = <span class="number">0</span>;</span><br><span class="line">			List&lt;Object&gt; parList = <span class="keyword">new</span> ArrayList&lt;Object&gt;<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 声明变量</span></span><br><span class="line">			String sql = <span class="string">"select count(id) from user where 1=1"</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 判断条件是否为空</span></span><br><span class="line">			<span class="keyword">if</span> (user.get<span class="constructor">Id()</span> != <span class="number">0</span>) &#123;</span><br><span class="line">				sql = sql+<span class="string">" and id=?"</span>;</span><br><span class="line">				parList.add(user.get<span class="constructor">Id()</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(user.get<span class="constructor">Name()</span> != null<span class="operator"> &amp;&amp; </span>!<span class="string">""</span>.equals(user.get<span class="constructor">Name()</span>)) &#123;</span><br><span class="line">				sql=sql+<span class="string">" and name like ?"</span>;</span><br><span class="line">				parList.add(user.get<span class="constructor">Name()</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line">			PreparedStatement stm = null;</span><br><span class="line">			ResultSet rs = null;</span><br><span class="line">			<span class="comment">// 获取连接</span></span><br><span class="line">			Connection conn = <span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>get<span class="constructor">Connection()</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">// 预编译sql</span></span><br><span class="line">				stm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">				<span class="comment">//设置参数</span></span><br><span class="line">				for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; parList.size<span class="literal">()</span>; i++) &#123;</span><br><span class="line">					<span class="keyword">if</span>(i==<span class="number">0</span> &amp; user.get<span class="constructor">Id()</span>!=<span class="number">0</span>) &#123;</span><br><span class="line">						stm.set<span class="constructor">Int(1, <span class="params">user</span>.<span class="params">getId</span>()</span>);</span><br><span class="line">					&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">						stm.set<span class="constructor">String(<span class="params">i</span>+1, <span class="string">"%"</span>+(String)</span>parList.get(i)+<span class="string">"%"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// 执行sql,返回结果集</span></span><br><span class="line">				rs = stm.execute<span class="constructor">Query()</span>;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// 获取结果集中的数据</span></span><br><span class="line">				<span class="keyword">while</span> (rs.next<span class="literal">()</span>) &#123;</span><br><span class="line">					<span class="comment">// 获取当前行的数据</span></span><br><span class="line">					total = rs.get<span class="constructor">Int(1)</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125; catch (SQLException e) &#123;</span><br><span class="line">				e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">			&#125; finally &#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">JDBCUtils</span>.</span></span>close(conn, stm, rs);</span><br><span class="line">			&#125;</span><br><span class="line">			return total;</span><br><span class="line">		&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-创建业务层Service"><a href="#4-创建业务层Service" class="headerlink" title="4. 创建业务层Service"></a>4. 创建业务层Service</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zhao.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.zhao.entity.<span class="keyword">User</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> UserService &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> UserDao userDao = <span class="built_in">new</span> UserDao();</span><br><span class="line">	</span><br><span class="line">	//登录</span><br><span class="line">	<span class="built_in">public</span> <span class="keyword">User</span> <span class="keyword">login</span>(<span class="keyword">User</span> <span class="keyword">user</span>) &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> userDao.<span class="keyword">login</span>(<span class="keyword">user</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	//添加/注册</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> addUser(<span class="keyword">User</span> <span class="keyword">user</span>) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">return</span> userDao.addUser(<span class="keyword">user</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	//查询</span><br><span class="line">	<span class="built_in">public</span> List&lt;<span class="keyword">User</span>&gt; findAll()&#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.findAll();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//删除</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> delById(<span class="type">int</span> id) &#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.delById(id);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	//更新</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> userUpdate(<span class="keyword">User</span> <span class="keyword">user</span>) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">		<span class="keyword">return</span> userDao.userUpdate(<span class="keyword">user</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//详情记录</span><br><span class="line">	<span class="built_in">public</span> <span class="keyword">User</span> findById(<span class="type">int</span> id) &#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.findById(id);</span><br><span class="line">	&#125; </span><br><span class="line">	</span><br><span class="line">	//<span class="keyword">user</span>列表检索</span><br><span class="line">	<span class="built_in">public</span> List&lt;<span class="keyword">User</span>&gt; selectAll(<span class="keyword">User</span> <span class="keyword">user</span>,<span class="type">int</span> pageNum,<span class="type">int</span> pageSize)&#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.selectAll(<span class="keyword">user</span>,pageNum,pageSize);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> totalCount(<span class="keyword">User</span> <span class="keyword">user</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> userDao.totalCount(<span class="keyword">user</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-创建控制层Controller"><a href="#5-创建控制层Controller" class="headerlink" title="5. 创建控制层Controller"></a>5. 创建控制层Controller</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package com.zhao.controller;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">import com.zhao.entity.User;</span><br><span class="line">import com.zhao.service.UserService;</span><br><span class="line"></span><br><span class="line">@<span class="constructor">WebServlet(<span class="string">"/UserController"</span>)</span></span><br><span class="line">public <span class="keyword">class</span> UserController extends HttpServlet &#123;</span><br><span class="line">	<span class="keyword">private</span> static final long serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    public <span class="constructor">UserController()</span> &#123;</span><br><span class="line">        super<span class="literal">()</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public UserService userService = <span class="keyword">new</span> <span class="constructor">UserService()</span>;</span><br><span class="line">	protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//设置编码</span></span><br><span class="line">		request.set<span class="constructor">CharacterEncoding(<span class="string">"utf-8"</span>)</span>;</span><br><span class="line">		response.set<span class="constructor">CharacterEncoding(<span class="string">"utf-8"</span>)</span>;</span><br><span class="line">		<span class="comment">//获取请求方法参数</span></span><br><span class="line">		String <span class="keyword">method</span> = request.get<span class="constructor">Parameter(<span class="string">"method"</span>)</span>;</span><br><span class="line">		<span class="comment">//判断登录方法</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"login"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			</span><br><span class="line">			login(request,response);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"addUser"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			</span><br><span class="line">			add<span class="constructor">User(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"findAll"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			<span class="comment">//alt+shift+l以及alt+shift+m：提取本地变量及方法</span></span><br><span class="line">			find<span class="constructor">All(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"delById"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			</span><br><span class="line">			del<span class="constructor">ById(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"userUpdate"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			user<span class="constructor">Update(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"findById"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			find<span class="constructor">ById(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"selectAll"</span>.equals(<span class="keyword">method</span>))&#123;</span><br><span class="line">			select<span class="constructor">All(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			response.get<span class="constructor">Writer()</span>.append(<span class="string">"error"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//user列表检索</span></span><br><span class="line">	<span class="keyword">private</span> void select<span class="constructor">All(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span></span><br><span class="line">			throws ServletException, IOException &#123;</span><br><span class="line">		String id = request.get<span class="constructor">Parameter(<span class="string">"id"</span>)</span>;</span><br><span class="line">		String name = request.get<span class="constructor">Parameter(<span class="string">"name"</span>)</span>;</span><br><span class="line">		String pwd = request.get<span class="constructor">Parameter(<span class="string">"pwd"</span>)</span>;</span><br><span class="line">		String pageNum = request.get<span class="constructor">Parameter(<span class="string">"pageNum"</span>)</span>;</span><br><span class="line">		String pageSize = request.get<span class="constructor">Parameter(<span class="string">"pageSize"</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">int</span> num = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">int</span> size = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(pageNum!=null<span class="operator"> &amp;&amp; </span>!<span class="string">""</span>.equals(pageNum)) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">			num = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">pageNum</span>)</span>;</span><br><span class="line">			&#125;catch (Exception e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">			num=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(pageSize !=null<span class="operator"> &amp;&amp; </span>!<span class="string">""</span>.equals(pageSize)) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">			size = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">pageSize</span>)</span>;</span><br><span class="line">			&#125;catch (Exception e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">			size=<span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(num+<span class="string">","</span>+size);</span><br><span class="line">		<span class="comment">//int num = Integer.parseInt(pageNum);</span></span><br><span class="line">		<span class="comment">//int size = Integer.parseInt(pageSize);</span></span><br><span class="line">		<span class="built_in">int</span> uid = <span class="number">0</span>;  </span><br><span class="line">		<span class="keyword">if</span>(id!=null<span class="operator"> &amp;&amp; </span>!<span class="string">""</span>.equals(id)) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">			uid = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">id</span>)</span>;</span><br><span class="line">			&#125;catch (Exception e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">			uid=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		User user  = <span class="keyword">new</span> <span class="constructor">User(<span class="params">uid</span>,<span class="params">name</span>,<span class="params">pwd</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//调用service层</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//查询记录总数</span></span><br><span class="line">		<span class="built_in">int</span> total =  userService.total<span class="constructor">Count(<span class="params">user</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//计算总页数</span></span><br><span class="line">		 <span class="built_in">int</span> pageCount =  total%size==<span class="number">0</span>? total/size:total/size+<span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">		 <span class="keyword">if</span>(num&lt;<span class="number">1</span>) &#123;<span class="comment">//页码超过最小值</span></span><br><span class="line">			 num=<span class="number">1</span>;</span><br><span class="line">		 &#125;</span><br><span class="line">		 <span class="keyword">if</span>(num&gt;pageCount) &#123;<span class="comment">//页码超过最大值</span></span><br><span class="line">			 num=pageCount;</span><br><span class="line">		 &#125;</span><br><span class="line">		 <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(size);</span><br><span class="line">		 </span><br><span class="line">		<span class="comment">//返回数据列表selectAll(user,num,size)参数传值要与Dao层相呼应</span></span><br><span class="line">		List&lt;User&gt;  userList =  userService.select<span class="constructor">All(<span class="params">user</span>,<span class="params">num</span>,<span class="params">size</span>)</span>;</span><br><span class="line">		<span class="comment">//将查询到的userList集合转发到userList.jsp页面上</span></span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"userlist"</span>, <span class="params">userList</span>)</span>;</span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"condition"</span>, <span class="params">user</span>)</span>;</span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"pageNum"</span>, <span class="params">num</span>)</span>;</span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"pageSize"</span>, <span class="params">size</span>)</span>;</span><br><span class="line">		request.get<span class="constructor">RequestDispatcher(<span class="string">"userList.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//详情查询</span></span><br><span class="line">	<span class="keyword">private</span> void find<span class="constructor">ById(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span></span><br><span class="line">			throws ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//获取请求参数</span></span><br><span class="line">		String id = request.get<span class="constructor">Parameter(<span class="string">"id"</span>)</span>;</span><br><span class="line">		<span class="comment">//调用service层方法</span></span><br><span class="line">		User user = userService.find<span class="constructor">ById(Integer.<span class="params">parseInt</span>(<span class="params">id</span>)</span>);</span><br><span class="line">		<span class="keyword">if</span>(user != null) &#123;</span><br><span class="line">			<span class="comment">//把user对象放到request域</span></span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"user"</span>, <span class="params">user</span>)</span>;</span><br><span class="line">			<span class="comment">//转发到addUpdate页面</span></span><br><span class="line">			request.get<span class="constructor">RequestDispatcher(<span class="string">"addUpdate.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"msg"</span>, <span class="string">"没得详情记录！"</span>)</span>;</span><br><span class="line">			find<span class="constructor">All(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">	<span class="keyword">private</span> void del<span class="constructor">ById(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> </span><br><span class="line">		throws ServletException, IOException&#123;</span><br><span class="line">		<span class="comment">//获取传入的id值</span></span><br><span class="line">				String id = request.get<span class="constructor">Parameter(<span class="string">"id"</span>)</span>; </span><br><span class="line">				<span class="comment">//强制转换id为int类型</span></span><br><span class="line">				<span class="built_in">int</span> i = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">id</span>)</span>;</span><br><span class="line">				<span class="comment">//调用service层</span></span><br><span class="line">				<span class="built_in">int</span> num = userService.del<span class="constructor">ById(<span class="params">i</span>)</span>;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span>(num<span class="operator"> == </span><span class="number">0</span>) &#123;</span><br><span class="line">					request.set<span class="constructor">Attribute(<span class="string">"msg"</span>, <span class="string">"删除失败"</span>)</span>;</span><br><span class="line">				&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">					request.set<span class="constructor">Attribute(<span class="string">"msg"</span>, <span class="string">"删除成功"</span>)</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//跳转到user列表</span></span><br><span class="line">				find<span class="constructor">All(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//更新</span></span><br><span class="line">	<span class="keyword">private</span> void user<span class="constructor">Update(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span></span><br><span class="line">			throws ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//获取id</span></span><br><span class="line">		String id =  request.get<span class="constructor">Parameter(<span class="string">"id"</span>)</span>;</span><br><span class="line">		String name = request.get<span class="constructor">Parameter(<span class="string">"name"</span>)</span>;</span><br><span class="line">		String pwd = request.get<span class="constructor">Parameter(<span class="string">"pwd"</span>)</span>;</span><br><span class="line">		<span class="built_in">int</span> uid = <span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span>parse<span class="constructor">Int(<span class="params">id</span>)</span>;</span><br><span class="line">		User user = <span class="keyword">new</span> <span class="constructor">User(<span class="params">uid</span>,<span class="params">pwd</span>,<span class="params">pwd</span>)</span>;</span><br><span class="line">		 <span class="built_in">int</span> num = userService.user<span class="constructor">Update(<span class="params">user</span>)</span>;</span><br><span class="line">		<span class="comment">//判断user是否为空</span></span><br><span class="line">		<span class="keyword">if</span>(num != <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="comment">//将查询到的user对象转发到详情页面</span></span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"user"</span>, <span class="params">user</span>)</span>;</span><br><span class="line">			request.get<span class="constructor">RequestDispatcher(<span class="string">"addUser.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"msg"</span>, <span class="string">"没有详情"</span>)</span>;</span><br><span class="line">			find<span class="constructor">All(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//编码的时候出现了java.lang.NumberFormatException: null，at java.lang.Integer.parseInt(Integer.java:415)at java.lang.Integer.valueOf(Integer.java:553)。刚开始还一直以为我类型转换错误呢。</span></span><br><span class="line">		<span class="comment">//原来，不够细心，在传递url值的时候忘了传递参数，或者传递错误，这样当然获取到的值为null。</span></span><br><span class="line">		<span class="comment">//比如：本来url为http://……&amp;state=1,那么传递的一个参数为state=1，获取这个参数的时候应为int state = Integer.parseInt(request.getParameter("state")).这样就不会报错，但是如果忘了在地址栏传递参数state=1,那么，也会出现java.lang.NumberFormatException: null…………的错误。</span></span><br><span class="line">        <span class="comment">//所以java.lang.NumberFormatException错误不一定是类型转换错误，也有可能是因为获取不到参数而产生的错误</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//添加|注册</span></span><br><span class="line">	<span class="comment">//alt+shift+l以及alt+shift+m：提取本地变量及方法</span></span><br><span class="line">	<span class="keyword">private</span> void add<span class="constructor">User(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span></span><br><span class="line">			throws ServletException, IOException &#123;</span><br><span class="line">		String name = request.get<span class="constructor">Parameter(<span class="string">"name"</span>)</span>;</span><br><span class="line">		String pwd = request.get<span class="constructor">Parameter(<span class="string">"pwd"</span>)</span>;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(name);</span><br><span class="line">		<span class="comment">//编码解码先获取iso8859-1字节，后编码utf-8格式</span></span><br><span class="line">		<span class="comment">//String name1 = new String(name.getBytes("iso8859-1"),"utf-8");</span></span><br><span class="line">		<span class="comment">//封装数据</span></span><br><span class="line">		User user = <span class="keyword">new</span> <span class="constructor">User(<span class="params">name</span>,<span class="params">pwd</span>)</span>;</span><br><span class="line">		<span class="built_in">int</span> num = userService.add<span class="constructor">User(<span class="params">user</span>)</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(num<span class="operator"> == </span><span class="number">1</span>) &#123;</span><br><span class="line">			<span class="comment">//添加</span></span><br><span class="line">			find<span class="constructor">All(<span class="params">request</span>,<span class="params">response</span>)</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			request.get<span class="constructor">RequestDispatcher(<span class="string">"index.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//查看账户信息</span></span><br><span class="line">	<span class="keyword">private</span> void find<span class="constructor">All(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span></span><br><span class="line">			throws ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">//调用service层方法</span></span><br><span class="line">		List&lt;User&gt; userlist = userService.find<span class="constructor">All()</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//将查询的数据userlist集合转发到userList.jsp</span></span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"userlist"</span>, <span class="params">userlist</span>)</span>;</span><br><span class="line">		request.get<span class="constructor">RequestDispatcher(<span class="string">"userList.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//登录</span></span><br><span class="line">	<span class="keyword">private</span> void login(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="comment">//获取请求参数</span></span><br><span class="line">		String name = request.get<span class="constructor">Parameter(<span class="string">"name"</span>)</span>;</span><br><span class="line">		String pwd = request.get<span class="constructor">Parameter(<span class="string">"pwd"</span>)</span>;</span><br><span class="line">		<span class="comment">//收集用户登录信息</span></span><br><span class="line">		User user = <span class="keyword">new</span> <span class="constructor">User(<span class="params">name</span>,<span class="params">pwd</span>)</span>;</span><br><span class="line">		<span class="comment">//调用业务层方法</span></span><br><span class="line">		User user1 = userService.login(user);</span><br><span class="line">		<span class="comment">//判断用户是否为空</span></span><br><span class="line">		<span class="keyword">if</span>(user1 != null) &#123;</span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"user"</span>, <span class="params">user1</span>)</span>;</span><br><span class="line">			request.get<span class="constructor">RequestDispatcher(<span class="string">"index.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">//设置提示消息</span></span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"error"</span>,<span class="string">"账户或密码错误！"</span>)</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//设置参数到request对象中</span></span><br><span class="line">			request.set<span class="constructor">Attribute(<span class="string">"user"</span>, <span class="params">user</span>)</span>;</span><br><span class="line">			<span class="comment">//转发到登陆页面</span></span><br><span class="line">			request.get<span class="constructor">RequestDispatcher(<span class="string">"login.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">		<span class="keyword">do</span><span class="constructor">Get(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="jsp页面"><a href="#jsp页面" class="headerlink" title="jsp页面"></a>jsp页面</h3><ol>
<li>登录<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"UserController?method=login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">		账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;error &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">		密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"register.jsp"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>注册<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"UserController?method=addUser"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">	账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>账号管理页面<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>表EL表达式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 页面检索 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"UserController?method=selectAll"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		ID:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"&lt;c:if test="</span>$</span></span><span class="template-variable">&#123;condition.id != 0&#125;</span><span class="xml"><span class="tag">"&gt;</span>$</span><span class="template-variable">&#123;condition.id&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">c:if</span>&gt;</span>"&gt;</span></span><br><span class="line"><span class="xml">		账号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;condition.name &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"搜索"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"register.jsp"</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1px"</span><span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>账号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;userlist&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">var</span>=<span class="string">"user"</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;user.id&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;user.name&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">td</span>&gt;</span>$</span><span class="template-variable">&#123;user.pwd&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">					<span class="comment">&lt;!-- 注意：详情和删除都是id属性进行操作的必须加条件&amp;id=$</span></span><span class="template-variable">&#123;user.id&#125;</span><span class="xml"><span class="comment"></span></span></span><br><span class="line"><span class="xml">					不然会报异常：java.lang.NumberFormatException: null </span></span><br><span class="line"><span class="xml">					显示为null --&gt;</span></span><br><span class="line"><span class="xml">					<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"UserController?method=findById&amp;id=$</span></span></span><span class="template-variable">&#123;user.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"UserController?method=delById&amp;id=$</span></span></span><span class="template-variable">&#123;user.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span></span><br><span class="line"><span class="xml">				<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml">			<span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>	</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span> </span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!-- 分页 --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"UserController?method=selectAll&amp;pageNum=$</span></span></span><span class="template-variable">&#123;pageNum-1&#125;</span><span class="xml"><span class="tag"><span class="string">&amp;pageSize=2"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>当前页$</span><span class="template-variable">&#123;pageNum&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"UserController?method=selectAll&amp;pageNum=$</span></span></span><span class="template-variable">&#123;pageNum+1&#125;</span><span class="xml"><span class="tag"><span class="string">&amp;pageSize=2"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>更新<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="comment">&lt;!--判断user为空添加，user不为空更新  --&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">form</span>  &lt;<span class="attr">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;empty user &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>action="UserController?method=addUser"<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		   <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;not empty user &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>action="UserController?method=userUpdate"<span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span></span><br><span class="line"><span class="xml">		   method="post"&gt;</span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.id&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.name &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">		密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;user.pwd &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"更新"</span>&gt;</span></span></span><br><span class="line"><span class="xml">		</span></span><br><span class="line"><span class="xml">	</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Java web</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架(五)</title>
    <url>/2019/11/21/Hibernate%E6%A1%86%E6%9E%B6-%E4%BA%94/</url>
    <content><![CDATA[<h3 id="一对一关系映射详解"><a href="#一对一关系映射详解" class="headerlink" title="一对一关系映射详解"></a>一对一关系映射详解</h3><ol>
<li>方式一：一对一关系外键配置</li>
</ol>
<ul>
<li>实体类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id;<span class="comment">//公司Id</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> name;<span class="comment">//公司名称</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Adderss adderss;<span class="comment">//公司属于某个地址</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Adderss <span class="title">getAdderss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> adderss;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAdderss</span><span class="params">(Adderss adderss)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.adderss = adderss;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.zhao.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adderss</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id; <span class="comment">//地址id</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> name; <span class="comment">//地址名称</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Company company;<span class="comment">//地址属于某个公司</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Company <span class="title">getCompany</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> company;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(Company company)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.company = company;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>映射文件 .hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhao.domain.Company"</span> <span class="attr">table</span>=<span class="string">"t_company"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--一个公司对应一个地址，一对一关系 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"adderss"</span> <span class="attr">class</span>=<span class="string">"com.zhao.domain.Adderss"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-one</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.zhao.domain"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Adderss"</span> <span class="attr">table</span>=<span class="string">"t_adderss"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--一个地址只属于一个公司，一对一关系</span></span><br><span class="line"><span class="comment">       这是一种特殊的多对一关系</span></span><br><span class="line"><span class="comment">       column="company_id" 外键名称</span></span><br><span class="line"><span class="comment">       unique="true" 外键唯一 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"company"</span> <span class="attr">class</span>=<span class="string">"Company"</span> <span class="attr">column</span>=<span class="string">"company_id"</span> <span class="attr">unique</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>核心配置类<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">           com.mysql.cj.jdbc.Driver</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">           jdbc:mysql://localhost:3306/hibernate_user?serverTimezone=Asia/Shanghai</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--		配置映射文件与数据库表关系</span></span><br><span class="line"><span class="comment">                   update：有表则更新，无则创建</span></span><br><span class="line"><span class="comment">                   create：每次启动hibernate都创建，（注意：以前数据没得了）</span></span><br><span class="line"><span class="comment">                   create-drop：每次启动hibernate都创建，执行完后删除表--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 开启二级缓存 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--		&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 设置二级缓存插件EHCache的Provider类&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--		&lt;property name="hibernate.cache.region.factory_class"&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--			org.hibernate.cache.ehcache.EhCacheRegionFactory--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--		&lt;/property&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--开启与当前线程绑定session功能--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库方言 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">           org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/domain/Address.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/domain/Company.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>提取工具类<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.hibernate_utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">util</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory factory;</span><br><span class="line">   <span class="keyword">static</span>&#123;</span><br><span class="line">       <span class="comment">//1.获取核心配置文件对象</span></span><br><span class="line">       Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">       <span class="comment">//2.创建会话工厂</span></span><br><span class="line">       factory = configuration.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//监听程序关闭</span></span><br><span class="line">       Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread()&#123;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               System.out.println(<span class="string">"程序关闭。。。！"</span>);</span><br><span class="line">               <span class="comment">//关闭会话工厂</span></span><br><span class="line">               factory.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Session <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//返回会话工厂获取到的session对象</span></span><br><span class="line">       <span class="function"><span class="keyword">return</span> factory.<span class="title">openSession</span><span class="params">()</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Session <span class="title">getCurrentSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">return</span> factory.<span class="title">getCurrentSession</span><span class="params">()</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.<span class="keyword">Session</span>;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> lession &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> test()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> =util.openSession();</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       Company company = <span class="built_in">new</span> Company();</span><br><span class="line">       company.setName("埃尔");</span><br><span class="line"></span><br><span class="line">       Adderss adderss = <span class="built_in">new</span> Adderss();</span><br><span class="line">       adderss.setName("匹尔科斯101街道");</span><br><span class="line"></span><br><span class="line">       adderss.setCompany(company);</span><br><span class="line">       //保存</span><br><span class="line">       <span class="keyword">session</span>.save(company);</span><br><span class="line">       <span class="keyword">session</span>.save(adderss);</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>方式二：一对一关系主键又是外键配置</li>
</ol>
<ul>
<li><p>修改外键映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.zhao.domain"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Adderss"</span> <span class="attr">table</span>=<span class="string">"t_adderss"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 指定使用哪个主键生成主键 使用外键的方式生成主键 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"foreign"</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- property属性指定使用当前持久化类的哪一个属性的主键作为外键 --&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--property属性执行使用当前哪个持久化的类的哪个属性作为外键 指定当前持久化类的哪个属性作为主键 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"property"</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--一个地址只属于一个公司，一对一关系</span></span><br><span class="line"><span class="comment">       这是一种特殊的多对一关系</span></span><br><span class="line"><span class="comment">       constrained="true" --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">"company"</span> <span class="attr">class</span>=<span class="string">"Company"</span> <span class="attr">constrained</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-one</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>constrained=”true”</p>
<ol>
<li><p>表示：constrained属性在hibernate一对一关系中会用到，hibernate文档中是这么写的，constrained（约束）,只能在one-to-one的映射中使用，一般在主表映射中，有外键的那个表，如果constrained=true，则表明存在外键与关联表对应，并且关联表中肯定存在对应的键与其对应，另外，改选项最关键的是影响save和deleted先后顺序，如果是增加的时候，如果constrained=true则会增加关联表，然后增加本表，删除的时候是先伸出本表然后删除关联的表</p>
</li>
<li><p>one-to-one的单向关联中，如果constrained=false则会在查询的时候全部取出来，用left outer join的方式 如果constrained=true，hibernate会延迟加载sql，只会把主表查询出来，等有用到关联表的时候再发出sql语句去取出来</p>
</li>
<li><p>one-to-one的双向关联，必须设置constrained=true 要不然会出现重复读数据，</p>
</li>
<li><p>如果2个表中Company，Adderss在false时候的sql语句如下</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span> Company </span><br><span class="line">c left outer join </span><br><span class="line">Adderss a <span class="keyword">on</span> c.<span class="built_in">id</span>=a.<span class="built_in">id</span> </span><br><span class="line">left outer join <span class="keyword">on</span> Company</span><br><span class="line">com <span class="keyword">on</span> c.<span class="built_in">id</span>=com.<span class="built_in">id</span> <span class="keyword">where</span> c.<span class="built_in">id</span>=?</span><br></pre></td></tr></table></figure>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3></li>
</ol>
<ul>
<li>缓存(Cache)</li>
<li>概念什么是缓存？<ol>
<li>☞缓存就是数据交换的缓冲区（称作：Cache），当某一硬件要读取数据时，会首先从缓存汇总查询数据，有则直接执行，不存在时从内存中获取。由于缓存的数据比内存快的多，所以缓存的作用就是帮助硬件更快的运行。</li>
<li>☞ 缓存往往使用的是RAM（断电既掉的非永久存储），所以在用完后还是会把文件送到硬盘等存储器中永久存储。电脑中最大缓存就是内存条，硬盘上也有16M或者32M的缓存。</li>
<li>☞ 高速缓存是用来协调CPU与主存之间存取速度的差异而设置的。一般CPU工作速度高，但内存的工作速度相对较低，为了解决这个问题，通常使用高速缓存，高速缓存的存取速度介于CPU与主存之间。系统将一些CPU在最近几个时间段经常访问的内容存在高速缓存，这样就在一定程度上缓解了由于主存速度低造成的CPU“停工待料”的情况。</li>
<li>☞ 缓存就是把一些外存上的数据保存在内存上而已，为什么保存在内存上，我们运行的所有程序里面的变量都是存放在内存中的，所以如果想将值放入内存上，可以通过变量的方式存储。在JAVA中一些缓存一般都是通过Map集合来实现的。<br>▁▂▃▅▆ ：缓存在不同的场景下，作用是不一样的具体举例说明：<br>✔  操作系统磁盘缓存 ——&gt; 减少磁盘机械操作。<br>✔  数据库缓存——&gt;减少文件系统IO。<br>✔  应用程序缓存——&gt;减少对数据库的查询。<br>✔  Web服务器缓存——&gt;减少应用服务器请求。<br>✔  客户端浏览器缓存——&gt;减少对网站的访问。</li>
</ol>
</li>
</ul>
</li>
<li><p>总结：</p>
<ol>
<li>作用：降低应用程序直接读写硬盘的频率,提高其运行性能;</li>
<li>缓存中的数据是数据存储源中的拷贝，其物理介质一般是内存；</li>
<li>程序《– （内存） –》 硬盘<h3 id="hibernate-二级缓存（PO-persist-object-持久化对象）"><a href="#hibernate-二级缓存（PO-persist-object-持久化对象）" class="headerlink" title="hibernate 二级缓存（PO persist object 持久化对象）"></a>hibernate 二级缓存（PO persist object 持久化对象）</h3>▁▂▃▅▆：hibernate 提供两种缓存机制：一级缓存 二级缓存<br>✔ 一级缓存：session缓存，在一次请求中共享数据<br>✔ 二级缓存：sessionFactory级别缓存，整个应用程序共享一个会话工厂，共享一个二级缓存。</li>
</ol>
</li>
<li><p>sessionFactory 的缓存由两部分：<br>内置缓存：使用一个Map集合，用于存放配置信息，预定义HQL语句等，提供给hibernate框架自己使用，对外只读的，不能操作。<br>外置缓存：使用另一个map集合，用于存放用户自定义数据。默认不开启。外置缓存hibernate只提供规范(接口)，需要第三方实现类。 </p>
</li>
<li><p>缓存结构图<br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1574273471066&di=21b666797a9206bf4946ffef55da20dc&imgtype=jpg&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D253178479%2C3342375082%26fm%3D214%26gp%3D0.jpg" alt="结构图"><br>▁▂▃▅▆详解：<br>First-level Cache 一级缓存(存放持久态数据)-PO<br>Second -level Cache 二级缓存<br>Cache-level Strategy  缓存并发策略<br>Query Cache 查询缓存<br>Cache Provider 二级缓存的实现类提供者<br>Class Cache Region  类缓存<br>Collection Cache Region  集合缓存<br>Query Cache Region 查询缓存<br>Update Timestamps  时间戳</p>
</li>
</ul>
<h3 id="并发访问策略-Cache-level-Strategy-缓存并发策略"><a href="#并发访问策略-Cache-level-Strategy-缓存并发策略" class="headerlink" title="并发访问策略(Cache-level Strategy  缓存并发策略)"></a>并发访问策略(Cache-level Strategy  缓存并发策略)</h3><ol>
<li>transactional 事务型(性能低)<ul>
<li>仅在手管理的环境中使用</li>
<li>提供Repeatable Read 事务隔离级别</li>
<li>适用经常被读，很少修改数据</li>
<li>可以防止脏读和不可重复读的并发问题</li>
<li>缓存支持事务，发生异常的时候，缓存也能够回滚</li>
</ul>
</li>
<li>read-write 读写型<ul>
<li>提供Read committed 事务隔离级别</li>
<li>在非集群的环境中适用</li>
<li>适用经常被读，很少修改数据</li>
<li>可以防止脏读</li>
<li>更新缓存的时候会锁定缓存中的数据</li>
</ul>
</li>
<li>nonstrict-read-write 非严格读写型<ul>
<li>适用极少修改，偶尔允许脏读数据(两个事务同时修改数据的情况很少见)</li>
<li>不保证缓存和数据库的一致性</li>
<li>不锁定缓存中的数据</li>
</ul>
</li>
<li>read-only 只读<ul>
<li>适用从来不会修改的数据</li>
<li>在此模式下如果对数据进行更新操作，会有异常</li>
<li>事务隔离级别低，并发性能高</li>
<li>在集群环境中也能完美运行</li>
</ul>
</li>
</ol>
<ul>
<li>注意：<br>  ▁▂▃▅▆ 适合放入二级缓存数据：(国家，地区等)<ul>
<li>很少被修改数据</li>
<li>不是很重要的数据，允许偶尔的并发问题<br>▁▂▃▅▆ 不适合放入二级缓存的数据：</li>
<li>经常被修改</li>
<li>财务数据，绝不允许出现并发问题</li>
<li>与其他应用共享数据</li>
</ul>
</li>
<li>二级缓存供应商<ul>
<li>Hibernate中定义二级缓存接口，实现需要自己选择的供应商</li>
<li>EHCache：对Hibernate查询提供了支持，支持集群，不支持并发访问策略transactional(事务型) <h3 id="二级缓存整合EHCache（二级缓存提供商）"><a href="#二级缓存整合EHCache（二级缓存提供商）" class="headerlink" title="二级缓存整合EHCache（二级缓存提供商）"></a>二级缓存整合EHCache（二级缓存提供商）</h3><ol>
<li>导包：</li>
</ol>
</li>
<li>backport-util-concurrent.jar</li>
<li>commons-logging.jar</li>
<li>ehcache-1.5.0.jar</li>
<li>ehcache-failsafe.xml</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p>配置hibernate.cfg.xml</p>
<ul>
<li>从hibernate.properties查看二级缓存设置<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">### 开启二级缓存</span><br><span class="line"><span class="selector-id">#hibernate</span><span class="selector-class">.cache</span><span class="selector-class">.use_second_level_cache</span>  <span class="selector-tag">false</span></span><br><span class="line">### 二级缓存提供商</span><br><span class="line"><span class="selector-id">#hibernate</span><span class="selector-class">.cache</span><span class="selector-class">.region</span><span class="selector-class">.factory_class</span>  <span class="selector-tag">org</span><span class="selector-class">.hibernate</span><span class="selector-class">.cache</span><span class="selector-class">.internal</span><span class="selector-class">.EhCacheRegionFactory</span></span><br></pre></td></tr></table></figure>
<ul>
<li>hibernate.cfg.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">           com.mysql.cj.jdbc.Driver</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">           jdbc:mysql://localhost:3306/hibernate_user?serverTimezone=Asia/Shanghai</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--		配置映射文件与数据库表关系</span></span><br><span class="line"><span class="comment">                   update：有表则更新，无则创建</span></span><br><span class="line"><span class="comment">                   create：每次启动hibernate都创建，（注意：以前数据没得了）</span></span><br><span class="line"><span class="comment">                   create-drop：每次启动hibernate都创建，执行完后删除表--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--	 开启二级缓存 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--	 设置二级缓存插件EHCache的Provider类 提供商--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.region.factory_class"</span>&gt;</span></span><br><span class="line">       			org.hibernate.cache.ehcache.EhCacheRegionFactory</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--开启与当前线程绑定session功能--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置数据库方言 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">           org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.min_size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.timeout"</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_statements"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.idle_test_period"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.acquire_increment"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.validate"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/domain/Address.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/domain/Company.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- class=""全限定类名</span></span><br><span class="line"><span class="comment">      usage=""缓存并发策略 read-only 只读--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">class-cache</span> <span class="attr">class</span>=<span class="string">"com.zhao.domain.Company"</span> <span class="attr">usage</span>=<span class="string">"read-only"</span>&gt;</span><span class="tag">&lt;/<span class="name">class-cache</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">class-cache</span> <span class="attr">class</span>=<span class="string">"com.zhao.domain.Adderss"</span> <span class="attr">usage</span>=<span class="string">"read-only"</span>&gt;</span><span class="tag">&lt;/<span class="name">class-cache</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置集合缓存--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection-cache</span> <span class="attr">collection</span>=<span class="string">"com.zhao.domain.Company.adderss"</span> <span class="attr">usage</span>=<span class="string">"read-only"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection-cache</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>配置类和集合缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置类缓存</span></span><br><span class="line"><span class="comment">   注意：类缓存的路径是在mapping下，是dtd约束的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class-cache</span> <span class="attr">usage</span>=<span class="string">"read-only"</span> <span class="attr">class</span>=<span class="string">"全限定类名"</span>&gt;</span><span class="tag">&lt;/<span class="name">class-cache</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置集合缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection-cache</span> <span class="attr">usage</span>=<span class="string">"read-only"</span> <span class="attr">collection</span>=<span class="string">"全限定类名"</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置</p>
<ul>
<li>把jar包中ehcache-failsafe.xml文件复制到项目的src目录，然后改名为ehcahe.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"../config/ehcache.xsd"</span>&gt;</span></span><br><span class="line">   //diskStore 硬盘存储  设置临时文件存储位置</span><br><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">       磁盘存储:将缓存中暂时不使用的对象,转移到硬盘,类似于Windows系统的虚拟内存</span></span><br><span class="line"><span class="comment">       path:指定在硬盘上存储对象的路径</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">       defaultCache:默认的缓存配置信息,如果不加特殊说明,则所有对象按照此配置项处理</span></span><br><span class="line"><span class="comment">       maxElementsInMemory:设置了缓存的上限,最多存储多少个记录对象</span></span><br><span class="line"><span class="comment">       eternal:代表对象是否永不过期</span></span><br><span class="line"><span class="comment">       timeToIdleSeconds:最大的发呆时间</span></span><br><span class="line"><span class="comment">       timeToLiveSeconds:最大的存活时间</span></span><br><span class="line"><span class="comment">       overflowToDisk:是否允许对象被写入到磁盘</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">defaultCache</span> <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span> <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span> <span class="attr">overflowToDisk</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">       cache:为指定名称的对象进行缓存的特殊配置</span></span><br><span class="line"><span class="comment">       name:指定对象的完整名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"com.zbaccp.entity.Person"</span> <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span> <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">timeToIdleSeconds</span>=<span class="string">"300"</span> <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span> <span class="attr">overflowToDisk</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="ehcahe-xml属性文件详解"><a href="#ehcahe-xml属性文件详解" class="headerlink" title="ehcahe.xml属性文件详解"></a>ehcahe.xml属性文件详解</h3></li>
</ul>
</li>
<li><p>diskStore ：指定数据(.data and .index)存储位置，可指定磁盘中的文件夹位置期 The diskStore element is optional. It must be configured if you have overflowToDisk or diskPersistent enabled    for any cache. If it is not configured, a warning will be issues and java.io.tmpdir will be used.</p>
</li>
<li><p>defaultCache ： 默认的管理策略</p>
</li>
</ol>
<ul>
<li>一、以下属性是必须的：<ol>
<li>name： Cache的名称，必须是唯一的(ehcache会把这个cache放到HashMap里)。</li>
<li>maxElementsInMemory：在内存中缓存的element的最大数目。 </li>
<li>maxElementsOnDisk：在磁盘上缓存的element的最大数目，默认值为0，表示不限制。 </li>
<li>eternal：设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断。 </li>
<li>overflowToDisk： 如果内存中数据超过内存限制，是否要缓存到磁盘上。 </li>
</ol>
</li>
<li>二、以下属性是可选的：<ol>
<li>timeToIdleSeconds： 对象空闲时间，指对象在多长时间没有被访问就会失效。只对eternal为false的有效。默认值0，表示一直可以访问。</li>
<li>timeToLiveSeconds： 对象存活时间，指对象从创建到失效所需要的时间。只对eternal为false的有效。默认值0，表示一直可以访问。</li>
<li>diskPersistent： 是否在磁盘上持久化。指重启jvm后，数据是否有效。默认为false。 </li>
<li>diskExpiryThreadIntervalSeconds： 对象检测线程运行时间间隔。标识对象状态的线程多长时间运行一次。</li>
<li>diskSpoolBufferSizeMB： DiskStore使用的磁盘大小，默认值30MB。每个cache使用各自的DiskStore。</li>
<li>memoryStoreEvictionPolicy： 如果内存中数据超过内存限制，向磁盘缓存时的策略。默认值LRU，可选FIFO、LFU。 </li>
</ol>
</li>
<li>三、缓存的3 种清空策略 ：<ol>
<li>FIFO ，first in first out (先进先出).</li>
<li>LFU ， Less Frequently Used (最少使用).意思是一直以来最少被使用的。缓存的元素有一个hit 属性，hit 值最小的将会被清出缓存。</li>
<li>LRU ，Least Recently Used(最近最少使用). (ehcache 默认值).缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</li>
</ol>
</li>
</ul>
<h3 id="查询缓存-又称三级缓存"><a href="#查询缓存-又称三级缓存" class="headerlink" title="查询缓存(又称三级缓存)"></a>查询缓存(又称三级缓存)</h3><ol>
<li>开启查询缓存<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启查询缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_query_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>测试<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 查询，执行sql语句，将结果进行缓存 针对HQL的</span></span><br><span class="line">Query query = session.create<span class="constructor">Query(<span class="string">"from Customer"</span>)</span>;</span><br><span class="line">query.set<span class="constructor">Cacheable(<span class="params">yrue</span>)</span>;<span class="comment">//设置允许缓存</span></span><br><span class="line">List&lt;Customer&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">session.close<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">Session session1 = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line"><span class="comment">//2.查找，从查询缓存中获取数据</span></span><br><span class="line">query = session1.create<span class="constructor">Query(<span class="string">"from Customer"</span>)</span>;</span><br><span class="line">query.set<span class="constructor">Cacheable(<span class="params">true</span>)</span>;<span class="comment">//不设置，就不会在缓存中找</span></span><br><span class="line">List&lt;Customer&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="built_in">list</span>);<span class="comment">//不执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.从二级缓存中找</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
<ul>
<li>时间戳缓存<ul>
<li>任何操作都在时间戳中记录操作时间</li>
<li>底层select update select 对比如果第三次和第二次sql语句一就执行，反之执行<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//时间戳缓存</span></span><br><span class="line">Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">   Customer c = session.get(<span class="module-access"><span class="module"><span class="identifier">Customer</span>.</span></span><span class="keyword">class</span>,<span class="number">1</span>);</span><br><span class="line">   <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c);</span><br><span class="line">   <span class="comment">//c.setName("iserjhg");//报错不执行</span></span><br><span class="line">   Query query = session.create<span class="constructor">Query(<span class="string">"update Customer set name=:name where id=:id"</span>)</span>;</span><br><span class="line">   query.set<span class="constructor">Parameter(<span class="string">"name"</span>,<span class="string">"kgj"</span>)</span>;</span><br><span class="line">   query.set<span class="constructor">Parameter(<span class="string">"id"</span>,1)</span>;</span><br><span class="line">   query.execute<span class="constructor">Update()</span>;<span class="comment">//执行update语句</span></span><br><span class="line"></span><br><span class="line">session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">session.close<span class="literal">()</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>jave web复习(一)</title>
    <url>/2019/11/20/jave-web%E5%A4%8D%E4%B9%A0-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="servlet相关配置"><a href="#servlet相关配置" class="headerlink" title="servlet相关配置"></a>servlet相关配置</h3><ul>
<li>web.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>java_web<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 配置servlet程序 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> 	<span class="comment">&lt;!-- servlet全限定类名 --&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.zhao.domain.TestServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- url-servlet映射 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 已定义名称 --&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>TestServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> 		<span class="comment">&lt;!-- 浏览url地址 --&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/test<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="servlet模拟登录get请求"><a href="#servlet模拟登录get请求" class="headerlink" title="servlet模拟登录get请求"></a>servlet模拟登录get请求</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"> <span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;</span><br><span class="line"> <span class="keyword">import</span> javax.servlet.annotation.<span class="type">WebServlet</span>;</span><br><span class="line"> <span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;</span><br><span class="line"> <span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;</span><br><span class="line"> <span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class GetParam</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@WebServlet</span>(<span class="string">"/GetParam"</span>)</span><br><span class="line"> public <span class="class"><span class="keyword">class</span> <span class="title">GetParam</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line">       </span><br><span class="line">	<span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">		<span class="comment">//请求地址：localhost:8080/java_web/GetParam?name=lisi&amp;pwd=123456</span></span><br><span class="line">		response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">		<span class="comment">//通过参数名获取值</span></span><br><span class="line">		<span class="type">String</span> name = request.getParameter(<span class="string">"name"</span>);</span><br><span class="line">		<span class="type">String</span> pwd = request.getParameter(<span class="string">"pwd"</span>);</span><br><span class="line">		<span class="type">System</span>.out.println(<span class="string">"姓名："</span>+name+<span class="string">"密码："</span>+pwd);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">"lisi"</span>.equals(name) &amp;&amp; <span class="string">"123456"</span>.equals(pwd) )&#123;</span><br><span class="line">			response.getWriter().append(<span class="string">"ok!"</span>);</span><br><span class="line">			<span class="comment">//请求转发</span></span><br><span class="line">			request.getRequestDispatcher(<span class="string">"index.jsp"</span>).forward(request, response);</span><br><span class="line">			<span class="comment">//重定向</span></span><br><span class="line">			<span class="comment">//response.sendRedirect("index.jsp");</span></span><br><span class="line">			</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			response.getWriter().append(<span class="string">"error!"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//设置参数到request对象中setAttribute("参数名", 参数值)</span></span><br><span class="line">		<span class="comment">//jsp页面el表达式取值$&#123;参数名&#125;</span></span><br><span class="line">	  <span class="comment">//request.setAttribute("name", name);</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> void doPost(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span> response) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		doGet(request, response);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="servlet模拟登录post表单请求"><a href="#servlet模拟登录post表单请求" class="headerlink" title="servlet模拟登录post表单请求"></a>servlet模拟登录post表单请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	<span class="comment">//获取命令参数</span></span><br><span class="line">	String command =  request.getParameter(<span class="string">"command"</span>);</span><br><span class="line">	<span class="comment">//判断命令</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="string">"login"</span>.equals(command))&#123;</span><br><span class="line">		login(request, response);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		response.getWriter().append(<span class="string">"无效命令"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	<span class="comment">//获取表单内容，request.getParameter("表单项的name属性值");</span></span><br><span class="line">	String username = request.getParameter(<span class="string">"username"</span>); </span><br><span class="line">	String pwd  = 	request.getParameter(<span class="string">"pwd"</span>);	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//设置参数到request对象中</span></span><br><span class="line">	request.setAttribute(<span class="string">"name"</span>, username);</span><br><span class="line">	<span class="comment">//判断账号密码</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="string">"zhangsan"</span>.equals(username) &amp;&amp; <span class="string">"123456"</span>.equals(pwd))&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//转发数据到index.jsp页面</span></span><br><span class="line">		request.getRequestDispatcher(<span class="string">"index.jsp"</span>).forward(request, response);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//设置提示</span></span><br><span class="line">		request.setAttribute(<span class="string">"error"</span>, <span class="string">"error"</span>);</span><br><span class="line">		<span class="comment">//登录失败跳转到登录页面</span></span><br><span class="line">		request.getRequestDispatcher(<span class="string">"login.jsp"</span>).forward(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">	doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>jsp页面<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">   pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>$</span><span class="template-variable">&#123;error&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"UserController?command=login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="java-web-三层架构详解"><a href="#java-web-三层架构详解" class="headerlink" title="java web 三层架构详解"></a>java web 三层架构详解</h3></li>
</ul>
</li>
</ul>
<ol>
<li>创建实体类（javabean）<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.zhao.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> pwd;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> pwd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(<span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//继承父类构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">String</span> name, <span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="keyword">this</span>.id = id;</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">String</span> name, <span class="keyword">String</span> pwd)</span> </span>&#123;</span><br><span class="line">	super();</span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">"User [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", pwd="</span> + pwd + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>创建连接数据库工具类（JDBCUtil）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zhao.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">		Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Connection conn  = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/day2"</span>,<span class="string">"root"</span>,<span class="string">"ROOT"</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,Statement stm,ResultSet rest)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(rest!=<span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			rest.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(stm!=<span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			stm.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(conn!=<span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			conn.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>创建持久层DAO<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> UserDao &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public User user<span class="constructor">Login(User <span class="params">u</span>)</span> &#123;</span><br><span class="line">	User user =  null;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取连接对象</span></span><br><span class="line">	Connection conn =  <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">	PreparedStatement  pstm = null;</span><br><span class="line">	ResultSet rest =  null;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//预编译sql语句</span></span><br><span class="line">	String sql  =  <span class="string">"select * from user where username =  ?  and password = ?"</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		pstm =  conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">		<span class="comment">//设置参数</span></span><br><span class="line">		pstm.set<span class="constructor">String(1, <span class="params">u</span>.<span class="params">getUsername</span>()</span>);</span><br><span class="line">		pstm.set<span class="constructor">String(2, <span class="params">u</span>.<span class="params">getPwd</span>()</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//执行sql,返回结果集</span></span><br><span class="line">		rest = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">		<span class="comment">//判断是否有结果返回</span></span><br><span class="line">		<span class="keyword">if</span>(rest.next<span class="literal">()</span>) &#123;</span><br><span class="line">			<span class="comment">//创建user对象，并设置查询到的属性</span></span><br><span class="line">			user =  <span class="keyword">new</span> <span class="constructor">User(<span class="params">rest</span>.<span class="params">getInt</span>(1)</span>,rest.get<span class="constructor">String(2)</span>,rest.get<span class="constructor">String(3)</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125; catch (SQLException e) &#123;</span><br><span class="line">		e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">	&#125;finally &#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn, pstm, rest);</span><br><span class="line">	&#125;</span><br><span class="line">	return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建业务层service层<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public class UserService &#123;</span><br><span class="line"></span><br><span class="line">public UserDao userDao =  new UserDao();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public<span class="built_in"> User </span>userLogin(User u) &#123;</span><br><span class="line">	return userDao.userLogin(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建控制层controller<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">@<span class="constructor">WebServlet(<span class="string">"/UserServlet"</span>)</span></span><br><span class="line">public <span class="keyword">class</span> UserServlet extends HttpServlet &#123;</span><br><span class="line"><span class="keyword">private</span> static final long serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">public UserService userService =  <span class="keyword">new</span> <span class="constructor">UserService()</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">protected void <span class="keyword">do</span><span class="constructor">Get(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">//获取命令参数</span></span><br><span class="line">			String command =  request.get<span class="constructor">Parameter(<span class="string">"command"</span>)</span>;</span><br><span class="line">			<span class="comment">//判断命令</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="string">"login"</span>.equals(command))&#123;</span><br><span class="line">				login(request, response);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				response.get<span class="constructor">Writer()</span>.append(<span class="string">"无效命令"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户登录</span></span><br><span class="line"><span class="keyword">private</span> void login(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">//获取表单内容，request.getParameter("表单项的name属性值");</span></span><br><span class="line">	String name = request.get<span class="constructor">Parameter(<span class="string">"name"</span>)</span>; </span><br><span class="line">	String pwd  = 	request.get<span class="constructor">Parameter(<span class="string">"pwd"</span>)</span>;	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//收集用户的登录信息</span></span><br><span class="line">	User u =  <span class="keyword">new</span> <span class="constructor">User(<span class="params">name</span>,<span class="params">pwd</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//调用service层的登录方法，返回登录的结果</span></span><br><span class="line">	User  user = userService.user<span class="constructor">Login(<span class="params">u</span>)</span>;  </span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//判断账号密码</span></span><br><span class="line">	<span class="keyword">if</span>(user!= null)&#123;<span class="comment">//返回user不为空，代表数据库中有对应的信息</span></span><br><span class="line">		<span class="comment">//设置参数到request对象中</span></span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"user"</span>, <span class="params">user</span>)</span>;</span><br><span class="line">		<span class="comment">//转发数据到index.jsp页面</span></span><br><span class="line">		request.get<span class="constructor">RequestDispatcher(<span class="string">"index.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//设置提示</span></span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"error"</span>, <span class="string">"账号或密码错误"</span>)</span>;</span><br><span class="line">		<span class="comment">//设置参数到request对象中</span></span><br><span class="line">		request.set<span class="constructor">Attribute(<span class="string">"user"</span>, <span class="params">u</span>)</span>;</span><br><span class="line">		<span class="comment">//登录失败跳转到登录页面</span></span><br><span class="line">		request.get<span class="constructor">RequestDispatcher(<span class="string">"login.jsp"</span>)</span>.forward(request, response);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protected void <span class="keyword">do</span><span class="constructor">Post(HttpServletRequest <span class="params">request</span>, HttpServletResponse <span class="params">response</span>)</span> throws ServletException, IOException &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="keyword">do</span><span class="constructor">Get(<span class="params">request</span>, <span class="params">response</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>jsp页面</li>
</ul>
<ol>
<li>index.jsp<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=utf-8"</span></span></span></span><br><span class="line"><span class="xml">   pageEncoding="utf-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">欢迎<span class="tag">&lt;<span class="name">h1</span>&gt;</span>$</span><span class="template-variable">&#123;user.username&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li>login.jsp<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span></span><br><span class="line"><span class="xml">   pageEncoding="UTF-8"%&gt;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>$</span><span class="template-variable">&#123;error&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"UserController?command=login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">	账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;name&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Java web</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 复习(一)</title>
    <url>/2019/11/19/Java-%E5%A4%8D%E4%B9%A0-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="Jdk（java开发工具包）"><a href="#Jdk（java开发工具包）" class="headerlink" title="Jdk（java开发工具包）"></a>Jdk（java开发工具包）</h3><ul>
<li>安装目录：<ol>
<li>bin（java的可执行程序）</li>
<li>DB (内置小型数据库)</li>
<li>Jre(java运行环境)</li>
<li>Lib(java的类库)</li>
</ol>
</li>
</ul>
<h3 id="安装完成需要配置环境变量（都是目录，控制台执行时需要引用）："><a href="#安装完成需要配置环境变量（都是目录，控制台执行时需要引用）：" class="headerlink" title="安装完成需要配置环境变量（都是目录，控制台执行时需要引用）："></a>安装完成需要配置环境变量（都是目录，控制台执行时需要引用）：</h3><ol>
<li>JAVA_HOME:    C:\Program Files\Java\jdk1.8.0_162(JDK安装的主目录)        </li>
<li>Path：C:\Program Files\Java\jdk1.8.0_162\bin（可执行程序的目录，在控制台任意目录下启动）</li>
<li>CLASSPATH: C:\Program Files\Java\jdk1.8.0_162\lib;.（需要调用的类的目录）</li>
</ol>
<ul>
<li><p>可能提示的问题：<br>  找不到或无法加载主类：查看classpath变量是否配置正确</p>
</li>
<li><p>Eclipse安装：注意jdk版本和eclipse版本相同（都是32位或64位）</p>
<pre><code>常用快捷键：alt+/
代码注释：ctrl+/
删除行：ctrl+d        
代码切换行:alt+”↑/↓”
代码上下行复制:ctrl+alt+”↑/↓”    </code></pre><h3 id="jdbc连接mysql数据库"><a href="#jdbc连接mysql数据库" class="headerlink" title="jdbc连接mysql数据库"></a>jdbc连接mysql数据库</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">package com.direct.day1.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//jdbc链接mysql数据库</span></span><br><span class="line"><span class="comment">//1、准备链接驱动</span></span><br><span class="line"><span class="comment">//2、加载驱动</span></span><br><span class="line"><span class="comment">//3、获取数据库链接</span></span><br><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">String</span> url = <span class="string">"jdbc:mysql://localhost:3306/demo1?characterEncoding=utf-8"</span>;</span><br><span class="line"><span class="keyword">String</span> user = <span class="string">"root"</span>;</span><br><span class="line"><span class="keyword">String</span> pwd = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">	<span class="comment">//通过驱动管理器获取数据库链接对象，需要传入参数(链接地址，账号，密码)</span></span><br><span class="line">	Connection conn = DriverManager.getConnection(url,user, pwd);</span><br><span class="line">	System.out.<span class="built_in">println</span>(conn);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//创建sql语句执行对象</span></span><br><span class="line">	Statement stm = conn.createStatement();</span><br><span class="line">	<span class="keyword">String</span>  sql =  <span class="string">"select * from user"</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//执行查询语句，返回ResultSet结果集</span></span><br><span class="line">	ResultSet rest = stm.executeQuery(sql);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//获取结果集中的数据,通过next()方法移动指针,如果执行所指位置没有数据，则返回false</span></span><br><span class="line">	<span class="keyword">while</span>(rest.next())&#123;</span><br><span class="line">		<span class="comment">//从结果集中获取数据的方法 getInt("字段名称/或字段的下标位置")，getString("字段名称/或字段的下标位置")</span></span><br><span class="line">		<span class="comment">//通过传递数据表的字段名称，获取int类型的数据</span></span><br><span class="line">		<span class="keyword">int</span> id  = rest.getInt(<span class="string">"id"</span>);</span><br><span class="line">		<span class="comment">//通过传递数据表的字段下标，获取String类型的数据</span></span><br><span class="line">		<span class="keyword">String</span> username =  rest.getString(<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">String</span> password =  rest.getString(<span class="string">"password"</span>);</span><br><span class="line">		System.out.<span class="built_in">println</span>(id+<span class="string">" "</span>+username+<span class="string">" "</span>+password);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//释放资源</span></span><br><span class="line">	rest.<span class="built_in">close</span>();</span><br><span class="line">	stm.<span class="built_in">close</span>();</span><br><span class="line">	conn.<span class="built_in">close</span>();</span><br><span class="line">	</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模仿用户登录实现"><a href="#模仿用户登录实现" class="headerlink" title="模仿用户登录实现"></a>模仿用户登录实现</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> package com.direct.day1.demo1;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"> <span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"> <span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"> <span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"> <span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"> <span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLogin</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//jdbc链接mysql数据库</span></span><br><span class="line">	<span class="comment">//1、准备链接驱动</span></span><br><span class="line">	<span class="comment">//2、加载驱动</span></span><br><span class="line">	<span class="comment">//3、获取数据库链接</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * @param u 账号</span></span><br><span class="line"><span class="comment">	 * @param p 密码</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">login</span><span class="params">(<span class="keyword">String</span> u,<span class="keyword">String</span> p)</span></span>&#123;</span><br><span class="line">		<span class="comment">//加载驱动</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">String</span> url = <span class="string">"jdbc:mysql://localhost:3306/demo1?characterEncoding=utf-8"</span>;</span><br><span class="line">		<span class="keyword">String</span> user = <span class="string">"root"</span>;</span><br><span class="line">		<span class="keyword">String</span> pwd = <span class="string">"123456"</span>;</span><br><span class="line">		 <span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//通过驱动管理器获取数据库链接对象，需要传入参数(链接地址，账号，密码)</span></span><br><span class="line">			Connection conn = DriverManager.getConnection(url,user, pwd);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//创建sql语句执行对象</span></span><br><span class="line">			Statement stm = conn.createStatement();</span><br><span class="line">			<span class="keyword">String</span>  sql =  <span class="string">"select * from user where username='"</span>+u+<span class="string">"' and password='"</span>+p+<span class="string">"';"</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//执行查询语句，返回ResultSet结果集</span></span><br><span class="line">			ResultSet rest = stm.executeQuery(sql);</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">boolean</span> flag = <span class="literal">false</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//获取结果集中的数据,通过next()方法移动指针,如果执行所指位置没有数据，则返回false</span></span><br><span class="line">			<span class="keyword">while</span>(rest.next())&#123;</span><br><span class="line">				<span class="comment">//从结果集中获取数据的方法 getInt("字段名称/或字段的下标位置")，getString("字段名称/或字段的下标位置")</span></span><br><span class="line">				<span class="comment">//通过传递数据表的字段名称，获取int类型的数据</span></span><br><span class="line">				<span class="keyword">int</span> id  = rest.getInt(<span class="string">"id"</span>);</span><br><span class="line">				<span class="comment">//通过传递数据表的字段下标，获取String类型的数据</span></span><br><span class="line">				<span class="keyword">String</span> username =  rest.getString(<span class="number">2</span>);</span><br><span class="line">				<span class="keyword">String</span> password =  rest.getString(<span class="string">"password"</span>);</span><br><span class="line">				System.out.<span class="built_in">println</span>(id+<span class="string">" "</span>+username+<span class="string">" "</span>+password);</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(flag)System.out.<span class="built_in">println</span>(<span class="string">"登录成功"</span>);</span><br><span class="line">			<span class="keyword">else</span> System.out.<span class="built_in">println</span>(<span class="string">"登录失败"</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			rest.<span class="built_in">close</span>();</span><br><span class="line">			stm.<span class="built_in">close</span>();</span><br><span class="line">			conn.<span class="built_in">close</span>();</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//sql语句注入</span></span><br><span class="line">		login(<span class="string">"6f4asdfasdf"</span>,<span class="string">"3213' or '1'='1"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="预编译执行对象详解"><a href="#预编译执行对象详解" class="headerlink" title="预编译执行对象详解"></a>预编译执行对象详解</h3> <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> package com.direct.day1.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLogin2</span> &#123;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//jdbc链接mysql数据库</span></span><br><span class="line">	<span class="comment">//1、准备链接驱动</span></span><br><span class="line">	<span class="comment">//2、加载驱动</span></span><br><span class="line">	<span class="comment">//3、获取数据库链接</span></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * @param u 账号</span></span><br><span class="line"><span class="comment">	 * @param p 密码</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title">login</span><span class="params">(<span class="keyword">String</span> u,<span class="keyword">String</span> p)</span></span>&#123;</span><br><span class="line">		<span class="comment">//加载驱动</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">String</span> url = <span class="string">"jdbc:mysql://localhost:3306/demo1?characterEncoding=utf-8"</span>;</span><br><span class="line">		<span class="keyword">String</span> user = <span class="string">"root"</span>;</span><br><span class="line">		<span class="keyword">String</span> pwd = <span class="string">"123456"</span>;</span><br><span class="line">		 <span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//通过驱动管理器获取数据库链接对象，需要传入参数(链接地址，账号，密码)</span></span><br><span class="line">			Connection conn = DriverManager.getConnection(url,user, pwd);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//“？”代表需要设置的参数</span></span><br><span class="line">			<span class="keyword">String</span>  sql =  <span class="string">"select * from user where username= ? and password= ? "</span>;</span><br><span class="line">			<span class="comment">//创建sql语句 预编译执行对象</span></span><br><span class="line">			PreparedStatement pstm = conn.prepareStatement(sql);</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			pstm.setString(<span class="number">1</span>, u);</span><br><span class="line">			pstm.setString(<span class="number">2</span>, p);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//执行查询语句，返回ResultSet结果集</span></span><br><span class="line">			ResultSet rest = pstm.executeQuery();</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">boolean</span> flag = <span class="literal">false</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//获取结果集中的数据,通过next()方法移动指针,如果执行所指位置没有数据，则返回false</span></span><br><span class="line">			<span class="keyword">while</span>(rest.next())&#123;</span><br><span class="line">				<span class="comment">//从结果集中获取数据的方法 getInt("字段名称/或字段的下标位置")，getString("字段名称/或字段的下标位置")</span></span><br><span class="line">				<span class="comment">//通过传递数据表的字段名称，获取int类型的数据</span></span><br><span class="line">				<span class="keyword">int</span> id  = rest.getInt(<span class="string">"id"</span>);</span><br><span class="line">				<span class="comment">//通过传递数据表的字段下标，获取String类型的数据</span></span><br><span class="line">				<span class="keyword">String</span> username =  rest.getString(<span class="number">2</span>);</span><br><span class="line">				<span class="keyword">String</span> password =  rest.getString(<span class="string">"password"</span>);</span><br><span class="line">				System.out.<span class="built_in">println</span>(id+<span class="string">" "</span>+username+<span class="string">" "</span>+password);</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(flag)System.out.<span class="built_in">println</span>(<span class="string">"登录成功"</span>);</span><br><span class="line">			<span class="keyword">else</span> System.out.<span class="built_in">println</span>(<span class="string">"登录失败"</span>);</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			rest.<span class="built_in">close</span>();</span><br><span class="line">			pstm.<span class="built_in">close</span>();</span><br><span class="line">			conn.<span class="built_in">close</span>();</span><br><span class="line">			</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	@Test	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//sql语句注入</span></span><br><span class="line">		login(<span class="string">"6f4asdfasdf"</span>,<span class="string">"3213' or '1'='1"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="增删改查操作"><a href="#增删改查操作" class="headerlink" title="增删改查操作"></a>增删改查操作</h3><ul>
<li>操作类<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"> package com.direct.day1.demo1;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.PreparedStatement;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> TestCRUD &#123;</span><br><span class="line">	@Test	</span><br><span class="line">	public void <span class="constructor">TestFindById()</span> &#123;</span><br><span class="line">		<span class="built_in">int</span> id = <span class="number">2</span>;</span><br><span class="line">		</span><br><span class="line">		Connection conn =  <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">		String sql = <span class="string">"select * from  user where id = ?"</span>;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		ResultSet rest = null;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//创建预编译sql语句对象</span></span><br><span class="line">			 pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			pstm.set<span class="constructor">Int(1, <span class="params">id</span>)</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//执行查询sql</span></span><br><span class="line">			rest =  pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">while</span>(rest.next<span class="literal">()</span>)&#123;</span><br><span class="line">				<span class="comment">//根据字段名称获取数据</span></span><br><span class="line">				<span class="built_in">int</span> uid = rest.get<span class="constructor">Int(<span class="string">"id"</span>)</span>;</span><br><span class="line">				String username = rest.get<span class="constructor">String(<span class="string">"username"</span>)</span>;</span><br><span class="line">				String pwd =  rest.get<span class="constructor">String(3)</span>;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(uid+<span class="string">" "</span>+username+<span class="string">" "</span>+pwd);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;<span class="comment">//一定会执行的代码</span></span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm,rest);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	@Test	</span><br><span class="line">	public void <span class="constructor">TestDelById()</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">int</span> id = <span class="number">3</span>;</span><br><span class="line">		</span><br><span class="line">		Connection conn =  <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">		String sql = <span class="string">"delete from  user where id = ?"</span>;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//创建预编译sql语句对象</span></span><br><span class="line">			 pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			pstm.set<span class="constructor">Int(1, <span class="params">id</span>)</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//执行更新sql,返回受影响的行</span></span><br><span class="line">			<span class="built_in">int</span> num  =  pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"没有数据被删除"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"删除了"</span>+num+<span class="string">"条"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;<span class="comment">//一定会执行的代码</span></span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	@Test	</span><br><span class="line">	public void <span class="constructor">TestSave()</span> &#123;</span><br><span class="line">		String username  = <span class="string">"wangwu"</span>;</span><br><span class="line">		String password  = <span class="string">"123456"</span>;</span><br><span class="line">		</span><br><span class="line">		Connection conn =  <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">		String sql = <span class="string">"insert into user(username,password) value(?,?)"</span>;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//创建预编译sql语句对象</span></span><br><span class="line">			 pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			 pstm.set<span class="constructor">String(1, <span class="params">username</span>)</span>;</span><br><span class="line">			 pstm.set<span class="constructor">String(2, <span class="params">password</span>)</span>;</span><br><span class="line">			 </span><br><span class="line">			<span class="comment">//执行更新sql,返回受影响的行</span></span><br><span class="line">			<span class="built_in">int</span> num  =  pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"没有数据添加"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"添加了"</span>+num+<span class="string">"条"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;<span class="comment">//一定会执行的代码</span></span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	@Test	</span><br><span class="line">	public void <span class="constructor">TestUpdate()</span> &#123;</span><br><span class="line">		<span class="built_in">int</span> id = <span class="number">4</span>;</span><br><span class="line">		String username  = <span class="string">"狗蛋"</span>;</span><br><span class="line">		String password  = <span class="string">"123456"</span>;</span><br><span class="line">		</span><br><span class="line">		Connection conn =  <span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>get<span class="constructor">Conn()</span>;</span><br><span class="line">		String sql = <span class="string">"update user  set  username = ?, password = ? where id= ? "</span>;</span><br><span class="line">		PreparedStatement pstm = null;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//创建预编译sql语句对象</span></span><br><span class="line">			 pstm = conn.prepare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line">			<span class="comment">//设置参数</span></span><br><span class="line">			 pstm.set<span class="constructor">String(1, <span class="params">username</span>)</span>;</span><br><span class="line">			 pstm.set<span class="constructor">String(2, <span class="params">password</span>)</span>;</span><br><span class="line">			 pstm.set<span class="constructor">Int(3, <span class="params">id</span>)</span>;</span><br><span class="line">			 </span><br><span class="line">			<span class="comment">//执行更新sql,返回受影响的行</span></span><br><span class="line">			<span class="built_in">int</span> num  =  pstm.execute<span class="constructor">Update()</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"没有数据修改"</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">"修改了"</span>+num+<span class="string">"条"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125; catch (SQLException e) &#123;</span><br><span class="line">			e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">		&#125;finally &#123;<span class="comment">//一定会执行的代码</span></span><br><span class="line">			<span class="comment">//释放资源</span></span><br><span class="line">			<span class="module-access"><span class="module"><span class="identifier">JDBCUtil</span>.</span></span>close(conn,pstm);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>驱动类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> package com.direct.day1.demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> &#123;</span></span><br><span class="line">	<span class="comment">//静态代码块，在类加载的时候就会执行</span></span><br><span class="line">	<span class="keyword">static</span>&#123;</span><br><span class="line">		<span class="comment">//加载驱动</span></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Connection  <span class="title">getConn</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">String</span> url = <span class="string">"jdbc:mysql://localhost:3306/demo1?characterEncoding=utf-8"</span>;</span><br><span class="line">		<span class="keyword">String</span> user = <span class="string">"root"</span>;</span><br><span class="line">		<span class="keyword">String</span> pwd = <span class="string">"123456"</span>;</span><br><span class="line">		Connection conn = null;</span><br><span class="line">		 <span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//通过驱动管理器获取数据库链接对象，需要传入参数(链接地址，账号，密码)</span></span><br><span class="line">			conn = DriverManager.getConnection(url,user, pwd);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		 <span class="comment">//返回链接</span></span><br><span class="line">		 <span class="keyword">return</span>  conn;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//释放资源的方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,PreparedStatement pstm,ResultSet rest)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(rest!=null)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				rest.<span class="built_in">close</span>();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(pstm!=null)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				pstm.<span class="built_in">close</span>();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(conn!=null)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.<span class="built_in">close</span>();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn,PreparedStatement pstm)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(pstm!=null)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				pstm.<span class="built_in">close</span>();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(conn!=null)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				conn.<span class="built_in">close</span>();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架(四)</title>
    <url>/2019/11/19/Hibernate%E6%A1%86%E6%9E%B6-%E5%9B%9B/</url>
    <content><![CDATA[<h3 id="HQL查询"><a href="#HQL查询" class="headerlink" title="HQL查询"></a>HQL查询</h3><ul>
<li>HQL的语法与SQL语法基本一致，不同的是HQL是指向面向对象查询的，查询的是对象和对象中的属性</li>
<li>HQL关键支部区分大小写，但类名和属性区分大小写<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select 别名/属性名/表达式</span><br><span class="line"><span class="keyword">from</span> 实体 as 别名 </span><br><span class="line">where 过滤条件</span><br><span class="line">group by 分组条件</span><br><span class="line">having 分组后的结果的过滤条件</span><br><span class="line">orday by 排序条件</span><br></pre></td></tr></table></figure>
<ul>
<li>查询所有客户<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Lesson8 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询所有客户，查询是所有表的字段</span></span><br><span class="line">       Query query = session.create<span class="constructor">Query(<span class="string">"from Customer"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询结果会封装到一个list集合中</span></span><br><span class="line">       List&lt;Customer&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历</span></span><br><span class="line">       for(Customer c : <span class="built_in">list</span>)&#123;</span><br><span class="line">           <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c.get<span class="constructor">Name()</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">       session.close<span class="literal">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>选择查询<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Lesson10 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.带条件</span></span><br><span class="line">       <span class="comment">//Query query = session.createQuery("from Customer where id=2");</span></span><br><span class="line">       <span class="comment">//Query query = session.createQuery("from Customer where id=?");</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.别名</span></span><br><span class="line">       <span class="comment">//Query query = session.createQuery("from Customer c where c.id=?");</span></span><br><span class="line">       Query query = session.create<span class="constructor">Query(<span class="string">"select c from Customer c where c.id=?"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.设置参数</span></span><br><span class="line">       query.set<span class="constructor">Integer(0,2)</span>;</span><br><span class="line">       <span class="comment">//query.setParameter(1,2);</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.查询结果会封装到一个list集合中</span></span><br><span class="line">       List&lt;Customer&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历</span></span><br><span class="line">       for(Customer c : <span class="built_in">list</span>)&#123;</span><br><span class="line">           <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c.get<span class="constructor">Name()</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询只获取一条数据</span></span><br><span class="line">       Customer c = (Customer)query.unique<span class="constructor">Result()</span>;</span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out,println(c);</span><br><span class="line"></span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">       session.close<span class="literal">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>投影查询(其不会把结果封装成对象，封装的是数组)<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson11 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       //查询所有客户</span><br><span class="line">       Query query = <span class="keyword">session</span>.createQuery("select c.id,c.name from Customer c ");</span><br><span class="line"></span><br><span class="line">       //查询结果会封装到一个list集合中</span><br><span class="line">       List&lt;<span class="keyword">Object</span>[]&gt; list = query.list();</span><br><span class="line"></span><br><span class="line">       //注意：封装的是数组</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">Object</span> c : obj)&#123;</span><br><span class="line">               <span class="keyword">System</span>.<span class="keyword">out</span>.peintln(c);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println("--------------")</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="排序-order-by-desc降序-asc升序"><a href="#排序-order-by-desc降序-asc升序" class="headerlink" title="排序 order by desc降序  asc升序"></a>排序 order by desc降序  asc升序</h3> <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Session session = util.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有客户结果会封装到一个list集合中</span></span><br><span class="line">    List&lt;Customer&gt; <span class="built_in">list</span> = session.createQuery(<span class="string">"from Customer c order by c.id desc"</span>).<span class="built_in">list</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">for</span>(Customer c : <span class="built_in">list</span>)&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(c)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    session.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3> <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Query</span> <span class="keyword">query</span> = session.createQuery(<span class="string">"from Customer"</span>);</span><br><span class="line"><span class="comment">//pageNum 当前页（之前的 pageCode）</span></span><br><span class="line"><span class="keyword">query</span>.setFirstResult(0);</span><br><span class="line"> <span class="comment">//每页显示个数，pageSize</span></span><br><span class="line"> <span class="keyword">query</span>.setMaxResults(5);</span><br></pre></td></tr></table></figure>
<h3 id="聚合函数和分组查询"><a href="#聚合函数和分组查询" class="headerlink" title="聚合函数和分组查询"></a>聚合函数和分组查询</h3> <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"> <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line"></span><br><span class="line">     //查询所有客户结果会封装到一个list集合中</span><br><span class="line">     Query query = <span class="keyword">session</span>.createQuery("select count（*）from Customer c ");</span><br><span class="line"></span><br><span class="line">     Long count = (Long)query.uniqueResult();</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println("客户表的总记录：+count")</span><br><span class="line"></span><br><span class="line">     //HQL分组<span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">     //<span class="keyword">SQL</span>语句 <span class="keyword">select</span> o.customer_id,count(o.customer_id) <span class="keyword">from</span>  t_order o <span class="keyword">group</span> <span class="keyword">by</span> o.customer_id;</span><br><span class="line"></span><br><span class="line">     List&lt;<span class="keyword">object</span>[]&gt; list = <span class="keyword">session</span>.createQuery("select o.customer, count(o) from Order o group by o.customer").list();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list))&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">object</span> o : obj)&#123;</span><br><span class="line">             <span class="keyword">System</span>.<span class="keyword">out</span>.println(o);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">System</span>.<span class="keyword">out</span>.println("----------");</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><ul>
<li><p>inner join 内连接</p>
</li>
<li><p>left outer join 左外连接</p>
</li>
<li><p>right outer join 右外连接</p>
</li>
<li><p>HQL中：<br>内连接  inner join | join </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       //内连接【<span class="keyword">inner</span> <span class="keyword">join</span>】返回结果数组List&lt;<span class="keyword">Object</span>[]&gt;</span><br><span class="line">       //<span class="keyword">From</span> Customer <span class="keyword">inner</span> <span class="keyword">join</span> c.orders 相当于 <span class="keyword">select</span> * form t_customer tc <span class="keyword">inner</span> <span class="keyword">join</span> t_order <span class="keyword">to</span> <span class="keyword">on</span> tc.id = <span class="keyword">to</span>.customer.id</span><br><span class="line">       List&lt;<span class="keyword">Object</span>[]&gt; list = <span class="keyword">session</span>.createQuery("From Customer c inner join c.orders").list();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj[<span class="number">0</span>]+":"+obj[<span class="number">1</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>迫切内连接  inner join feath | join fetch</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       // 迫切内连接  <span class="keyword">inner</span> <span class="keyword">join</span> feath | <span class="keyword">join</span> <span class="keyword">fetch</span> 返回数据List&lt;Customer&gt;;</span><br><span class="line">       List&lt;Customer&gt; list = <span class="keyword">session</span>.createQuery("From Customer c inner join fetch c.orders").list();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(Customer c : list)&#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println(c.getName());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>隐式内连接【join】 </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">      <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">      //隐式内连接 == 笛卡尔集过滤条件</span><br><span class="line">      List&lt;<span class="keyword">Object</span>[]&gt; list = <span class="keyword">session</span>.createQuery("From Customer c, Order o where c = o.customer").list();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">          <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj[<span class="number">0</span>]+":"+obj[<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">      <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>左外连接   left outer join | left join 左表中如果没有右表的匹配数据，左表记录也会显示<br>迫切左外连接  left outer join fetch | left join fetch<br>右外连接  right outer join | outer join<br>交叉连接  ClassA ClassB</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">      <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">      //HQL交叉连接相当于 == <span class="keyword">SQL</span>笛卡尔集</span><br><span class="line">      List&lt;<span class="keyword">Object</span>[]&gt; list = <span class="keyword">session</span>.createQuery("From Customer c, Order o").list();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">          <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj[<span class="number">0</span>]+":"+obj[<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">      <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="命名查询"><a href="#命名查询" class="headerlink" title="命名查询"></a>命名查询</h3><ul>
<li>命名查询:hql写在映射文件,通过session的getNameQuery()来返回一个Query对象<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">      <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">      //命名查询,把hql写在映射文件中比较灵活</span><br><span class="line">      <span class="comment">/*hql写入映射文件2种方式：</span></span><br><span class="line"><span class="comment">      *1.写在类class标签里面，hql是局部的</span></span><br><span class="line"><span class="comment">      *2.写在hibernate-mapping标签里面，hql是全局的</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      //String hql = "from Customer";</span><br><span class="line">      //Query query = <span class="keyword">session</span>.createQuery(hql);</span><br><span class="line">      //<span class="keyword">System</span>.<span class="keyword">out</span>.println(query.list());</span><br><span class="line"></span><br><span class="line">      //获取<span class="keyword">Class</span>里的局部hql语句(方法参数 包名+类名);</span><br><span class="line">      Query query = <span class="keyword">session</span>.getNameQuery("zhao/hibernate/domain/Customer.hql1");</span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(query.list());</span><br><span class="line"></span><br><span class="line">      //获取hibernate-<span class="keyword">mapping</span>中全局的hql(方法参数 类名);</span><br><span class="line">      Query query = <span class="keyword">session</span>.getNameQuery("hql2");</span><br><span class="line">      query.setParames(<span class="number">0</span>,"沐沐");</span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(query.uniqueResult());</span><br><span class="line">      <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">      <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>映射文件<!--第一种hql的位置-->
<query name="hql1">hql语句</query><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"zhao.hibernate.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"customer"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        描述一对多关系</span></span><br><span class="line"><span class="comment">       key中Colum写的是外键名称</span></span><br><span class="line"><span class="comment">       one-to-many 一对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">cascade</span>=<span class="string">"delete-orphan"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"zhao.hibernate.domain.Order"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-many</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--第一种hql的位置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">query</span> <span class="attr">name</span>=<span class="string">"hql1"</span>&gt;</span>from Customer<span class="tag">&lt;/<span class="name">query</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--第二种hql的位置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">query</span> <span class="attr">name</span>=<span class="string">"hql2"</span>&gt;</span>from Customer where name=?<span class="tag">&lt;/<span class="name">query</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置C3P0"><a href="#配置C3P0" class="headerlink" title="配置C3P0"></a>配置C3P0</h3></li>
<li>找到Hibernate\hibernate-release-5.4.8.Final\project\etc\hibernate.properties文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--		配置C3P0连接池--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		#hibernate.connection.provider_class org.hibernate.connection.C3P0ConnectionProvider--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		#hibernate.c3p0.max_size 2</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.min_size 2</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.timeout 5000</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.max_statements 100</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.idle_test_period 3000</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.acquire_incre</span></span><br><span class="line"><span class="comment">           ment 2</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.validate false--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.min_size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.timeout"</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_statements"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.idle_test_period"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.acquire_increment"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.validate"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="悲观锁，乐观锁"><a href="#悲观锁，乐观锁" class="headerlink" title="悲观锁，乐观锁"></a>悲观锁，乐观锁</h3><ul>
<li><p>悲观锁分为两种：</p>
<ol>
<li>读锁/共享锁【比较少用】</li>
</ol>
<ul>
<li>读锁可被其他线程所共享，如果是读取的话大家都可以用这把锁读到数据。<br>select * from table lock in share mode（读锁/共享锁）<br>start transaction; 开启事务<br>commit;  提交事务</li>
</ul>
<ol start="2">
<li>写锁/排他锁【用的多】</li>
</ol>
<ul>
<li><p>写锁不能共享，只要有人为数据加入了写锁，其他人就不能为数据加入任何锁<br>select * from table for update;【锁表，不推荐使用】<br>select * from table  where id= 1 for update;【锁行，常用】   </p>
<h3 id="Hibernate添加写锁"><a href="#Hibernate添加写锁" class="headerlink" title="Hibernate添加写锁"></a>Hibernate添加写锁</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">        <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">        //hibernate 的写锁/陪他锁实现</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 演示</span></span><br><span class="line"><span class="comment">         * A线程【命令行】，开启事务--》读取一行数据加锁</span></span><br><span class="line"><span class="comment">         * B 线程【应用程序】，开启事务--》读取一行数据加锁</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">         //方式一执行<span class="keyword">Sql</span>语句进行写锁</span><br><span class="line">         Customer customer = <span class="keyword">session</span>.<span class="keyword">get</span>(Customer.<span class="keyword">class</span>,<span class="number">1</span>,LockOptions.<span class="keyword">UPDATE</span>);//写锁</span><br><span class="line">         <span class="keyword">System</span>,<span class="keyword">out</span>.println(customer);</span><br><span class="line"></span><br><span class="line">         //方式<span class="number">2</span></span><br><span class="line">         //Query query = <span class="keyword">session</span>.createQuery("from Customer where id=?");</span><br><span class="line">         query.setLockOpties(LockOptions.<span class="keyword">UPDATE</span>);</span><br><span class="line">         query.setParamer(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">         Customer customer = (Customer)query.uniqueResult();</span><br><span class="line">         //query.executeUpdate();</span><br><span class="line">         <span class="keyword">System</span>,<span class="keyword">out</span>.println(customer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> ```    </span><br><span class="line">* 乐观锁</span><br><span class="line"> 乐观锁就是添加一个<span class="keyword">version</span>字段来控制数据的不一致性</span><br><span class="line"> <span class="number">1.</span> 实体类</span><br></pre></td></tr></table></figure>
<p>public class Customer {</p>
<p>private Integer id;  //客户Id<br>private String name; //客户名称</p>
<p>//加个乐观锁：加个版本控制字段，字段用Integer<br>private Integer version;</p>
<p>public Integer getVersion() {<br>   return version;<br>}</p>
<p>public void setVersion(Integer version) {<br>   this.version = version;<br>}</p>
<p>//一对多属性描述，一个客户对应有多个订单<br>private Set<Order> orders = new HashSet<Order>();</p>
<p>public Integer getId() {<br>   return id;<br>}</p>
<p>public void setId(Integer id) {<br>   this.id = id;<br>}</p>
<p>public String getName() {<br>   return name;<br>}</p>
<p>public void setName(String name) {<br>   this.name = name;<br>}</p>
<p>public Set<Order> getOrders() {<br>   return orders;<br>}</p>
<p>public void setOrders(Set<Order> orders) {<br>   this.orders = orders;<br>}</p>
<p>@Override<br>public String toString() {<br>   return “Customer{“ +</p>
<pre><code>&quot;id=&quot; + id +
&quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +
&apos;}&apos;;</code></pre><p>}<br>}</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">2.映射文件<span class="selector-tag">customer</span><span class="selector-class">.hbm</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
     "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
     "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>

 <class name="zhao.hibernate.domain.Customer" table="customer">
     <id name="id" column="id">
         <generator class="native"></generator>
     </id>
    <!--乐观锁 位置有dtd约束 放在 id和property和id中间-->
     <version name="version"></version>

<pre><code>&lt;property name=&quot;name&quot; column=&quot;name&quot;&gt;&lt;/property&gt;</code></pre></li>
</ul>
 <!--        描述一对多关系
        key中Colum写的是外键名称
        one-to-many 一对多，其class属性表示外键表实体类名-->
<pre><code>    &lt;set name=&quot;orders&quot; cascade=&quot;delete-orphan&quot;&gt;
        &lt;key column=&quot;customer_id&quot;&gt;&lt;/key&gt;
        &lt;one-to-many class=&quot;zhao.hibernate.domain.Order&quot;&gt;&lt;/one-to-many&gt;
    &lt;/set&gt;
&lt;/class&gt;</code></pre> </hibernate-mapping>
  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span> 测试类</span><br></pre></td></tr></table></figure>
 /*
 *乐观锁
 * */
 public class Lesson12 {

<pre><code>@Test
public void save(){

    Session session = util.openSession();
    session.getTransaction().begin();

    //乐观锁：每次更新，版本都会加1
    /*
    * 如果当前的版本【2】比数据库【3】中的低，就不更新，报错
    * Row was uodated or deleted by another transaction;
    * 乐观锁是hibernate自己实现的
    * for update 是Mysql 实现的
    * */
    Customer customer = session.get(Customer.class,1);
    customer.setName(&quot;阿尔提尔&quot;);

    session.getTransaction().commit();
    session.close();
}</code></pre><p> }<br>  <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">### log4j日志配置</span><br><span class="line"><span class="comment">* 配置文件内容：</span></span><br><span class="line">    1. 记录器</span><br><span class="line">    2. 输出源</span><br><span class="line">    3. 布局</span><br><span class="line"><span class="comment">* 记录器</span></span><br><span class="line"> 例如：log4j.rootLogger=info,stdout,<span class="keyword">file</span></span><br><span class="line"> 格式： log4j.rootLogger=日志级别，输出源1，输出源2，...</span><br><span class="line"> log4j 日志级别： fatal致命错误 <span class="keyword">error</span>错误 warm警告 info信息 debug调试  trace堆栈信息（由高到低顺序）</span><br><span class="line"><span class="comment"> * stdout控制台输出源</span></span><br><span class="line"><span class="comment">* 输出源</span></span><br><span class="line">   例如：log4j.appender.<span class="keyword">file</span>=org.apaphe.log4j.FileAppender</span><br><span class="line">   格式：log4j.appender.输出源的名称=输出源的实现类</span><br><span class="line">   名称：自定义</span><br><span class="line">   实现类：log4j提供</span><br><span class="line">   输出源属性例如：log4j.appender.<span class="keyword">file</span>.<span class="keyword">File</span>=<span class="keyword">d</span>:/mylong.<span class="keyword">log</span></span><br><span class="line">   输出源属性格式：log4j.appender.名称.属性=值</span><br></pre></td></tr></table></figure></p>
<h3 id="direct-log-messages-to-stdout"><a href="#direct-log-messages-to-stdout" class="headerlink" title="direct log messages to stdout"></a>direct log messages to stdout</h3><p> log4j.appender.stdout=org.apache.log4j.ConsoleAppender<br> log4j.appender.stdout.Target=System.out<br> log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<br> log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n</p>
<h3 id="direct-messages-to-file-hibernate-log"><a href="#direct-messages-to-file-hibernate-log" class="headerlink" title="direct messages to file hibernate.log"></a>direct messages to file hibernate.log</h3><p> #log4j.appender.file=org.apache.log4j.FileAppender</p>
<h1 id="文件输出路径"><a href="#文件输出路径" class="headerlink" title="文件输出路径"></a>文件输出路径</h1><p> #log4j.appender.file.File=hibernate.log<br> #log4j.appender.file.layout=org.apache.log4j. PatternLayout<br> #log4j.appender.file.layout.ConversionPattern=%d  {ABSOLUTE} %5p %c{1}:%L - %m%n</p>
<h3 id="set-log-levels-for-more-verbose-logging-change-‘info’-to-‘debug’"><a href="#set-log-levels-for-more-verbose-logging-change-‘info’-to-‘debug’" class="headerlink" title="set log levels - for more verbose logging change   ‘info’ to ‘debug’"></a>set log levels - for more verbose logging change   ‘info’ to ‘debug’</h3><h3 id="log4j-rootLogger-warn-stdout"><a href="#log4j-rootLogger-warn-stdout" class="headerlink" title="log4j.rootLogger=warn, stdout"></a>log4j.rootLogger=warn, stdout</h3><h1 id="ware-：日志级别"><a href="#ware-：日志级别" class="headerlink" title="ware ：日志级别"></a>ware ：日志级别</h1>  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">* 代码里使用日志。</span><br><span class="line"> step1:创建日志对象</span><br><span class="line"> step2：调用日志对象的方法</span><br><span class="line"></span><br><span class="line"> Logger（org.slf4j）</span><br><span class="line"> Logger logger = <span class="module-access"><span class="module"><span class="identifier">LoggerFactory</span>.</span></span>get<span class="constructor">Logger()</span></span><br></pre></td></tr></table></figure>
<p>  public class Lesson12 {<br>    //Logger（org.slf4j）<br>    Logger logger = LoggerFactory.getLogger(Lesson12.class);<br>    @Test<br>    public void save(){</p>
<pre><code>    Session session = util.openSession();
    session.getTransaction().begin();


   logger.error(&quot;error....&quot;);//错误
   ligger.ware(&quot;ware....&quot;);//警告
   logger.info(&quot;info.....&quot;);//信息 


    session.getTransaction().commit();
    session.close();
}</code></pre><p> }<br>   ```</p>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架(三)</title>
    <url>/2019/11/16/Hibernate%E6%A1%86%E6%9E%B6-%E4%B8%89/</url>
    <content><![CDATA[<h3 id="查询一对多和删除"><a href="#查询一对多和删除" class="headerlink" title="查询一对多和删除"></a>查询一对多和删除</h3> <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson8 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       //查询一对多</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 默认情况下，只有使用Customer的orders数据，会执行SQL查询</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line">       //查询<span class="number">2</span>的客户</span><br><span class="line">       Customer customer = <span class="keyword">session</span>.<span class="keyword">get</span>(Customer.<span class="keyword">class</span>,<span class="number">2</span>);</span><br><span class="line">       </span><br><span class="line">       //删除客户要开启事务，查询不需要</span><br><span class="line">       //<span class="keyword">session</span>.<span class="keyword">delete</span>(customer);</span><br><span class="line">       </span><br><span class="line">       //获取名字</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println("客户名字："+customer.getName());</span><br><span class="line"></span><br><span class="line">       //获取客户所有订单</span><br><span class="line">       <span class="keyword">Set</span>&lt;<span class="keyword">Order</span>&gt; orders = customer.getOrders();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">Order</span> o : orders)&#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println("购买订单名称："+o.getName());</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println("-------------");</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="cascade级联"><a href="#cascade级联" class="headerlink" title="cascade级联"></a>cascade级联</h3><ul>
<li>save-update：级联保存，级联修改，保存A（客户)时,同时保存B(订单)</li>
<li>delete ：级联删除，删除A，同时删除B<br>底层先查，后删（先删除从表，在删除主表）</li>
<li>delete-orphan：孤儿删除<br>  孤儿删除，解除关系，同时将B删除，A存在</li>
<li>如果配置多项，使用逗号隔开<set cascade="save-update,delete"><br>  all:相当于save-delete和delete整合<br>  all-delete-orphan：相当于【save-update,delete，delete-orphan】三个整合</li>
</ul>
<ol>
<li>.hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主表映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"custimer_id"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Order"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*一对多数据保存方式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">public <span class="keyword">class</span> Lesson7 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//保存数据</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.创建客户对象</span></span><br><span class="line">       Customer customer = <span class="keyword">new</span> <span class="constructor">Customer()</span>;</span><br><span class="line">       customer.set<span class="constructor">Name(<span class="string">"沐沐1"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.创建两个订单</span></span><br><span class="line">       Order order1 = <span class="keyword">new</span> <span class="constructor">Order()</span>;</span><br><span class="line">       order1.set<span class="constructor">Name(<span class="string">"手机"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       Order order2 = <span class="keyword">new</span> <span class="constructor">Order()</span>;</span><br><span class="line">       order2.set<span class="constructor">Name(<span class="string">"衣服"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.维护订单与客户的关系</span></span><br><span class="line">       order1.set<span class="constructor">Customer(<span class="params">customer</span>)</span>;</span><br><span class="line">       order2.set<span class="constructor">Customer(<span class="params">customer</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.客户拥有订单</span></span><br><span class="line">       customer.get<span class="constructor">Orders()</span>.add(order1);</span><br><span class="line">       customer.get<span class="constructor">Orders()</span>.add(order2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//5.保存</span></span><br><span class="line">       session.save(customer);<span class="comment">//保存完，客户有Id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//注意：cascade级联配置了就不需要保存从表数据</span></span><br><span class="line">       <span class="comment">//session.save(order1);</span></span><br><span class="line">       <span class="comment">//session.save(order2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">       session.close<span class="literal">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>delete-orphan：孤儿删除</li>
</ul>
<ol>
<li>.hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        描述一对多关系</span></span><br><span class="line"><span class="comment">       key中Colum写的是外键名称</span></span><br><span class="line"><span class="comment">       one-to-many 一对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">cascade</span>=<span class="string">"delete-orphan"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"zhao.hibernate.domain.Order"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-many</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson9 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">        //查询一对多</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 级联孤儿删除 delete-orphan</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        //查询<span class="number">2</span>的客户</span><br><span class="line">        Customer customer = <span class="keyword">session</span>.<span class="keyword">get</span>(Customer.<span class="keyword">class</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        //孤儿删除（把客户里所有订单删除）</span><br><span class="line">        //将订单从Customer中的<span class="keyword">set</span>集合中删除</span><br><span class="line">        <span class="keyword">Set</span>&lt;<span class="keyword">Order</span>&gt; <span class="keyword">set</span> = customer.getOrders();</span><br><span class="line">        Iterator&lt;<span class="keyword">Order</span>&gt; iterator = <span class="keyword">set</span>.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            iterator.next();//取出下一个元素</span><br><span class="line">            iterator.remove();//移除当前元素</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Hibernate表多对多-中间表id关联"><a href="#Hibernate表多对多-中间表id关联" class="headerlink" title="Hibernate表多对多(中间表id关联)"></a>Hibernate表多对多(中间表id关联)</h3></li>
</ol>
<ul>
<li>1.创建实体类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sid;<span class="comment">//学生Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;<span class="comment">//学生姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Course&gt; courses = <span class="keyword">new</span> HashSet&lt;Course&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(Integer sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Course&gt; getCourses() &#123;</span><br><span class="line">        <span class="keyword">return</span> courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(Set&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> Integer cid;<span class="comment">//课程Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;<span class="comment">//课程姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Student&gt; students = <span class="keyword">new</span> HashSet&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(Integer cid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cid = cid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Student&gt; getStudents() &#123;</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(Set&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.students = students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li><p>.hbm.xml映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhao.Dao.Student"</span> <span class="attr">table</span>=<span class="string">"t_student"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"sid"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--        描述多对多关系</span></span><br><span class="line"><span class="comment">               set中table="t_Student_Course" 中间表名字</span></span><br><span class="line"><span class="comment">               key中Colum写的是当前实体类外键名称</span></span><br><span class="line"><span class="comment">               many-to-many 多对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"courses"</span> <span class="attr">table</span>=<span class="string">"t_student_course"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"sid"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.zhao.Dao.Course"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhao.Dao.Course"</span> <span class="attr">table</span>=<span class="string">"t_course"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"cid"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--        描述多对多关系</span></span><br><span class="line"><span class="comment">            set中table="t_Student_Course" 中间表名字</span></span><br><span class="line"><span class="comment">            key中Colum写的是当前实体类外键名称</span></span><br><span class="line"><span class="comment">            many-to-many 多对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"students"</span> <span class="attr">table</span>=<span class="string">"t_student_course"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.zhao.Dao.Student"</span> <span class="attr">column</span>=<span class="string">"sid"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>hibernate.cfg.xml核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">		com.mysql.cj.jdbc.Driver</span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">		jdbc:mysql://localhost:3306/hibernate_user?serverTimezone=Asia/Shanghai</span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--		配置映射文件与数据库表关系</span></span><br><span class="line"><span class="comment">		update：有表则更新，无则创建</span></span><br><span class="line"><span class="comment">		create：每次启动hibernate都创建，（注意：以前数据没得了）</span></span><br><span class="line"><span class="comment">		create-drop：每次启动hibernate都创建，执行完后删除表--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 开启二级缓存 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 设置二级缓存插件EHCache的Provider类&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&lt;property name="hibernate.cache.region.factory_class"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--			org.hibernate.cache.ehcache.EhCacheRegionFactory--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启与当前线程绑定session功能--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库方言 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">		org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/Dao/Student.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/Dao/Course.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<ul>
<li>提取工具类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">util</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory factory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取核心配置文件对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        <span class="comment">//2.创建会话工厂</span></span><br><span class="line">        factory = configuration.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听程序关闭</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread()&#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"程序关闭。。。！"</span>);</span><br><span class="line">                <span class="comment">//关闭会话工厂</span></span><br><span class="line">                factory.<span class="built_in">close</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回会话工厂获取到的session对象</span></span><br><span class="line">        <span class="keyword">return</span> factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCurrentSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory.getCurrentSession();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li>保存数据<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> text()&#123;</span><br><span class="line"></span><br><span class="line">       //保存多对多数据</span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       //<span class="number">1.</span>创建两个学生</span><br><span class="line">       Student student =<span class="built_in">new</span> Student("赵云");</span><br><span class="line">       Student student2 =<span class="built_in">new</span> Student("洛克");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="number">2.</span>创建<span class="number">2</span>个课程</span><br><span class="line">       Course  c1 = <span class="built_in">new</span> Course("java");</span><br><span class="line">       Course  c2 = <span class="built_in">new</span> Course("c#");</span><br><span class="line"></span><br><span class="line">       //<span class="number">3.</span>绑定课程到到学生对象</span><br><span class="line">       student.getCourses().<span class="keyword">add</span>(c1);</span><br><span class="line">       student.getCourses().<span class="keyword">add</span>(c2);</span><br><span class="line"></span><br><span class="line">       student2.getCourses().<span class="keyword">add</span>(c1);</span><br><span class="line">       student2.getCourses().<span class="keyword">add</span>(c2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="number">4.</span>保存</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 注意：配置级联，只保存学生对象</span></span><br><span class="line"><span class="comment">       * 1.如果在student中配置inverse="true",由Course来维护外键关系，中间表没数据</span></span><br><span class="line"><span class="comment">       * 2.默认student配置inveerse="false",由Student来维护外键关系,中间表有数据</span></span><br><span class="line"><span class="comment">       * 3.多对多，inverse不能两边都为true；不管保存那个数据中间表都没数据</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line">       <span class="keyword">session</span>.save(student);</span><br><span class="line">       <span class="keyword">session</span>.save(student2);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加载策略"><a href="#加载策略" class="headerlink" title="加载策略"></a>加载策略</h3></li>
</ul>
<ul>
<li><p>类级别的加载策略<br>get方法即时加载数据，执行sql语句<br>load方法是懒加载数据，只有用到里面数据数据时，才执行Sql语句<br>load方法 如果只是取id，也不会执行sql语句<br>如果在.hbm.xml映射文件中的<class>lazy属性默认是懒加载’lazy=”true”‘,配置成’lazy=”false”‘这时load方法就是即时加载</p>
</li>
<li><p>关联级别</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> text()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 关联级别的加载策略</span></span><br><span class="line"><span class="comment">      * 1.默认Student下的course也是懒加载,只有访问的时候才会执行sql语句</span></span><br><span class="line"><span class="comment">      * 2.在映射文件set中配置lazy="false",不用访问course属性，也会执行sql查询数据</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line"></span><br><span class="line">      //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">      //查询学生</span><br><span class="line">      Student stu1 = (Student) <span class="keyword">session</span>.<span class="keyword">load</span>(Student.<span class="keyword">class</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(stu1);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println("------------");</span><br><span class="line">      //<span class="number">1.</span> Student下的course也是懒加载,只有访问的时候才会执行<span class="keyword">sql</span>语句</span><br><span class="line">      <span class="comment">/*Set&lt;Course&gt; courses = stu1.getCourses();//sql 语句 inner join（内连接查询）</span></span><br><span class="line"><span class="comment">      System.out.println(courses);*/</span></span><br><span class="line"></span><br><span class="line">      //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">      <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li>映射文件<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">set</span> <span class="type">name</span>="courses" table="t_student_course" <span class="keyword">cascade</span>="save-update" lazy="false"&gt;</span><br><span class="line">          &lt;key column="sid"&gt;&lt;/key&gt;</span><br><span class="line">          &lt;many-<span class="keyword">to</span>-many <span class="keyword">class</span>="com.zhao.Dao.Course" column="cid"&gt;&lt;/many-<span class="keyword">to</span>-many&gt;</span><br><span class="line">      &lt;/<span class="keyword">set</span>&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Mysql语句关联查询回顾"><a href="#Mysql语句关联查询回顾" class="headerlink" title="Mysql语句关联查询回顾"></a>Mysql语句关联查询回顾</h3><ul>
<li>查询每个学生对应课程<ul>
<li>内连接chaxun<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student ts</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> t_student_course tsc</span><br><span class="line"><span class="keyword">on</span> ts.id = tsc.sid</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> course tc</span><br><span class="line"><span class="keyword">on</span> tsc.cid = tc.id</span><br><span class="line"><span class="keyword">where</span> ts.id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li>左外连接查询:左边没有匹配到右边的数据也会显示<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> student ts</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> t_student_course tsc</span><br><span class="line"><span class="keyword">on</span> ts.id = tsc.sid</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> course tc</span><br><span class="line"><span class="keyword">on</span> tsc.cid = tc.id</span><br><span class="line"><span class="keyword">where</span> ts.id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="fetch-拿取，获取数据"><a href="#fetch-拿取，获取数据" class="headerlink" title="fetch(拿取，获取数据)"></a>fetch(拿取，获取数据)</h3></li>
</ul>
<ul>
<li><p>fetch:是指查询集合的SQL方式</p>
<ol>
<li>select：默认的，普通select查询语句</li>
<li>join：表连接查询</li>
<li>subselect：使用子查询<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> text()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 在映射文件set中配置'fatch="join"'属性</span></span><br><span class="line"><span class="comment">    * fetch:是指查询集合的SQL方式</span></span><br><span class="line"><span class="comment">    * 1.select：默认的，普通select查询语句</span></span><br><span class="line"><span class="comment">    * 2. join：查询数据时，使用一条语句搞定,使用左外连接</span></span><br><span class="line"><span class="comment">    * 3. subselect：使用子查询，在条件里有select语句</span></span><br><span class="line"><span class="comment">    *              子查询只能用于多对多，一对多中</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line"></span><br><span class="line">    //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">    //查询</span><br><span class="line">    Student student =<span class="keyword">session</span>.<span class="keyword">load</span>(Student.<span class="keyword">class</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(student);</span><br><span class="line">    //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">    <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>多对一加载策略</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">   多对一加载策略：</span><br><span class="line">   lazy：有三个选项</span><br><span class="line">   <span class="literal">false</span>：【即时加载数据】</span><br><span class="line">   proxy：使用代理，根据类级别的加载策略来决定，还要依赖fetch</span><br><span class="line">   no-proxy：无代理</span><br><span class="line"></span><br><span class="line">   多种情况： </span><br><span class="line">   class:lazy   mony：lazy    mony:fetch</span><br><span class="line">   =======================================</span><br><span class="line">   <span class="literal">false</span>          <span class="built_in"> proxy </span>          join        即时加载数据，一条SQL语句</span><br><span class="line">   <span class="literal">false</span>          <span class="built_in"> proxy </span>          select      Order是及时加载，Customer是懒加载</span><br><span class="line">   <span class="literal">true</span>           <span class="built_in"> proxy </span>          join        Order是懒加载，Customer是及时加载</span><br><span class="line">   <span class="literal">true</span>           <span class="built_in"> proxy </span>          select      Order是懒加载，Customer是懒加载 </span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">&lt;many-to-one <span class="attribute">name</span>=<span class="string">"customer"</span> <span class="attribute">class</span>=<span class="string">"Customer"</span>  <span class="attribute">column</span>=<span class="string">"customer_id"</span> <span class="attribute">lazy</span>=<span class="string">"proxy"</span> <span class="attribute">fecth</span>=<span class="string">"join"</span>/&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="批量加载"><a href="#批量加载" class="headerlink" title="批量加载"></a>批量加载</h3><ul>
<li>set标签中可以配置一个batch-size=”2”,表示每次加载两条数据</li>
<li>映射文件<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">set</span> <span class="type">name</span>="orders" <span class="keyword">cascade</span>="delete-orphan" batch-size="2"&gt;</span><br><span class="line">          &lt;key column="customer_id"&gt;&lt;/key&gt;</span><br><span class="line">          &lt;one-<span class="keyword">to</span>-many <span class="keyword">class</span>="zhao.hibernate.domain.Order"&gt;&lt;/one-<span class="keyword">to</span>-many&gt;</span><br><span class="line">      &lt;/<span class="keyword">set</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*批量加载数据</span></span><br><span class="line"><span class="comment">*set中添加属性batch-size</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lesson10</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.openSession();</span><br><span class="line">       <span class="comment">//session.getTransaction().begin();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//查询所有与客户</span></span><br><span class="line">       List&lt;Customer&gt; <span class="built_in">list</span> = session.createQuery(<span class="string">"From Customer"</span>).<span class="built_in">list</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历客户，查看这个客户有多少订单</span></span><br><span class="line">       <span class="keyword">for</span>(Customer customer : <span class="built_in">list</span>)&#123;</span><br><span class="line">           System.out.<span class="built_in">println</span>(<span class="string">"客户名称："</span>+customer.getName()+<span class="string">"订单数量："</span>+customer.getOrders().<span class="built_in">size</span>());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//session.getTransaction().commit();</span></span><br><span class="line">       session.<span class="built_in">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>hibernate异常(一)</title>
    <url>/2019/11/13/hibernate%E5%BC%82%E5%B8%B8-%E4%B8%80/</url>
    <content><![CDATA[<h4 id="异常：Error-executing-DDL"><a href="#异常：Error-executing-DDL" class="headerlink" title="异常：Error executing DDL"></a>异常：Error executing DDL</h4><ul>
<li><p>hibernate支持使用旧的方言，而在新版本中就要求使用新的方言了<br>报错：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">hibernate.cfg.xml配置自动创建表：</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;update&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line"></span><br><span class="line">会通过映射文件生成一个sql语句来创建表，</span><br><span class="line"></span><br><span class="line">如果配置了下面方言的语句：</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"hibernate.dialect"</span>&gt;org.hibernate.dialect.MySQLDialect&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line"></span><br><span class="line">而且你使用的mysql是<span class="number">5.</span>x,那么会报错： type=MyISAM</span><br><span class="line"></span><br><span class="line">解决方法是：</span><br><span class="line"></span><br><span class="line">配置改成：</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"hibernate.dialect"</span>&gt;org.hibernate.dialect.MySQL5Dialect&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line"></span><br><span class="line">MySQL5Dialect： An SQL dialect <span class="keyword">for</span> MySQL <span class="number">5.</span>x specific features.</span><br></pre></td></tr></table></figure></li>
<li><p>异常：Caused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘type=MyISAM’ at line 5<br>大概意思执行SQL语句第5行”type=MyISAM”产生异常</p>
</li>
<li><p>异常：Caused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘order (</p>
<pre><code>id integer not null auto_increment,</code></pre><p>‘ at line 1<br>解决方法：<br>注意：这种一般情况下是语法问题，说明mysql的各种语句还是不够熟练，<br>（1）看表名是不是使用了Mysql的关键字，如果是，请立马改掉；<br>（2）语句给出哪里错误，如我的题目中给出“near”,说明在那附近有问题，我的错误是，使用了Mysql的关键字order<br>改掉就好了。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>hibernate异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架(二)</title>
    <url>/2019/11/13/Hibernate%E6%A1%86%E6%9E%B6-%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="实体类（entity）"><a href="#实体类（entity）" class="headerlink" title="实体类（entity）"></a>实体类（entity）</h3><ul>
<li><p>编写规则：</p>
<pre><code>1. 必须提供无参构造方法，获取数据封装模型会调用无参的构造方法
2. 提供一个表示属性，映射数据表主键字段，提供Id（映射文件）
3. 所有属性提供public访问修饰符的 set get 方法（JavaBean）
4.标识属性应尽量使用基本数据类型的包装类型（int integer  bibernate面向对象）
5.不要用final修饰实体，（将无法生成代理对象进行优化）</code></pre></li>
<li><p>持久化对象的唯一标识OID（对象的Id）</p>
<pre><code>1. Java按地址去区分同一个类的不同对象
2. 关系数据库用主键区分同一条数据
3. Hibernate使用OID来建立内存中的对象和数据库中记录的对应关系结论：对象的OID和数据库的表的主键对应。
4. 为保证OID的唯一性，应该让Hibernate来为OID赋值</code></pre></li>
<li><p>区分自然主键和代理主键</p>
<pre><code>1. 主键需要具备：不为空、不能重复、不能改变
2. 自然主键： 在业务中，某个属性符合主键的三个要求，那么该属性可以作为主键列，【登录名可以是自然主键】
3. 代理主键： 在业务中，不符合以上3个属性，那么就增加一个没有意义的列，那么就增加一个没有意义的的列，作为主键</code></pre></li>
<li><p>基本数据类型和包装数据类型</p>
<pre><code>1. 基本数据类型和包装数据类型都对应Hibernate的映射数据类型相同
2. 基本数据类型无法表示为空（null），数字类型默认为0
3. 包装数据类型默认值为空（null），但对于默认值有业务意义时需要使用包装类</code></pre></li>
<li><p>主键生成策略.hbm.xml(映射文件)</p>
<pre><code>&lt;generator calss=&quot;&quot;&gt;&lt;/generator&gt;
1. native 【经常使用】
        如果是Mysql，id会自动增长
        如果是oracle数据库，也会自动增长，与sequence相关
2. increment也会自动增长，但是其由Hibernate实现增长(表中Id的最大值)，
   执行select MAX(id)查询，会有线程并发问题
3. sequence 一般在oracle数据库才用
4. uuid 【经常使用】一个长字符串需要把实体类的id改成字符串
保存的时候自己不用设置Id，hibernate会自动生成
5. assigned 【经常使用】要手动设置Id
保存时设置：
    user.setId(UUID.rendomUUID().toString().replace(&quot;-&quot;,&quot;&quot;));</code></pre><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">id</span> <span class="built_in">name</span>=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;</span><br><span class="line">       &lt;generator <span class="built_in">class</span>=<span class="string">"native"</span>&gt;&lt;/generator&gt;</span><br><span class="line">&lt;/<span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>动态更新及插入<br>在映射文件<class name="全限定类名" table="表名" dynamic-insert="true" dynamic-update="true" />中添加属性</p>
<pre><code>dynamic-insert=&quot;true&quot; 动态插入
dynamic-update=&quot;true&quot; 动态更新</code></pre></li>
<li><p>type<br><property name="username" column="username" type="java.lang.String" length="16"></property></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--       Date 类型 在property中默认为 datetime</span></span><br><span class="line"><span class="comment">            可用属性 type="Date" 声明格式 数据库为  Date</span></span><br><span class="line"><span class="comment">            type="time" 数据库为 time --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>状态的转换过程</p>
</li>
<li><p>实体entity有三种状态：<br> 瞬时状态，持久状态，托管状态<br> 瞬时状态：Transaction，session没有缓存，数据库也没有记录<br> ，Oid没值<br> 持久状态：persist ，save有缓存，数据库也有记录，oid有值<br> 托管状态：detached，session没有缓存，数据库有记录，oid有值</p>
<ol>
<li>查询操作：get、load、createQuery、createCriteria 等 获得都是持久态</li>
<li>瞬时状态：执行save、update、saveOrUpdate之后变成持久状态</li>
<li>持久态转托管态<br>session.close();关闭<br>session.clear();清除所有<br>session.evict(object) 清除指定的po对象</li>
</ol>
</li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul>
<li>一级缓存： session级别缓存，当获得一次会话（session），bibernate在seaaion中创建多个集合（map），用于存放操作数据的PO对象，位程序优化服务，如果之前需要相应的数据，hibernate优先从session中获取，如果有就使用，如果没有就查询数据库。当session关闭时，一级缓存销毁。<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">*证明一级缓存存在</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson3 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">User</span> <span class="keyword">user</span> = (<span class="keyword">User</span>) <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">5</span>);//执行<span class="keyword">select</span></span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">session</span>.clear();//清除所有缓存</span><br><span class="line">       <span class="keyword">session</span>.fulsh();//刷新</span><br><span class="line">       <span class="keyword">User</span> user1 = (<span class="keyword">User</span>) <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">5</span>);//不执行selecct</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>一级缓存的细节<ul>
<li>HQL的结果会进行一级缓存，SQL的结果不会添加到一级缓存<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson4 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //查询所有数据</span><br><span class="line">       //<span class="number">1.</span>HQL会对数据进行一级缓存</span><br><span class="line">       Query query = <span class="keyword">session</span>.createQuery("From User");</span><br><span class="line">       List&lt;<span class="keyword">User</span>&gt; list = query.list();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">User</span> <span class="keyword">user</span> = <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">3</span>);</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="keyword">SQL</span>不会对数据进行一级缓存</span><br><span class="line">       SQLQuery query1 = <span class="keyword">session</span>.createSQLQuery("select * from hibernate_user");</span><br><span class="line">       List&lt;<span class="keyword">User</span>&gt; list2 = query.list();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">User</span> user2 = <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">3</span>);</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(user2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="number">3.</span>Criteria会对数据进行一级缓存</span><br><span class="line">       Criteria criteria = <span class="keyword">session</span>.createCriteria(<span class="keyword">User</span>.<span class="keyword">class</span>);</span><br><span class="line">       List list1 = criteria.list();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">User</span> user3 = <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">3</span>);</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(user3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="save和persist方法区别（保存数据）"><a href="#save和persist方法区别（保存数据）" class="headerlink" title="save和persist方法区别（保存数据）"></a>save和persist方法区别（保存数据）</h3></li>
</ul>
</li>
</ul>
<ol>
<li>save方法:瞬时态 转换 持久态会初始化OID</li>
</ol>
</li>
<li>执行save方法，立即触发insert语句，从数据库获得主键值（OID值）</li>
<li>执行save方法前，设置OID将忽略</li>
<li>如果执行查询，session缓存清除了，在执行save方法，将执行insert<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">public</span> <span class="keyword">class</span> Lesson5 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *  1. save方法:瞬时态 转换 持久态会初始化OID</span></span><br><span class="line"><span class="comment">        * 执行save方法，立即触发insert语句，从数据库获得主键值（OID值）</span></span><br><span class="line"><span class="comment">        * 执行save方法前，设置OID将忽略</span></span><br><span class="line"><span class="comment">        * 如果执行查询，session缓存清除了，在执行save方法，将执行insert</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> =  <span class="built_in">new</span> <span class="keyword">User</span>();//瞬时态</span><br><span class="line">        <span class="keyword">user</span>.setUid(<span class="number">12</span>);</span><br><span class="line">        <span class="keyword">user</span>.setUsername("黎明");</span><br><span class="line">        <span class="keyword">user</span>.setPassword("123");</span><br><span class="line">        <span class="keyword">user</span>.setBirthday(<span class="built_in">new</span> <span class="type">Date</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">session</span>.save(<span class="keyword">user</span>);//持久态</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">session</span>.clear();//<span class="keyword">user</span>托管状态</span><br><span class="line">        <span class="keyword">session</span>.save(<span class="keyword">user</span>);</span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>persist方法：瞬时态 转换 持久态</li>
</ol>
<ul>
<li>persist保存的对象，再保存前，不能设置Id，否则会报错</li>
<li>save和persist都有持久化对象的作用</li>
<li>save 应为需要返回一个主键值，因此会立即执行insert语句<br>而persiet 在事务外部调用时则不会立即执行insert语句，<br>在事务内调用还是会立即执行 insert 语句</li>
</ul>
</li>
</ul>
<h3 id="表关系创建模型（一对多，多对多，一对一）"><a href="#表关系创建模型（一对多，多对多，一对一）" class="headerlink" title="表关系创建模型（一对多，多对多，一对一）"></a>表关系创建模型（一对多，多对多，一对一）</h3><ul>
<li>实体类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//主表实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id;  <span class="comment">//客户Id</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> name; <span class="comment">//客户名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多属性描述，一个客户对应有多个订单</span></span><br><span class="line">   <span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> HashSet&lt;Order&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Set&lt;Order&gt; getOrders() &#123;</span><br><span class="line">       <span class="keyword">return</span> orders;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrders</span><span class="params">(Set&lt;Order&gt; orders)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.orders = orders;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//从表实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id; <span class="comment">//订单ID，以后工作中订单Id一般用UUID字符串类型</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> name; <span class="comment">//订单名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Customer customer;<span class="comment">//订单属性只属于某个客户</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> customer;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.customer = customer;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>映射文件 .hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主表映射文件 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"zhao.hibernate.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"customer"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        描述一对多关系</span></span><br><span class="line"><span class="comment">       key中Colum写的是外键名称</span></span><br><span class="line"><span class="comment">       one-to-many 一对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"zhao.hibernate.domain.Order"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-many</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--从表映射文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"zhao.hibernate.domain.Order"</span> <span class="attr">table</span>=<span class="string">"t_order"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  描述Customer的关系</span></span><br><span class="line"><span class="comment">       many-to-many:多对一</span></span><br><span class="line"><span class="comment">       class：主键的实体类</span></span><br><span class="line"><span class="comment">       coulmn:写外键--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"zhao.hibernate.domain.Customer"</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>核心配置文件 hibernate.cfg.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">			com.mysql.cj.jdbc.Driver</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">			jdbc:mysql://localhost:3306/hibernate_user?serverTimezone=Asia/Shanghai</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--		配置映射文件与数据库表关系</span></span><br><span class="line"><span class="comment">			update：有表则更新，无则创建</span></span><br><span class="line"><span class="comment">			create：每次启动hibernate都创建，（注意：以前数据没得了）</span></span><br><span class="line"><span class="comment">			create-drop：每次启动hibernate都创建，执行完后删除表--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 开启二级缓存 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--		&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 设置二级缓存插件EHCache的Provider类&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;property name="hibernate.cache.region.factory_class"&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--			org.hibernate.cache.ehcache.EhCacheRegionFactory--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;/property&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--开启与当前线程绑定session功能--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库方言 此处注意MySQL版本--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">			org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"zhao/hibernate/domain/hibernate.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"zhao/hibernate/domain/Customer.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"zhao/hibernate/domain/order.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*一对多数据保存方式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">public <span class="keyword">class</span> Lesson7 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//保存数据</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.创建客户对象</span></span><br><span class="line">       Customer customer = <span class="keyword">new</span> <span class="constructor">Customer()</span>;</span><br><span class="line">       customer.set<span class="constructor">Name(<span class="string">"沐沐"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.创建两个订单</span></span><br><span class="line">       Order order1 = <span class="keyword">new</span> <span class="constructor">Order()</span>;</span><br><span class="line">       order1.set<span class="constructor">Name(<span class="string">"手机"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       Order order2 = <span class="keyword">new</span> <span class="constructor">Order()</span>;</span><br><span class="line">       order2.set<span class="constructor">Name(<span class="string">"衣服"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.维护订单与客户的关系</span></span><br><span class="line">       order1.set<span class="constructor">Customer(<span class="params">customer</span>)</span>;</span><br><span class="line">       order2.set<span class="constructor">Customer(<span class="params">customer</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.客户拥有订单</span></span><br><span class="line">       customer.get<span class="constructor">Orders()</span>.add(order1);</span><br><span class="line">       customer.get<span class="constructor">Orders()</span>.add(order2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//5.保存</span></span><br><span class="line">       session.save(customer);<span class="comment">//保存完，客户有Id</span></span><br><span class="line">       session.save(order1);</span><br><span class="line">       session.save(order2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">       session.close<span class="literal">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设置外键维护关系"><a href="#设置外键维护关系" class="headerlink" title="设置外键维护关系"></a>设置外键维护关系</h3></li>
<li>修改Customer的映射文件，在set中添加inverse属性</li>
<li>inverse 是hibernate 双向关系中的基本概念。inverse的真正作用是指定出有那一方面来维护之间的关联关系。<br>当一方中指定了”inverse=false(默认)”,那么哪一方就有责任负责之间的关联关系。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- inverse:反转 true 表示为另一方来维护外键关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_Id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"从表实体类全限定名名"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql笔记</title>
    <url>/2019/11/06/Mysql%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="关联mysql"><a href="#关联mysql" class="headerlink" title="关联mysql"></a>关联mysql</h3><ul>
<li><p>报错：Server returns invalid timezone. Go to ‘Advanced’ tab and set ‘serverTimezon’</p>
</li>
<li><p>时区错误，MySQL默认的时区是UTC时区，比北京时间晚8个小时。</p>
</li>
<li><p>所以要修改mysql的时长</p>
</li>
<li><p>方式一：在mysql的命令模式下，输入：</p>
<p>  set global time_zone=’+8:00’;</p>
<p>  再次连接成功</p>
</li>
<li><p>方式二：</p>
<p>spring.datasource.url=jdbc:mysql://localhost:3306/secondskill?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架（一）</title>
    <url>/2019/11/06/Hibernate%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="Web内容回顾"><a href="#Web内容回顾" class="headerlink" title="Web内容回顾"></a>Web内容回顾</h3><ul>
<li>javaEE 三层架构</li>
</ul>
<ol>
<li>web层 ：struts2框架，SpringMVC框架</li>
<li>service层： spring框架 </li>
<li>Dao层： Hibernate框架 MyBites框架<pre><code>对数据库进行CRUD操作</code></pre></li>
</ol>
<h3 id="MVC思想"><a href="#MVC思想" class="headerlink" title="MVC思想"></a>MVC思想</h3><ol>
<li>m：模型</li>
<li>v：视图</li>
<li>c：控制器<h3 id="Hibernate概述"><a href="#Hibernate概述" class="headerlink" title="Hibernate概述"></a>Hibernate概述</h3></li>
</ol>
<ul>
<li><p>框架：半成品项目</p>
</li>
<li><p>Hibernate框架：</p>
<ol>
<li>Dao层框架2.</li>
<li>底层是对jdbc的封装</li>
<li>开源轻量级框架<br><img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=9f95e02a03f3d7ca18fb37249376d56c/d009b3de9c82d158cb08fea58f0a19d8bc3e421f.jpg" alt="bibernate"></li>
</ol>
</li>
<li><p>ORM思想</p>
<ol>
<li>hibarnate使用orm思想对数据库进行crud操作</li>
<li>在web阶段学习的JavaBean，更正确叫法实体类</li>
<li>orm：object ，relational（关系）mapping  对象关系映射<br>让实体类和数据库表进行一一对应关系<br>让数据库表里的字段 和 实体类的属性对应<br>不需要直接操作数据库表，而操作表对应实体类对象<br>案例：<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">jdbc代码</span><br><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line"><span class="keyword">class</span>.forname(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//创建链接</span></span><br><span class="line">Connection conn = <span class="module-access"><span class="module"><span class="identifier">DriverManager</span>.</span></span>get<span class="constructor">Connection(<span class="params">url</span>,<span class="params">user</span>,<span class="params">password</span>)</span>;</span><br><span class="line"><span class="comment">//对Sql语句进行预编译效果</span></span><br><span class="line">String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">PrepareStatement psmt = conn.perpare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line"><span class="comment">//执行Sql语句</span></span><br><span class="line">ResultSet rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line"><span class="comment">//遍历结果集</span></span><br><span class="line">.....</span><br><span class="line"><span class="comment">//释放资源(关闭连接)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Hibarnate 实体类<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">user</span>()&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    pribvate String password;</span><br><span class="line">    <span class="comment">//set get 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在配置文件中实现表与实体类的一一对应<br>不需要操作表，而是表对应的实体类</li>
<li>hibarnate封装的对象session<br>//创建对象<br>User user = new User();<br>user.setUserName(“eratg”);<br>session.save(user);</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Hibarnate入门"><a href="#Hibarnate入门" class="headerlink" title="Hibarnate入门"></a>Hibarnate入门</h3><ol>
<li><p>导包：<br>包的作用:<br>net.sf.hibernate.*<br>该包的类基本上都是接口类和异常类<br>net.sf.hibernate.cache.*<br>JCS的实现类<br>net.sf.hibernate.cfg.*<br>配置文件读取类<br>net.sf.hibernate.collection.*<br>Hibernate集合接口实现类，例如List，Set，Bag等等，Hibernate之所以要自行编写集合接口实现类是为了支持lazy loading<br>net.sf.hibernate.connection.*<br>几个数据库连接池的Provider<br>net.sf.hibernate.dialect.*<br>支持多种数据库特性，每个Dialect实现类代表一种数据库，描述了该数据库支持的数据类型和其它特点，例如是否有AutoIncrement，是否有Sequence，是否有分页sql等等<br>net.sf.hibernate. eg.*<br>Hibernate文档中用到的例子<br>net.sf.hibernate.engine.*<br>这个包的类作用比较散<br>net.sf.hibernate.expression.*<br>HQL支持的表达式<br>net.sf.hibernate.hq.*<br>HQL实现<br>net.sf.hibernate. id.*<br>ID生成器<br>net.sf.hibernate.impl.*<br>最核心的包，一些重要接口的实现类，如Session，SessionFactory，Query等<br>net.sf.hibernate.jca.*<br>JCA支持，把Session包装为支持JCA的接口实现类<br>net.sf.hibernate.jmx.*<br>JMX是用来编写App Server的管理程序的，大概是JMX部分接口的实现，使得App Server可以通过JMX接口管理Hibernate<br>net.sf.hibernate.loader.*<br>也是很核心的包，主要是生成sql语句。<br>net.sf.hibernate.lob.*<br>Blob和Clob支持<br>net.sf.hibernate.mapping.*<br>hbm文件的属性实现<br>net.sf.hibernate.metadata.*<br>PO的Meta实现<br>net.sf.hibernate.odmg.*<br>ODMG是一个ORM标准，这个包是ODMG标准的实现类<br>net.sf.hibernate.persister.*<br>核心包，实现持久对象和表之间的映射<br>net.sf.hibernate.proxy.*<br>Proxy和Lazy Loading支持<br>net.sf.hibernate. ps.*<br>该包是PreparedStatment Cache<br>net.sf.hibernate.sql.*<br>生成JDBC sql语句的包<br>net.sf.hibernate.test.*<br>测试类，你可以用junit来测试Hibernate<br>net.sf.hibernate.tool.hbm2ddl.*<br>用hbm配置文件生成DDL<br>net.sf.hibernate.transaction.*<br>Hibernate Transaction实现类<br>net.sf.hibernate.type.*<br>Hibernate中定义的持久对象的属性的数据类型<br>net.sf.hibernate.util.*<br>一些工具类，作用比较散<br>net.sf.hibernate.xml.*<br>XML数据绑定</p>
</li>
<li><p>创建实体类<br>使用hibarnate 时候，不需要自己手动创建表，hibarnate会创建表</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(<span class="keyword">String</span> username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(<span class="keyword">String</span> password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"uid="</span> + uid +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置数据库表和实体类一一对应关系(映射)</p>
<ul>
<li>创建XML格式的配置文件<br>建议：在实体类所在包中创建，实体类名.hbm.xml;<br>在配置文件中引入xml约束 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibarnate-mpping PUBLC</span></span><br><span class="line"><span class="meta">   "-//Hibernate/Hibaernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">   "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="hibernate映射的配置文件XML"><a href="#hibernate映射的配置文件XML" class="headerlink" title="hibernate映射的配置文件XML"></a>hibernate映射的配置文件XML</h4><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573040111707&di=3810b046e0a99ebe7445132675534d50&imgtype=0&src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fpng%2Fda0a0d956df111683450e7d4d1a805c7.png%3Fx-oss-process%3Dimage%2Fresize%2Cp_100%2Fauto-orient%2C1%2Fquality%2Cq_90%2Fformat%2Cjpg%2Fwatermark%2Cimage_eXVuY2VzaGk%3D%2Ct_100" alt="class,属性详解"></p>
<ul>
<li>hibernate.hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibarnate-mpping PUBLC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibaernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibarnate-mpping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置类和表的对应</span></span><br><span class="line"><span class="comment">       name:实体类全路径</span></span><br><span class="line"><span class="comment">       table=;数据库表名称--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhao.Dao.User"</span> <span class="attr">table</span>=<span class="string">"t_user"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置实体类和表中id对应</span></span><br><span class="line"><span class="comment">           hiberna要求实体类有一个属性唯一值</span></span><br><span class="line"><span class="comment">           hibernate要求表的字段作为唯一值--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        id标签 name：实体类里面id属性名称</span></span><br><span class="line"><span class="comment">                   column：生成表字段名称--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt; !<span class="attr">--</span>            设置数据库<span class="attr">id</span>增长的策略<span class="attr">--</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name；是实体类中属性 column：是与之对应的数据库表中字段  --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"adderss"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibarnate-mpping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建Hibernate的核心配置文件<br>注意：核心XML文件，其文件名和位置是固定的；<br>位置：必须src下<br>名称: 必须hibernate.cfg.xml</li>
</ul>
<ol>
<li>引入dtd约束<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>hibernate操作过程中，只会加载核心配置文件，其他配置文件不会加载</li>
</ol>
<ul>
<li>配置数据库信息</li>
<li>配置hibernate信息</li>
<li>映射文件放入核心文件</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li>hibernate.cfg.xml配置文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">			com.mysql.cj.jdbc.Driver</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">			jdbc:mysql://localhost:3306/hibernate_user</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 开启二级缓存 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 设置二级缓存插件EHCache的Provider类&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;property name="hibernate.cache.region.factory_class"&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--			org.hibernate.cache.ehcache.EhCacheRegionFactory--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库方言 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">			org.hibernate.dialect.MySQLDialect</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/hibernate/domain/hibernate.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SessionFactory工厂"><a href="#SessionFactory工厂" class="headerlink" title="SessionFactory工厂"></a>SessionFactory工厂</h3><ul>
<li>sessionFactory 工厂用于管理所有的所有的session</li>
<li>获得SessionFactory方式：config.bulidSessionFactory();</li>
<li>sessionFactory线程安全：多个线程同时访问数据时，不会出现线程并发问题<h3 id="Session会话获取"><a href="#Session会话获取" class="headerlink" title="Session会话获取"></a>Session会话获取</h3></li>
<li>sessionFarctory提供两个方法获取两个方法获取session</li>
<li>factory.openSession() 获取一个全新的session</li>
<li>factory.getCurrentSession() 获取一个与当前线程绑定的session</li>
</ul>
<ul>
<li>注意：<ul>
<li>要使用getCurrentSession()必须在hibernate.cfg.hbm.xml中配置<br><property name="hibernate.current_session_context_class">thread</property><ul>
<li>hibernate支持，将创建的session绑定到本地线程池中，底层使用ThreadLocal，<br>在线程之间共享session</li>
<li>如果提交或者回滚事务，底层自动关闭事务  所以session不需要自动动关闭</li>
</ul>
</li>
</ul>
</li>
<li>测试类<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">//保存用户数据</span><br><span class="line">        //<span class="number">1.</span>获取核心配置文件，默认加载src的hiber.cfg.xml文件</span><br><span class="line">        <span class="keyword">Configuration</span> <span class="keyword">configuration</span> = <span class="built_in">new</span> <span class="keyword">Configuration</span>().configure();</span><br><span class="line">        //代码方式加载映射文件</span><br><span class="line">        //方式一</span><br><span class="line">        //<span class="keyword">configuration</span>.addResource("com/zhao/hibernate/domain/hibernate.hbm.xml");</span><br><span class="line">        //方式二</span><br><span class="line">        //<span class="keyword">configuration</span>.addClass(<span class="keyword">User</span>.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">        //<span class="number">2.</span>创建会话工厂</span><br><span class="line">        SessionFactory factory = <span class="keyword">configuration</span>.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        //<span class="number">3.</span>创建会话【会话相当于连接Coonnection】</span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = factory.openSession();</span><br><span class="line"></span><br><span class="line">        //<span class="number">4.</span> 开启事务</span><br><span class="line">        <span class="keyword">Transaction</span> <span class="keyword">transaction</span> = <span class="keyword">session</span>.getTransaction();</span><br><span class="line">        <span class="keyword">transaction</span>.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">        //<span class="number">5.</span>保存【直接把对象保存到数据库】</span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">        <span class="keyword">user</span>.setUsername("阿尔提尔");</span><br><span class="line">        <span class="keyword">user</span>.setPassword("123");</span><br><span class="line">        <span class="keyword">session</span>.save(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line">        //<span class="number">6.</span>关闭会话</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">        //<span class="number">7.</span>关闭工厂，释放资源</span><br><span class="line">        factory.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加载映射文件"><a href="#加载映射文件" class="headerlink" title="加载映射文件"></a>加载映射文件</h3>  代码方式加载映射文件<ul>
<li>方式一<br>//configuration.addResource(“com/zhao/hibernate/domain/hibernate.hbm.xml”);</li>
<li>方式二<br>//configuration.addClass(User.class);</li>
<li>方式三：配置<br><mapping name="全限定名"></mapping></li>
</ul>
</li>
</ul>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ol>
<li><p>session.save()  保存   </p>
</li>
<li><p>session.get(user.class,4)|session.load(user.class,5);通过Id查找<br> 区别：</p>
<ul>
<li>无数据时get方法显示为空，而load报错</li>
<li>get方法直接加载数据</li>
<li>load方法设计是懒加载，用到的时候才会加载数据</li>
<li>load方法返回的数据是一个代理</li>
</ul>
</li>
<li><p>delete，删除数据两种方式</p>
<ul>
<li><p>第一种方式：先获取要删除的对象，然后在调用delete方法<br>   User user =(User)session.get(User.class,5);<br>   session.delete(user);</p>
</li>
<li><p>第二种方式：创建一个user对象，设置Id，然后在调用delete方法；<br>   User user = new User();<br>   user.setId(8);<br>   session.delete(user);</p>
</li>
</ul>
</li>
</ol>
<ul>
<li>事务：<br>  开启事务：session.getTransaction().begin();<br>  提交事务：session.getTransaction().commit();</li>
</ul>
<ol start="4">
<li>update 更新数据<ul>
<li>获取数据，调用set方法，事务提交<br>User user = (User)session.get(User.class,5);<br>user.setUsername(“哒哒”);<br>session.Update(user);<br>//session.saveOrUpdate(user);判断user有没有id，有则更新数据，无则插入数据<br>注意：插入数据事物自动提交</li>
</ul>
</li>
</ol>
<h3 id="Query对象（分页查询）"><a href="#Query对象（分页查询）" class="headerlink" title="Query对象（分页查询）"></a>Query对象（分页查询）</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Lesson1 &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Test</span></span><br><span class="line">    public void <span class="keyword">save</span>()&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存用户数据</span></span><br><span class="line">        <span class="comment">//1.获取核心配置文件，默认加载src的hiber.cfg.xml文件</span></span><br><span class="line">        Configuration configuration = new Configuration().configure();</span><br><span class="line">        <span class="comment">//代码方式加载映射文件</span></span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        <span class="comment">//configuration.addResource("com/zhao/hibernate/domain/hibernate.hbm.xml");</span></span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line">        <span class="comment">//configuration.addClass(User.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建会话工厂</span></span><br><span class="line">        SessionFactory factory = configuration.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话【会话相当于连接Coonnection】</span></span><br><span class="line">        Session session = factory.openSession();</span><br><span class="line">        <span class="comment">//查询对象</span></span><br><span class="line">        <span class="keyword">Query</span>&lt;User&gt;  <span class="keyword">query</span> = session.createQuery(<span class="string">"from User"</span>);</span><br><span class="line">                ;</span><br><span class="line">        <span class="comment">//分页查询limit?,?</span></span><br><span class="line">        <span class="keyword">query</span>.setFirstResult(0); <span class="comment">//起始位置</span></span><br><span class="line">        <span class="keyword">query</span>.setMaxResults(3);  <span class="comment">//查询条数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//返回一行数据  query.uniqueResult();</span></span><br><span class="line">        <span class="comment">//返回多行数据</span></span><br><span class="line">        <span class="keyword">List</span> <span class="keyword">list</span> = <span class="keyword">query</span>.<span class="keyword">list</span>();</span><br><span class="line">        <span class="keyword">for</span> (Object  obj : <span class="keyword">list</span>)&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭会话</span></span><br><span class="line">        session.<span class="keyword">close</span>();</span><br><span class="line">        <span class="comment">//7.关闭工厂，释放资源</span></span><br><span class="line">        factory.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Criteria对象"><a href="#Criteria对象" class="headerlink" title="Criteria对象"></a>Criteria对象</h3><ul>
<li>hibernate提供的纯面向对象语言，提供直接使用PO对象进行操作<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Lesson3 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存用户数据</span></span><br><span class="line">        <span class="comment">//1.获取核心配置文件，默认加载src的hiber.cfg.xml文件</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> <span class="constructor">Configuration()</span>.configure<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">//代码方式加载映射文件</span></span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        <span class="comment">//configuration.addResource("com/zhao/hibernate/domain/hibernate.hbm.xml");</span></span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line">        <span class="comment">//configuration.addClass(User.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建会话工厂</span></span><br><span class="line">        SessionFactory factory = configuration.build<span class="constructor">SessionFactory()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话【会话相当于连接Coonnection】</span></span><br><span class="line">        Session session = factory.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Criteria 查询对象</span></span><br><span class="line">        Criteria criteria = session.create<span class="constructor">Criteria(User.<span class="params">class</span>)</span>;</span><br><span class="line">        <span class="comment">//eq=</span></span><br><span class="line">        criteria.add(<span class="module-access"><span class="module"><span class="identifier">Restrictions</span>.</span></span>eq(<span class="string">"username"</span>,<span class="string">"阿尔提尔"</span>));</span><br><span class="line">        criteria.add(<span class="module-access"><span class="module"><span class="identifier">Restrictions</span>.</span></span>eq(<span class="string">"password"</span>,<span class="string">"123"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(criteria.<span class="built_in">list</span><span class="literal">()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 【gt &gt;   ge &gt;= 】【lt &lt;   le &lt;= 】</span></span><br><span class="line">        criteria.add(<span class="module-access"><span class="module"><span class="identifier">Restrictions</span>.</span></span>gt(<span class="string">"uid"</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模糊查询</span></span><br><span class="line">        criteria.add(<span class="module-access"><span class="module"><span class="identifier">Restrictions</span>.</span></span>like(<span class="string">"username"</span>,<span class="string">"%提%"</span>));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(criteria.<span class="built_in">list</span><span class="literal">()</span>);</span><br><span class="line">        <span class="comment">//6.关闭会话</span></span><br><span class="line">        session.close<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">//7.关闭工厂，释放资源</span></span><br><span class="line">        factory.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SQLQuery-原生sql语句"><a href="#SQLQuery-原生sql语句" class="headerlink" title="SQLQuery 原生sql语句"></a>SQLQuery 原生sql语句</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson4 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">//保存用户数据</span><br><span class="line">        //<span class="number">1.</span>获取核心配置文件，默认加载src的hiber.cfg.xml文件</span><br><span class="line">        <span class="keyword">Configuration</span> <span class="keyword">configuration</span> = <span class="built_in">new</span> <span class="keyword">Configuration</span>().configure();</span><br><span class="line">    </span><br><span class="line">        //<span class="number">2.</span>创建会话工厂</span><br><span class="line">        SessionFactory factory = <span class="keyword">configuration</span>.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        //<span class="number">3.</span>创建会话【会话相当于连接Coonnection】</span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = factory.openSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //创建Sqlquery对象</span><br><span class="line">        SQLQuery query = <span class="keyword">session</span>.createSQLQuery("select * from user ");</span><br><span class="line">        List&lt;<span class="keyword">Object</span>[]&gt; list = query.list();</span><br><span class="line">        // 此处返回结果为集合   多维数组</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">Object</span> o : obj)&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(o);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("-----------------");</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //<span class="number">6.</span>关闭会话</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">        //<span class="number">7.</span>关闭工厂，释放资源</span><br><span class="line">        factory.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="提取工具类"><a href="#提取工具类" class="headerlink" title="提取工具类"></a>提取工具类</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">util</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory factory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取核心配置文件对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        <span class="comment">//2.创建会话工厂</span></span><br><span class="line">        factory = configuration.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听程序关闭</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread()&#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"程序关闭。。。！"</span>);</span><br><span class="line">                <span class="comment">//关闭会话工厂</span></span><br><span class="line">                factory.<span class="built_in">close</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回会话工厂获取到的session对象</span></span><br><span class="line">        <span class="keyword">return</span> factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCurrentSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory.getCurrentSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lesson5</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存用户数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话【会话相当于连接Coonnection】</span></span><br><span class="line"></span><br><span class="line">        Session session = util.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Sqlquery对象</span></span><br><span class="line">        SQLQuery query = session.createSQLQuery(<span class="string">"select * from user "</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Object[]&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span>();</span><br><span class="line">        <span class="comment">// 此处返回结果为集合   多维数组</span></span><br><span class="line">        <span class="keyword">for</span> (Object[] obj : <span class="built_in">list</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Object o : obj)&#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(o);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"-----------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭会话</span></span><br><span class="line">        session.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>spring框架事务管理(三)</title>
    <url>/2019/11/04/spring%E6%A1%86%E6%9E%B6%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86(%E4%B8%89)/</url>
    <content><![CDATA[<h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><ul>
<li>事务：一组业务操作，要不全部成功，要不全部失败</li>
<li>特性：ACID<br>  原子性：整体<br>  一致性：完成<br>  隔离性：并发<br>  持久性：结果</li>
<li>隔离问题：<br>  脏读：一个事务读到另一个事务没有提交的数据<br>  不可重复读：一个事务读到另一个事务已提交的数据（update）<br>  虚读（幻读）：一个事务读到另一个事务已提交的数据（insert）</li>
<li>隔离级别：<br>  read uncommitted:读未提交；存在3个问题<br>  read committed:  读已提交；解决，脏读：存在2个问题<br>  repeatable read:  可重复读；解决，脏读，不可重复读，存在一个问题<br>  serializable：    串行化；都解决，单事务。</li>
<li>MySQL事务操作</li>
</ul>
<ol>
<li>获取连接</li>
<li>开启事务 conn.setAutoCommit(false);</li>
<li>提交事务 conn.committed();</li>
<li>catch()中回滚事务 conn.roolback();</li>
</ol>
<ul>
<li>Savepoint 保存点，记录用户操作的当前位置，之后可以回滚到指定的位置</li>
</ul>
<h3 id="spring事务管理（transaction）"><a href="#spring事务管理（transaction）" class="headerlink" title="spring事务管理（transaction）"></a>spring事务管理（transaction）</h3><p>导包：spring-tx<br>三个顶级接口</p>
<ul>
<li>PlatformTransactionManager    平台事务管理器   spring要管理事务，必须使用事务管理器<br> 进行事务配置时，必须配置事务管理器</li>
<li>TransactionDefinition         事务详情（事务定义，事务属性），spring用于确定事物具体详情<br> 例如：隔离级别，是否只读（readonly），超时时间（timeout）<br> 进行事务配置时，必须配置事务详情，spring将配置项封装到给对象的实例。</li>
<li>TransactionStatus             事务状态，spring用于记录当前的事务运行状态，例如:是否有保存点，事务是否完成<br> spring底层根据状态进行相应操作</li>
</ul>
<h4 id="详解："><a href="#详解：" class="headerlink" title="详解："></a>详解：</h4><ul>
<li>PlatformTransactionManager 平台事务管理器<br>导包：spring-jdbc（jdbc开发） ，spring—orm（整合Hibernate）</li>
</ul>
<ol>
<li>常见事务管理器(及PlatformTransactionManager的实现类)<br>DatesourceTransactionManager    jdbc包下其开发时的事务管理器，采用JdbcTemplate<br>HibernateTransactionManager   Hibernate包下其开发时的事务管理器，整合hibernate<ul>
<li>api详解<br>TransactionStatus getTransaction(TransationDefinition definition),<br>事务管理器 通过’事务详情’，获得’事务状态’，从而管理事务<br>void commit(TransactionStatus status)    根据状态提交<br>void rollback(TransactionStatus status)  根据状态回滚</li>
</ul>
</li>
</ol>
<ul>
<li><p>TransactionDefinition  事务详情<br>  String getName()  配置事务详情名称，一般方法名称。例如：save add<br>  boolean isReadOnly() 是否只读(增删改 读写；查询：只读)<br>  int  getTime()  超时时间<br>  int  Isolationlevel() 隔离级别<br>  int  getPropagationBehavior()  传播行为</p>
</li>
<li><p>传播行为：在两个业务之间如何共享事务<br>7种常量<br>PROPAGATLON_REQUIRED , required 必须<br>  支持当前事务，A如果创建事务，B必须使用该事务<br>  如果A没有事务，B将创建一个新事务<br>PROPAGATLON_SUPPORTS ， supports 支持<br>  支持当前事务，A如果创建事务，B必须使用该事务<br>  如果A没有事务，B将已非事务<br>PROPAGATLON_MANDATORY ，mandatory 强制<br>  支持当前事务，A如果创建事务，B必须使用该事务<br>  如果A没有事务，B将抛出异常<br>PROPAGATLON_REQUIRES_NEW  requires_new 必须新的<br>  如果A有事务，将A事务挂提，B将创建一个新的事务<br>  如果A没有事务，B将创建一个新的事务<br>PROPAGATLON_NOT_SUPPORTED , not_supported  不支持<br>  如果A有事务，将A事务挂提，B将已非事务执行<br>  如果A没有事务，B将已非事务执行<br>PROPAGATLON_NEVER ， never  从不<br>  如果A有事务，B将抛出异常<br>  如果A没有事务，B将已非事务执行<br>PROPAGATLON_NESTED ，nested 嵌套<br>  A和B底层采用保存点机制，形成嵌套事务</p>
</li>
<li><p>TransactionStatus      事务状态</p>
<h3 id="事务案例"><a href="#事务案例" class="headerlink" title="事务案例"></a>事务案例</h3></li>
</ul>
<ol>
<li>转账1<br>导包：![图片alt](图片地址 ‘’图片title’’)<br><img src="E:/VScode-data/1.png" alt="jar"></li>
</ol>
<ul>
<li>Dao层<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> AccountDaoImpl extends JdbcDaoSupport implements AccountDao &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">out</span>(String ounter, <span class="type">Integer</span> <span class="type">money</span>) &#123;</span><br><span class="line">        getJdbcTemplate().<span class="keyword">update</span>("update account set money = money - ? where username = ?",<span class="type">money</span>,ounter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">in</span>(String <span class="keyword">inner</span>, <span class="type">Integer</span> <span class="type">money</span>) &#123;</span><br><span class="line">        getJdbcTemplate().<span class="keyword">update</span>("update account set money = money + ? where username = ?",<span class="type">money</span>,<span class="keyword">inner</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Service层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * service层调用Dao</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * spring注入提供set方法</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transation</span><span class="params">(String ounter, String inner, Integer money)</span> </span>&#123;</span><br><span class="line">        accountDao.out(ounter,money);</span><br><span class="line">        accountDao.in(inner,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>XML配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    datasource数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Dirver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Dao.Impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--service层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Service.Impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        AccountServiceImpl accountService = applicationContext.getBean(<span class="string">"accountService"</span>, AccountServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        accountService.transation(<span class="string">"jack"</span>,<span class="string">"ross"</span> ,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>手动管理事务（了解）</li>
</ol>
<ul>
<li>spring底层使用 TransactuinTemplate 事务模板进行操作</li>
<li>操作：<pre><code>1. service 需要获得 TransactionTemplate 事务模板
2. spring 配置模板，并注入给service
3. 模板需要注入事务管理器
4. 配置事务管理器 DateSourceTranctionManager 需要注入DataSource数据源</code></pre></li>
</ul>
<ul>
<li>修改Service<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * service层调用Dao</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * spring注入提供set方法</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 创建事务模板</span></span><br><span class="line"><span class="comment">    * spring注入</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * setter方法注入模板</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTransactionTemplate</span><span class="params">(TransactionTemplate transactionTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transactionTemplate = transactionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transation</span><span class="params">(<span class="keyword">final</span> String ounter, <span class="keyword">final</span> String inner, <span class="keyword">final</span> Integer money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus transactionStatus)</span> </span>&#123;</span><br><span class="line">                accountDao.out(ounter,money);</span><br><span class="line">                accountDao.in(inner,money);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>修改XML配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    datasource数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Dirver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Dao.Impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--service层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Service.Impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 修改（添加）的是以下代码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionTemolate"</span> <span class="attr">ref</span>=<span class="string">"transactionTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    创建模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"txmanager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    配置事务管理器 管理需要事务，事务从Connection获得，连接从连接池DataSource获得--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txmanager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="工厂Bean-生成代理：半自动"><a href="#工厂Bean-生成代理：半自动" class="headerlink" title="工厂Bean 生成代理：半自动"></a>工厂Bean 生成代理：半自动</h3><ul>
<li>Spring提供 管理事务的代理工厂bean： TransactionProxyFactoryBean<ol>
<li>getBean() 获得代理对象</li>
<li>Spring 配置一个代理</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>修改XML配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    datasource数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Dirver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.zhao3.Dao.Impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--service层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zhao3.Service.Impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    service代理对象</span></span><br><span class="line"><span class="comment">        1.proxyInterfaces接口</span></span><br><span class="line"><span class="comment">        2.target目标类</span></span><br><span class="line"><span class="comment">        3.transactionManager 事务管理器</span></span><br><span class="line"><span class="comment">        4.transactionAttributes 事务属性（事务详情）</span></span><br><span class="line"><span class="comment">        5.prop key:确定哪些方法使用当前事务配置</span></span><br><span class="line"><span class="comment">        6.&lt;prop&gt;标签体中（prop text）：配置事务详情</span></span><br><span class="line"><span class="comment">            格式：PROPAGATION,传播行为</span></span><br><span class="line"><span class="comment">             ISOLATION,隔离级别</span></span><br><span class="line"><span class="comment">             readonly,是否只读</span></span><br><span class="line"><span class="comment">             -Exception,异常回滚</span></span><br><span class="line"><span class="comment">             +Exception，异常提交</span></span><br><span class="line"><span class="comment">         eg:数字1和-1</span></span><br><span class="line"><span class="comment">         &lt;prop key="transation"&gt;PROPAGATION_REQUIRED,ISOLATION_AEFAULT&lt;/prop&gt; 数字1和-1也可默认传播行为和隔离级别</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyAccountService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyInterfaces"</span> <span class="attr">value</span>=<span class="string">"com.zhao3.Service.AccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"accountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"transation"</span>&gt;</span>PROPAGATION_REQUIRED,ISOLATION_DEFAULT<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"> ``` </span><br><span class="line">- 测试类</span><br></pre></td></tr></table></figure>
<p>public class TestApp {</p>
<p>  @Test<br>  public void save(){</p>
<pre><code>ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao3/applicationContext.xml&quot;);

AccountService accountService = applicationContext.getBean(&quot;proxyAccountService&quot;, AccountService.class);

accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);</code></pre><p>  }<br>}</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">* 注意：</span><br><span class="line">    有异常：org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named <span class="string">'proxyAccountService'</span> is expected <span class="keyword">to</span> be of<span class="built_in"> type </span><span class="string">'com.zhao3.Service.Impl.AccountServiceImpl'</span> but was actually of<span class="built_in"> type </span><span class="string">'com.sun.proxy.$Proxy9'</span></span><br><span class="line">    解决方法：</span><br><span class="line">    AccountService accountService = applicationContext.getBean(<span class="string">"proxyAccountService"</span>, AccountService.class);</span><br><span class="line">    此处要用接口，用实现类会报上面异常</span><br><span class="line"></span><br><span class="line"><span class="comment">### AOP配置基于XML</span></span><br><span class="line">* spring XML配置aop 自动生成代理，进行事务管理</span><br><span class="line">1. 配置事务管理器</span><br><span class="line">2. 配置事务详情</span><br><span class="line">3. 配置aop</span><br><span class="line">* XML配置文件</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/beans&quot;</a></p>
<pre><code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</code></pre></li>
</ul>
<!--    datasource数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Dirver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    Dao-->
<pre><code>&lt;bean id=&quot;accountDao&quot; class=&quot;com.zhao3.Dao.Impl.AccountDaoImpl&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--service层-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;com.zhao3.Service.Impl.AccountServiceImpl&quot;&gt;
    &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    service代理对象
        1.proxyInterfaces接口
        2.target目标类
        3.transactionManager 事务管理器
        4.transactionAttributes 事务属性（事务详情）
        5.prop key:确定哪些方法使用当前事务配置
        6.<prop>标签体中（prop text）：配置事务详情
            格式：PROPAGATION,传播行为
             ISOLATION,隔离级别
             readonly,是否只读
             -Exception,异常回滚
             +Exception，异常提交
         eg:数字1和-1
         <prop key="transation">PROPAGATION_REQUIRED,ISOLATION_AEFAULT</prop> 数字1和-1也可默认传播行为和隔离级别
        -->
<pre><code>&lt;bean id=&quot;proxyAccountService&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;
    &lt;property name=&quot;proxyInterfaces&quot; value=&quot;com.zhao3.Service.AccountService&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;target&quot; ref=&quot;accountService&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;transactionManager&quot; ref=&quot;txManager&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;transactionAttributes&quot;&gt;
        &lt;props&gt;
            &lt;prop key=&quot;transation&quot;&gt;PROPAGATION_REQUIRED,ISOLATION_DEFAULT&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    事务管理器-->
<pre><code>&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre></beans>
 <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>测试类</span><br></pre></td></tr></table></figure>
public class TestApp {

<pre><code>@Test
public void save(){

    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao3/applicationContext.xml&quot;);

    AccountService accountService = applicationContext.getBean(&quot;proxyAccountService&quot;, AccountService.class);

    accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);
}</code></pre><p>}<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### AOP配置基于注解</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>配置事务管理器，并将事务管理器交予spring</span><br><span class="line"><span class="bullet">* </span>在目标类或目标方法添加注解即可 @Transactional</span><br><span class="line"><span class="bullet">* </span>XML配置</span><br></pre></td></tr></table></figure><br><?xml version="1.0" encoding="UTF-8"?><br><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
"></p>
 <!--    datasource数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Dirver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--    Dao-->
<pre><code>&lt;bean id=&quot;accountDao&quot; class=&quot;com.zhao4.Dao.Impl.AccountDaoImpl&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--service层-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;com.zhao4.Service.Impl.AccountServiceImpl&quot;&gt;
    &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    事务管理
        1. 事务管理器
        -->
<pre><code>&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--将事务管理器交予Spring
    transaction-manager="transactionManager" 配置事务管理器
    proxy-target-class="false" 值为true表示底层强制使用cglib代理
    -->
<pre><code>&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation-driven&gt;</code></pre></beans>
 <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>service层</span><br></pre></td></tr></table></figure>
 @Transactional
 public class AccountServiceImpl implements AccountService {
    /*
    * service层调用Dao
    * */
    private AccountDao accountDao;
    /*
    * spring注入提供set方法
    * */
    public void setAccountDao(AccountDao accountDao) {
        this.accountDao = accountDao;
    }

<pre><code>@Override
public void transation(String ounter, String inner, Integer money) {
    accountDao.out(ounter,money);
    accountDao.in(inner,money);
}</code></pre><p> }<br>  <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>注解事务详情配置</span><br></pre></td></tr></table></figure><br>    @Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT )<br> <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">### 整合Junit</span><br><span class="line"><span class="number">1</span>. 导包：spring-test</span><br><span class="line"><span class="number">2</span>. 让Junit通知Spring加载配置文件 </span><br><span class="line">   加注解:</span><br><span class="line">   <span class="meta">@RunWith(SpringIunit4ClassRunner.class)</span></span><br><span class="line">   <span class="meta">@ContextConfiguration(locations=<span class="meta-string">"classpath:applicationContext.xml"</span>)</span></span><br><span class="line">   <span class="meta">@Autowried</span> <span class="comment">//与junit整合，不需要在spring Xml中配置扫描</span></span><br><span class="line"><span class="number">3</span>. 让 spring容器自动注入</span><br><span class="line">* 案例：</span><br></pre></td></tr></table></figure><br> @RunWith(SpringJUnit4ClassRunner.class)<br> @ContextConfiguration(locations = “classpath:applicationContext.xml”)<br> public class TestApp {</p>
<pre><code>@Autowired //与Junit整合，不需要Spring xml 配置扫描
private AccountService accountService;

@Test
public void save(){</code></pre><p> //        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(“com/zhao4/applicationContext.xml”);<br> //<br> //        AccountService accountService = applicationContext.getBean(“accountService”, AccountService.class);</p>
<pre><code>    accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);
}</code></pre><p> }<br> <figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"> <span class="comment">### 整合Web</span></span><br><span class="line"> 导入jar包：spring-web</span><br><span class="line"> <span class="number">1</span>. tomcat启动加载配置文件</span><br><span class="line">    servlet  init(ServletConfig)  <span class="tag">&lt;load-on-start&gt;</span><span class="number">2</span></span><br><span class="line">    filter    init(FilterConfig)  web.<span class="keyword">xml</span> <span class="title">注册过滤器自动调用初始化</span></span><br><span class="line"><span class="title">    listener</span>(监听器)  ServletContextListener  ServletContext对象的监听【Spring】</span><br><span class="line">    Spring 提供监听器 ContextLoaderListener   web.<span class="keyword">xml</span>  <span class="title">&lt;listener</span>&gt;<span class="tag">&lt;listener-class&gt;</span>....  </span><br><span class="line">        如果只配置监听器，默认加载xml位置，WEB<span class="literal">-INF</span>/applicationContext.xml</span><br><span class="line"> <span class="number">2</span>. 确定配置文件，通过系统初始化参数</span><br><span class="line">    servletContext 初始化参数 web.<span class="keyword">xml</span> <span class="title"></span></span><br><span class="line"><span class="title">    &lt;context-param</span>&gt;</span><br><span class="line">        <span class="tag">&lt;param-name&gt;</span>contextConfigLocation</span><br><span class="line">        <span class="tag">&lt;param-value&gt;</span>classpath:applicationContext.xml</span><br><span class="line">* web.xml</span><br></pre></td></tr></table></figure><br> <?xml version="1.0" encoding="UTF-8"?><br> <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0"></p>
 <!--    确定配置文件的位置-->
<pre><code>&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
&lt;/context-param&gt;</code></pre> <!--    配置Spring的监听器 用来加载Xml配置-->
<pre><code>&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;</code></pre> </web-app>
  ```
* 从ServletContext作用域 获得spring容器（了解）
]]></content>
  </entry>
  <entry>
    <title>Sprig框架AOP(二)</title>
    <url>/2019/11/04/Sprig%E6%A1%86%E6%9E%B6AOP(%E4%BA%8C)/</url>
    <content><![CDATA[<h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><ol>
<li>traget :目标类，需要被代理的类 eg：UserService</li>
<li>Jionpoint(连接点) ：指那些可能被拦截的方法 eg：所有方法</li>
<li>pointCut：切入点，已经被增强的连接点 eg：addUser（）</li>
<li>advice：通知增强，增强的代码 eg：after（）</li>
<li>Weaving（织入）:是指把增强的advice应用到目标对象，target来创建新的对象proxy的过程</li>
<li>proxy：代理</li>
<li>Aspect（切面）： 是切入点和通知advice的结合</li>
</ol>
<h3 id="手动方式："><a href="#手动方式：" class="headerlink" title="手动方式："></a>手动方式：</h3><ul>
<li>JDK动态代理 对“装饰者”设计模式简化，使用前提，必须有接口</li>
</ul>
<ol>
<li>目标类：接口 + 实现类</li>
<li>切面类：用于存通知 myAspect</li>
<li>工厂类：编写工厂生成代理</li>
<li>测试</li>
</ol>
<ul>
<li>目标类<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>切面类<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Myaspect &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">before</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("前方法");</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">after</span>()&#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("后方法");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>工厂类<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">UserService <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类必须加final</span></span><br><span class="line">        <span class="comment">//目标类</span></span><br><span class="line">        <span class="keyword">final</span> UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">//切面类</span></span><br><span class="line">        <span class="keyword">final</span> Myaspect myaspect = <span class="keyword">new</span> Myaspect();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *生成代理类</span></span><br><span class="line"><span class="comment">        *将目标类（切入点）和切面类（通知）结合 --》切面</span></span><br><span class="line"><span class="comment">        *  Proxy.newProxyInstance()</span></span><br><span class="line"><span class="comment">        * 参数1：loader 类加载器 动态代理类，运行时加载，任何类都需要类加载器将其加载到内存</span></span><br><span class="line"><span class="comment">        *       一般情况：当前类.class.getClassLoader();</span></span><br><span class="line"><span class="comment">        *          目标类实例.getClass().getClassloader();</span></span><br><span class="line"><span class="comment">        *  参数2：Class&lt;?&gt;(Class类型的数组)interfaces 代理类需要实现的所有接口</span></span><br><span class="line"><span class="comment">        *       方式一：目标实例.getClass().getInterfaces(); 注意：只能获得自己接口，不能获得父元素的接口；</span></span><br><span class="line"><span class="comment">        *       方式二：new Class[]&#123;userService.class&#125;;</span></span><br><span class="line"><span class="comment">        *       例如：jdbc 驱动 DriverManager  获得接口Connection</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 参数3：InvocationHandler  处理类，接口，必须进行实现类，一般采用匿名内部类</span></span><br><span class="line"><span class="comment">        *       提供invoke方法，代理类的每一个方法执行时，都将调用一次invoke</span></span><br><span class="line"><span class="comment">        *           参数1：Object proxy 代理对象</span></span><br><span class="line"><span class="comment">        *           参数2：method method  代理对象当前执行方法的描述方法（反射）</span></span><br><span class="line"><span class="comment">        *                   执行方法名：method.getName();</span></span><br><span class="line"><span class="comment">        *                   执行方法：method.invoke(对象实际参数);</span></span><br><span class="line"><span class="comment">        *           参数3：Object【】 args：方法的实际参数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        UserService proxService = (UserService) Proxy.newProxyInstance(MyBeanFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), <span class="title">userService</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(), <span class="title">new</span> <span class="title">InvocationHandler</span>() </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//前方法</span></span><br><span class="line">                myaspect.<span class="keyword">before</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//执行目标类方法</span></span><br><span class="line">                Object obj = method.invoke(userService,args);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//后方法</span></span><br><span class="line"></span><br><span class="line">                myaspect.<span class="keyword">after</span>();</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDK</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserService userService = MyBeanFactory.createService();</span><br><span class="line">        userService.addUser();</span><br><span class="line">        userService.deleteUser();</span><br><span class="line">        userService.updateUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="cglib字节码增强"><a href="#cglib字节码增强" class="headerlink" title="cglib字节码增强"></a>cglib字节码增强</h3><ul>
<li>没有接口，只有实现类</li>
<li>采用字节码增强框架 cglib 运行原理：在运行时创建目标类的子类，从而对目标类进行增强</li>
<li>导jar包<br>自己导jar包【了解】<br>核心：hibernate lib\bytecord\cglib….jar<br>依赖：struts2 lib\asm…jar<br>spring 的core.jar中已经整合了以上两个内容</li>
</ul>
</li>
</ul>
<ol>
<li><p>目标类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"添加"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"更新"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"删除"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>切面类</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Myaspect &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">before</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("前方法");</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">after</span>()&#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("后方法");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>工厂类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">UserServiceImpl <span class="title">createService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//目标类</span></span><br><span class="line">        <span class="keyword">final</span> UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">//切面类</span></span><br><span class="line">        <span class="keyword">final</span> Myaspect myaspect = <span class="keyword">new</span> Myaspect();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *3.生成代理类 采用cglib,底层创建目标类的子类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//3.1 核心类</span></span><br><span class="line">        Enhancer enhancer =<span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//3.2确定父类</span></span><br><span class="line">        enhancer.setSuperclass(userService.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *3.3设置回调函数 MethodInterceptor等效jdk InvoCationHandler接口</span></span><br><span class="line"><span class="comment">        * intercept() 等效于JDK invoke()</span></span><br><span class="line"><span class="comment">        *       参数1：参数2：参数3：与invoke一样的</span></span><br><span class="line"><span class="comment">        *       参数4：methodProxy 方法的代理</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//前方法</span></span><br><span class="line">                myaspect.<span class="keyword">before</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//执行目标类方法</span></span><br><span class="line">               Object o1 = method.invoke(userService,objects);</span><br><span class="line">               <span class="comment">//上下效果等同  执行代理类的父类，执行目标类(目标类和代理类 父子关系);</span></span><br><span class="line">               methodProxy.invokeSuper(o,objects);</span><br><span class="line"></span><br><span class="line">               <span class="comment">//后方法</span></span><br><span class="line">                myaspect.<span class="keyword">after</span>();</span><br><span class="line">                <span class="keyword">return</span> o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.4 创建代理</span></span><br><span class="line">        UserServiceImpl proxService = (UserServiceImpl) enhancer.create();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proxService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCglib</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserServiceImpl userService = MyBeanFactory.createService();</span><br><span class="line">        userService.addUser();</span><br><span class="line">        userService.deleteUser();</span><br><span class="line">        userService.updateUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="spring编写代理：半自动"><a href="#spring编写代理：半自动" class="headerlink" title="spring编写代理：半自动"></a>spring编写代理：半自动</h3></li>
</ol>
<h3 id="Spring基于XML配置（切点表达式）"><a href="#Spring基于XML配置（切点表达式）" class="headerlink" title="Spring基于XML配置（切点表达式）"></a>Spring基于XML配置（切点表达式）</h3><ul>
<li>导包AOP联盟<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>业务类或目标类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="title">implements</span> <span class="title">IAccountService</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 账户业务层实现类</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"更新"</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteAcount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"删除"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>2.切面类或通知类 </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 用于记录日志的工具类。提供公共代码</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">logger</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于打印日志，计划在其切入点方法执行之前执行（切入点方法就是目标方法及业务层方法）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Logger类中前置行方法执行记录日志"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>XML配置文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    配置Spring IOC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    Spring基于XML的AOP配置步骤</span></span><br><span class="line"><span class="comment">        1.把通知的Bean特交给该Spring管理</span></span><br><span class="line"><span class="comment">        2.使用aop:config标签表明开始配置AOP</span></span><br><span class="line"><span class="comment">        3.使用aop：aspect表明配置切面</span></span><br><span class="line"><span class="comment">                 属性 id：表示给切面提供唯一标识</span></span><br><span class="line"><span class="comment">                        ref：表示指定通知类bean的Id</span></span><br><span class="line"><span class="comment">        4. 在aop；aspect标签中使用对引的标签来配置通知的类型</span></span><br><span class="line"><span class="comment">            aop:before 表示前置通知</span></span><br><span class="line"><span class="comment">                    属性：method用于指定logger类中那个方法是前置通知</span></span><br><span class="line"><span class="comment">            aop：after 表示后置通知</span></span><br><span class="line"><span class="comment">            pointcut属性：用于指定切入点的表达式，该表达式的含义指的是对业务层中那些方法的增强</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           切入点表达式写法：</span></span><br><span class="line"><span class="comment">                关键字;execution(表达式)</span></span><br><span class="line"><span class="comment">                表达式：</span></span><br><span class="line"><span class="comment">                        访问修饰符 返回值 包名。包名。包名...类名.方法名(参数列表)</span></span><br><span class="line"><span class="comment">            表达式标准写法：</span></span><br><span class="line"><span class="comment">                public void com.zhao.service.AccountServiceImpl.saveAccount();</span></span><br><span class="line"><span class="comment">                访问修饰符可以省略</span></span><br><span class="line"><span class="comment">                void com.zhao.Service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                返回值可以使用通配符，表示任意通配符</span></span><br><span class="line"><span class="comment">                * com.zhao.Service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                包名可以使用通配符，，表示任意包，但几级包，就要写几个*.</span></span><br><span class="line"><span class="comment">                * *.*.*.*.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                包名可以使用..表示当前包及其子包</span></span><br><span class="line"><span class="comment">                * *..AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                类名和方法名可以用*实现通配</span></span><br><span class="line"><span class="comment">                * *..*.*()</span></span><br><span class="line"><span class="comment">                参数列表；</span></span><br><span class="line"><span class="comment">                    可以直接写参数类型：</span></span><br><span class="line"><span class="comment">                            基本类型：直接写名称  int</span></span><br><span class="line"><span class="comment">                            引用类型：写包名.类名的方式  eg：Java.lang.String</span></span><br><span class="line"><span class="comment">                            可以使用通配符表示任意参数，但必须有参数</span></span><br><span class="line"><span class="comment">                            可以表示..表示有无参数均可，有参数可以是任意类型</span></span><br><span class="line"><span class="comment">                全通配写法：</span></span><br><span class="line"><span class="comment">                * *..*.*(..)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                实际开发中切入点表达式的通常写法：</span></span><br><span class="line"><span class="comment">                       * com.zhao.Service.Impl.*.*(..)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Service.utils.logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--        配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--            配置通知类型，并且建立通知方法和切入点方法的关联--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--            &lt;aop:before method="printLog" pointcut="execution( public void com.zhao.Service.impl.AccountServiceImpl.saveAccount())"&gt;&lt;/aop:before&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printLog"</span> <span class="attr">pointcut</span>=<span class="string">"execution( * *..*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">  ``` </span><br><span class="line">4. 测试类</span><br></pre></td></tr></table></figure>
/**<ul>
<li>测试Aop配置</li>
<li>*/</li>
</ul>
</li>
</ol>
<p>public class test {<br>    //快捷键psvm<br>    public static void main(String[] args) {<br>        //获得容器<br>        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(“beans.xml”);<br>        //获取对象<br>        IAccountService iAccountService = (IAccountService)applicationContext.getBean(“accountService”);</p>
<pre><code>    //执行方法
    iAccountService.saveAccount();
    iAccountService.updateAccount(1);
    iAccountService.deleteAcount();
}</code></pre><p>}</p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"> ### 四种常用通知类型</span><br><span class="line"></span><br><span class="line">1. 目标类</span><br></pre></td></tr></table></figure>
<p>public class AccountServiceImpl implements IAccountService {</p>
<pre><code>/*
* 账户业务层实现类
* */
public void saveAccount() {
    System.out.println(&quot;保存&quot;);
}

public void updateAccount(int i) {
    System.out.println(&quot;更新&quot;+i);
}

public int deleteAcount() {
    System.out.println(&quot;删除&quot;);
    return 0;
}</code></pre><p>}</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> XML配置</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd"></p>
 <!--    配置Spring IOC-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;Service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;


&lt;bean id=&quot;logger&quot; class=&quot;Service.utils.logger&quot;&gt;&lt;/bean&gt;</code></pre> <!--    配置AOP-->
<pre><code>&lt;aop:config&gt;</code></pre> <!--        配置切面-->
 <!--        非局部的id="p1"唯一标识符 expression=""用于指定切入点表达式内容 位置必须在aop:aspect上面-->
<pre><code>&lt;aop:pointcut id=&quot;p1&quot; expression=&quot;execution( * *..*.*(..))&quot;/&gt;
&lt;aop:aspect id=&quot;logAdvice&quot; ref=&quot;logger&quot;&gt;</code></pre> <!--            配置通知类型，并且建立通知方法和切入点方法的关联-->
 <!--            <aop:before method="printLog" pointcut="execution( public void com.zhao.Service.impl.AccountServiceImpl.saveAccount())"></aop:before>-->
 <!--            前置通知-->
<pre><code>&lt;aop:before method=&quot;beforeLog&quot; pointcut-ref=&quot;p1&quot;&gt;&lt;/aop:before&gt;</code></pre> <!--           后置通知 -->
<pre><code>&lt;aop:after-returning method=&quot;agterLog&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:after-returning&gt;</code></pre> <!--        异常通知-->
<pre><code>&lt;aop:after-throwing method=&quot;executeAdvice&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:after-throwing&gt;</code></pre> <!--         最终通知-->
<pre><code>&lt;aop:after method=&quot;findalyAdvice&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:after&gt;</code></pre> <!--            局部的-->
 <!--            <aop:pointcut id="p1" expression="execution( * *..*.*(..))"/>-->

<pre><code>    &lt;/aop:aspect&gt;

&lt;/aop:config&gt;</code></pre></beans>
 <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Spring环绕通知</span><br><span class="line"><span class="number">1.</span> XML文件</span><br></pre></td></tr></table></figure>
 <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

 <!--    配置Spring IOC-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;Service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;


&lt;bean id=&quot;logger&quot; class=&quot;Service.utils.logger&quot;&gt;&lt;/bean&gt;</code></pre> <!--    配置AOP-->
<pre><code>&lt;aop:config&gt;</code></pre> <!--        配置切面-->
 <!--        非局部的 id="p1"唯一标识符 expression=""用于指定切入点表达式内容 位置必须在aop:aspect上面-->
<pre><code>&lt;aop:pointcut id=&quot;p1&quot; expression=&quot;execution( * *..*.*(..))&quot;/&gt;
&lt;aop:aspect id=&quot;logAdvice&quot; ref=&quot;logger&quot;&gt;</code></pre> <!--            配置环绕通知-->
<pre><code>        &lt;aop:around method=&quot;aroundLog&quot; pointcut-ref=&quot;p1&quot;&gt;&lt;/aop:around&gt;

    &lt;/aop:aspect&gt;

&lt;/aop:config&gt;</code></pre></beans>
  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 切面类或通知类</span><br></pre></td></tr></table></figure>
/*
* 用于记录日志的工具类。提供公共代码
* */

<p>import org.aspectj.lang.ProceedingJoinPoint;</p>
<p>public class logger {</p>
<pre><code>//用于打印日志，计划在其切入点方法执行之前执行（切入点方法就是目标方法及业务层方法）

/*
* 环绕通知：
*   当我们配置环绕通知之后，切入点方法没有执行，而通知方法执行了
* 分析：
*       通过对比动态代理中的的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用，而我们的代码中没得；
* 解决：
*       Spring框架为我们提供一个接口，ProceedingJoinPoint。此接口有一个方法proceed(),
*       此方法相当予明确调用切入点方法。
*       该接口可以作为环绕通知的方法参数，在程序执行时，spring框架为我们提供该接口的实现类供我们使用
*
* Spring中的环绕通知
*       他是Spring框架为我们提供的一种可以在代码中控制增强方法的何时执行的方式；
* */
public Object aroundLog(ProceedingJoinPoint pjp){
    Object rtVslue = null;
    try{

        Object[] args = pjp.getArgs();//获得执行方法的所需的参数

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志....前置&quot; );

        rtVslue = pjp.proceed(args);//明确调用业务层方法（切入点方法）

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。后置&quot;);

        return rtVslue;
    }catch (Throwable t){
        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。异常&quot;);
        throw new RuntimeException(t);
    }finally {

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志 。。。最终通知&quot;);
    }

}</code></pre><p>}</p>
 <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 注解AOP</span><br><span class="line"><span class="number">1.</span> Xml配置</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd"></p>
 <!--    配置Spring创建容器时要扫描的包-->
<pre><code>&lt;context:component-scan base-package=&quot;com.zhao.Aware.Service&quot;&gt;&lt;/context:component-scan&gt;</code></pre> <!--配置spring开启注解的功能-->
<pre><code>&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</code></pre></beans>
 <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 切面类</span><br></pre></td></tr></table></figure>
 @Component("logger")
@Aspect //表示当前类是一个切面类|通知类
public class logger {

<pre><code>@Pointcut(&quot;execution(* com.zhao.Aware.Service.*.*(..))&quot;)</code></pre><p>   private void p(){}</p>
<pre><code>//用于打印日志，计划在其切入点方法执行之前执行（切入点方法就是目标方法及业务层方法）
//前置执行方法
@Before(&quot;p()&quot;)
public void beforeLog(){
    System.out.println(&quot;Logger类中前置行方法执行记录日志&quot;);
}

//后置执行方法
@AfterReturning(&quot;p()&quot;)
public void agterLog(){
    System.out.println(&quot;Logger类中后置行方法执行记录日志&quot;);
}


//提成通知
@AfterThrowing(&quot;p()&quot;)
public void executeAdvice(){
    System.out.println(&quot;Logger类中异常方法执行记录日志&quot;);
}

//最终通知
@After(&quot;p()&quot;)
public void findalyAdvice(){
    System.out.println(&quot;Logger类中最终通知方法执行记录日志&quot;);
}
//环绕通知
//@Around(&quot;p()&quot;)
public Object aroundLog(ProceedingJoinPoint pjp) {
    Object rtVslue = null;
    try {

        Object[] args = pjp.getArgs();//获得执行方法的所需的参数

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志....前置&quot;);

        rtVslue = pjp.proceed(args);//明确调用业务层方法（切入点方法）

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。后置&quot;);

        return rtVslue;
    } catch (Throwable t) {
        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。异常&quot;);
        throw new RuntimeException(t);
    } finally {

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志 。。。最终通知&quot;);
    }
}</code></pre><p>}</p>
 <figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>. 目标类<span class="string">|业务类</span></span><br></pre></td></tr></table></figure>
<p>@Service(“accountService”)<br>public class AccountServiceImpl implements IAccountService {</p>
<pre><code>/*
* 账户业务层实现类
* */

public void saveAccount() {
    System.out.println(&quot;保存&quot;);
}

public void updateAccount(int i) {
    System.out.println(&quot;更新&quot;+i);
}

public int deleteAcount() {
    System.out.println(&quot;删除&quot;);
    return 0;
}</code></pre><p>}</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">  ### JdbcTemplate模板</span><br><span class="line"><span class="bullet">  * </span>spring提供一种操作JDBC的工具类，类似DBUtils；</span><br><span class="line"><span class="bullet">  * </span>依赖 连接池DataSouce（数据源）</span><br><span class="line"><span class="bullet">  * </span></span><br><span class="line"></span><br><span class="line"><span class="bullet">  1. </span>使用API（了解）</span><br><span class="line"><span class="bullet">  * </span>原生dbcp</span><br><span class="line"><span class="bullet">- </span>目标类</span><br></pre></td></tr></table></figure>

<p>public class user {</p>
<pre><code>private int id;
private String name;
private float money;

public int getId() {
    return id;
}

public void setId(int id) {
    this.id = id;
}

public String getName() {
    return name;
}

public void setName(String name) {
    this.name = name;
}

public float getMoney() {
    return money;
}

public void setMoney(float money) {
    this.money = money;
}</code></pre><p>}</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">测试类</span><br></pre></td></tr></table></figure>
<p>  public class TestApi {</p>
<pre><code>//jdbc模板
public static void main(String[] args) {

    //1.创建数据源dbcp
    BasicDataSource  dataSource = new BasicDataSource();

    //基本4项
    dataSource.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);
    dataSource.setUrl(&quot;jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&quot;);
    dataSource.setUsername(&quot;root&quot;);
    dataSource.setPassword(&quot;zhao1314520&quot;);



    //2.创建模板
    JdbcTemplate jdbcTemplate = new JdbcTemplate();
    jdbcTemplate.setDataSource(dataSource);

    //3.通过api操作
    String sql = &quot;insert into account(name,money) values(?,?)&quot;;
    jdbcTemplate.update(&quot;sql&quot;,&quot;mmm&quot;,&quot;998&quot;);

}</code></pre><p>}<br>   <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>XML配置dbcp</span><br><span class="line"><span class="bullet">1. </span>模板注入</span><br></pre></td></tr></table></figure><br>  public class accountDao {</p>
<p>//jdbc的模板将由spring注入</p>
<pre><code>private JdbcTemplate jdbcTemplate;

public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
    this.jdbcTemplate = jdbcTemplate;
}


public void updata(user account){

    String sql= &quot;update account set name=?,money=? where id=?&quot;;
    Object[] objects = {account.getName(),account.getMoney(),account.getId()};
    jdbcTemplate.update(sql,objects);
}</code></pre><p>}</p>
   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">beans</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
  <!--    配置DAO-->
<pre><code>&lt;bean id=&quot;account&quot; class=&quot;com.zhao.dbcp.accountDao&quot;&gt;
    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre> <!--    创建模板,诸如数据源-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--    创建数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost.3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre>   <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span> 测试</span><br></pre></td></tr></table></figure>
<p>   public class TestDbcp {</p>
<pre><code>@Test
public void save(){
    user account = new user();
    account.setId(1);
    account.setName(&quot;沐沐&quot;);
    account.setMoney(100000);
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);
    accountDao ac = (accountDao) applicationContext.getBean(&quot;account&quot;);

    ac.updata(account);
}</code></pre> <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>C3P0数据源</span><br><span class="line">XML配置文件</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"></p>
 <!--    配置DAO-->
<pre><code>&lt;bean id=&quot;account&quot; class=&quot;com.zhao.C3P0.accountDao&quot;&gt;
    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre> <!--    创建模板,诸如数据源-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--    创建数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre></beans>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">测试类</span><br></pre></td></tr></table></figure>
 public class TestC3p0 {

<pre><code>@Test
public void save(){
    user account = new user();
    account.setId(1);
    account.setName(&quot;沐沐&quot;);
    account.setMoney(100000);
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao/C3P0/beans.xml&quot;);
    IaccountDao ac = (IaccountDao) applicationContext.getBean(&quot;account&quot;);

    ac.updata(account);

}</code></pre><p>}<br>  <figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">* <span class="keyword">properties</span>.<span class="keyword">properties</span>文件</span><br></pre></td></tr></table></figure><br>jdbc.DriverClassName=com.mysql.cj.jdbc.Driver<br>jdbc.Url=jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai<br>jdbc.Username=root<br>jdbc.Password=zhao1314520<br> <figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">XML配置</span><br><span class="line">注意：</span><br><span class="line"><span class="number">1</span>. 命名空间xmlns:<span class="keyword">context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line"><span class="number">2</span>. 加载配文件classpath:</span><br><span class="line"> &lt;<span class="keyword">context</span>:<span class="keyword">property</span>-placeholder location=<span class="string">"classpath:com/zhao/properties/properties.properties"</span>&gt;&lt;/<span class="keyword">context</span>:<span class="keyword">property</span>-placeholder&gt;</span><br></pre></td></tr></table></figure><br><?xml version="1.0" encoding="UTF-8"?><br><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"></p>
 <!--    加载properties配置文件-->
<pre><code>&lt;context:property-placeholder location=&quot;classpath:com/zhao/properties/properties.properties&quot;&gt;&lt;/context:property-placeholder&gt;</code></pre> <!--    配置DAO-->
<pre><code>&lt;bean id=&quot;account&quot; class=&quot;com.zhao.dbcp.accountDao&quot;&gt;
    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre> <!--    创建模板,诸如数据源-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    创建数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;

    &lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driverClassName}&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre></beans>
 <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">### JdbcTemplate模板详解(Spring数据源)</span><br><span class="line">* maven配置</span><br></pre></td></tr></table></figure>
 <packaging>jar</packaging>

<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;8.0.18&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre> <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### <span class="number">1.</span> 原生spring内部数据源</span><br></pre></td></tr></table></figure>
<p>public class JdbcTemplatedomo1 {</p>
<pre><code>public static void main(String[] args) {
    //3.准备数据源，spring内部数据源
    DriverManagerDataSource ds = new DriverManagerDataSource();
    ds.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver &quot;);
    ds.setUrl(&quot;jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&quot;);
    ds.setUsername(&quot;root&quot;);
    ds.setPassword(&quot;zhao1314520&quot;);

    //1.创建对象jdbcTemplate
    JdbcTemplate jdbcTemplate = new JdbcTemplate();
    //4.给jdbcTemplate设置数据源
    jdbcTemplate.setDataSource(ds);
    //2.执行操作
    jdbcTemplate.execute(&quot;insert into account(name,money)values(&apos;mmm&apos;,10000)&quot;);

}</code></pre><p>}</p>
 <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"> * 注意：MySQL8<span class="number">.0</span><span class="number">.18</span>版本中连接数据库</span><br><span class="line">    ds.setDriverClassName(<span class="string">"com.mysql.cj.jdbc.Driver "</span>);</span><br><span class="line">    ds.setUrl(<span class="string">"jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">####<span class="number">2.</span> 基于XML配置JdbcTemplate</span><br><span class="line">* xml配置文件</span><br></pre></td></tr></table></figure>
 <!--    配置JdbcTemplate模板-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!--配置Spring数据源--&gt;
&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>测试类</span><br></pre></td></tr></table></figure>

<p>public class JdbcTemplatedomo2 {</p>
<pre><code>public static void main(String[] args) {
 //1.获取容器
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);
    //2.获取对象
     JdbcTemplate jdbcTemplate = (JdbcTemplate) applicationContext.getBean(&quot;jdbcTemplate&quot;);
     //3.执行操作
    jdbcTemplate.execute(&quot;insert into account (name,money)values(&apos;zhao&apos;,10000)&quot;);

}</code></pre><p>}<br>  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">#### <span class="number">3.</span> JdbcTemplate的CRUD操作</span><br><span class="line">* 注意：Spring提供的封装工具,new BeanPropertyRowMapper&lt;Account&gt;(Account.<span class="keyword">class</span>)</span><br><span class="line">自定义<span class="symbol">AccountRowmapper</span>封装工具，实现接口 <span class="symbol">RowMapper</span>&lt;<span class="symbol">Account</span>&gt;</span><br></pre></td></tr></table></figure><br>//JdbcTemplate的CRUD操作<br>public class JdbcTemplatedomo3 {</p>
<pre><code>public static void main(String[] args) {
 //1.获取容器
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);
     JdbcTemplate jdbcTemplate = (JdbcTemplate) applicationContext.getBean(&quot;jdbcTemplate&quot;);
     //执行操作
    //保存
    //jdbcTemplate.update(&quot;insert into account (name,money)values(?,?)&quot;,&quot;艾尔提尔&quot;,10000f);
    //更新
    //jdbcTemplate.update(&quot;update account set name=?,money=? where id=?&quot;,&quot;阿尔提尔&quot;,8888f,5);
    //删除
   jdbcTemplate.update(&quot;delete from account where id=?&quot;,8);
    //查询所有
    //自定义
   // List&lt;Account&gt; accounts = jdbcTemplate.query(&quot;select * from account where money=?&quot;,new AccountRowmapper(),10000f);
    //spring提供,new BeanPropertyRowMapper&lt;Account&gt;(Account.class)
 List&lt;Account&gt; accounts = jdbcTemplate.query(&quot;select * from account where money=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),10000f);
    for(Account account : accounts){
        System.out.println(account);

    }
    //查询一个
    List&lt;Account&gt; accounts1 = jdbcTemplate.query(&quot;select * from account where id=?&quot;,new AccountRowmapper(),1);
    System.out.println(accounts1.isEmpty()?&quot;没有内容&quot;:accounts1.get(0));
    //查询一行一列（使用聚合函数，但不加ground子句）
    Long count1 = jdbcTemplate.queryForObject(&quot;select count(*) from account where money&gt;?&quot;,Long.class,1000f);
    System.out.println(count1);

}</code></pre><p>}<br> /*</p>
<ul>
<li><p>自定义Account的封装工具类</p>
</li>
<li><p>*/<br>class AccountRowmapper implements RowMapper<Account>{</p>
<p>public Account mapRow(ResultSet resultSet, int i) throws SQLException {</p>
<pre><code>/*
* 把结果集中的数据封装到Account中，然后由Spring把每个Account加到集合中
* */
Account  account =new Account();
account.setId(resultSet.getInt(&quot;id&quot;));
account.setName(resultSet.getString(&quot;name&quot;));
account.setMoney(resultSet.getFloat(&quot;money&quot;));
return account;</code></pre><p>}<br>}</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### <span class="number">4.</span> Dao层操作</span><br><span class="line">* XML配置</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"></p>
<!--    配置Dao-->
<bean id="accountDaoId" class="com.zhao.dao.impl.AccountImpl">
   <property name="jdbcTemplate" ref="jdbcTemplate"></property> 
</bean>
<!--    配置JdbcTemplate-->
<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="dataSource"></property>
</bean>
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
    <property name="url" value="jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai"></property>
    <property name="username" value="root"></property>
    <property name="password" value="zhao1314520"></property>
</bean>
</beans>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>实现类</span><br></pre></td></tr></table></figure>
/*
* 账户持久层实现类
* */
public class AccountImpl implements IAccountDao {

<p>private JdbcTemplate jdbcTemplate;</p>
<p>public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {</p>
<pre><code>this.jdbcTemplate = jdbcTemplate;</code></pre><p>}</p>
</li>
</ul>
<pre><code>public Account findAccountById(Integer accountId) {
    List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where id=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountId);
    return accounts.isEmpty()?null:accounts.get(0);

}



public Account findAccountName(String accountName) {
    List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where name=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountName);
    if(accounts.isEmpty()){
        return null;
    }
    if(accounts.size()&gt;1){
        throw new RuntimeException(&quot;结果集不唯一&quot;);
    }
    return accounts.get(0);
}




public void updateAccount(Account account) {
    String sql =&quot;update account set name=?,money=? where id=?&quot;;
    Object[] obj ={account.getName(),account.getMoney(),account.getId()};
    getJdbcTemplate().update(sql,obj);
}</code></pre><p>}<br> <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>测试类</span><br></pre></td></tr></table></figure><br>public class JdbcTemplatedomo4 {</p>
<pre><code>public static void main(String[] args) {

    ApplicationContext applicationContext =new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);
    IAccountDao iAccountDao = applicationContext.getBean(&quot;accountDaoId&quot;, IAccountDao.class);
    Account account = iAccountDao.findAccountById(1);
    System.out.println(account);

    account.setMoney(40000f);
    iAccountDao.updateAccount(account);

}</code></pre><p>}<br> <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### <span class="number">5.</span> 多个Dao 方式一：提取自定义代码方式</span><br><span class="line"><span class="number">1.</span> 公共类</span><br></pre></td></tr></table></figure><br>/*</p>
<ul>
<li>用于抽取Dao中的重复代码</li>
<li>注意get|set方法</li>
<li>*/</li>
</ul>
<p>public class jdbcDaoSupport {<br>    private JdbcTemplate jdbcTemplate;</p>
<pre><code>public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
    this.jdbcTemplate = jdbcTemplate;
}

public JdbcTemplate getJdbcTemplate() {
    return jdbcTemplate;
}

//private DataSource dataSource;

public void setDateSource(DataSource dataSource) {
   // this.dataSource = dataSource;
    if(jdbcTemplate == null){
        jdbcTemplate = createJdbcTemplate(dataSource);
    }
}
private JdbcTemplate createJdbcTemplate(DataSource dataSource){
    return new JdbcTemplate(dataSource);
}</code></pre><p>}<br> <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 实现类</span><br></pre></td></tr></table></figure><br>/*</p>
<ul>
<li><p>账户持久层实现类</p>
</li>
<li><p>继承 jdbcDaoSupport</p>
</li>
<li><p>*/<br>public class AccountImpl extends jdbcDaoSupport implements IAccountDao {</p>
<p>  public Account findAccountById(Integer accountId) {</p>
<pre><code>List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where id=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountId);
return accounts.isEmpty()?null:accounts.get(0);</code></pre><p>  }</p>
</li>
</ul>
<pre><code>public Account findAccountName(String accountName) {
    List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where name=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountName);
    if(accounts.isEmpty()){
        return null;
    }
    if(accounts.size()&gt;1){
        throw new RuntimeException(&quot;结果集不唯一&quot;);
    }
    return accounts.get(0);
}


public void updateAccount(Account account) {
    String sql =&quot;update account set name=?,money=? where id=?&quot;;
    Object[] obj ={account.getName(),account.getMoney(),account.getId()};
    getJdbcTemplate().update(sql,obj);
}</code></pre><p>}<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">3. </span>XML配置</span><br><span class="line"><span class="bullet">* </span>公共类中含有数据源</span><br><span class="line"><span class="bullet">* </span>可取消下面代码</span><br></pre></td></tr></table></figure><br> <!--    配置JdbcTemplate--><br>    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"><br>        <property name="dataSource" ref="dataSource"></property><br>    </bean>–&gt;<br> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    配置Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDaoId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.dao.impl.AccountImpl"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--        &lt;property name="jdbcTemplate" ref="jdbcTemplate"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    配置JdbcTemplate</span></span><br><span class="line"><span class="comment">    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="6-多个Dao-方式二：继承Spring-JdbcDaoSupport类"><a href="#6-多个Dao-方式二：继承Spring-JdbcDaoSupport类" class="headerlink" title="6.  多个Dao 方式二：继承Spring  JdbcDaoSupport类"></a>6.  多个Dao 方式二：继承Spring  JdbcDaoSupport类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.support.JdbcDaoSupport;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 账户持久层实现类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = getJdbcTemplate().query(<span class="string">"select * from account where id=?"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">accountId</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> accounts.isEmpty()?<span class="keyword">null</span>:accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountName</span><span class="params">(String accountName)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = getJdbcTemplate().query(<span class="string">"select * from account where name=?"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">accountName</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span>(accounts.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(accounts.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> accounts.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        String sql =<span class="string">"update account set name=?,money=? where id=?"</span>;</span><br><span class="line">        Object[] obj =&#123;account.getName(),account.getMoney(),account.getId()&#125;;</span><br><span class="line">        getJdbcTemplate().update(sql,obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>spring框架-一</title>
    <url>/2019/11/03/spring%E6%A1%86%E6%9E%B6-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="知识点一："><a href="#知识点一：" class="headerlink" title="知识点一："></a>知识点一：</h3><ol>
<li>4+1   4个核心（beans core context expression）+1个依类（commons-logins..jar）</li>
</ol>
<p>！<a href="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572031281077&di=19f3b40cfe98239b9a176702be5a0cd8&imgtype=0&src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-07d0fdbd0f685bc90d59abe2a976eb41_b.jpg" target="_blank" rel="noopener" title="Spring的jar包">Spring</a></p>
<ol start="2">
<li>IO  控制反转 由Spring配置文件beans.xml完成创建对象的过程</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.service.UserSercice"</span>&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;<span class="regexp">/bean&gt;</span></span><br></pre></td></tr></table></figure>
<p>DI Dependency Injection 依赖注入 在service写一个属性 有get、set方法 在bean.xml中配置属性<br>    其内部执行相当于 new创建对象 调用set方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖注入调用属性的Set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接口指向实现类（实现类也可以）实例化<br>依赖：一个类需要另一个类<br>注入：set方法设置值</p>
<h3 id="知识点二："><a href="#知识点二：" class="headerlink" title="知识点二："></a>知识点二：</h3><p>Spring加载beans.xml 的三种方式：</p>
<ol>
<li><p>方式1.？加载beans.xml配置文件（ApplicationContext 容器）<br>ClassPath：指的是classes路径</p>
<pre><code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</code></pre></li>
<li><p>方式2.文件系统路径获取配置文件</p>
<pre><code>ApplicationContext context1 = new FileSystemXmlApplicationContext(&quot;G:\\IDEA\\Spring_Domo\\spring01\\src\\beans.xml&quot;);</code></pre></li>
</ol>
<p>3.// 方式3.     使用BeanFactory（了解）<br>        String path =”G:\IDEA\Spring_Domo\spring01\src\beans.xml”;<br>        BeanFactory factory = new XmlBeanFactory(new FileSystemResource(path));</p>
<p>  //2.从spring容器中获取对象<br>        IuserSercice userSercice = (IuserSercice) context.getBean(“userService”);<br>        userSercice.add();</p>
<h3 id="知识点三："><a href="#知识点三：" class="headerlink" title="知识点三："></a>知识点三：</h3><ol>
<li>ApplicationContext和BeanFactory比较</li>
<li>BeanFactory 采用延时加载，第一次getBean时才会初始化Bean</li>
<li>ApplicationContext 及时加载</li>
</ol>
<h3 id="知识点四："><a href="#知识点四：" class="headerlink" title="知识点四："></a>知识点四：</h3><h5 id="装配Bean的三种方式"><a href="#装配Bean的三种方式" class="headerlink" title="装配Bean的三种方式"></a>装配Bean的三种方式</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--装配Bean的三种方式，--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一种   new实现类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService1"</span> <span class="attr">class</span>=<span class="string">"com.zhao.service.UserSercice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    第二种方式 通过静态工厂方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService2"</span> <span class="attr">class</span>=<span class="string">"com.zhao.service.UserServiceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createUserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    第三种方式 通过实例工厂方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory2"</span> <span class="attr">class</span>=<span class="string">"com.zhao.service.UserServiceFactory1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService3"</span> <span class="attr">factory-bean</span>=<span class="string">"factory2"</span> <span class="attr">factory-method</span>=<span class="string">"createUserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Lensson1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//new对象</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//      classPath 类路径加载</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans1.xml"</span>);</span><br><span class="line">        IuserSercice userService1 = (IuserSercice) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        userService1.<span class="keyword">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        静态工厂</span></span><br><span class="line">        IuserSercice userSercice2 =UserServiceFactory.createUserService();</span><br><span class="line">        userSercice2.<span class="keyword">add</span>();</span><br><span class="line"></span><br><span class="line">        ApplicationContext context1 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans1.xml"</span>);</span><br><span class="line">        IuserSercice userService3 = (IuserSercice) context1.getBean(<span class="string">"userService2"</span>);</span><br><span class="line">        userService3.<span class="keyword">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        实例工厂</span></span><br><span class="line"><span class="comment">//        1.创建工厂</span></span><br><span class="line"><span class="comment">//        UserServiceFactory1 factory2 = new UserServiceFactory1();</span></span><br><span class="line"><span class="comment">//        IuserSercice userService4 = factory2.createUserService();</span></span><br><span class="line"><span class="comment">//        userService4.add();</span></span><br><span class="line"></span><br><span class="line">        ApplicationContext context3 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans1.xml"</span>);</span><br><span class="line"></span><br><span class="line">        IuserSercice userSercice4 = (IuserSercice) context3.getBean(<span class="string">"userService3"</span>);</span><br><span class="line">        userSercice4.<span class="keyword">add</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二种静态工厂"><a href="#第二种静态工厂" class="headerlink" title="第二种静态工厂"></a>第二种静态工厂</h3><pre><code>public class UserServiceFactory {

    public static IuserSercice createUserService(){

        return new UserSercice();
    }
}</code></pre><h4 id="第三种工厂类"><a href="#第三种工厂类" class="headerlink" title="第三种工厂类"></a>第三种工厂类</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceFactory1</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IuserSercice <span class="title">createUserService</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserSercice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="装配Bean基于XML"><a href="#装配Bean基于XML" class="headerlink" title="装配Bean基于XML"></a>装配Bean基于XML</h4><h4 id="1-默认构造"><a href="#1-默认构造" class="headerlink" title="1. 默认构造"></a>1. 默认构造</h4><pre><code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;&lt;\bean&gt;</code></pre><h4 id="2-静态工厂（Spring整合）"><a href="#2-静态工厂（Spring整合）" class="headerlink" title="2. 静态工厂（Spring整合）"></a>2. 静态工厂（Spring整合）</h4><p>常用语Spring整合其他框架<br>静态工厂：用于生产实例，方法必须static</p>
<pre><code>&lt;bean id=&quot;&quot; class=&quot;工厂全限定名&quot; factory-method=&quot;方法名&quot;&gt;&lt;\bean&gt;</code></pre><p>Spring之前创建静态工厂的方法</p>
<ol>
<li><p>工厂类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建工厂</span></span><br><span class="line">    <span class="comment">//    spring 之创建用工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserSercice <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserSercice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    spring 之前调用工厂方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">domo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserSercice userSercice = MyBeanFactory.createService();</span><br><span class="line">        userSercice.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Spring创建静态工厂方法</p>
</li>
<li><p>beans.xml文件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  将静态工厂创建的实例交于Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.zhao.bean_static_factory.MyBeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">domo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Spring工厂</span></span><br><span class="line">       <span class="comment">//String xmlPath="com/zhao/bean_static_factory/beans.xml";</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zhao/bean_static_factory/beans.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      getBean 参数二类型，不需要强转</span></span><br><span class="line"><span class="comment">//      UserSercice userSercice1 =(UserService) applicationContext.getBean("userService");</span></span><br><span class="line">        UserSercice userSercice1 = applicationContext.getBean(<span class="string">"userService"</span>,UserSercice<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        userSercice1.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h4><p>Spring之前创建工厂的方法</p>
</li>
<li><p>工厂类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建工厂（实例工厂）</span></span><br><span class="line">    <span class="comment">//    spring 之创建用工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserSercice <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserSercice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    spring 之前调用工厂方法</span></span><br><span class="line"><span class="comment">//    自定义工厂</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">domo01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        1.创建工厂</span></span><br><span class="line">        MyBeanFactory myBeanFactory = <span class="keyword">new</span> MyBeanFactory();</span><br><span class="line">        <span class="comment">//2.通过工厂实例，获取对象</span></span><br><span class="line">        UserSercice userSercice = myBeanFactory.createService();</span><br><span class="line">        userSercice.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Spring创建工厂方法</p>
</li>
<li><p>beans.xml文件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    将工厂创建的实例交于Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanFactory"</span> <span class="attr">class</span>=<span class="string">"com.zhao.bean_factory.MyBeanFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    获得UserService--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span>  <span class="attr">factory-bean</span>=<span class="string">"myBeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">domo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Spring工厂</span></span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zhao/bean_factory/beans.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      getBean 参数二类型，不需要强转</span></span><br><span class="line"><span class="comment">//      UserSercice userSercice1 =(UserService) applicationContext.getBean("userService");</span></span><br><span class="line">        UserSercice userSercice1 = applicationContext.getBean(<span class="string">"userServiceId"</span>, UserSercice<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        userSercice1.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="bean的种类"><a href="#bean的种类" class="headerlink" title="bean的种类"></a>bean的种类</h3></li>
<li><p>普通bean： <bean id="" class="A"> spring 直接创建A实例，并返回</p>
</li>
<li><p>FactoryBean：是一个特殊的bean，具有工厂生产对象的能力，只能生产特定的对象<br>bean必须实现FactoryBean接口，此接口提供方法getObject()用于<br>获得特定的对象(bean)<br><bean id="" class="FB">先创建FB实例，使用调用getObject()方法，并返回方法的返回值<br>底层调用方法：<br> FB fb = new FB();<br> return fb,getObject();</p>
</li>
<li><p>BeanFactory 和 FactoryBean 比较</p>
<ul>
<li>BeanFactory: 工厂，用于生产任意bean</li>
<li>FactoryBean：特殊bean，用于生产特殊的bean<br>例如：ProxyFactoryBean 此工厂bean用于生产代理<br><bean id="" class="...ProxyFactoryBean"> 获取代理对象的实例，AOP使用<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3></li>
</ul>
</li>
</ol>
<ul>
<li><p>singleton： 单例 默认值；</p>
</li>
<li><p>prototype:  多例,每执行一次getBean将获得一个实例，select单例，struts2的Action为多例</p>
</li>
<li><p>配置信息</p>
</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">    &lt;bean id=<span class="string">""</span> <span class="keyword">class</span>=<span class="string">""</span>&gt;</span><br><span class="line"><span class="comment">//scope="prototype" 多例</span></span><br><span class="line">    &lt;bean id=<span class="string">"userService"</span> <span class="keyword">class</span>=<span class="string">"com.zhao.scop.UserSercice"</span> scope=<span class="string">"prototype"</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h3 id="生命周期（11步）"><a href="#生命周期（11步）" class="headerlink" title="生命周期（11步）"></a>生命周期（11步）</h3><ul>
<li><p>初始化和销毁</p>
<ul>
<li>目标方法执行前和执行后，将执行初始化或销毁</li>
<li>beans.xml<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">""</span> <span class="attribute">class</span>=<span class="string">""</span> <span class="attribute">init-method</span>=<span class="string">"初始化方法"</span>      <span class="attribute">destory-method</span>=<span class="string">"销毁方法名称"</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"userService"</span> <span class="attribute">class</span>=<span class="string">"com.zhao.lifecycle.UserSercice"</span> <span class="attribute">init-method</span>=<span class="string">"myInit"</span> <span class="attribute">destroy-method</span>=<span class="string">"myDestory"</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>调用方法</p>
<pre><code>public class Testlifecycle {</code></pre></li>
</ul>
<pre><code>    @Test
    public void domo02() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {

        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao/lifecycle/beans.xml&quot;);
        UserSercice userSercice = applicationContext.getBean(&quot;userService&quot;,UserSercice.class);

        userSercice.add();

        //要求：1.容器必须close，执行销毁方法
        applicationContext.getClass().getMethod(&quot;close&quot;).invoke(applicationContext);
        //applicationContext.close();
    }
}</code></pre><ul>
<li>BeanPostProcessor 后处理bean<ul>
<li>Spring 提供一种机制，只要实现此接口BeanPostprocessor，并将实现类提供该Spring容器，Spring容器将自动执行，在初始化方法前执行before(),在初始化方法后执行after()</li>
<li>Spring 提供工厂钩子，用于修改实例对象，可以生成代理对象，是AOP的底层</li>
</ul>
</li>
</ul>
<p>后处理类：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> myPostProcessor implements BeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">Object</span> postProcessBeforeInitialization(<span class="keyword">Object</span> bean, String beanName) throws BeansException &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("前处理"+beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">Object</span> postProcessAfterInitialization(<span class="keyword">Object</span> bean, String beanName) throws BeansException &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("后处理"+beanName);</span><br><span class="line">        //bean目标对象 bean.getClass().getInterfaces()</span><br><span class="line">//        生成JDK代理 Proxy JDK工具类  myPostProcessor.<span class="keyword">class</span>.getClassLoader()当前类的类加载器</span><br><span class="line">//        <span class="built_in">new</span> InvocationHandler() 处理程序</span><br><span class="line">        //<span class="keyword">return</span> bean;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(myPostProcessor.<span class="keyword">class</span>.getClassLoader(),</span><br><span class="line">                bean.getClass().getInterfaces(),</span><br><span class="line">                <span class="built_in">new</span> InvocationHandler() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="built_in">public</span> <span class="keyword">Object</span> invoke(<span class="keyword">Object</span> proxy, <span class="keyword">Method</span> <span class="keyword">method</span>, <span class="keyword">Object</span>[] args) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">System</span>.<span class="keyword">out</span>.println("开启事务处理方法");</span><br><span class="line">                        //执行目标方法</span><br><span class="line">                        <span class="keyword">Object</span> <span class="keyword">object</span> = <span class="keyword">method</span>.invoke(bean);</span><br><span class="line">                        <span class="keyword">System</span>.<span class="keyword">out</span>.println("提交事务处理方法");</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">object</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> benas.xml<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">     &lt;bean id=<span class="string">"userServiceId"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.lifecycle.UserSercice"</span> init-method=<span class="string">"myInit"</span> destroy-method=<span class="string">"myDestory"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line">&lt;!--    将后处理的的实现类注册给Spring--&gt;</span><br><span class="line">    &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.lifecycle.myPostProcessor"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testlifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">domo02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zhao/lifecycle/beans.xml"</span>);</span><br><span class="line"></span><br><span class="line">        IuserSercice  userSercice = (IuserSercice) applicationContext.getBean(<span class="string">"userServiceId"</span>);</span><br><span class="line"></span><br><span class="line">        userSercice.add();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要求：1.容器必须close，执行销毁方法</span></span><br><span class="line">        applicationContext.getClass().getMethod(<span class="string">"close"</span>).invoke(applicationContext);</span><br><span class="line">        <span class="comment">//applicationContext.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   错误信息： org.springframework.beans.factory.BeanNotOfRequiredTypeException</p>
<p>   注入spring的bean 出现的，具体是由于spring采用代理的机制导致的<br>   解决方法：(注意此处接口指向)</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">I<span class="keyword">user</span>Sercice  <span class="keyword">user</span>Sercice = (I<span class="keyword">user</span>Sercice) applicationContext.getBean(<span class="string">"userServiceId"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="属性依赖注入"><a href="#属性依赖注入" class="headerlink" title="属性依赖注入"></a>属性依赖注入</h3><ul>
<li><p>Setter方法注入</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>普通数据：&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"pname"</span> value=<span class="string">"阿尔提尔"</span>&gt;&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line"><span class="number">2.</span>字标签&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"pname"</span> &gt;</span><br><span class="line">    &lt;value&gt;v阿尔提尔&lt;/value&gt;</span><br><span class="line">&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">注意：<span class="number">1</span>和<span class="number">2</span>是等效的</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"pesonId"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.setter.peson"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"pname"</span> value=<span class="string">"阿尔提尔"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">    &lt;property name=<span class="string">"age"</span> value=<span class="string">"24"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;property name=<span class="string">"coperAddrs"</span> ref=<span class="string">"coperAddrId"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">    &lt;property name=<span class="string">"homeAddr"</span>&gt;</span><br><span class="line">        &lt;ref bean=<span class="string">"homeAddrId"</span>/&gt;</span><br><span class="line">    &lt;<span class="regexp">/property&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>bean&gt;</span><br><span class="line">&lt;!-- 引用数据--&gt;</span><br><span class="line">&lt;bean id=<span class="string">"homeAddrId"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.setter.Address"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"home"</span> value=<span class="string">"重庆"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">    &lt;property name=<span class="string">"tel"</span> value=<span class="string">"13993216246"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/bean&gt;</span></span><br><span class="line"><span class="regexp">&lt;bean id="coperAddrId" class="com.zhao.setter.Address"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;property name="home" value="城管"&gt;&lt;/</span>property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"tel"</span> value=<span class="string">"18522536924"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/bean&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="P命名空间【了解】"><a href="#P命名空间【了解】" class="headerlink" title="P命名空间【了解】"></a>P命名空间【了解】</h4><ul>
<li>对setter方法注入进行简化，替换<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"属性名"</span>&gt;</span><br></pre></td></tr></table></figure>
而是在&lt;bean p:属性名=”普通值” p:属性名 -ref=”引用值”&gt;</li>
<li>P命名空间使用前提必须添加命名空间<br>xmlns:p=”<a href="http://www.springframework.org/schema/p&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/p&quot;</a></li>
</ul>
<p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--    p命名空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pesonId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.p.peson"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:pname</span>=<span class="string">"阿尔提尔"</span> <span class="attr">p:age</span>=<span class="string">"22"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:coperAddrs-ref</span>=<span class="string">"coperAddrId"</span> <span class="attr">p:homeAddr-ref</span>=<span class="string">"homeAddrId"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"homeAddrId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.p.Address"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:home</span>=<span class="string">"重庆"</span> <span class="attr">p:tel</span>=<span class="string">"13993216246"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"coperAddrId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.p.Address"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:home</span>=<span class="string">"城管"</span> <span class="attr">p:tel</span>=<span class="string">"18522536924"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SpEL【了解】"><a href="#SpEL【了解】" class="headerlink" title="SpEL【了解】"></a>SpEL【了解】</h3><ul>
<li>对<property>进行统一编程所有的内容都是用value<property name="" value="#{表达式}">
eg：#{123} #{"jack"}
  #{beanId}          :另一个bean的引用
  #{bean.propName}   :操作属性
  #{bean.toString()} :执行方法
  #{T(类)字段|方法}   ：静态方法或字段

</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--    </span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">peoperty</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;userId.name.toUpperCase()&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        通过另一个bean，获得属性，调用方法</span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">peoperty</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;userId.name?.toUpperCase()&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ?.表示对象不为空，调用方法   </span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.SpEl.User"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;'阿尔提尔'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pi"</span> <span class="attr">value</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;T(java.lang.<span class="keyword">Math</span>).PI&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h3> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    集合的注入都是给&lt;peoperty&gt;添加字标签</span></span><br><span class="line"><span class="comment">    数组：&lt;array&gt;</span></span><br><span class="line"><span class="comment">    List：&lt;list&gt;</span></span><br><span class="line"><span class="comment">    Set：&lt;set&gt;</span></span><br><span class="line"><span class="comment">    Map：&lt;map&gt;  键值对&lt;entry&gt;</span></span><br><span class="line"><span class="comment">    Properties：&lt;props&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    普通数据：&lt;value&gt;</span></span><br><span class="line"><span class="comment">    引用数据：&lt;ref&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.coll.CollDate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arryData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DZD<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>屌丝<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>吊中吊<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"listData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DZD<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>屌丝<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>吊中吊<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"setData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>屌丝<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>吊中吊<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"jack"</span> <span class="attr">value</span>=<span class="string">"杰克"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>kaer<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>卡尔<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propsData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"高富帅nao"</span>&gt;</span>嫐<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"白富美niao"</span>&gt;</span>嬲<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"男屌丝nong"</span>&gt;</span>挊<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  ``` </span><br><span class="line"></span><br><span class="line">### 装配Bean基于注解</span><br><span class="line">* 注解：就是一个类，使用@注解名称</span><br><span class="line">* 开发中:使用注解 取代XML配置文件</span><br><span class="line">1. @Component 取代 ```<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure>
<pre><code>@Component(&quot;id&quot;) 取代 ```&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;```</code></pre><ol start="2">
<li>web开发，提供3个@Component注解的衍生注解(功能一样) 取代<code>&lt;bean class=&quot;&quot;&gt;</code><br> @Repository  dao层<br> @service     service层<br> @Controller  web层</li>
<li>依赖注入  给私有字段设置 也可以给setter方法设置<br> 普通值：@value(“”)<br> 引用值：<pre><code>方式一：按照【类型】注入
        @Autowired  【自动】
方式二：按照【名称】注入1
        @Autowired 
        @Qualifier(&quot;名称&quot;)
方式三：按照【名称】注入2
        @Resource(&quot;名称&quot;)</code></pre></li>
<li>生命周期<br> 初始化：@PostConstruct<br> 销毁： @PreDestroy</li>
<li>作用域<br> @Scope(“prototype”)多例</li>
</ol>
<h5 id="注解使用前提，添加命名空间，让Spring扫描含有注解的类"><a href="#注解使用前提，添加命名空间，让Spring扫描含有注解的类" class="headerlink" title="注解使用前提，添加命名空间，让Spring扫描含有注解的类"></a>注解使用前提，添加命名空间，让Spring扫描含有注解的类</h5><p>schema命名空间</p>
<ol>
<li>默认命名空间<br> 默认 xmlns=””; &lt;标签名&gt; <bean><br> 显示：xmlns：别名=”” &lt;别名：标签名&gt; <a href="context:...." target="_blank" rel="noopener">context:....</a></li>
<li>确定schema.xsd 文件位置<br> xsl:schemaLocaltion=”名称 位置 名称2 位置2 …..”;<br> 内容都是成对的【名称 位置】</li>
</ol>
<ul>
<li>添加的分别是：</li>
</ul>
<ol>
<li>xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context&quot;</a></li>
<li><a href="http://www.springframework.org/schema/context" target="_blank" rel="noopener">http://www.springframework.org/schema/context</a></li>
<li><a href="http://www.springframework.org/schema/context/spring-context.xsd" target="_blank" rel="noopener">http://www.springframework.org/schema/context/spring-context.xsd</a></li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;beans <span class="attribute">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:<span class="attribute">xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:<span class="attribute">context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:<span class="attribute">schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>beans.xml配置组建扫描，扫描含有注解的类<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    组建扫描，扫描含有注解的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zhao.annotation_IOC"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>测试类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testweb</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zhao/Web/beans.xml"</span>);</span><br><span class="line">        StudentAction studentAction =  applicationContext.getBean(<span class="string">"studentActionId"</span>,StudentAction<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        studentAction.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>web层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Controller</span>(<span class="string">"studentActionId"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        studentService.addStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>service 层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"studentDaoId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentDao</span><span class="params">(StudentDao studentDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        studentDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>dao层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Repository</span>(<span class="string">"studentDaoId"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
