<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>spring框架事务管理(三)</title>
    <url>/2019/11/04/spring%E6%A1%86%E6%9E%B6%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86(%E4%B8%89)/</url>
    <content><![CDATA[<h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><ul>
<li>事务：一组业务操作，要不全部成功，要不全部失败</li>
<li>特性：ACID<br>  原子性：整体<br>  一致性：完成<br>  隔离性：并发<br>  持久性：结果</li>
<li>隔离问题：<br>  脏读：一个事务读到另一个事务没有提交的数据<br>  不可重复读：一个事务读到另一个事务已提交的数据（update）<br>  虚读（幻读）：一个事务读到另一个事务已提交的数据（insert）</li>
<li>隔离级别：<br>  read uncommitted:读未提交；存在3个问题<br>  read committed:  读已提交；解决，脏读：存在2个问题<br>  repeatable read:  可重复读；解决，脏读，不可重复读，存在一个问题<br>  serializable：    串行化；都解决，单事务。</li>
<li>MySQL事务操作</li>
</ul>
<ol>
<li>获取连接</li>
<li>开启事务 conn.setAutoCommit(false);</li>
<li>提交事务 conn.committed();</li>
<li>catch()中回滚事务 conn.roolback();</li>
</ol>
<ul>
<li>Savepoint 保存点，记录用户操作的当前位置，之后可以回滚到指定的位置</li>
</ul>
<h3 id="spring事务管理（transaction）"><a href="#spring事务管理（transaction）" class="headerlink" title="spring事务管理（transaction）"></a>spring事务管理（transaction）</h3><p>导包：spring-tx<br>三个顶级接口</p>
<ul>
<li>PlatformTransactionManager    平台事务管理器   spring要管理事务，必须使用事务管理器<br> 进行事务配置时，必须配置事务管理器</li>
<li>TransactionDefinition         事务详情（事务定义，事务属性），spring用于确定事物具体详情<br> 例如：隔离级别，是否只读（readonly），超时时间（timeout）<br> 进行事务配置时，必须配置事务详情，spring将配置项封装到给对象的实例。</li>
<li>TransactionStatus             事务状态，spring用于记录当前的事务运行状态，例如:是否有保存点，事务是否完成<br> spring底层根据状态进行相应操作</li>
</ul>
<h4 id="详解："><a href="#详解：" class="headerlink" title="详解："></a>详解：</h4><ul>
<li>PlatformTransactionManager 平台事务管理器<br>导包：spring-jdbc（jdbc开发） ，spring—orm（整合Hibernate）</li>
</ul>
<ol>
<li>常见事务管理器(及PlatformTransactionManager的实现类)<br>DatesourceTransactionManager    jdbc包下其开发时的事务管理器，采用JdbcTemplate<br>HibernateTransactionManager   Hibernate包下其开发时的事务管理器，整合hibernate<ul>
<li>api详解<br>TransactionStatus getTransaction(TransationDefinition definition),<br>事务管理器 通过’事务详情’，获得’事务状态’，从而管理事务<br>void commit(TransactionStatus status)    根据状态提交<br>void rollback(TransactionStatus status)  根据状态回滚</li>
</ul>
</li>
</ol>
<ul>
<li><p>TransactionDefinition  事务详情<br>  String getName()  配置事务详情名称，一般方法名称。例如：save add<br>  boolean isReadOnly() 是否只读(增删改 读写；查询：只读)<br>  int  getTime()  超时时间<br>  int  Isolationlevel() 隔离级别<br>  int  getPropagationBehavior()  传播行为</p>
</li>
<li><p>传播行为：在两个业务之间如何共享事务<br>7种常量<br>PROPAGATLON_REQUIRED , required 必须<br>  支持当前事务，A如果创建事务，B必须使用该事务<br>  如果A没有事务，B将创建一个新事务<br>PROPAGATLON_SUPPORTS ， supports 支持<br>  支持当前事务，A如果创建事务，B必须使用该事务<br>  如果A没有事务，B将已非事务<br>PROPAGATLON_MANDATORY ，mandatory 强制<br>  支持当前事务，A如果创建事务，B必须使用该事务<br>  如果A没有事务，B将抛出异常<br>PROPAGATLON_REQUIRES_NEW  requires_new 必须新的<br>  如果A有事务，将A事务挂提，B将创建一个新的事务<br>  如果A没有事务，B将创建一个新的事务<br>PROPAGATLON_NOT_SUPPORTED , not_supported  不支持<br>  如果A有事务，将A事务挂提，B将已非事务执行<br>  如果A没有事务，B将已非事务执行<br>PROPAGATLON_NEVER ， never  从不<br>  如果A有事务，B将抛出异常<br>  如果A没有事务，B将已非事务执行<br>PROPAGATLON_NESTED ，nested 嵌套<br>  A和B底层采用保存点机制，形成嵌套事务</p>
</li>
<li><p>TransactionStatus      事务状态</p>
<h3 id="事务案例"><a href="#事务案例" class="headerlink" title="事务案例"></a>事务案例</h3></li>
</ul>
<ol>
<li>转账1<br>导包：![图片alt](图片地址 ‘’图片title’’)<br><img src="E:/VScode-data/1.png" alt="jar"></li>
</ol>
<ul>
<li>Dao层<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AccountDaoImpl extends JdbcDaoSupport implements AccountDao &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void out(String ounter, Integer money) &#123;</span><br><span class="line">        getJdbcTemplate().update(&quot;update account set money = money - ? where username = ?&quot;,money,ounter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void in(String inner, Integer money) &#123;</span><br><span class="line">        getJdbcTemplate().update(&quot;update account set money = money + ? where username = ?&quot;,money,inner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Service层<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AccountServiceImpl implements AccountService &#123;</span><br><span class="line">    /*</span><br><span class="line">    * service层调用Dao</span><br><span class="line">    * */</span><br><span class="line">    private AccountDao accountDao;</span><br><span class="line">    /*</span><br><span class="line">    * spring注入提供set方法</span><br><span class="line">    * */</span><br><span class="line">    public void setAccountDao(AccountDao accountDao) &#123;</span><br><span class="line">        this.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void transation(String ounter, String inner, Integer money) &#123;</span><br><span class="line">        accountDao.out(ounter,money);</span><br><span class="line">        accountDao.in(inner,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>XML配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--    datasource数据源--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Dirver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--    Dao--&gt;</span><br><span class="line">    &lt;bean id=&quot;accountDao&quot; class=&quot;com.zhao.Dao.Impl.AccountDaoImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> &lt;!--service层--&gt;</span><br><span class="line">    &lt;bean id=&quot;accountService&quot; class=&quot;com.zhao.Service.Impl.AccountServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public class TestApp &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void save()&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span><br><span class="line"></span><br><span class="line">        AccountServiceImpl accountService = applicationContext.getBean(&quot;accountService&quot;, AccountServiceImpl.class);</span><br><span class="line"></span><br><span class="line">        accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>手动管理事务（了解）</li>
</ol>
<ul>
<li>spring底层使用 TransactuinTemplate 事务模板进行操作</li>
<li>操作：<pre><code>1. service 需要获得 TransactionTemplate 事务模板
2. spring 配置模板，并注入给service
3. 模板需要注入事务管理器
4. 配置事务管理器 DateSourceTranctionManager 需要注入DataSource数据源</code></pre></li>
</ul>
<ul>
<li>修改Service<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AccountServiceImpl implements AccountService &#123;</span><br><span class="line">    /*</span><br><span class="line">    * service层调用Dao</span><br><span class="line">    * */</span><br><span class="line">    private AccountDao accountDao;</span><br><span class="line">    /*</span><br><span class="line">    * spring注入提供set方法</span><br><span class="line">    * */</span><br><span class="line">    public void setAccountDao(AccountDao accountDao) &#123;</span><br><span class="line">        this.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    * 创建事务模板</span><br><span class="line">    * spring注入</span><br><span class="line">    * */</span><br><span class="line">    private TransactionTemplate transactionTemplate;</span><br><span class="line">    /*</span><br><span class="line">    * setter方法注入模板</span><br><span class="line">    * */</span><br><span class="line">    public void setTransactionTemplate(TransactionTemplate transactionTemplate) &#123;</span><br><span class="line">        this.transactionTemplate = transactionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void transation(final String ounter, final String inner, final Integer money) &#123;</span><br><span class="line"></span><br><span class="line">        transactionTemplate.execute(new TransactionCallbackWithoutResult() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) &#123;</span><br><span class="line">                accountDao.out(ounter,money);</span><br><span class="line">                accountDao.in(inner,money);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>修改XML配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--    datasource数据源--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Dirver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--    Dao--&gt;</span><br><span class="line">    &lt;bean id=&quot;accountDao&quot; class=&quot;com.zhao.Dao.Impl.AccountDaoImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> &lt;!--service层--&gt;</span><br><span class="line">    &lt;bean id=&quot;accountService&quot; class=&quot;com.zhao.Service.Impl.AccountServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;!-- 修改（添加）的是以下代码 --&gt;</span><br><span class="line">        &lt;property name=&quot;transactionTemolate&quot; ref=&quot;transactionTemplate&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> &lt;!--    创建模板--&gt;</span><br><span class="line">    &lt;bean id=&quot;transactionTemplate&quot; class=&quot;org.springframework.transaction.support.TransactionTemplate&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;transactionManager&quot; ref=&quot;txmanager&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> &lt;!--    配置事务管理器 管理需要事务，事务从Connection获得，连接从连接池DataSource获得--&gt;</span><br><span class="line">    &lt;bean id=&quot;txmanager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<h3 id="工厂Bean-生成代理：半自动"><a href="#工厂Bean-生成代理：半自动" class="headerlink" title="工厂Bean 生成代理：半自动"></a>工厂Bean 生成代理：半自动</h3><ul>
<li>Spring提供 管理事务的代理工厂bean： TransactionProxyFactoryBean<ol>
<li>getBean() 获得代理对象</li>
<li>Spring 配置一个代理</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>修改XML配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--    datasource数据源--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Dirver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--    Dao--&gt;</span><br><span class="line">    &lt;bean id=&quot;accountDao&quot; class=&quot;com.zhao3.Dao.Impl.AccountDaoImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> &lt;!--service层--&gt;</span><br><span class="line">    &lt;bean id=&quot;accountService&quot; class=&quot;com.zhao3.Service.Impl.AccountServiceImpl&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> &lt;!--    service代理对象</span><br><span class="line">        1.proxyInterfaces接口</span><br><span class="line">        2.target目标类</span><br><span class="line">        3.transactionManager 事务管理器</span><br><span class="line">        4.transactionAttributes 事务属性（事务详情）</span><br><span class="line">        5.prop key:确定哪些方法使用当前事务配置</span><br><span class="line">        6.&lt;prop&gt;标签体中（prop text）：配置事务详情</span><br><span class="line">            格式：PROPAGATION,传播行为</span><br><span class="line">             ISOLATION,隔离级别</span><br><span class="line">             readonly,是否只读</span><br><span class="line">             -Exception,异常回滚</span><br><span class="line">             +Exception，异常提交</span><br><span class="line">         eg:数字1和-1</span><br><span class="line">         &lt;prop key=&quot;transation&quot;&gt;PROPAGATION_REQUIRED,ISOLATION_AEFAULT&lt;/prop&gt; 数字1和-1也可默认传播行为和隔离级别</span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;bean id=&quot;proxyAccountService&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;proxyInterfaces&quot; value=&quot;com.zhao3.Service.AccountService&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;target&quot; ref=&quot;accountService&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;transactionManager&quot; ref=&quot;txManager&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;transactionAttributes&quot;&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;prop key=&quot;transation&quot;&gt;PROPAGATION_REQUIRED,ISOLATION_DEFAULT&lt;/prop&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;!--    事务管理器--&gt;</span><br><span class="line">    &lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"> ``` </span><br><span class="line">- 测试类</span><br></pre></td></tr></table></figure>
<p>public class TestApp {</p>
<p>  @Test<br>  public void save(){</p>
<pre><code>ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao3/applicationContext.xml&quot;);

AccountService accountService = applicationContext.getBean(&quot;proxyAccountService&quot;, AccountService.class);

accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);</code></pre><p>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 注意：</span><br><span class="line">    有异常：org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named &apos;proxyAccountService&apos; is expected to be of type &apos;com.zhao3.Service.Impl.AccountServiceImpl&apos; but was actually of type &apos;com.sun.proxy.$Proxy9&apos;</span><br><span class="line">    解决方法：</span><br><span class="line">    AccountService accountService = applicationContext.getBean(&quot;proxyAccountService&quot;, AccountService.class);</span><br><span class="line">    此处要用接口，用实现类会报上面异常</span><br><span class="line"></span><br><span class="line">### AOP配置基于XML</span><br><span class="line">* spring XML配置aop 自动生成代理，进行事务管理</span><br><span class="line">1. 配置事务管理器</span><br><span class="line">2. 配置事务详情</span><br><span class="line">3. 配置aop</span><br><span class="line">* XML配置文件</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/beans&quot;</a></p>
<pre><code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</code></pre></li>
</ul>
<!--    datasource数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Dirver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    Dao-->
<pre><code>&lt;bean id=&quot;accountDao&quot; class=&quot;com.zhao3.Dao.Impl.AccountDaoImpl&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--service层-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;com.zhao3.Service.Impl.AccountServiceImpl&quot;&gt;
    &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    service代理对象
        1.proxyInterfaces接口
        2.target目标类
        3.transactionManager 事务管理器
        4.transactionAttributes 事务属性（事务详情）
        5.prop key:确定哪些方法使用当前事务配置
        6.<prop>标签体中（prop text）：配置事务详情
            格式：PROPAGATION,传播行为
             ISOLATION,隔离级别
             readonly,是否只读
             -Exception,异常回滚
             +Exception，异常提交
         eg:数字1和-1
         <prop key="transation">PROPAGATION_REQUIRED,ISOLATION_AEFAULT</prop> 数字1和-1也可默认传播行为和隔离级别
        -->
<pre><code>&lt;bean id=&quot;proxyAccountService&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;
    &lt;property name=&quot;proxyInterfaces&quot; value=&quot;com.zhao3.Service.AccountService&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;target&quot; ref=&quot;accountService&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;transactionManager&quot; ref=&quot;txManager&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;transactionAttributes&quot;&gt;
        &lt;props&gt;
            &lt;prop key=&quot;transation&quot;&gt;PROPAGATION_REQUIRED,ISOLATION_DEFAULT&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    事务管理器-->
<pre><code>&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre></beans>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 测试类</span><br></pre></td></tr></table></figure>
public class TestApp {

<pre><code>@Test
public void save(){

    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao3/applicationContext.xml&quot;);

    AccountService accountService = applicationContext.getBean(&quot;proxyAccountService&quot;, AccountService.class);

    accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);
}</code></pre><p>}<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### AOP配置基于注解</span><br><span class="line"></span><br><span class="line">* 配置事务管理器，并将事务管理器交予spring</span><br><span class="line">* 在目标类或目标方法添加注解即可 @Transactional</span><br><span class="line">* XML配置</span><br></pre></td></tr></table></figure><br><?xml version="1.0" encoding="UTF-8"?><br><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
"></p>
 <!--    datasource数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Dirver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--    Dao-->
<pre><code>&lt;bean id=&quot;accountDao&quot; class=&quot;com.zhao4.Dao.Impl.AccountDaoImpl&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--service层-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;com.zhao4.Service.Impl.AccountServiceImpl&quot;&gt;
    &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    事务管理
        1. 事务管理器
        -->
<pre><code>&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--将事务管理器交予Spring
    transaction-manager="transactionManager" 配置事务管理器
    proxy-target-class="false" 值为true表示底层强制使用cglib代理
    -->
<pre><code>&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation-driven&gt;</code></pre></beans>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* service层</span><br></pre></td></tr></table></figure>
 @Transactional
 public class AccountServiceImpl implements AccountService {
    /*
    * service层调用Dao
    * */
    private AccountDao accountDao;
    /*
    * spring注入提供set方法
    * */
    public void setAccountDao(AccountDao accountDao) {
        this.accountDao = accountDao;
    }

<pre><code>@Override
public void transation(String ounter, String inner, Integer money) {
    accountDao.out(ounter,money);
    accountDao.in(inner,money);
}</code></pre><p> }<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 注解事务详情配置</span><br></pre></td></tr></table></figure><br>    @Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT )<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 整合Junit</span><br><span class="line">1. 导包：spring-test</span><br><span class="line">2. 让Junit通知Spring加载配置文件 </span><br><span class="line">   加注解:</span><br><span class="line">   @RunWith(SpringIunit4ClassRunner.class)</span><br><span class="line">   @ContextConfiguration(locations=&quot;classpath:applicationContext.xml&quot;)</span><br><span class="line">   @Autowried //与junit整合，不需要在spring Xml中配置扫描</span><br><span class="line">3. 让 spring容器自动注入</span><br><span class="line">* 案例：</span><br></pre></td></tr></table></figure><br> @RunWith(SpringJUnit4ClassRunner.class)<br> @ContextConfiguration(locations = “classpath:applicationContext.xml”)<br> public class TestApp {</p>
<pre><code>@Autowired //与Junit整合，不需要Spring xml 配置扫描
private AccountService accountService;

@Test
public void save(){</code></pre><p> //        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(“com/zhao4/applicationContext.xml”);<br> //<br> //        AccountService accountService = applicationContext.getBean(“accountService”, AccountService.class);</p>
<pre><code>    accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);
}</code></pre><p> }<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> ### 整合Web</span><br><span class="line"> 导入jar包：spring-web</span><br><span class="line"> 1. tomcat启动加载配置文件</span><br><span class="line">    servlet  init(ServletConfig)  &lt;load-on-start&gt;2</span><br><span class="line">    filter    init(FilterConfig)  web.xml 注册过滤器自动调用初始化</span><br><span class="line">    listener(监听器)  ServletContextListener  ServletContext对象的监听【Spring】</span><br><span class="line">    Spring 提供监听器 ContextLoaderListener   web.xml  &lt;listener&gt;&lt;listener-class&gt;....  </span><br><span class="line">        如果只配置监听器，默认加载xml位置，WEB-INF/applicationContext.xml</span><br><span class="line"> 2. 确定配置文件，通过系统初始化参数</span><br><span class="line">    servletContext 初始化参数 web.xml </span><br><span class="line">    &lt;context-param&gt;</span><br><span class="line">        &lt;param-name&gt;contextConfigLocation</span><br><span class="line">        &lt;param-value&gt;classpath:applicationContext.xml</span><br><span class="line">* web.xml</span><br></pre></td></tr></table></figure><br> <?xml version="1.0" encoding="UTF-8"?><br> <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0"></p>
 <!--    确定配置文件的位置-->
<pre><code>&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
&lt;/context-param&gt;</code></pre> <!--    配置Spring的监听器 用来加载Xml配置-->
<pre><code>&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;</code></pre> </web-app>
  ```
* 从ServletContext作用域 获得spring容器（了解）
]]></content>
  </entry>
  <entry>
    <title>Sprig框架AOP(二)</title>
    <url>/2019/11/04/Sprig%E6%A1%86%E6%9E%B6AOP(%E4%BA%8C)/</url>
    <content><![CDATA[<h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><ol>
<li>traget :目标类，需要被代理的类 eg：UserService</li>
<li>Jionpoint(连接点) ：指那些可能被拦截的方法 eg：所有方法</li>
<li>pointCut：切入点，已经被增强的连接点 eg：addUser（）</li>
<li>advice：通知增强，增强的代码 eg：after（）</li>
<li>Weaving（织入）:是指把增强的advice应用到目标对象，target来创建新的对象proxy的过程</li>
<li>proxy：代理</li>
<li>Aspect（切面）： 是切入点和通知advice的结合</li>
</ol>
<h3 id="手动方式："><a href="#手动方式：" class="headerlink" title="手动方式："></a>手动方式：</h3><ul>
<li>JDK动态代理 对“装饰者”设计模式简化，使用前提，必须有接口</li>
</ul>
<ol>
<li>目标类：接口 + 实现类</li>
<li>切面类：用于存通知 myAspect</li>
<li>工厂类：编写工厂生成代理</li>
<li>测试</li>
</ol>
<ul>
<li>目标类<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface UserService &#123;</span><br><span class="line"></span><br><span class="line">    public void addUser();</span><br><span class="line">    public void updateUser();</span><br><span class="line">    public void deleteUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>切面类<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Myaspect &#123;</span><br><span class="line"></span><br><span class="line">    public void before()&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;前方法&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;后方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>工厂类<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyBeanFactory &#123;</span><br><span class="line"></span><br><span class="line">    public static UserService createService()&#123;</span><br><span class="line">        //匿名内部类必须加final</span><br><span class="line">        //目标类</span><br><span class="line">        final UserService userService = new UserServiceImpl();</span><br><span class="line">        //切面类</span><br><span class="line">        final Myaspect myaspect = new Myaspect();</span><br><span class="line">        /*</span><br><span class="line">        *生成代理类</span><br><span class="line">        *将目标类（切入点）和切面类（通知）结合 --》切面</span><br><span class="line">        *  Proxy.newProxyInstance()</span><br><span class="line">        * 参数1：loader 类加载器 动态代理类，运行时加载，任何类都需要类加载器将其加载到内存</span><br><span class="line">        *       一般情况：当前类.class.getClassLoader();</span><br><span class="line">        *          目标类实例.getClass().getClassloader();</span><br><span class="line">        *  参数2：Class&lt;?&gt;(Class类型的数组)interfaces 代理类需要实现的所有接口</span><br><span class="line">        *       方式一：目标实例.getClass().getInterfaces(); 注意：只能获得自己接口，不能获得父元素的接口；</span><br><span class="line">        *       方式二：new Class[]&#123;userService.class&#125;;</span><br><span class="line">        *       例如：jdbc 驱动 DriverManager  获得接口Connection</span><br><span class="line">        *</span><br><span class="line">        * 参数3：InvocationHandler  处理类，接口，必须进行实现类，一般采用匿名内部类</span><br><span class="line">        *       提供invoke方法，代理类的每一个方法执行时，都将调用一次invoke</span><br><span class="line">        *           参数1：Object proxy 代理对象</span><br><span class="line">        *           参数2：method method  代理对象当前执行方法的描述方法（反射）</span><br><span class="line">        *                   执行方法名：method.getName();</span><br><span class="line">        *                   执行方法：method.invoke(对象实际参数);</span><br><span class="line">        *           参数3：Object【】 args：方法的实际参数</span><br><span class="line">        */</span><br><span class="line">        UserService proxService = (UserService) Proxy.newProxyInstance(MyBeanFactory.class.getClassLoader(), userService.getClass().getInterfaces(), new InvocationHandler() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">                //前方法</span><br><span class="line">                myaspect.before();</span><br><span class="line"></span><br><span class="line">                //执行目标类方法</span><br><span class="line">                Object obj = method.invoke(userService,args);</span><br><span class="line"></span><br><span class="line">                //后方法</span><br><span class="line"></span><br><span class="line">                myaspect.after();</span><br><span class="line">                return obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return proxService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestJDK &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void save()&#123;</span><br><span class="line">        UserService userService = MyBeanFactory.createService();</span><br><span class="line">        userService.addUser();</span><br><span class="line">        userService.deleteUser();</span><br><span class="line">        userService.updateUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="cglib字节码增强"><a href="#cglib字节码增强" class="headerlink" title="cglib字节码增强"></a>cglib字节码增强</h3><ul>
<li>没有接口，只有实现类</li>
<li>采用字节码增强框架 cglib 运行原理：在运行时创建目标类的子类，从而对目标类进行增强</li>
<li>导jar包<br>自己导jar包【了解】<br>核心：hibernate lib\bytecord\cglib….jar<br>依赖：struts2 lib\asm…jar<br>spring 的core.jar中已经整合了以上两个内容</li>
</ul>
</li>
</ul>
<ol>
<li><p>目标类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class UserServiceImpl &#123;</span><br><span class="line"></span><br><span class="line">    public void addUser() &#123;</span><br><span class="line">        System.out.println(&quot;添加&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void updateUser() &#123;</span><br><span class="line">        System.out.println(&quot;更新&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void deleteUser() &#123;</span><br><span class="line">        System.out.println(&quot;删除&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>切面类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Myaspect &#123;</span><br><span class="line"></span><br><span class="line">    public void before()&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;前方法&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void after()&#123;</span><br><span class="line">        System.out.println(&quot;后方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>工厂类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyBeanFactory &#123;</span><br><span class="line"></span><br><span class="line">    public static UserServiceImpl createService() &#123;</span><br><span class="line">        //目标类</span><br><span class="line">        final UserServiceImpl userService = new UserServiceImpl();</span><br><span class="line">        //切面类</span><br><span class="line">        final Myaspect myaspect = new Myaspect();</span><br><span class="line">        /*</span><br><span class="line">         *3.生成代理类 采用cglib,底层创建目标类的子类</span><br><span class="line">         */</span><br><span class="line">        //3.1 核心类</span><br><span class="line">        Enhancer enhancer =new Enhancer();</span><br><span class="line">        //3.2确定父类</span><br><span class="line">        enhancer.setSuperclass(userService.getClass());</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        *3.3设置回调函数 MethodInterceptor等效jdk InvoCationHandler接口</span><br><span class="line">        * intercept() 等效于JDK invoke()</span><br><span class="line">        *       参数1：参数2：参数3：与invoke一样的</span><br><span class="line">        *       参数4：methodProxy 方法的代理</span><br><span class="line">        */</span><br><span class="line">        enhancer.setCallback(new MethodInterceptor() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">                //前方法</span><br><span class="line">                myaspect.before();</span><br><span class="line"></span><br><span class="line">                //执行目标类方法</span><br><span class="line">               Object o1 = method.invoke(userService,objects);</span><br><span class="line">               //上下效果等同  执行代理类的父类，执行目标类(目标类和代理类 父子关系);</span><br><span class="line">               methodProxy.invokeSuper(o,objects);</span><br><span class="line"></span><br><span class="line">               //后方法</span><br><span class="line">                myaspect.after();</span><br><span class="line">                return o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //3.4 创建代理</span><br><span class="line">        UserServiceImpl proxService = (UserServiceImpl) enhancer.create();</span><br><span class="line"></span><br><span class="line">        return proxService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestCglib &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void save()&#123;</span><br><span class="line">        UserServiceImpl userService = MyBeanFactory.createService();</span><br><span class="line">        userService.addUser();</span><br><span class="line">        userService.deleteUser();</span><br><span class="line">        userService.updateUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="spring编写代理：半自动"><a href="#spring编写代理：半自动" class="headerlink" title="spring编写代理：半自动"></a>spring编写代理：半自动</h3></li>
</ol>
<h3 id="Spring基于XML配置（切点表达式）"><a href="#Spring基于XML配置（切点表达式）" class="headerlink" title="Spring基于XML配置（切点表达式）"></a>Spring基于XML配置（切点表达式）</h3><ul>
<li>导包AOP联盟<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.aspectj&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.8.13&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>业务类或目标类<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> public class AccountServiceImpl implements IAccountService &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    * 账户业务层实现类</span><br><span class="line">    * */</span><br><span class="line">    public void saveAccount() &#123;</span><br><span class="line">        System.out.println(&quot;保存&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void updateAccount(int i) &#123;</span><br><span class="line">        System.out.println(&quot;更新&quot;+i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int deleteAcount() &#123;</span><br><span class="line">        System.out.println(&quot;删除&quot;);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>2.切面类或通知类 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">* 用于记录日志的工具类。提供公共代码</span><br><span class="line">* */</span><br><span class="line"></span><br><span class="line">public class logger &#123;</span><br><span class="line"></span><br><span class="line">    //用于打印日志，计划在其切入点方法执行之前执行（切入点方法就是目标方法及业务层方法）</span><br><span class="line">    public void printLog()&#123;</span><br><span class="line">        System.out.println(&quot;Logger类中前置行方法执行记录日志&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>XML配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">       http://www.springframework.org/schema/aop</span><br><span class="line">       http://www.springframework.org/schema/aop/spring-aop.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--    配置Spring IOC--&gt;</span><br><span class="line">    &lt;bean id=&quot;accountService&quot; class=&quot;com.zhao.Service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--    Spring基于XML的AOP配置步骤</span><br><span class="line">        1.把通知的Bean特交给该Spring管理</span><br><span class="line">        2.使用aop:config标签表明开始配置AOP</span><br><span class="line">        3.使用aop：aspect表明配置切面</span><br><span class="line">                 属性 id：表示给切面提供唯一标识</span><br><span class="line">                        ref：表示指定通知类bean的Id</span><br><span class="line">        4. 在aop；aspect标签中使用对引的标签来配置通知的类型</span><br><span class="line">            aop:before 表示前置通知</span><br><span class="line">                    属性：method用于指定logger类中那个方法是前置通知</span><br><span class="line">            aop：after 表示后置通知</span><br><span class="line">            pointcut属性：用于指定切入点的表达式，该表达式的含义指的是对业务层中那些方法的增强</span><br><span class="line"></span><br><span class="line">           切入点表达式写法：</span><br><span class="line">                关键字;execution(表达式)</span><br><span class="line">                表达式：</span><br><span class="line">                        访问修饰符 返回值 包名。包名。包名...类名.方法名(参数列表)</span><br><span class="line">            表达式标准写法：</span><br><span class="line">                public void com.zhao.service.AccountServiceImpl.saveAccount();</span><br><span class="line">                访问修饰符可以省略</span><br><span class="line">                void com.zhao.Service.impl.AccountServiceImpl.saveAccount()</span><br><span class="line">                返回值可以使用通配符，表示任意通配符</span><br><span class="line">                * com.zhao.Service.impl.AccountServiceImpl.saveAccount()</span><br><span class="line">                包名可以使用通配符，，表示任意包，但几级包，就要写几个*.</span><br><span class="line">                * *.*.*.*.AccountServiceImpl.saveAccount()</span><br><span class="line">                包名可以使用..表示当前包及其子包</span><br><span class="line">                * *..AccountServiceImpl.saveAccount()</span><br><span class="line">                类名和方法名可以用*实现通配</span><br><span class="line">                * *..*.*()</span><br><span class="line">                参数列表；</span><br><span class="line">                    可以直接写参数类型：</span><br><span class="line">                            基本类型：直接写名称  int</span><br><span class="line">                            引用类型：写包名.类名的方式  eg：Java.lang.String</span><br><span class="line">                            可以使用通配符表示任意参数，但必须有参数</span><br><span class="line">                            可以表示..表示有无参数均可，有参数可以是任意类型</span><br><span class="line">                全通配写法：</span><br><span class="line">                * *..*.*(..)</span><br><span class="line"></span><br><span class="line">                实际开发中切入点表达式的通常写法：</span><br><span class="line">                       * com.zhao.Service.Impl.*.*(..)</span><br><span class="line"></span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;bean id=&quot;logger&quot; class=&quot;com.zhao.Service.utils.logger&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--    配置AOP--&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line"> &lt;!--        配置切面--&gt;</span><br><span class="line">        &lt;aop:aspect id=&quot;logAdvice&quot; ref=&quot;logger&quot;&gt;</span><br><span class="line"> &lt;!--            配置通知类型，并且建立通知方法和切入点方法的关联--&gt;</span><br><span class="line"> &lt;!--            &lt;aop:before method=&quot;printLog&quot; pointcut=&quot;execution( public void com.zhao.Service.impl.AccountServiceImpl.saveAccount())&quot;&gt;&lt;/aop:before&gt;--&gt;</span><br><span class="line">            &lt;aop:before method=&quot;printLog&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:before&gt;</span><br><span class="line">        &lt;/aop:aspect&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br><span class="line">  ``` </span><br><span class="line">4. 测试类</span><br></pre></td></tr></table></figure>
/**<ul>
<li>测试Aop配置</li>
<li>*/</li>
</ul>
</li>
</ol>
<p>public class test {<br>    //快捷键psvm<br>    public static void main(String[] args) {<br>        //获得容器<br>        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(“beans.xml”);<br>        //获取对象<br>        IAccountService iAccountService = (IAccountService)applicationContext.getBean(“accountService”);</p>
<pre><code>    //执行方法
    iAccountService.saveAccount();
    iAccountService.updateAccount(1);
    iAccountService.deleteAcount();
}</code></pre><p>}</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"> ### 四种常用通知类型</span><br><span class="line"></span><br><span class="line">1. 目标类</span><br></pre></td></tr></table></figure>
<p>public class AccountServiceImpl implements IAccountService {</p>
<pre><code>/*
* 账户业务层实现类
* */
public void saveAccount() {
    System.out.println(&quot;保存&quot;);
}

public void updateAccount(int i) {
    System.out.println(&quot;更新&quot;+i);
}

public int deleteAcount() {
    System.out.println(&quot;删除&quot;);
    return 0;
}</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. XML配置</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd"></p>
 <!--    配置Spring IOC-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;Service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;


&lt;bean id=&quot;logger&quot; class=&quot;Service.utils.logger&quot;&gt;&lt;/bean&gt;</code></pre> <!--    配置AOP-->
<pre><code>&lt;aop:config&gt;</code></pre> <!--        配置切面-->
 <!--        非局部的id="p1"唯一标识符 expression=""用于指定切入点表达式内容 位置必须在aop:aspect上面-->
<pre><code>&lt;aop:pointcut id=&quot;p1&quot; expression=&quot;execution( * *..*.*(..))&quot;/&gt;
&lt;aop:aspect id=&quot;logAdvice&quot; ref=&quot;logger&quot;&gt;</code></pre> <!--            配置通知类型，并且建立通知方法和切入点方法的关联-->
 <!--            <aop:before method="printLog" pointcut="execution( public void com.zhao.Service.impl.AccountServiceImpl.saveAccount())"></aop:before>-->
 <!--            前置通知-->
<pre><code>&lt;aop:before method=&quot;beforeLog&quot; pointcut-ref=&quot;p1&quot;&gt;&lt;/aop:before&gt;</code></pre> <!--           后置通知 -->
<pre><code>&lt;aop:after-returning method=&quot;agterLog&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:after-returning&gt;</code></pre> <!--        异常通知-->
<pre><code>&lt;aop:after-throwing method=&quot;executeAdvice&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:after-throwing&gt;</code></pre> <!--         最终通知-->
<pre><code>&lt;aop:after method=&quot;findalyAdvice&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:after&gt;</code></pre> <!--            局部的-->
 <!--            <aop:pointcut id="p1" expression="execution( * *..*.*(..))"/>-->

<pre><code>    &lt;/aop:aspect&gt;

&lt;/aop:config&gt;</code></pre></beans>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Spring环绕通知</span><br><span class="line">1. XML文件</span><br></pre></td></tr></table></figure>
 <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

 <!--    配置Spring IOC-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;Service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;


&lt;bean id=&quot;logger&quot; class=&quot;Service.utils.logger&quot;&gt;&lt;/bean&gt;</code></pre> <!--    配置AOP-->
<pre><code>&lt;aop:config&gt;</code></pre> <!--        配置切面-->
 <!--        非局部的 id="p1"唯一标识符 expression=""用于指定切入点表达式内容 位置必须在aop:aspect上面-->
<pre><code>&lt;aop:pointcut id=&quot;p1&quot; expression=&quot;execution( * *..*.*(..))&quot;/&gt;
&lt;aop:aspect id=&quot;logAdvice&quot; ref=&quot;logger&quot;&gt;</code></pre> <!--            配置环绕通知-->
<pre><code>        &lt;aop:around method=&quot;aroundLog&quot; pointcut-ref=&quot;p1&quot;&gt;&lt;/aop:around&gt;

    &lt;/aop:aspect&gt;

&lt;/aop:config&gt;</code></pre></beans>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 切面类或通知类</span><br></pre></td></tr></table></figure>
/*
* 用于记录日志的工具类。提供公共代码
* */

<p>import org.aspectj.lang.ProceedingJoinPoint;</p>
<p>public class logger {</p>
<pre><code>//用于打印日志，计划在其切入点方法执行之前执行（切入点方法就是目标方法及业务层方法）

/*
* 环绕通知：
*   当我们配置环绕通知之后，切入点方法没有执行，而通知方法执行了
* 分析：
*       通过对比动态代理中的的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用，而我们的代码中没得；
* 解决：
*       Spring框架为我们提供一个接口，ProceedingJoinPoint。此接口有一个方法proceed(),
*       此方法相当予明确调用切入点方法。
*       该接口可以作为环绕通知的方法参数，在程序执行时，spring框架为我们提供该接口的实现类供我们使用
*
* Spring中的环绕通知
*       他是Spring框架为我们提供的一种可以在代码中控制增强方法的何时执行的方式；
* */
public Object aroundLog(ProceedingJoinPoint pjp){
    Object rtVslue = null;
    try{

        Object[] args = pjp.getArgs();//获得执行方法的所需的参数

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志....前置&quot; );

        rtVslue = pjp.proceed(args);//明确调用业务层方法（切入点方法）

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。后置&quot;);

        return rtVslue;
    }catch (Throwable t){
        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。异常&quot;);
        throw new RuntimeException(t);
    }finally {

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志 。。。最终通知&quot;);
    }

}</code></pre><p>}</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 注解AOP</span><br><span class="line">1. Xml配置</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd"></p>
 <!--    配置Spring创建容器时要扫描的包-->
<pre><code>&lt;context:component-scan base-package=&quot;com.zhao.Aware.Service&quot;&gt;&lt;/context:component-scan&gt;</code></pre> <!--配置spring开启注解的功能-->
<pre><code>&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</code></pre></beans>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 切面类</span><br></pre></td></tr></table></figure>
 @Component("logger")
@Aspect //表示当前类是一个切面类|通知类
public class logger {

<pre><code>@Pointcut(&quot;execution(* com.zhao.Aware.Service.*.*(..))&quot;)</code></pre><p>   private void p(){}</p>
<pre><code>//用于打印日志，计划在其切入点方法执行之前执行（切入点方法就是目标方法及业务层方法）
//前置执行方法
@Before(&quot;p()&quot;)
public void beforeLog(){
    System.out.println(&quot;Logger类中前置行方法执行记录日志&quot;);
}

//后置执行方法
@AfterReturning(&quot;p()&quot;)
public void agterLog(){
    System.out.println(&quot;Logger类中后置行方法执行记录日志&quot;);
}


//提成通知
@AfterThrowing(&quot;p()&quot;)
public void executeAdvice(){
    System.out.println(&quot;Logger类中异常方法执行记录日志&quot;);
}

//最终通知
@After(&quot;p()&quot;)
public void findalyAdvice(){
    System.out.println(&quot;Logger类中最终通知方法执行记录日志&quot;);
}
//环绕通知
//@Around(&quot;p()&quot;)
public Object aroundLog(ProceedingJoinPoint pjp) {
    Object rtVslue = null;
    try {

        Object[] args = pjp.getArgs();//获得执行方法的所需的参数

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志....前置&quot;);

        rtVslue = pjp.proceed(args);//明确调用业务层方法（切入点方法）

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。后置&quot;);

        return rtVslue;
    } catch (Throwable t) {
        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。异常&quot;);
        throw new RuntimeException(t);
    } finally {

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志 。。。最终通知&quot;);
    }
}</code></pre><p>}</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 目标类|业务类</span><br></pre></td></tr></table></figure>
<p>@Service(“accountService”)<br>public class AccountServiceImpl implements IAccountService {</p>
<pre><code>/*
* 账户业务层实现类
* */

public void saveAccount() {
    System.out.println(&quot;保存&quot;);
}

public void updateAccount(int i) {
    System.out.println(&quot;更新&quot;+i);
}

public int deleteAcount() {
    System.out.println(&quot;删除&quot;);
    return 0;
}</code></pre><p>}</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  ### JdbcTemplate模板</span><br><span class="line">  * spring提供一种操作JDBC的工具类，类似DBUtils；</span><br><span class="line">  * 依赖 连接池DataSouce（数据源）</span><br><span class="line">  * </span><br><span class="line"></span><br><span class="line">  1. 使用API（了解）</span><br><span class="line">  * 原生dbcp</span><br><span class="line">- 目标类</span><br></pre></td></tr></table></figure>

<p>public class user {</p>
<pre><code>private int id;
private String name;
private float money;

public int getId() {
    return id;
}

public void setId(int id) {
    this.id = id;
}

public String getName() {
    return name;
}

public void setName(String name) {
    this.name = name;
}

public float getMoney() {
    return money;
}

public void setMoney(float money) {
    this.money = money;
}</code></pre><p>}</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">测试类</span><br></pre></td></tr></table></figure>
<p>  public class TestApi {</p>
<pre><code>//jdbc模板
public static void main(String[] args) {

    //1.创建数据源dbcp
    BasicDataSource  dataSource = new BasicDataSource();

    //基本4项
    dataSource.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);
    dataSource.setUrl(&quot;jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&quot;);
    dataSource.setUsername(&quot;root&quot;);
    dataSource.setPassword(&quot;zhao1314520&quot;);



    //2.创建模板
    JdbcTemplate jdbcTemplate = new JdbcTemplate();
    jdbcTemplate.setDataSource(dataSource);

    //3.通过api操作
    String sql = &quot;insert into account(name,money) values(?,?)&quot;;
    jdbcTemplate.update(&quot;sql&quot;,&quot;mmm&quot;,&quot;998&quot;);

}</code></pre><p>}<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* XML配置dbcp</span><br><span class="line">1. 模板注入</span><br></pre></td></tr></table></figure><br>  public class accountDao {</p>
<p>//jdbc的模板将由spring注入</p>
<pre><code>private JdbcTemplate jdbcTemplate;

public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
    this.jdbcTemplate = jdbcTemplate;
}


public void updata(user account){

    String sql= &quot;update account set name=?,money=? where id=?&quot;;
    Object[] objects = {account.getName(),account.getMoney(),account.getId()};
    jdbcTemplate.update(sql,objects);
}</code></pre><p>}</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">beans.xml</span><br></pre></td></tr></table></figure>
  <!--    配置DAO-->
<pre><code>&lt;bean id=&quot;account&quot; class=&quot;com.zhao.dbcp.accountDao&quot;&gt;
    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre> <!--    创建模板,诸如数据源-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--    创建数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost.3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 测试</span><br></pre></td></tr></table></figure>
<p>   public class TestDbcp {</p>
<pre><code>@Test
public void save(){
    user account = new user();
    account.setId(1);
    account.setName(&quot;沐沐&quot;);
    account.setMoney(100000);
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);
    accountDao ac = (accountDao) applicationContext.getBean(&quot;account&quot;);

    ac.updata(account);
}</code></pre> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* C3P0数据源</span><br><span class="line">XML配置文件</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"></p>
 <!--    配置DAO-->
<pre><code>&lt;bean id=&quot;account&quot; class=&quot;com.zhao.C3P0.accountDao&quot;&gt;
    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre> <!--    创建模板,诸如数据源-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--    创建数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre></beans>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">测试类</span><br></pre></td></tr></table></figure>
 public class TestC3p0 {

<pre><code>@Test
public void save(){
    user account = new user();
    account.setId(1);
    account.setName(&quot;沐沐&quot;);
    account.setMoney(100000);
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao/C3P0/beans.xml&quot;);
    IaccountDao ac = (IaccountDao) applicationContext.getBean(&quot;account&quot;);

    ac.updata(account);

}</code></pre><p>}<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* properties.properties文件</span><br></pre></td></tr></table></figure><br>jdbc.DriverClassName=com.mysql.cj.jdbc.Driver<br>jdbc.Url=jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai<br>jdbc.Username=root<br>jdbc.Password=zhao1314520<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XML配置</span><br><span class="line">注意：</span><br><span class="line">1. 命名空间xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">2. 加载配文件classpath:</span><br><span class="line"> &lt;context:property-placeholder location=&quot;classpath:com/zhao/properties/properties.properties&quot;&gt;&lt;/context:property-placeholder&gt;</span><br></pre></td></tr></table></figure><br><?xml version="1.0" encoding="UTF-8"?><br><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"></p>
 <!--    加载properties配置文件-->
<pre><code>&lt;context:property-placeholder location=&quot;classpath:com/zhao/properties/properties.properties&quot;&gt;&lt;/context:property-placeholder&gt;</code></pre> <!--    配置DAO-->
<pre><code>&lt;bean id=&quot;account&quot; class=&quot;com.zhao.dbcp.accountDao&quot;&gt;
    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre> <!--    创建模板,诸如数据源-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    创建数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;

    &lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driverClassName}&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre></beans>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### JdbcTemplate模板详解(Spring数据源)</span><br><span class="line">* maven配置</span><br></pre></td></tr></table></figure>
 <packaging>jar</packaging>

<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;8.0.18&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 1. 原生spring内部数据源</span><br></pre></td></tr></table></figure>
<p>public class JdbcTemplatedomo1 {</p>
<pre><code>public static void main(String[] args) {
    //3.准备数据源，spring内部数据源
    DriverManagerDataSource ds = new DriverManagerDataSource();
    ds.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver &quot;);
    ds.setUrl(&quot;jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&quot;);
    ds.setUsername(&quot;root&quot;);
    ds.setPassword(&quot;zhao1314520&quot;);

    //1.创建对象jdbcTemplate
    JdbcTemplate jdbcTemplate = new JdbcTemplate();
    //4.给jdbcTemplate设置数据源
    jdbcTemplate.setDataSource(ds);
    //2.执行操作
    jdbcTemplate.execute(&quot;insert into account(name,money)values(&apos;mmm&apos;,10000)&quot;);

}</code></pre><p>}</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> * 注意：MySQL8.0.18版本中连接数据库</span><br><span class="line">    ds.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver &quot;);</span><br><span class="line">    ds.setUrl(&quot;jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">####2. 基于XML配置JdbcTemplate</span><br><span class="line">* xml配置文件</span><br></pre></td></tr></table></figure>
 <!--    配置JdbcTemplate模板-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!--配置Spring数据源--&gt;
&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 测试类</span><br></pre></td></tr></table></figure>

<p>public class JdbcTemplatedomo2 {</p>
<pre><code>public static void main(String[] args) {
 //1.获取容器
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);
    //2.获取对象
     JdbcTemplate jdbcTemplate = (JdbcTemplate) applicationContext.getBean(&quot;jdbcTemplate&quot;);
     //3.执行操作
    jdbcTemplate.execute(&quot;insert into account (name,money)values(&apos;zhao&apos;,10000)&quot;);

}</code></pre><p>}<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 3. JdbcTemplate的CRUD操作</span><br><span class="line">* 注意：Spring提供的封装工具,new BeanPropertyRowMapper&lt;Account&gt;(Account.class)</span><br><span class="line">自定义AccountRowmapper封装工具，实现接口 RowMapper&lt;Account&gt;</span><br></pre></td></tr></table></figure><br>//JdbcTemplate的CRUD操作<br>public class JdbcTemplatedomo3 {</p>
<pre><code>public static void main(String[] args) {
 //1.获取容器
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);
     JdbcTemplate jdbcTemplate = (JdbcTemplate) applicationContext.getBean(&quot;jdbcTemplate&quot;);
     //执行操作
    //保存
    //jdbcTemplate.update(&quot;insert into account (name,money)values(?,?)&quot;,&quot;艾尔提尔&quot;,10000f);
    //更新
    //jdbcTemplate.update(&quot;update account set name=?,money=? where id=?&quot;,&quot;阿尔提尔&quot;,8888f,5);
    //删除
   jdbcTemplate.update(&quot;delete from account where id=?&quot;,8);
    //查询所有
    //自定义
   // List&lt;Account&gt; accounts = jdbcTemplate.query(&quot;select * from account where money=?&quot;,new AccountRowmapper(),10000f);
    //spring提供,new BeanPropertyRowMapper&lt;Account&gt;(Account.class)
 List&lt;Account&gt; accounts = jdbcTemplate.query(&quot;select * from account where money=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),10000f);
    for(Account account : accounts){
        System.out.println(account);

    }
    //查询一个
    List&lt;Account&gt; accounts1 = jdbcTemplate.query(&quot;select * from account where id=?&quot;,new AccountRowmapper(),1);
    System.out.println(accounts1.isEmpty()?&quot;没有内容&quot;:accounts1.get(0));
    //查询一行一列（使用聚合函数，但不加ground子句）
    Long count1 = jdbcTemplate.queryForObject(&quot;select count(*) from account where money&gt;?&quot;,Long.class,1000f);
    System.out.println(count1);

}</code></pre><p>}<br> /*</p>
<ul>
<li><p>自定义Account的封装工具类</p>
</li>
<li><p>*/<br>class AccountRowmapper implements RowMapper<Account>{</p>
<p>public Account mapRow(ResultSet resultSet, int i) throws SQLException {</p>
<pre><code>/*
* 把结果集中的数据封装到Account中，然后由Spring把每个Account加到集合中
* */
Account  account =new Account();
account.setId(resultSet.getInt(&quot;id&quot;));
account.setName(resultSet.getString(&quot;name&quot;));
account.setMoney(resultSet.getFloat(&quot;money&quot;));
return account;</code></pre><p>}<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 4. Dao层操作</span><br><span class="line">* XML配置</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"></p>
<!--    配置Dao-->
<bean id="accountDaoId" class="com.zhao.dao.impl.AccountImpl">
   <property name="jdbcTemplate" ref="jdbcTemplate"></property> 
</bean>
<!--    配置JdbcTemplate-->
<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="dataSource"></property>
</bean>
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
    <property name="url" value="jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai"></property>
    <property name="username" value="root"></property>
    <property name="password" value="zhao1314520"></property>
</bean>
</beans>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 实现类</span><br></pre></td></tr></table></figure>
/*
* 账户持久层实现类
* */
public class AccountImpl implements IAccountDao {

<p>private JdbcTemplate jdbcTemplate;</p>
<p>public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {</p>
<pre><code>this.jdbcTemplate = jdbcTemplate;</code></pre><p>}</p>
</li>
</ul>
<pre><code>public Account findAccountById(Integer accountId) {
    List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where id=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountId);
    return accounts.isEmpty()?null:accounts.get(0);

}



public Account findAccountName(String accountName) {
    List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where name=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountName);
    if(accounts.isEmpty()){
        return null;
    }
    if(accounts.size()&gt;1){
        throw new RuntimeException(&quot;结果集不唯一&quot;);
    }
    return accounts.get(0);
}




public void updateAccount(Account account) {
    String sql =&quot;update account set name=?,money=? where id=?&quot;;
    Object[] obj ={account.getName(),account.getMoney(),account.getId()};
    getJdbcTemplate().update(sql,obj);
}</code></pre><p>}<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 测试类</span><br></pre></td></tr></table></figure><br>public class JdbcTemplatedomo4 {</p>
<pre><code>public static void main(String[] args) {

    ApplicationContext applicationContext =new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);
    IAccountDao iAccountDao = applicationContext.getBean(&quot;accountDaoId&quot;, IAccountDao.class);
    Account account = iAccountDao.findAccountById(1);
    System.out.println(account);

    account.setMoney(40000f);
    iAccountDao.updateAccount(account);

}</code></pre><p>}<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 5. 多个Dao 方式一：提取自定义代码方式</span><br><span class="line">1. 公共类</span><br></pre></td></tr></table></figure><br>/*</p>
<ul>
<li>用于抽取Dao中的重复代码</li>
<li>注意get|set方法</li>
<li>*/</li>
</ul>
<p>public class jdbcDaoSupport {<br>    private JdbcTemplate jdbcTemplate;</p>
<pre><code>public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
    this.jdbcTemplate = jdbcTemplate;
}

public JdbcTemplate getJdbcTemplate() {
    return jdbcTemplate;
}

//private DataSource dataSource;

public void setDateSource(DataSource dataSource) {
   // this.dataSource = dataSource;
    if(jdbcTemplate == null){
        jdbcTemplate = createJdbcTemplate(dataSource);
    }
}
private JdbcTemplate createJdbcTemplate(DataSource dataSource){
    return new JdbcTemplate(dataSource);
}</code></pre><p>}<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 实现类</span><br></pre></td></tr></table></figure><br>/*</p>
<ul>
<li><p>账户持久层实现类</p>
</li>
<li><p>继承 jdbcDaoSupport</p>
</li>
<li><p>*/<br>public class AccountImpl extends jdbcDaoSupport implements IAccountDao {</p>
<p>  public Account findAccountById(Integer accountId) {</p>
<pre><code>List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where id=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountId);
return accounts.isEmpty()?null:accounts.get(0);</code></pre><p>  }</p>
</li>
</ul>
<pre><code>public Account findAccountName(String accountName) {
    List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where name=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountName);
    if(accounts.isEmpty()){
        return null;
    }
    if(accounts.size()&gt;1){
        throw new RuntimeException(&quot;结果集不唯一&quot;);
    }
    return accounts.get(0);
}


public void updateAccount(Account account) {
    String sql =&quot;update account set name=?,money=? where id=?&quot;;
    Object[] obj ={account.getName(),account.getMoney(),account.getId()};
    getJdbcTemplate().update(sql,obj);
}</code></pre><p>}<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. XML配置</span><br><span class="line">* 公共类中含有数据源</span><br><span class="line">* 可取消下面代码</span><br></pre></td></tr></table></figure><br> <!--    配置JdbcTemplate--><br>    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"><br>        <property name="dataSource" ref="dataSource"></property><br>    </bean>–&gt;<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!--    配置Dao--&gt;</span><br><span class="line">    &lt;bean id=&quot;accountDaoId&quot; class=&quot;com.zhao.dao.impl.AccountImpl&quot;&gt;</span><br><span class="line"> &lt;!--        &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;--&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"> &lt;!--    配置JdbcTemplate</span><br><span class="line">    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;--&gt;</span><br><span class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="6-多个Dao-方式二：继承Spring-JdbcDaoSupport类"><a href="#6-多个Dao-方式二：继承Spring-JdbcDaoSupport类" class="headerlink" title="6.  多个Dao 方式二：继承Spring  JdbcDaoSupport类"></a>6.  多个Dao 方式二：继承Spring  JdbcDaoSupport类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line">import org.springframework.jdbc.core.support.JdbcDaoSupport;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* 账户持久层实现类</span><br><span class="line">* */</span><br><span class="line">public class AccountImpl extends JdbcDaoSupport implements IAccountDao &#123;</span><br><span class="line"></span><br><span class="line">    public Account findAccountById(Integer accountId) &#123;</span><br><span class="line">        List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where id=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountId);</span><br><span class="line">        return accounts.isEmpty()?null:accounts.get(0);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Account findAccountName(String accountName) &#123;</span><br><span class="line">        List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where name=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountName);</span><br><span class="line">        if(accounts.isEmpty())&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if(accounts.size()&gt;1)&#123;</span><br><span class="line">            throw new RuntimeException(&quot;结果集不唯一&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return accounts.get(0);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void updateAccount(Account account) &#123;</span><br><span class="line">        String sql =&quot;update account set name=?,money=? where id=?&quot;;</span><br><span class="line">        Object[] obj =&#123;account.getName(),account.getMoney(),account.getId()&#125;;</span><br><span class="line">        getJdbcTemplate().update(sql,obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>spring框架-一</title>
    <url>/2019/11/03/spring%E6%A1%86%E6%9E%B6-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="知识点一："><a href="#知识点一：" class="headerlink" title="知识点一："></a>知识点一：</h3><ol>
<li>4+1   4个核心（beans core context expression）+1个依类（commons-logins..jar）</li>
</ol>
<p>！<a href="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572031281077&di=19f3b40cfe98239b9a176702be5a0cd8&imgtype=0&src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-07d0fdbd0f685bc90d59abe2a976eb41_b.jpg" target="_blank" rel="noopener" title="Spring的jar包">Spring</a></p>
<ol start="2">
<li>IO  控制反转 由Spring配置文件beans.xml完成创建对象的过程</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=&quot;userService&quot; class=&quot;com.zhao.service.UserSercice&quot;&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<p>DI Dependency Injection 依赖注入 在service写一个属性 有get、set方法 在bean.xml中配置属性<br>    其内部执行相当于 new创建对象 调用set方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 依赖注入调用属性的Set方法--&gt;</span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;name&quot;&gt;&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<p>接口指向实现类（实现类也可以）实例化<br>依赖：一个类需要另一个类<br>注入：set方法设置值</p>
<h3 id="知识点二："><a href="#知识点二：" class="headerlink" title="知识点二："></a>知识点二：</h3><p>Spring加载beans.xml 的三种方式：</p>
<ol>
<li><p>方式1.？加载beans.xml配置文件（ApplicationContext 容器）<br>ClassPath：指的是classes路径</p>
<pre><code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</code></pre></li>
<li><p>方式2.文件系统路径获取配置文件</p>
<pre><code>ApplicationContext context1 = new FileSystemXmlApplicationContext(&quot;G:\\IDEA\\Spring_Domo\\spring01\\src\\beans.xml&quot;);</code></pre></li>
</ol>
<p>3.// 方式3.     使用BeanFactory（了解）<br>        String path =”G:\IDEA\Spring_Domo\spring01\src\beans.xml”;<br>        BeanFactory factory = new XmlBeanFactory(new FileSystemResource(path));</p>
<p>  //2.从spring容器中获取对象<br>        IuserSercice userSercice = (IuserSercice) context.getBean(“userService”);<br>        userSercice.add();</p>
<h3 id="知识点三："><a href="#知识点三：" class="headerlink" title="知识点三："></a>知识点三：</h3><ol>
<li>ApplicationContext和BeanFactory比较</li>
<li>BeanFactory 采用延时加载，第一次getBean时才会初始化Bean</li>
<li>ApplicationContext 及时加载</li>
</ol>
<h3 id="知识点四："><a href="#知识点四：" class="headerlink" title="知识点四："></a>知识点四：</h3><h5 id="装配Bean的三种方式"><a href="#装配Bean的三种方式" class="headerlink" title="装配Bean的三种方式"></a>装配Bean的三种方式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--装配Bean的三种方式，--&gt;</span><br><span class="line">&lt;!-- 第一种   new实现类--&gt;</span><br><span class="line">    &lt;bean id=&quot;userService1&quot; class=&quot;com.zhao.service.UserSercice&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;!--    第二种方式 通过静态工厂方法--&gt;</span><br><span class="line">    &lt;bean id=&quot;userService2&quot; class=&quot;com.zhao.service.UserServiceFactory&quot; factory-method=&quot;createUserService&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    第三种方式 通过实例工厂方法--&gt;</span><br><span class="line">    &lt;bean id=&quot;factory2&quot; class=&quot;com.zhao.service.UserServiceFactory1&quot;&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;userService3&quot; factory-bean=&quot;factory2&quot; factory-method=&quot;createUserService&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Lensson1 &#123;</span><br><span class="line"></span><br><span class="line">//new对象</span><br><span class="line">    @Test</span><br><span class="line">    public void test1()&#123;</span><br><span class="line">//      classPath 类路径加载</span><br><span class="line">        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans1.xml&quot;);</span><br><span class="line">        IuserSercice userService1 = (IuserSercice) context.getBean(&quot;userService&quot;);</span><br><span class="line">        userService1.add();</span><br><span class="line"></span><br><span class="line">//        静态工厂</span><br><span class="line">        IuserSercice userSercice2 =UserServiceFactory.createUserService();</span><br><span class="line">        userSercice2.add();</span><br><span class="line"></span><br><span class="line">        ApplicationContext context1 = new ClassPathXmlApplicationContext(&quot;beans1.xml&quot;);</span><br><span class="line">        IuserSercice userService3 = (IuserSercice) context1.getBean(&quot;userService2&quot;);</span><br><span class="line">        userService3.add();</span><br><span class="line"></span><br><span class="line">//        实例工厂</span><br><span class="line">//        1.创建工厂</span><br><span class="line">//        UserServiceFactory1 factory2 = new UserServiceFactory1();</span><br><span class="line">//        IuserSercice userService4 = factory2.createUserService();</span><br><span class="line">//        userService4.add();</span><br><span class="line"></span><br><span class="line">        ApplicationContext context3 = new ClassPathXmlApplicationContext(&quot;beans1.xml&quot;);</span><br><span class="line"></span><br><span class="line">        IuserSercice userSercice4 = (IuserSercice) context3.getBean(&quot;userService3&quot;);</span><br><span class="line">        userSercice4.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二种静态工厂"><a href="#第二种静态工厂" class="headerlink" title="第二种静态工厂"></a>第二种静态工厂</h3><pre><code>public class UserServiceFactory {

    public static IuserSercice createUserService(){

        return new UserSercice();
    }
}</code></pre><h4 id="第三种工厂类"><a href="#第三种工厂类" class="headerlink" title="第三种工厂类"></a>第三种工厂类</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class UserServiceFactory1 &#123;</span><br><span class="line"></span><br><span class="line">    public IuserSercice createUserService()&#123;</span><br><span class="line"></span><br><span class="line">        return new UserSercice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="装配Bean基于XML"><a href="#装配Bean基于XML" class="headerlink" title="装配Bean基于XML"></a>装配Bean基于XML</h4><h4 id="1-默认构造"><a href="#1-默认构造" class="headerlink" title="1. 默认构造"></a>1. 默认构造</h4><pre><code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;&lt;\bean&gt;</code></pre><h4 id="2-静态工厂（Spring整合）"><a href="#2-静态工厂（Spring整合）" class="headerlink" title="2. 静态工厂（Spring整合）"></a>2. 静态工厂（Spring整合）</h4><p>常用语Spring整合其他框架<br>静态工厂：用于生产实例，方法必须static</p>
<pre><code>&lt;bean id=&quot;&quot; class=&quot;工厂全限定名&quot; factory-method=&quot;方法名&quot;&gt;&lt;\bean&gt;</code></pre><p>Spring之前创建静态工厂的方法</p>
<ol>
<li><p>工厂类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    public class MyBeanFactory &#123;</span><br><span class="line"></span><br><span class="line">    //创建工厂</span><br><span class="line">    //    spring 之创建用工厂方法</span><br><span class="line">    public static UserSercice createService()&#123;</span><br><span class="line"></span><br><span class="line">        return new UserSercice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//    spring 之前调用工厂方法</span><br><span class="line">    @Test</span><br><span class="line">    public void domo01()&#123;</span><br><span class="line">        UserSercice userSercice = MyBeanFactory.createService();</span><br><span class="line">        userSercice.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Spring创建静态工厂方法</p>
</li>
<li><p>beans.xml文件配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--  将静态工厂创建的实例交于Spring--&gt;</span><br><span class="line">    &lt;bean id=&quot;userService&quot; class=&quot;com.zhao.bean_static_factory.MyBeanFactory&quot; factory-method=&quot;createService&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   @Test</span><br><span class="line">    public void domo02()&#123;</span><br><span class="line">        //Spring工厂</span><br><span class="line">       //String xmlPath=&quot;com/zhao/bean_static_factory/beans.xml&quot;;</span><br><span class="line">        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao/bean_static_factory/beans.xml&quot;);</span><br><span class="line"></span><br><span class="line">//      getBean 参数二类型，不需要强转</span><br><span class="line">//      UserSercice userSercice1 =(UserService) applicationContext.getBean(&quot;userService&quot;);</span><br><span class="line">        UserSercice userSercice1 = applicationContext.getBean(&quot;userService&quot;,UserSercice.class);</span><br><span class="line">        </span><br><span class="line">        userSercice1.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h4><p>Spring之前创建工厂的方法</p>
</li>
<li><p>工厂类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyBeanFactory &#123;</span><br><span class="line"></span><br><span class="line">    //创建工厂（实例工厂）</span><br><span class="line">    //    spring 之创建用工厂方法</span><br><span class="line">    public UserSercice createService()&#123;</span><br><span class="line"></span><br><span class="line">        return new UserSercice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//    spring 之前调用工厂方法</span><br><span class="line">//    自定义工厂</span><br><span class="line">    @Test</span><br><span class="line">    public void domo01()&#123;</span><br><span class="line">//        1.创建工厂</span><br><span class="line">        MyBeanFactory myBeanFactory = new MyBeanFactory();</span><br><span class="line">        //2.通过工厂实例，获取对象</span><br><span class="line">        UserSercice userSercice = myBeanFactory.createService();</span><br><span class="line">        userSercice.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Spring创建工厂方法</p>
</li>
<li><p>beans.xml文件配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    将工厂创建的实例交于Spring--&gt;</span><br><span class="line">    &lt;bean id=&quot;myBeanFactory&quot; class=&quot;com.zhao.bean_factory.MyBeanFactory&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!--    获得UserService--&gt;</span><br><span class="line">    &lt;bean id=&quot;userServiceId&quot;  factory-bean=&quot;myBeanFactory&quot; factory-method=&quot;createService&quot;&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   @Test</span><br><span class="line">    public void domo02()&#123;</span><br><span class="line">        //Spring工厂</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao/bean_factory/beans.xml&quot;);</span><br><span class="line"></span><br><span class="line">//      getBean 参数二类型，不需要强转</span><br><span class="line">//      UserSercice userSercice1 =(UserService) applicationContext.getBean(&quot;userService&quot;);</span><br><span class="line">        UserSercice userSercice1 = applicationContext.getBean(&quot;userServiceId&quot;, UserSercice.class);</span><br><span class="line"></span><br><span class="line">        userSercice1.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="bean的种类"><a href="#bean的种类" class="headerlink" title="bean的种类"></a>bean的种类</h3></li>
<li><p>普通bean： <bean id="" class="A"> spring 直接创建A实例，并返回</p>
</li>
<li><p>FactoryBean：是一个特殊的bean，具有工厂生产对象的能力，只能生产特定的对象<br>bean必须实现FactoryBean接口，此接口提供方法getObject()用于<br>获得特定的对象(bean)<br><bean id="" class="FB">先创建FB实例，使用调用getObject()方法，并返回方法的返回值<br>底层调用方法：<br> FB fb = new FB();<br> return fb,getObject();</p>
</li>
<li><p>BeanFactory 和 FactoryBean 比较</p>
<ul>
<li>BeanFactory: 工厂，用于生产任意bean</li>
<li>FactoryBean：特殊bean，用于生产特殊的bean<br>例如：ProxyFactoryBean 此工厂bean用于生产代理<br><bean id="" class="...ProxyFactoryBean"> 获取代理对象的实例，AOP使用<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3></li>
</ul>
</li>
</ol>
<ul>
<li><p>singleton： 单例 默认值；</p>
</li>
<li><p>prototype:  多例,每执行一次getBean将获得一个实例，select单例，struts2的Action为多例</p>
</li>
<li><p>配置信息</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</span><br><span class="line">//scope=&quot;prototype&quot; 多例</span><br><span class="line">    &lt;bean id=&quot;userService&quot; class=&quot;com.zhao.scop.UserSercice&quot; scope=&quot;prototype&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h3 id="生命周期（11步）"><a href="#生命周期（11步）" class="headerlink" title="生命周期（11步）"></a>生命周期（11步）</h3><ul>
<li><p>初始化和销毁</p>
<ul>
<li>目标方法执行前和执行后，将执行初始化或销毁</li>
<li>beans.xml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;&quot; class=&quot;&quot; init-method=&quot;初始化方法&quot;      destory-method=&quot;销毁方法名称&quot;&gt;</span><br><span class="line">    </span><br><span class="line">&lt;bean id=&quot;userService&quot; class=&quot;com.zhao.lifecycle.UserSercice&quot; init-method=&quot;myInit&quot; destroy-method=&quot;myDestory&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>调用方法</p>
<pre><code>public class Testlifecycle {</code></pre></li>
</ul>
<pre><code>    @Test
    public void domo02() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {

        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao/lifecycle/beans.xml&quot;);
        UserSercice userSercice = applicationContext.getBean(&quot;userService&quot;,UserSercice.class);

        userSercice.add();

        //要求：1.容器必须close，执行销毁方法
        applicationContext.getClass().getMethod(&quot;close&quot;).invoke(applicationContext);
        //applicationContext.close();
    }
}</code></pre><ul>
<li>BeanPostProcessor 后处理bean<ul>
<li>Spring 提供一种机制，只要实现此接口BeanPostprocessor，并将实现类提供该Spring容器，Spring容器将自动执行，在初始化方法前执行before(),在初始化方法后执行after()</li>
<li>Spring 提供工厂钩子，用于修改实例对象，可以生成代理对象，是AOP的底层</li>
</ul>
</li>
</ul>
<p>后处理类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class myPostProcessor implements BeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;前处理&quot;+beanName);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123;</span><br><span class="line">        System.out.println(&quot;后处理&quot;+beanName);</span><br><span class="line">        //bean目标对象 bean.getClass().getInterfaces()</span><br><span class="line">//        生成JDK代理 Proxy JDK工具类  myPostProcessor.class.getClassLoader()当前类的类加载器</span><br><span class="line">//        new InvocationHandler() 处理程序</span><br><span class="line">        //return bean;</span><br><span class="line">        return Proxy.newProxyInstance(myPostProcessor.class.getClassLoader(),</span><br><span class="line">                bean.getClass().getInterfaces(),</span><br><span class="line">                new InvocationHandler() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(&quot;开启事务处理方法&quot;);</span><br><span class="line">                        //执行目标方法</span><br><span class="line">                        Object object = method.invoke(bean);</span><br><span class="line">                        System.out.println(&quot;提交事务处理方法&quot;);</span><br><span class="line">                        return object;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> benas.xml<br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     &lt;bean id=&quot;userServiceId&quot; class=&quot;com.zhao.lifecycle.UserSercice&quot; init-method=&quot;myInit&quot; destroy-method=&quot;myDestory&quot;&gt;&lt;/bean&gt;</span><br><span class="line">&lt;!--    将后处理的的实现类注册给Spring--&gt;</span><br><span class="line">    &lt;bean class=&quot;com.zhao.lifecycle.myPostProcessor&quot;&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><br>测试类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Testlifecycle &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void domo02() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao/lifecycle/beans.xml&quot;);</span><br><span class="line"></span><br><span class="line">        IuserSercice  userSercice = (IuserSercice) applicationContext.getBean(&quot;userServiceId&quot;);</span><br><span class="line"></span><br><span class="line">        userSercice.add();</span><br><span class="line"></span><br><span class="line">        //要求：1.容器必须close，执行销毁方法</span><br><span class="line">        applicationContext.getClass().getMethod(&quot;close&quot;).invoke(applicationContext);</span><br><span class="line">        //applicationContext.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   错误信息： org.springframework.beans.factory.BeanNotOfRequiredTypeException</p>
<p>   注入spring的bean 出现的，具体是由于spring采用代理的机制导致的<br>   解决方法：(注意此处接口指向)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IuserSercice  userSercice = (IuserSercice) applicationContext.getBean(&quot;userServiceId&quot;);</span><br></pre></td></tr></table></figure>

<h3 id="属性依赖注入"><a href="#属性依赖注入" class="headerlink" title="属性依赖注入"></a>属性依赖注入</h3><ul>
<li><p>Setter方法注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.普通数据：&lt;property name=&quot;pname&quot; value=&quot;阿尔提尔&quot;&gt;&lt;/property&gt;</span><br><span class="line">2.字标签&lt;property name=&quot;pname&quot; &gt;</span><br><span class="line">    &lt;value&gt;v阿尔提尔&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">注意：1和2是等效的</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=&quot;pesonId&quot; class=&quot;com.zhao.setter.peson&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;pname&quot; value=&quot;阿尔提尔&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;age&quot; value=&quot;24&quot;&gt;&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;coperAddrs&quot; ref=&quot;coperAddrId&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;homeAddr&quot;&gt;</span><br><span class="line">        &lt;ref bean=&quot;homeAddrId&quot;/&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!-- 引用数据--&gt;</span><br><span class="line">&lt;bean id=&quot;homeAddrId&quot; class=&quot;com.zhao.setter.Address&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;home&quot; value=&quot;重庆&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;tel&quot; value=&quot;13993216246&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id=&quot;coperAddrId&quot; class=&quot;com.zhao.setter.Address&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;home&quot; value=&quot;城管&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;tel&quot; value=&quot;18522536924&quot;&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h4 id="P命名空间【了解】"><a href="#P命名空间【了解】" class="headerlink" title="P命名空间【了解】"></a>P命名空间【了解】</h4><ul>
<li>对setter方法注入进行简化，替换<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property name=&quot;属性名&quot;&gt;</span><br></pre></td></tr></table></figure>
而是在&lt;bean p:属性名=”普通值” p:属性名 -ref=”引用值”&gt;</li>
<li>P命名空间使用前提必须添加命名空间<br>xmlns:p=”<a href="http://www.springframework.org/schema/p&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/p&quot;</a></li>
</ul>
<p>beans.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;!--    p命名空间</span><br><span class="line">--&gt;</span><br><span class="line">    &lt;bean id=&quot;pesonId&quot; class=&quot;com.zhao.p.peson&quot;</span><br><span class="line">          p:pname=&quot;阿尔提尔&quot; p:age=&quot;22&quot;</span><br><span class="line">          p:coperAddrs-ref=&quot;coperAddrId&quot; p:homeAddr-ref=&quot;homeAddrId&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;homeAddrId&quot; class=&quot;com.zhao.p.Address&quot;</span><br><span class="line">        p:home=&quot;重庆&quot; p:tel=&quot;13993216246&quot;&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">    &lt;bean id=&quot;coperAddrId&quot; class=&quot;com.zhao.p.Address&quot;</span><br><span class="line">        p:home=&quot;城管&quot; p:tel=&quot;18522536924&quot;&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SpEL【了解】"><a href="#SpEL【了解】" class="headerlink" title="SpEL【了解】"></a>SpEL【了解】</h3><ul>
<li>对<property>进行统一编程所有的内容都是用value<property name="" value="#{表达式}">
eg：#{123} #{"jack"}
  #{beanId}          :另一个bean的引用
  #{bean.propName}   :操作属性
  #{bean.toString()} :执行方法
  #{T(类)字段|方法}   ：静态方法或字段

</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--    </span><br><span class="line">    &lt;peoperty id=&quot;name&quot; value=&quot;#&#123;userId.name.toUpperCase()&#125;&quot;&gt;</span><br><span class="line">        通过另一个bean，获得属性，调用方法</span><br><span class="line">     &lt;peoperty id=&quot;name&quot; value=&quot;#&#123;userId.name?.toUpperCase()&#125;&quot;&gt;</span><br><span class="line">        ?.表示对象不为空，调用方法   </span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;bean id=&quot;userId&quot; class=&quot;com.zhao.SpEl.User&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;name&quot; value=&quot;#&#123;&apos;阿尔提尔&apos;&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;pi&quot; value=&quot;#&#123;T(java.lang.Math).PI&#125;&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h3 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h3> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;!--</span><br><span class="line">    集合的注入都是给&lt;peoperty&gt;添加字标签</span><br><span class="line">    数组：&lt;array&gt;</span><br><span class="line">    List：&lt;list&gt;</span><br><span class="line">    Set：&lt;set&gt;</span><br><span class="line">    Map：&lt;map&gt;  键值对&lt;entry&gt;</span><br><span class="line">    Properties：&lt;props&gt;</span><br><span class="line"></span><br><span class="line">    普通数据：&lt;value&gt;</span><br><span class="line">    引用数据：&lt;ref&gt;</span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;bean id=&quot;collId&quot; class=&quot;com.zhao.coll.CollDate&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;arryData&quot;&gt;</span><br><span class="line">            &lt;array&gt;</span><br><span class="line">                &lt;value&gt;DS&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;DZD&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;屌丝&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;吊中吊&lt;/value&gt;</span><br><span class="line">            &lt;/array&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">        &lt;property name=&quot;listData&quot;&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;DS&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;DZD&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;屌丝&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;吊中吊&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;setData&quot;&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;value&gt;DS&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;屌丝&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;吊中吊&lt;/value&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;mapData&quot;&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key=&quot;jack&quot; value=&quot;杰克&quot;&gt;&lt;/entry&gt;</span><br><span class="line">                &lt;entry&gt;</span><br><span class="line">                    &lt;key&gt;&lt;value&gt;kaer&lt;/value&gt;&lt;/key&gt;</span><br><span class="line">                    &lt;value&gt;卡尔&lt;/value&gt;</span><br><span class="line">                &lt;/entry&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;property name=&quot;propsData&quot;&gt;</span><br><span class="line">            &lt;props&gt;</span><br><span class="line">                &lt;prop key=&quot;高富帅nao&quot;&gt;嫐&lt;/prop&gt;</span><br><span class="line">                &lt;prop key=&quot;白富美niao&quot;&gt;嬲&lt;/prop&gt;</span><br><span class="line">                &lt;prop key=&quot;男屌丝nong&quot;&gt;挊&lt;/prop&gt;</span><br><span class="line">            &lt;/props&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">  ``` </span><br><span class="line"></span><br><span class="line">### 装配Bean基于注解</span><br><span class="line">* 注解：就是一个类，使用@注解名称</span><br><span class="line">* 开发中:使用注解 取代XML配置文件</span><br><span class="line">1. @Component 取代 ```&lt;bean class=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>
<pre><code>@Component(&quot;id&quot;) 取代 ```&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;```</code></pre><ol start="2">
<li>web开发，提供3个@Component注解的衍生注解(功能一样) 取代<code>&lt;bean class=&quot;&quot;&gt;</code><br> @Repository  dao层<br> @service     service层<br> @Controller  web层</li>
<li>依赖注入  给私有字段设置 也可以给setter方法设置<br> 普通值：@value(“”)<br> 引用值：<pre><code>方式一：按照【类型】注入
        @Autowired  【自动】
方式二：按照【名称】注入1
        @Autowired 
        @Qualifier(&quot;名称&quot;)
方式三：按照【名称】注入2
        @Resource(&quot;名称&quot;)</code></pre></li>
<li>生命周期<br> 初始化：@PostConstruct<br> 销毁： @PreDestroy</li>
<li>作用域<br> @Scope(“prototype”)多例</li>
</ol>
<h5 id="注解使用前提，添加命名空间，让Spring扫描含有注解的类"><a href="#注解使用前提，添加命名空间，让Spring扫描含有注解的类" class="headerlink" title="注解使用前提，添加命名空间，让Spring扫描含有注解的类"></a>注解使用前提，添加命名空间，让Spring扫描含有注解的类</h5><p>schema命名空间</p>
<ol>
<li>默认命名空间<br> 默认 xmlns=””; &lt;标签名&gt; <bean><br> 显示：xmlns：别名=”” &lt;别名：标签名&gt; <a href="context:...." target="_blank" rel="noopener">context:....</a></li>
<li>确定schema.xsd 文件位置<br> xsl:schemaLocaltion=”名称 位置 名称2 位置2 …..”;<br> 内容都是成对的【名称 位置】</li>
</ol>
<ul>
<li>添加的分别是：</li>
</ul>
<ol>
<li>xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context&quot;</a></li>
<li><a href="http://www.springframework.org/schema/context" target="_blank" rel="noopener">http://www.springframework.org/schema/context</a></li>
<li><a href="http://www.springframework.org/schema/context/spring-context.xsd" target="_blank" rel="noopener">http://www.springframework.org/schema/context/spring-context.xsd</a></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">            http://www.springframework.org/schema/context</span><br><span class="line">            http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>beans.xml配置组建扫描，扫描含有注解的类<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--    组建扫描，扫描含有注解的类--&gt;</span><br><span class="line">    &lt;context:component-scan base-package=&quot;com.zhao.annotation_IOC&quot;&gt;&lt;/context:component-scan&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>测试类<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Testweb &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void save()&#123;</span><br><span class="line">        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao/Web/beans.xml&quot;);</span><br><span class="line">        StudentAction studentAction =  applicationContext.getBean(&quot;studentActionId&quot;,StudentAction.class);</span><br><span class="line">        studentAction.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>web层<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> @Controller(&quot;studentActionId&quot;)</span><br><span class="line">public class StudentAction &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private StudentService studentService;</span><br><span class="line"></span><br><span class="line">    public void execute()&#123;</span><br><span class="line">        studentService.addStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>service 层<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> @Service</span><br><span class="line">public class StudentServiceImpl implements StudentService &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private StudentDao studentDao;</span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier(&quot;studentDaoId&quot;)</span><br><span class="line">    public void setStudentDao(StudentDao studentDao) &#123;</span><br><span class="line">        this.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addStudent() &#123;</span><br><span class="line">        studentDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>dao层<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> @Repository(&quot;studentDaoId&quot;)</span><br><span class="line">public class StudentDaoImpl implements StudentDao &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void save() &#123;</span><br><span class="line">        System.out.println(&quot;dao&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
