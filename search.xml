<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hibernate框架(四)</title>
    <url>/2019/11/19/Hibernate%E6%A1%86%E6%9E%B6-%E5%9B%9B/</url>
    <content><![CDATA[<h3 id="HQL查询"><a href="#HQL查询" class="headerlink" title="HQL查询"></a>HQL查询</h3><ul>
<li>HQL的语法与SQL语法基本一致，不同的是HQL是指向面向对象查询的，查询的是对象和对象中的属性</li>
<li>HQL关键支部区分大小写，但类名和属性区分大小写<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">select 别名/属性名/表达式</span><br><span class="line"><span class="keyword">from</span> 实体 as 别名 </span><br><span class="line">where 过滤条件</span><br><span class="line">group by 分组条件</span><br><span class="line">having 分组后的结果的过滤条件</span><br><span class="line">orday by 排序条件</span><br></pre></td></tr></table></figure>
<ul>
<li>查询所有客户<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Lesson8 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询所有客户，查询是所有表的字段</span></span><br><span class="line">       Query query = session.create<span class="constructor">Query(<span class="string">"from Customer"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询结果会封装到一个list集合中</span></span><br><span class="line">       List&lt;Customer&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历</span></span><br><span class="line">       for(Customer c : <span class="built_in">list</span>)&#123;</span><br><span class="line">           <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c.get<span class="constructor">Name()</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">       session.close<span class="literal">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>选择查询<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Lesson10 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.带条件</span></span><br><span class="line">       <span class="comment">//Query query = session.createQuery("from Customer where id=2");</span></span><br><span class="line">       <span class="comment">//Query query = session.createQuery("from Customer where id=?");</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.别名</span></span><br><span class="line">       <span class="comment">//Query query = session.createQuery("from Customer c where c.id=?");</span></span><br><span class="line">       Query query = session.create<span class="constructor">Query(<span class="string">"select c from Customer c where c.id=?"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.设置参数</span></span><br><span class="line">       query.set<span class="constructor">Integer(0,2)</span>;</span><br><span class="line">       <span class="comment">//query.setParameter(1,2);</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.查询结果会封装到一个list集合中</span></span><br><span class="line">       List&lt;Customer&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历</span></span><br><span class="line">       for(Customer c : <span class="built_in">list</span>)&#123;</span><br><span class="line">           <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(c.get<span class="constructor">Name()</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//查询只获取一条数据</span></span><br><span class="line">       Customer c = (Customer)query.unique<span class="constructor">Result()</span>;</span><br><span class="line">       <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out,println(c);</span><br><span class="line"></span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">       session.close<span class="literal">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>投影查询(其不会把结果封装成对象，封装的是数组)<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson11 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       //查询所有客户</span><br><span class="line">       Query query = <span class="keyword">session</span>.createQuery("select c.id,c.name from Customer c ");</span><br><span class="line"></span><br><span class="line">       //查询结果会封装到一个list集合中</span><br><span class="line">       List&lt;<span class="keyword">Object</span>[]&gt; list = query.list();</span><br><span class="line"></span><br><span class="line">       //注意：封装的是数组</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">Object</span> c : obj)&#123;</span><br><span class="line">               <span class="keyword">System</span>.<span class="keyword">out</span>.peintln(c);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println("--------------")</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="排序-order-by-desc降序-asc升序"><a href="#排序-order-by-desc降序-asc升序" class="headerlink" title="排序 order by desc降序  asc升序"></a>排序 order by desc降序  asc升序</h3> <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    Session session = util.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有客户结果会封装到一个list集合中</span></span><br><span class="line">    List&lt;Customer&gt; <span class="built_in">list</span> = session.createQuery(<span class="string">"from Customer c order by c.id desc"</span>).<span class="built_in">list</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">for</span>(Customer c : <span class="built_in">list</span>)&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(c)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    session.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3> <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Query</span> <span class="keyword">query</span> = session.createQuery(<span class="string">"from Customer"</span>);</span><br><span class="line"><span class="comment">//pageNum 当前页（之前的 pageCode）</span></span><br><span class="line"><span class="keyword">query</span>.setFirstResult(0);</span><br><span class="line"> <span class="comment">//每页显示个数，pageSize</span></span><br><span class="line"> <span class="keyword">query</span>.setMaxResults(5);</span><br></pre></td></tr></table></figure>
<h3 id="聚合函数和分组查询"><a href="#聚合函数和分组查询" class="headerlink" title="聚合函数和分组查询"></a>聚合函数和分组查询</h3> <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"> <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line"></span><br><span class="line">     //查询所有客户结果会封装到一个list集合中</span><br><span class="line">     Query query = <span class="keyword">session</span>.createQuery("select count（*）from Customer c ");</span><br><span class="line"></span><br><span class="line">     Long count = (Long)query.uniqueResult();</span><br><span class="line">     <span class="keyword">System</span>.<span class="keyword">out</span>.println("客户表的总记录：+count")</span><br><span class="line"></span><br><span class="line">     //HQL分组<span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">     //<span class="keyword">SQL</span>语句 <span class="keyword">select</span> o.customer_id,count(o.customer_id) <span class="keyword">from</span>  t_order o <span class="keyword">group</span> <span class="keyword">by</span> o.customer_id;</span><br><span class="line"></span><br><span class="line">     List&lt;<span class="keyword">object</span>[]&gt; list = <span class="keyword">session</span>.createQuery("select o.customer, count(o) from Order o group by o.customer").list();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list))&#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">object</span> o : obj)&#123;</span><br><span class="line">             <span class="keyword">System</span>.<span class="keyword">out</span>.println(o);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">System</span>.<span class="keyword">out</span>.println("----------");</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><ul>
<li><p>inner join 内连接</p>
</li>
<li><p>left outer join 左外连接</p>
</li>
<li><p>right outer join 右外连接</p>
</li>
<li><p>HQL中：<br>内连接  inner join | join </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       //内连接【<span class="keyword">inner</span> <span class="keyword">join</span>】返回结果数组List&lt;<span class="keyword">Object</span>[]&gt;</span><br><span class="line">       //<span class="keyword">From</span> Customer <span class="keyword">inner</span> <span class="keyword">join</span> c.orders 相当于 <span class="keyword">select</span> * form t_customer tc <span class="keyword">inner</span> <span class="keyword">join</span> t_order <span class="keyword">to</span> <span class="keyword">on</span> tc.id = <span class="keyword">to</span>.customer.id</span><br><span class="line">       List&lt;<span class="keyword">Object</span>[]&gt; list = <span class="keyword">session</span>.createQuery("From Customer c inner join c.orders").list();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj[<span class="number">0</span>]+":"+obj[<span class="number">1</span>]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>迫切内连接  inner join feath | join fetch</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       // 迫切内连接  <span class="keyword">inner</span> <span class="keyword">join</span> feath | <span class="keyword">join</span> <span class="keyword">fetch</span> 返回数据List&lt;Customer&gt;;</span><br><span class="line">       List&lt;Customer&gt; list = <span class="keyword">session</span>.createQuery("From Customer c inner join fetch c.orders").list();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(Customer c : list)&#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println(c.getName());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>隐式内连接【join】 </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">      <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">      //隐式内连接 == 笛卡尔集过滤条件</span><br><span class="line">      List&lt;<span class="keyword">Object</span>[]&gt; list = <span class="keyword">session</span>.createQuery("From Customer c, Order o where c = o.customer").list();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">          <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj[<span class="number">0</span>]+":"+obj[<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">      <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>左外连接   left outer join | left join 左表中如果没有右表的匹配数据，左表记录也会显示<br>迫切左外连接  left outer join fetch | left join fetch<br>右外连接  right outer join | outer join<br>交叉连接  ClassA ClassB</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">      <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">      //HQL交叉连接相当于 == <span class="keyword">SQL</span>笛卡尔集</span><br><span class="line">      List&lt;<span class="keyword">Object</span>[]&gt; list = <span class="keyword">session</span>.createQuery("From Customer c, Order o").list();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">          <span class="keyword">System</span>.<span class="keyword">out</span>.println(obj[<span class="number">0</span>]+":"+obj[<span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">      <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="命名查询"><a href="#命名查询" class="headerlink" title="命名查询"></a>命名查询</h3><ul>
<li>命名查询:hql写在映射文件,通过session的getNameQuery()来返回一个Query对象<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">      <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">      //命名查询,把hql写在映射文件中比较灵活</span><br><span class="line">      <span class="comment">/*hql写入映射文件2种方式：</span></span><br><span class="line"><span class="comment">      *1.写在类class标签里面，hql是局部的</span></span><br><span class="line"><span class="comment">      *2.写在hibernate-mapping标签里面，hql是全局的</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      //String hql = "from Customer";</span><br><span class="line">      //Query query = <span class="keyword">session</span>.createQuery(hql);</span><br><span class="line">      //<span class="keyword">System</span>.<span class="keyword">out</span>.println(query.list());</span><br><span class="line"></span><br><span class="line">      //获取<span class="keyword">Class</span>里的局部hql语句(方法参数 包名+类名);</span><br><span class="line">      Query query = <span class="keyword">session</span>.getNameQuery("zhao/hibernate/domain/Customer.hql1");</span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(query.list());</span><br><span class="line"></span><br><span class="line">      //获取hibernate-<span class="keyword">mapping</span>中全局的hql(方法参数 类名);</span><br><span class="line">      Query query = <span class="keyword">session</span>.getNameQuery("hql2");</span><br><span class="line">      query.setParames(<span class="number">0</span>,"沐沐");</span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(query.uniqueResult());</span><br><span class="line">      <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">      <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>映射文件<!--第一种hql的位置-->
<query name="hql1">hql语句</query><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"zhao.hibernate.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"customer"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        描述一对多关系</span></span><br><span class="line"><span class="comment">       key中Colum写的是外键名称</span></span><br><span class="line"><span class="comment">       one-to-many 一对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">cascade</span>=<span class="string">"delete-orphan"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"zhao.hibernate.domain.Order"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-many</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--第一种hql的位置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">query</span> <span class="attr">name</span>=<span class="string">"hql1"</span>&gt;</span>from Customer<span class="tag">&lt;/<span class="name">query</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--第二种hql的位置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">query</span> <span class="attr">name</span>=<span class="string">"hql2"</span>&gt;</span>from Customer where name=?<span class="tag">&lt;/<span class="name">query</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置C3P0"><a href="#配置C3P0" class="headerlink" title="配置C3P0"></a>配置C3P0</h3></li>
<li>找到Hibernate\hibernate-release-5.4.8.Final\project\etc\hibernate.properties文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--		配置C3P0连接池--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		#hibernate.connection.provider_class org.hibernate.connection.C3P0ConnectionProvider--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.provider_class"</span>&gt;</span>org.hibernate.connection.C3P0ConnectionProvider<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		#hibernate.c3p0.max_size 2</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.min_size 2</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.timeout 5000</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.max_statements 100</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.idle_test_period 3000</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.acquire_incre</span></span><br><span class="line"><span class="comment">           ment 2</span></span><br><span class="line"><span class="comment">		#hibernate.c3p0.validate false--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.min_size"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.timeout"</span>&gt;</span>5000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.max_statements"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.idle_test_period"</span>&gt;</span>3000<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.acquire_increment"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"c3p0.validate"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="悲观锁，乐观锁"><a href="#悲观锁，乐观锁" class="headerlink" title="悲观锁，乐观锁"></a>悲观锁，乐观锁</h3><ul>
<li><p>悲观锁分为两种：</p>
<ol>
<li>读锁/共享锁【比较少用】</li>
</ol>
<ul>
<li>读锁可被其他线程所共享，如果是读取的话大家都可以用这把锁读到数据。<br>select * from table lock in share mode（读锁/共享锁）<br>start transaction; 开启事务<br>commit;  提交事务</li>
</ul>
<ol start="2">
<li>写锁/排他锁【用的多】</li>
</ol>
<ul>
<li><p>写锁不能共享，只要有人为数据加入了写锁，其他人就不能为数据加入任何锁<br>select * from table for update;【锁表，不推荐使用】<br>select * from table  where id= 1 for update;【锁行，常用】   </p>
<h3 id="Hibernate添加写锁"><a href="#Hibernate添加写锁" class="headerlink" title="Hibernate添加写锁"></a>Hibernate添加写锁</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">        <span class="keyword">session</span>.getTransaction.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">        //hibernate 的写锁/陪他锁实现</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 演示</span></span><br><span class="line"><span class="comment">         * A线程【命令行】，开启事务--》读取一行数据加锁</span></span><br><span class="line"><span class="comment">         * B 线程【应用程序】，开启事务--》读取一行数据加锁</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">         //方式一执行<span class="keyword">Sql</span>语句进行写锁</span><br><span class="line">         Customer customer = <span class="keyword">session</span>.<span class="keyword">get</span>(Customer.<span class="keyword">class</span>,<span class="number">1</span>,LockOptions.<span class="keyword">UPDATE</span>);//写锁</span><br><span class="line">         <span class="keyword">System</span>,<span class="keyword">out</span>.println(customer);</span><br><span class="line"></span><br><span class="line">         //方式<span class="number">2</span></span><br><span class="line">         //Query query = <span class="keyword">session</span>.createQuery("from Customer where id=?");</span><br><span class="line">         query.setLockOpties(LockOptions.<span class="keyword">UPDATE</span>);</span><br><span class="line">         query.setParamer(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">         Customer customer = (Customer)query.uniqueResult();</span><br><span class="line">         //query.executeUpdate();</span><br><span class="line">         <span class="keyword">System</span>,<span class="keyword">out</span>.println(customer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"> ```    </span><br><span class="line">* 乐观锁</span><br><span class="line"> 乐观锁就是添加一个<span class="keyword">version</span>字段来控制数据的不一致性</span><br><span class="line"> <span class="number">1.</span> 实体类</span><br></pre></td></tr></table></figure>
<p>public class Customer {</p>
<p>private Integer id;  //客户Id<br>private String name; //客户名称</p>
<p>//加个乐观锁：加个版本控制字段，字段用Integer<br>private Integer version;</p>
<p>public Integer getVersion() {<br>   return version;<br>}</p>
<p>public void setVersion(Integer version) {<br>   this.version = version;<br>}</p>
<p>//一对多属性描述，一个客户对应有多个订单<br>private Set<Order> orders = new HashSet<Order>();</p>
<p>public Integer getId() {<br>   return id;<br>}</p>
<p>public void setId(Integer id) {<br>   this.id = id;<br>}</p>
<p>public String getName() {<br>   return name;<br>}</p>
<p>public void setName(String name) {<br>   this.name = name;<br>}</p>
<p>public Set<Order> getOrders() {<br>   return orders;<br>}</p>
<p>public void setOrders(Set<Order> orders) {<br>   this.orders = orders;<br>}</p>
<p>@Override<br>public String toString() {<br>   return “Customer{“ +</p>
<pre><code>&quot;id=&quot; + id +
&quot;, name=&apos;&quot; + name + &apos;\&apos;&apos; +
&apos;}&apos;;</code></pre><p>}<br>}</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">2.映射文件<span class="selector-tag">customer</span><span class="selector-class">.hbm</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-mapping PUBLIC
     "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
     "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping>

 <class name="zhao.hibernate.domain.Customer" table="customer">
     <id name="id" column="id">
         <generator class="native"></generator>
     </id>
    <!--乐观锁 位置有dtd约束 放在 id和property和id中间-->
     <version name="version"></version>

<pre><code>&lt;property name=&quot;name&quot; column=&quot;name&quot;&gt;&lt;/property&gt;</code></pre></li>
</ul>
 <!--        描述一对多关系
        key中Colum写的是外键名称
        one-to-many 一对多，其class属性表示外键表实体类名-->
<pre><code>    &lt;set name=&quot;orders&quot; cascade=&quot;delete-orphan&quot;&gt;
        &lt;key column=&quot;customer_id&quot;&gt;&lt;/key&gt;
        &lt;one-to-many class=&quot;zhao.hibernate.domain.Order&quot;&gt;&lt;/one-to-many&gt;
    &lt;/set&gt;
&lt;/class&gt;</code></pre> </hibernate-mapping>
  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span> 测试类</span><br></pre></td></tr></table></figure>
 /*
 *乐观锁
 * */
 public class Lesson12 {

<pre><code>@Test
public void save(){

    Session session = util.openSession();
    session.getTransaction().begin();

    //乐观锁：每次更新，版本都会加1
    /*
    * 如果当前的版本【2】比数据库【3】中的低，就不更新，报错
    * Row was uodated or deleted by another transaction;
    * 乐观锁是hibernate自己实现的
    * for update 是Mysql 实现的
    * */
    Customer customer = session.get(Customer.class,1);
    customer.setName(&quot;阿尔提尔&quot;);

    session.getTransaction().commit();
    session.close();
}</code></pre><p> }<br>  <figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">### log4j日志配置</span><br><span class="line"><span class="comment">* 配置文件内容：</span></span><br><span class="line">    1. 记录器</span><br><span class="line">    2. 输出源</span><br><span class="line">    3. 布局</span><br><span class="line"><span class="comment">* 记录器</span></span><br><span class="line"> 例如：log4j.rootLogger=info,stdout,<span class="keyword">file</span></span><br><span class="line"> 格式： log4j.rootLogger=日志级别，输出源1，输出源2，...</span><br><span class="line"> log4j 日志级别： fatal致命错误 <span class="keyword">error</span>错误 warm警告 info信息 debug调试  trace堆栈信息（由高到低顺序）</span><br><span class="line"><span class="comment"> * stdout控制台输出源</span></span><br><span class="line"><span class="comment">* 输出源</span></span><br><span class="line">   例如：log4j.appender.<span class="keyword">file</span>=org.apaphe.log4j.FileAppender</span><br><span class="line">   格式：log4j.appender.输出源的名称=输出源的实现类</span><br><span class="line">   名称：自定义</span><br><span class="line">   实现类：log4j提供</span><br><span class="line">   输出源属性例如：log4j.appender.<span class="keyword">file</span>.<span class="keyword">File</span>=<span class="keyword">d</span>:/mylong.<span class="keyword">log</span></span><br><span class="line">   输出源属性格式：log4j.appender.名称.属性=值</span><br></pre></td></tr></table></figure></p>
<h3 id="direct-log-messages-to-stdout"><a href="#direct-log-messages-to-stdout" class="headerlink" title="direct log messages to stdout"></a>direct log messages to stdout</h3><p> log4j.appender.stdout=org.apache.log4j.ConsoleAppender<br> log4j.appender.stdout.Target=System.out<br> log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<br> log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n</p>
<h3 id="direct-messages-to-file-hibernate-log"><a href="#direct-messages-to-file-hibernate-log" class="headerlink" title="direct messages to file hibernate.log"></a>direct messages to file hibernate.log</h3><p> #log4j.appender.file=org.apache.log4j.FileAppender</p>
<h1 id="文件输出路径"><a href="#文件输出路径" class="headerlink" title="文件输出路径"></a>文件输出路径</h1><p> #log4j.appender.file.File=hibernate.log<br> #log4j.appender.file.layout=org.apache.log4j. PatternLayout<br> #log4j.appender.file.layout.ConversionPattern=%d  {ABSOLUTE} %5p %c{1}:%L - %m%n</p>
<h3 id="set-log-levels-for-more-verbose-logging-change-‘info’-to-‘debug’"><a href="#set-log-levels-for-more-verbose-logging-change-‘info’-to-‘debug’" class="headerlink" title="set log levels - for more verbose logging change   ‘info’ to ‘debug’"></a>set log levels - for more verbose logging change   ‘info’ to ‘debug’</h3><h3 id="log4j-rootLogger-warn-stdout"><a href="#log4j-rootLogger-warn-stdout" class="headerlink" title="log4j.rootLogger=warn, stdout"></a>log4j.rootLogger=warn, stdout</h3><h1 id="ware-：日志级别"><a href="#ware-：日志级别" class="headerlink" title="ware ：日志级别"></a>ware ：日志级别</h1>  <figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">* 代码里使用日志。</span><br><span class="line"> step1:创建日志对象</span><br><span class="line"> step2：调用日志对象的方法</span><br><span class="line"></span><br><span class="line"> Logger（org.slf4j）</span><br><span class="line"> Logger logger = <span class="module-access"><span class="module"><span class="identifier">LoggerFactory</span>.</span></span>get<span class="constructor">Logger()</span></span><br></pre></td></tr></table></figure>
<p>  public class Lesson12 {<br>    //Logger（org.slf4j）<br>    Logger logger = LoggerFactory.getLogger(Lesson12.class);<br>    @Test<br>    public void save(){</p>
<pre><code>    Session session = util.openSession();
    session.getTransaction().begin();


   logger.error(&quot;error....&quot;);//错误
   ligger.ware(&quot;ware....&quot;);//警告
   logger.info(&quot;info.....&quot;);//信息 


    session.getTransaction().commit();
    session.close();
}</code></pre><p> }<br>   ```</p>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架(三)</title>
    <url>/2019/11/16/Hibernate%E6%A1%86%E6%9E%B6-%E4%B8%89/</url>
    <content><![CDATA[<h3 id="查询一对多和删除"><a href="#查询一对多和删除" class="headerlink" title="查询一对多和删除"></a>查询一对多和删除</h3> <figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson8 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       //查询一对多</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 默认情况下，只有使用Customer的orders数据，会执行SQL查询</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line">       //查询<span class="number">2</span>的客户</span><br><span class="line">       Customer customer = <span class="keyword">session</span>.<span class="keyword">get</span>(Customer.<span class="keyword">class</span>,<span class="number">2</span>);</span><br><span class="line">       </span><br><span class="line">       //删除客户要开启事务，查询不需要</span><br><span class="line">       //<span class="keyword">session</span>.<span class="keyword">delete</span>(customer);</span><br><span class="line">       </span><br><span class="line">       //获取名字</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println("客户名字："+customer.getName());</span><br><span class="line"></span><br><span class="line">       //获取客户所有订单</span><br><span class="line">       <span class="keyword">Set</span>&lt;<span class="keyword">Order</span>&gt; orders = customer.getOrders();</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">Order</span> o : orders)&#123;</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println("购买订单名称："+o.getName());</span><br><span class="line">           <span class="keyword">System</span>.<span class="keyword">out</span>.println("-------------");</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="cascade级联"><a href="#cascade级联" class="headerlink" title="cascade级联"></a>cascade级联</h3><ul>
<li>save-update：级联保存，级联修改，保存A（客户)时,同时保存B(订单)</li>
<li>delete ：级联删除，删除A，同时删除B<br>底层先查，后删（先删除从表，在删除主表）</li>
<li>delete-orphan：孤儿删除<br>  孤儿删除，解除关系，同时将B删除，A存在</li>
<li>如果配置多项，使用逗号隔开<set cascade="save-update,delete"><br>  all:相当于save-delete和delete整合<br>  all-delete-orphan：相当于【save-update,delete，delete-orphan】三个整合</li>
</ul>
<ol>
<li>.hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主表映射文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">inverse</span>=<span class="string">"true"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"custimer_id"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"Order"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*一对多数据保存方式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">public <span class="keyword">class</span> Lesson7 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//保存数据</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.创建客户对象</span></span><br><span class="line">       Customer customer = <span class="keyword">new</span> <span class="constructor">Customer()</span>;</span><br><span class="line">       customer.set<span class="constructor">Name(<span class="string">"沐沐1"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.创建两个订单</span></span><br><span class="line">       Order order1 = <span class="keyword">new</span> <span class="constructor">Order()</span>;</span><br><span class="line">       order1.set<span class="constructor">Name(<span class="string">"手机"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       Order order2 = <span class="keyword">new</span> <span class="constructor">Order()</span>;</span><br><span class="line">       order2.set<span class="constructor">Name(<span class="string">"衣服"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.维护订单与客户的关系</span></span><br><span class="line">       order1.set<span class="constructor">Customer(<span class="params">customer</span>)</span>;</span><br><span class="line">       order2.set<span class="constructor">Customer(<span class="params">customer</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.客户拥有订单</span></span><br><span class="line">       customer.get<span class="constructor">Orders()</span>.add(order1);</span><br><span class="line">       customer.get<span class="constructor">Orders()</span>.add(order2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//5.保存</span></span><br><span class="line">       session.save(customer);<span class="comment">//保存完，客户有Id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//注意：cascade级联配置了就不需要保存从表数据</span></span><br><span class="line">       <span class="comment">//session.save(order1);</span></span><br><span class="line">       <span class="comment">//session.save(order2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">       session.close<span class="literal">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>delete-orphan：孤儿删除</li>
</ul>
<ol>
<li>.hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        描述一对多关系</span></span><br><span class="line"><span class="comment">       key中Colum写的是外键名称</span></span><br><span class="line"><span class="comment">       one-to-many 一对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">cascade</span>=<span class="string">"delete-orphan"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"zhao.hibernate.domain.Order"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-many</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson9 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">        //查询一对多</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 级联孤儿删除 delete-orphan</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        //查询<span class="number">2</span>的客户</span><br><span class="line">        Customer customer = <span class="keyword">session</span>.<span class="keyword">get</span>(Customer.<span class="keyword">class</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        //孤儿删除（把客户里所有订单删除）</span><br><span class="line">        //将订单从Customer中的<span class="keyword">set</span>集合中删除</span><br><span class="line">        <span class="keyword">Set</span>&lt;<span class="keyword">Order</span>&gt; <span class="keyword">set</span> = customer.getOrders();</span><br><span class="line">        Iterator&lt;<span class="keyword">Order</span>&gt; iterator = <span class="keyword">set</span>.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            iterator.next();//取出下一个元素</span><br><span class="line">            iterator.remove();//移除当前元素</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Hibernate表多对多-中间表id关联"><a href="#Hibernate表多对多-中间表id关联" class="headerlink" title="Hibernate表多对多(中间表id关联)"></a>Hibernate表多对多(中间表id关联)</h3></li>
</ol>
<ul>
<li>1.创建实体类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sid;<span class="comment">//学生Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;<span class="comment">//学生姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Course&gt; courses = <span class="keyword">new</span> HashSet&lt;Course&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(Integer sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Course&gt; getCourses() &#123;</span><br><span class="line">        <span class="keyword">return</span> courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCourses</span><span class="params">(Set&lt;Course&gt; courses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.courses = courses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Course</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> Integer cid;<span class="comment">//课程Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;<span class="comment">//课程姓名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Student&gt; students = <span class="keyword">new</span> HashSet&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(Integer cid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cid = cid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Student&gt; getStudents() &#123;</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(Set&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.students = students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Course</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li><p>.hbm.xml映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhao.Dao.Student"</span> <span class="attr">table</span>=<span class="string">"t_student"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"sid"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--        描述多对多关系</span></span><br><span class="line"><span class="comment">               set中table="t_Student_Course" 中间表名字</span></span><br><span class="line"><span class="comment">               key中Colum写的是当前实体类外键名称</span></span><br><span class="line"><span class="comment">               many-to-many 多对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"courses"</span> <span class="attr">table</span>=<span class="string">"t_student_course"</span> <span class="attr">cascade</span>=<span class="string">"save-update"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"sid"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.zhao.Dao.Course"</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhao.Dao.Course"</span> <span class="attr">table</span>=<span class="string">"t_course"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"cid"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--        描述多对多关系</span></span><br><span class="line"><span class="comment">            set中table="t_Student_Course" 中间表名字</span></span><br><span class="line"><span class="comment">            key中Colum写的是当前实体类外键名称</span></span><br><span class="line"><span class="comment">            many-to-many 多对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"students"</span> <span class="attr">table</span>=<span class="string">"t_student_course"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"cid"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">"com.zhao.Dao.Student"</span> <span class="attr">column</span>=<span class="string">"sid"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-many</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>hibernate.cfg.xml核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">		com.mysql.cj.jdbc.Driver</span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">		jdbc:mysql://localhost:3306/hibernate_user?serverTimezone=Asia/Shanghai</span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--		配置映射文件与数据库表关系</span></span><br><span class="line"><span class="comment">		update：有表则更新，无则创建</span></span><br><span class="line"><span class="comment">		create：每次启动hibernate都创建，（注意：以前数据没得了）</span></span><br><span class="line"><span class="comment">		create-drop：每次启动hibernate都创建，执行完后删除表--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 开启二级缓存 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 设置二级缓存插件EHCache的Provider类&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&lt;property name="hibernate.cache.region.factory_class"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--			org.hibernate.cache.ehcache.EhCacheRegionFactory--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--		&lt;/property&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启与当前线程绑定session功能--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 配置数据库方言 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">		org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/Dao/Student.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/Dao/Course.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<ul>
<li>提取工具类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">util</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory factory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取核心配置文件对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        <span class="comment">//2.创建会话工厂</span></span><br><span class="line">        factory = configuration.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听程序关闭</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread()&#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"程序关闭。。。！"</span>);</span><br><span class="line">                <span class="comment">//关闭会话工厂</span></span><br><span class="line">                factory.<span class="built_in">close</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回会话工厂获取到的session对象</span></span><br><span class="line">        <span class="keyword">return</span> factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCurrentSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory.getCurrentSession();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<ul>
<li>保存数据<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> text()&#123;</span><br><span class="line"></span><br><span class="line">       //保存多对多数据</span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       //<span class="number">1.</span>创建两个学生</span><br><span class="line">       Student student =<span class="built_in">new</span> Student("赵云");</span><br><span class="line">       Student student2 =<span class="built_in">new</span> Student("洛克");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="number">2.</span>创建<span class="number">2</span>个课程</span><br><span class="line">       Course  c1 = <span class="built_in">new</span> Course("java");</span><br><span class="line">       Course  c2 = <span class="built_in">new</span> Course("c#");</span><br><span class="line"></span><br><span class="line">       //<span class="number">3.</span>绑定课程到到学生对象</span><br><span class="line">       student.getCourses().<span class="keyword">add</span>(c1);</span><br><span class="line">       student.getCourses().<span class="keyword">add</span>(c2);</span><br><span class="line"></span><br><span class="line">       student2.getCourses().<span class="keyword">add</span>(c1);</span><br><span class="line">       student2.getCourses().<span class="keyword">add</span>(c2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="number">4.</span>保存</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 注意：配置级联，只保存学生对象</span></span><br><span class="line"><span class="comment">       * 1.如果在student中配置inverse="true",由Course来维护外键关系，中间表没数据</span></span><br><span class="line"><span class="comment">       * 2.默认student配置inveerse="false",由Student来维护外键关系,中间表有数据</span></span><br><span class="line"><span class="comment">       * 3.多对多，inverse不能两边都为true；不管保存那个数据中间表都没数据</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line">       <span class="keyword">session</span>.save(student);</span><br><span class="line">       <span class="keyword">session</span>.save(student2);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加载策略"><a href="#加载策略" class="headerlink" title="加载策略"></a>加载策略</h3></li>
</ul>
<ul>
<li><p>类级别的加载策略<br>get方法即时加载数据，执行sql语句<br>load方法是懒加载数据，只有用到里面数据数据时，才执行Sql语句<br>load方法 如果只是取id，也不会执行sql语句<br>如果在.hbm.xml映射文件中的<class>lazy属性默认是懒加载’lazy=”true”‘,配置成’lazy=”false”‘这时load方法就是即时加载</p>
</li>
<li><p>关联级别</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> text()&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      * 关联级别的加载策略</span></span><br><span class="line"><span class="comment">      * 1.默认Student下的course也是懒加载,只有访问的时候才会执行sql语句</span></span><br><span class="line"><span class="comment">      * 2.在映射文件set中配置lazy="false",不用访问course属性，也会执行sql查询数据</span></span><br><span class="line"><span class="comment">      * */</span></span><br><span class="line">      <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line"></span><br><span class="line">      //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">      //查询学生</span><br><span class="line">      Student stu1 = (Student) <span class="keyword">session</span>.<span class="keyword">load</span>(Student.<span class="keyword">class</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(stu1);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println("------------");</span><br><span class="line">      //<span class="number">1.</span> Student下的course也是懒加载,只有访问的时候才会执行<span class="keyword">sql</span>语句</span><br><span class="line">      <span class="comment">/*Set&lt;Course&gt; courses = stu1.getCourses();//sql 语句 inner join（内连接查询）</span></span><br><span class="line"><span class="comment">      System.out.println(courses);*/</span></span><br><span class="line"></span><br><span class="line">      //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">      <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li>映射文件<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">set</span> <span class="type">name</span>="courses" table="t_student_course" <span class="keyword">cascade</span>="save-update" lazy="false"&gt;</span><br><span class="line">          &lt;key column="sid"&gt;&lt;/key&gt;</span><br><span class="line">          &lt;many-<span class="keyword">to</span>-many <span class="keyword">class</span>="com.zhao.Dao.Course" column="cid"&gt;&lt;/many-<span class="keyword">to</span>-many&gt;</span><br><span class="line">      &lt;/<span class="keyword">set</span>&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Mysql语句关联查询回顾"><a href="#Mysql语句关联查询回顾" class="headerlink" title="Mysql语句关联查询回顾"></a>Mysql语句关联查询回顾</h3><ul>
<li>查询每个学生对应课程<ul>
<li>内连接chaxun<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student ts</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> t_student_course tsc</span><br><span class="line"><span class="keyword">on</span> ts.id = tsc.sid</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> course tc</span><br><span class="line"><span class="keyword">on</span> tsc.cid = tc.id</span><br><span class="line"><span class="keyword">where</span> ts.id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<ul>
<li>左外连接查询:左边没有匹配到右边的数据也会显示<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> student ts</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> t_student_course tsc</span><br><span class="line"><span class="keyword">on</span> ts.id = tsc.sid</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> course tc</span><br><span class="line"><span class="keyword">on</span> tsc.cid = tc.id</span><br><span class="line"><span class="keyword">where</span> ts.id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="fetch-拿取，获取数据"><a href="#fetch-拿取，获取数据" class="headerlink" title="fetch(拿取，获取数据)"></a>fetch(拿取，获取数据)</h3></li>
</ul>
<ul>
<li><p>fetch:是指查询集合的SQL方式</p>
<ol>
<li>select：默认的，普通select查询语句</li>
<li>join：表连接查询</li>
<li>subselect：使用子查询<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="built_in">public</span> <span class="type">void</span> text()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 在映射文件set中配置'fatch="join"'属性</span></span><br><span class="line"><span class="comment">    * fetch:是指查询集合的SQL方式</span></span><br><span class="line"><span class="comment">    * 1.select：默认的，普通select查询语句</span></span><br><span class="line"><span class="comment">    * 2. join：查询数据时，使用一条语句搞定,使用左外连接</span></span><br><span class="line"><span class="comment">    * 3. subselect：使用子查询，在条件里有select语句</span></span><br><span class="line"><span class="comment">    *              子查询只能用于多对多，一对多中</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line"></span><br><span class="line">    //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">    //查询</span><br><span class="line">    Student student =<span class="keyword">session</span>.<span class="keyword">load</span>(Student.<span class="keyword">class</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">System</span>.<span class="keyword">out</span>.println(student);</span><br><span class="line">    //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">    <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>多对一加载策略</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">   多对一加载策略：</span><br><span class="line">   lazy：有三个选项</span><br><span class="line">   <span class="literal">false</span>：【即时加载数据】</span><br><span class="line">   proxy：使用代理，根据类级别的加载策略来决定，还要依赖fetch</span><br><span class="line">   no-proxy：无代理</span><br><span class="line"></span><br><span class="line">   多种情况： </span><br><span class="line">   class:lazy   mony：lazy    mony:fetch</span><br><span class="line">   =======================================</span><br><span class="line">   <span class="literal">false</span>          <span class="built_in"> proxy </span>          join        即时加载数据，一条SQL语句</span><br><span class="line">   <span class="literal">false</span>          <span class="built_in"> proxy </span>          select      Order是及时加载，Customer是懒加载</span><br><span class="line">   <span class="literal">true</span>           <span class="built_in"> proxy </span>          join        Order是懒加载，Customer是及时加载</span><br><span class="line">   <span class="literal">true</span>           <span class="built_in"> proxy </span>          select      Order是懒加载，Customer是懒加载 </span><br><span class="line"></span><br><span class="line">--&gt;</span><br><span class="line">&lt;many-to-one <span class="attribute">name</span>=<span class="string">"customer"</span> <span class="attribute">class</span>=<span class="string">"Customer"</span>  <span class="attribute">column</span>=<span class="string">"customer_id"</span> <span class="attribute">lazy</span>=<span class="string">"proxy"</span> <span class="attribute">fecth</span>=<span class="string">"join"</span>/&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="批量加载"><a href="#批量加载" class="headerlink" title="批量加载"></a>批量加载</h3><ul>
<li>set标签中可以配置一个batch-size=”2”,表示每次加载两条数据</li>
<li>映射文件<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">set</span> <span class="type">name</span>="orders" <span class="keyword">cascade</span>="delete-orphan" batch-size="2"&gt;</span><br><span class="line">          &lt;key column="customer_id"&gt;&lt;/key&gt;</span><br><span class="line">          &lt;one-<span class="keyword">to</span>-many <span class="keyword">class</span>="zhao.hibernate.domain.Order"&gt;&lt;/one-<span class="keyword">to</span>-many&gt;</span><br><span class="line">      &lt;/<span class="keyword">set</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*批量加载数据</span></span><br><span class="line"><span class="comment">*set中添加属性batch-size</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lesson10</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.openSession();</span><br><span class="line">       <span class="comment">//session.getTransaction().begin();</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//查询所有与客户</span></span><br><span class="line">       List&lt;Customer&gt; <span class="built_in">list</span> = session.createQuery(<span class="string">"From Customer"</span>).<span class="built_in">list</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历客户，查看这个客户有多少订单</span></span><br><span class="line">       <span class="keyword">for</span>(Customer customer : <span class="built_in">list</span>)&#123;</span><br><span class="line">           System.out.<span class="built_in">println</span>(<span class="string">"客户名称："</span>+customer.getName()+<span class="string">"订单数量："</span>+customer.getOrders().<span class="built_in">size</span>());</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//session.getTransaction().commit();</span></span><br><span class="line">       session.<span class="built_in">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>hibernate异常(一)</title>
    <url>/2019/11/13/hibernate%E5%BC%82%E5%B8%B8-%E4%B8%80/</url>
    <content><![CDATA[<h4 id="异常：Error-executing-DDL"><a href="#异常：Error-executing-DDL" class="headerlink" title="异常：Error executing DDL"></a>异常：Error executing DDL</h4><ul>
<li><p>hibernate支持使用旧的方言，而在新版本中就要求使用新的方言了<br>报错：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">hibernate.cfg.xml配置自动创建表：</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;update&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line"></span><br><span class="line">会通过映射文件生成一个sql语句来创建表，</span><br><span class="line"></span><br><span class="line">如果配置了下面方言的语句：</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"hibernate.dialect"</span>&gt;org.hibernate.dialect.MySQLDialect&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line"></span><br><span class="line">而且你使用的mysql是<span class="number">5.</span>x,那么会报错： type=MyISAM</span><br><span class="line"></span><br><span class="line">解决方法是：</span><br><span class="line"></span><br><span class="line">配置改成：</span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"hibernate.dialect"</span>&gt;org.hibernate.dialect.MySQL5Dialect&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line"></span><br><span class="line">MySQL5Dialect： An SQL dialect <span class="keyword">for</span> MySQL <span class="number">5.</span>x specific features.</span><br></pre></td></tr></table></figure></li>
<li><p>异常：Caused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘type=MyISAM’ at line 5<br>大概意思执行SQL语句第5行”type=MyISAM”产生异常</p>
</li>
<li><p>异常：Caused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘order (</p>
<pre><code>id integer not null auto_increment,</code></pre><p>‘ at line 1<br>解决方法：<br>注意：这种一般情况下是语法问题，说明mysql的各种语句还是不够熟练，<br>（1）看表名是不是使用了Mysql的关键字，如果是，请立马改掉；<br>（2）语句给出哪里错误，如我的题目中给出“near”,说明在那附近有问题，我的错误是，使用了Mysql的关键字order<br>改掉就好了。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>hibernate异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架(二)</title>
    <url>/2019/11/13/Hibernate%E6%A1%86%E6%9E%B6-%E4%BA%8C/</url>
    <content><![CDATA[<h3 id="实体类（entity）"><a href="#实体类（entity）" class="headerlink" title="实体类（entity）"></a>实体类（entity）</h3><ul>
<li><p>编写规则：</p>
<pre><code>1. 必须提供无参构造方法，获取数据封装模型会调用无参的构造方法
2. 提供一个表示属性，映射数据表主键字段，提供Id（映射文件）
3. 所有属性提供public访问修饰符的 set get 方法（JavaBean）
4.标识属性应尽量使用基本数据类型的包装类型（int integer  bibernate面向对象）
5.不要用final修饰实体，（将无法生成代理对象进行优化）</code></pre></li>
<li><p>持久化对象的唯一标识OID（对象的Id）</p>
<pre><code>1. Java按地址去区分同一个类的不同对象
2. 关系数据库用主键区分同一条数据
3. Hibernate使用OID来建立内存中的对象和数据库中记录的对应关系结论：对象的OID和数据库的表的主键对应。
4. 为保证OID的唯一性，应该让Hibernate来为OID赋值</code></pre></li>
<li><p>区分自然主键和代理主键</p>
<pre><code>1. 主键需要具备：不为空、不能重复、不能改变
2. 自然主键： 在业务中，某个属性符合主键的三个要求，那么该属性可以作为主键列，【登录名可以是自然主键】
3. 代理主键： 在业务中，不符合以上3个属性，那么就增加一个没有意义的列，那么就增加一个没有意义的的列，作为主键</code></pre></li>
<li><p>基本数据类型和包装数据类型</p>
<pre><code>1. 基本数据类型和包装数据类型都对应Hibernate的映射数据类型相同
2. 基本数据类型无法表示为空（null），数字类型默认为0
3. 包装数据类型默认值为空（null），但对于默认值有业务意义时需要使用包装类</code></pre></li>
<li><p>主键生成策略.hbm.xml(映射文件)</p>
<pre><code>&lt;generator calss=&quot;&quot;&gt;&lt;/generator&gt;
1. native 【经常使用】
        如果是Mysql，id会自动增长
        如果是oracle数据库，也会自动增长，与sequence相关
2. increment也会自动增长，但是其由Hibernate实现增长(表中Id的最大值)，
   执行select MAX(id)查询，会有线程并发问题
3. sequence 一般在oracle数据库才用
4. uuid 【经常使用】一个长字符串需要把实体类的id改成字符串
保存的时候自己不用设置Id，hibernate会自动生成
5. assigned 【经常使用】要手动设置Id
保存时设置：
    user.setId(UUID.rendomUUID().toString().replace(&quot;-&quot;,&quot;&quot;));</code></pre><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="built_in">id</span> <span class="built_in">name</span>=<span class="string">"id"</span> column=<span class="string">"id"</span>&gt;</span><br><span class="line">       &lt;generator <span class="built_in">class</span>=<span class="string">"native"</span>&gt;&lt;/generator&gt;</span><br><span class="line">&lt;/<span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>动态更新及插入<br>在映射文件<class name="全限定类名" table="表名" dynamic-insert="true" dynamic-update="true" />中添加属性</p>
<pre><code>dynamic-insert=&quot;true&quot; 动态插入
dynamic-update=&quot;true&quot; 动态更新</code></pre></li>
<li><p>type<br><property name="username" column="username" type="java.lang.String" length="16"></property></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--       Date 类型 在property中默认为 datetime</span></span><br><span class="line"><span class="comment">            可用属性 type="Date" 声明格式 数据库为  Date</span></span><br><span class="line"><span class="comment">            type="time" 数据库为 time --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">type</span>=<span class="string">"java.util.Date"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>状态的转换过程</p>
</li>
<li><p>实体entity有三种状态：<br> 瞬时状态，持久状态，托管状态<br> 瞬时状态：Transaction，session没有缓存，数据库也没有记录<br> ，Oid没值<br> 持久状态：persist ，save有缓存，数据库也有记录，oid有值<br> 托管状态：detached，session没有缓存，数据库有记录，oid有值</p>
<ol>
<li>查询操作：get、load、createQuery、createCriteria 等 获得都是持久态</li>
<li>瞬时状态：执行save、update、saveOrUpdate之后变成持久状态</li>
<li>持久态转托管态<br>session.close();关闭<br>session.clear();清除所有<br>session.evict(object) 清除指定的po对象</li>
</ol>
</li>
</ul>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><ul>
<li>一级缓存： session级别缓存，当获得一次会话（session），bibernate在seaaion中创建多个集合（map），用于存放操作数据的PO对象，位程序优化服务，如果之前需要相应的数据，hibernate优先从session中获取，如果有就使用，如果没有就查询数据库。当session关闭时，一级缓存销毁。<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">*证明一级缓存存在</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson3 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">User</span> <span class="keyword">user</span> = (<span class="keyword">User</span>) <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">5</span>);//执行<span class="keyword">select</span></span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">session</span>.clear();//清除所有缓存</span><br><span class="line">       <span class="keyword">session</span>.fulsh();//刷新</span><br><span class="line">       <span class="keyword">User</span> user1 = (<span class="keyword">User</span>) <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">5</span>);//不执行selecct</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>一级缓存的细节<ul>
<li>HQL的结果会进行一级缓存，SQL的结果不会添加到一级缓存<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson4 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //查询所有数据</span><br><span class="line">       //<span class="number">1.</span>HQL会对数据进行一级缓存</span><br><span class="line">       Query query = <span class="keyword">session</span>.createQuery("From User");</span><br><span class="line">       List&lt;<span class="keyword">User</span>&gt; list = query.list();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">User</span> <span class="keyword">user</span> = <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">3</span>);</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="keyword">SQL</span>不会对数据进行一级缓存</span><br><span class="line">       SQLQuery query1 = <span class="keyword">session</span>.createSQLQuery("select * from hibernate_user");</span><br><span class="line">       List&lt;<span class="keyword">User</span>&gt; list2 = query.list();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">User</span> user2 = <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">3</span>);</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(user2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="number">3.</span>Criteria会对数据进行一级缓存</span><br><span class="line">       Criteria criteria = <span class="keyword">session</span>.createCriteria(<span class="keyword">User</span>.<span class="keyword">class</span>);</span><br><span class="line">       List list1 = criteria.list();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">User</span> user3 = <span class="keyword">session</span>.<span class="keyword">get</span>(<span class="keyword">User</span>.<span class="keyword">class</span>,<span class="number">3</span>);</span><br><span class="line">       <span class="keyword">System</span>.<span class="keyword">out</span>.println(user3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //<span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">       <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="save和persist方法区别（保存数据）"><a href="#save和persist方法区别（保存数据）" class="headerlink" title="save和persist方法区别（保存数据）"></a>save和persist方法区别（保存数据）</h3></li>
</ul>
</li>
</ul>
<ol>
<li>save方法:瞬时态 转换 持久态会初始化OID</li>
</ol>
</li>
<li>执行save方法，立即触发insert语句，从数据库获得主键值（OID值）</li>
<li>执行save方法前，设置OID将忽略</li>
<li>如果执行查询，session缓存清除了，在执行save方法，将执行insert<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">public</span> <span class="keyword">class</span> Lesson5 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = util.openSession();</span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *  1. save方法:瞬时态 转换 持久态会初始化OID</span></span><br><span class="line"><span class="comment">        * 执行save方法，立即触发insert语句，从数据库获得主键值（OID值）</span></span><br><span class="line"><span class="comment">        * 执行save方法前，设置OID将忽略</span></span><br><span class="line"><span class="comment">        * 如果执行查询，session缓存清除了，在执行save方法，将执行insert</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> =  <span class="built_in">new</span> <span class="keyword">User</span>();//瞬时态</span><br><span class="line">        <span class="keyword">user</span>.setUid(<span class="number">12</span>);</span><br><span class="line">        <span class="keyword">user</span>.setUsername("黎明");</span><br><span class="line">        <span class="keyword">user</span>.setPassword("123");</span><br><span class="line">        <span class="keyword">user</span>.setBirthday(<span class="built_in">new</span> <span class="type">Date</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">session</span>.save(<span class="keyword">user</span>);//持久态</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">session</span>.clear();//<span class="keyword">user</span>托管状态</span><br><span class="line">        <span class="keyword">session</span>.save(<span class="keyword">user</span>);</span><br><span class="line">        <span class="keyword">session</span>.getTransaction().<span class="keyword">commit</span>();</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>persist方法：瞬时态 转换 持久态</li>
</ol>
<ul>
<li>persist保存的对象，再保存前，不能设置Id，否则会报错</li>
<li>save和persist都有持久化对象的作用</li>
<li>save 应为需要返回一个主键值，因此会立即执行insert语句<br>而persiet 在事务外部调用时则不会立即执行insert语句，<br>在事务内调用还是会立即执行 insert 语句</li>
</ul>
</li>
</ul>
<h3 id="表关系创建模型（一对多，多对多，一对一）"><a href="#表关系创建模型（一对多，多对多，一对一）" class="headerlink" title="表关系创建模型（一对多，多对多，一对一）"></a>表关系创建模型（一对多，多对多，一对一）</h3><ul>
<li>实体类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//主表实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id;  <span class="comment">//客户Id</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> name; <span class="comment">//客户名称</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//一对多属性描述，一个客户对应有多个订单</span></span><br><span class="line">   <span class="keyword">private</span> Set&lt;Order&gt; orders = <span class="keyword">new</span> HashSet&lt;Order&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> Set&lt;Order&gt; getOrders() &#123;</span><br><span class="line">       <span class="keyword">return</span> orders;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrders</span><span class="params">(Set&lt;Order&gt; orders)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.orders = orders;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//从表实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> &#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Integer id; <span class="comment">//订单ID，以后工作中订单Id一般用UUID字符串类型</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">String</span> name; <span class="comment">//订单名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Customer customer;<span class="comment">//订单属性只属于某个客户</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">String</span> name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Customer <span class="title">getCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> customer;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCustomer</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.customer = customer;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>映射文件 .hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主表映射文件 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"zhao.hibernate.domain.Customer"</span> <span class="attr">table</span>=<span class="string">"customer"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        描述一对多关系</span></span><br><span class="line"><span class="comment">       key中Colum写的是外键名称</span></span><br><span class="line"><span class="comment">       one-to-many 一对多，其class属性表示外键表实体类名--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"zhao.hibernate.domain.Order"</span>&gt;</span><span class="tag">&lt;/<span class="name">one-to-many</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--从表映射文件--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"zhao.hibernate.domain.Order"</span> <span class="attr">table</span>=<span class="string">"t_order"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  描述Customer的关系</span></span><br><span class="line"><span class="comment">       many-to-many:多对一</span></span><br><span class="line"><span class="comment">       class：主键的实体类</span></span><br><span class="line"><span class="comment">       coulmn:写外键--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"customer"</span> <span class="attr">class</span>=<span class="string">"zhao.hibernate.domain.Customer"</span> <span class="attr">column</span>=<span class="string">"customer_id"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>核心配置文件 hibernate.cfg.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">			com.mysql.cj.jdbc.Driver</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">			jdbc:mysql://localhost:3306/hibernate_user?serverTimezone=Asia/Shanghai</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--		配置映射文件与数据库表关系</span></span><br><span class="line"><span class="comment">			update：有表则更新，无则创建</span></span><br><span class="line"><span class="comment">			create：每次启动hibernate都创建，（注意：以前数据没得了）</span></span><br><span class="line"><span class="comment">			create-drop：每次启动hibernate都创建，执行完后删除表--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 开启二级缓存 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--		&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 设置二级缓存插件EHCache的Provider类&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;property name="hibernate.cache.region.factory_class"&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--			org.hibernate.cache.ehcache.EhCacheRegionFactory--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;/property&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--开启与当前线程绑定session功能--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库方言 此处注意MySQL版本--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">			org.hibernate.dialect.MySQL5Dialect</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"zhao/hibernate/domain/hibernate.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"zhao/hibernate/domain/Customer.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"zhao/hibernate/domain/order.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*一对多数据保存方式</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">public <span class="keyword">class</span> Lesson7 &#123;</span><br><span class="line"></span><br><span class="line">   @Test</span><br><span class="line">   public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       Session session = util.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.<span class="keyword">begin</span><span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//保存数据</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//1.创建客户对象</span></span><br><span class="line">       Customer customer = <span class="keyword">new</span> <span class="constructor">Customer()</span>;</span><br><span class="line">       customer.set<span class="constructor">Name(<span class="string">"沐沐"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2.创建两个订单</span></span><br><span class="line">       Order order1 = <span class="keyword">new</span> <span class="constructor">Order()</span>;</span><br><span class="line">       order1.set<span class="constructor">Name(<span class="string">"手机"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       Order order2 = <span class="keyword">new</span> <span class="constructor">Order()</span>;</span><br><span class="line">       order2.set<span class="constructor">Name(<span class="string">"衣服"</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.维护订单与客户的关系</span></span><br><span class="line">       order1.set<span class="constructor">Customer(<span class="params">customer</span>)</span>;</span><br><span class="line">       order2.set<span class="constructor">Customer(<span class="params">customer</span>)</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.客户拥有订单</span></span><br><span class="line">       customer.get<span class="constructor">Orders()</span>.add(order1);</span><br><span class="line">       customer.get<span class="constructor">Orders()</span>.add(order2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//5.保存</span></span><br><span class="line">       session.save(customer);<span class="comment">//保存完，客户有Id</span></span><br><span class="line">       session.save(order1);</span><br><span class="line">       session.save(order2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       session.get<span class="constructor">Transaction()</span>.commit<span class="literal">()</span>;</span><br><span class="line">       session.close<span class="literal">()</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设置外键维护关系"><a href="#设置外键维护关系" class="headerlink" title="设置外键维护关系"></a>设置外键维护关系</h3></li>
<li>修改Customer的映射文件，在set中添加inverse属性</li>
<li>inverse 是hibernate 双向关系中的基本概念。inverse的真正作用是指定出有那一方面来维护之间的关联关系。<br>当一方中指定了”inverse=false(默认)”,那么哪一方就有责任负责之间的关联关系。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- inverse:反转 true 表示为另一方来维护外键关系 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">"orders"</span> <span class="attr">inverse</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">"customer_Id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">"从表实体类全限定名名"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql笔记</title>
    <url>/2019/11/06/Mysql%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="关联mysql"><a href="#关联mysql" class="headerlink" title="关联mysql"></a>关联mysql</h3><ul>
<li><p>报错：Server returns invalid timezone. Go to ‘Advanced’ tab and set ‘serverTimezon’</p>
</li>
<li><p>时区错误，MySQL默认的时区是UTC时区，比北京时间晚8个小时。</p>
</li>
<li><p>所以要修改mysql的时长</p>
</li>
<li><p>方式一：在mysql的命令模式下，输入：</p>
<p>  set global time_zone=’+8:00’;</p>
<p>  再次连接成功</p>
</li>
<li><p>方式二：</p>
<p>spring.datasource.url=jdbc:mysql://localhost:3306/secondskill?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate框架（一）</title>
    <url>/2019/11/06/Hibernate%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="Web内容回顾"><a href="#Web内容回顾" class="headerlink" title="Web内容回顾"></a>Web内容回顾</h3><ul>
<li>javaEE 三层架构</li>
</ul>
<ol>
<li>web层 ：struts2框架，SpringMVC框架</li>
<li>service层： spring框架 </li>
<li>Dao层： Hibernate框架 MyBites框架<pre><code>对数据库进行CRUD操作</code></pre></li>
</ol>
<h3 id="MVC思想"><a href="#MVC思想" class="headerlink" title="MVC思想"></a>MVC思想</h3><ol>
<li>m：模型</li>
<li>v：视图</li>
<li>c：控制器<h3 id="Hibernate概述"><a href="#Hibernate概述" class="headerlink" title="Hibernate概述"></a>Hibernate概述</h3></li>
</ol>
<ul>
<li><p>框架：半成品项目</p>
</li>
<li><p>Hibernate框架：</p>
<ol>
<li>Dao层框架2.</li>
<li>底层是对jdbc的封装</li>
<li>开源轻量级框架<br><img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=9f95e02a03f3d7ca18fb37249376d56c/d009b3de9c82d158cb08fea58f0a19d8bc3e421f.jpg" alt="bibernate"></li>
</ol>
</li>
<li><p>ORM思想</p>
<ol>
<li>hibarnate使用orm思想对数据库进行crud操作</li>
<li>在web阶段学习的JavaBean，更正确叫法实体类</li>
<li>orm：object ，relational（关系）mapping  对象关系映射<br>让实体类和数据库表进行一一对应关系<br>让数据库表里的字段 和 实体类的属性对应<br>不需要直接操作数据库表，而操作表对应实体类对象<br>案例：<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">jdbc代码</span><br><span class="line"><span class="comment">//加载驱动</span></span><br><span class="line"><span class="keyword">class</span>.forname(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"><span class="comment">//创建链接</span></span><br><span class="line">Connection conn = <span class="module-access"><span class="module"><span class="identifier">DriverManager</span>.</span></span>get<span class="constructor">Connection(<span class="params">url</span>,<span class="params">user</span>,<span class="params">password</span>)</span>;</span><br><span class="line"><span class="comment">//对Sql语句进行预编译效果</span></span><br><span class="line">String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">PrepareStatement psmt = conn.perpare<span class="constructor">Statement(<span class="params">sql</span>)</span>;</span><br><span class="line"><span class="comment">//执行Sql语句</span></span><br><span class="line">ResultSet rs = pstm.execute<span class="constructor">Query()</span>;</span><br><span class="line"><span class="comment">//遍历结果集</span></span><br><span class="line">.....</span><br><span class="line"><span class="comment">//释放资源(关闭连接)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Hibarnate 实体类<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="symbol">user</span>()&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    pribvate String password;</span><br><span class="line">    <span class="comment">//set get 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在配置文件中实现表与实体类的一一对应<br>不需要操作表，而是表对应的实体类</li>
<li>hibarnate封装的对象session<br>//创建对象<br>User user = new User();<br>user.setUserName(“eratg”);<br>session.save(user);</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="Hibarnate入门"><a href="#Hibarnate入门" class="headerlink" title="Hibarnate入门"></a>Hibarnate入门</h3><ol>
<li><p>导包：<br>包的作用:<br>net.sf.hibernate.*<br>该包的类基本上都是接口类和异常类<br>net.sf.hibernate.cache.*<br>JCS的实现类<br>net.sf.hibernate.cfg.*<br>配置文件读取类<br>net.sf.hibernate.collection.*<br>Hibernate集合接口实现类，例如List，Set，Bag等等，Hibernate之所以要自行编写集合接口实现类是为了支持lazy loading<br>net.sf.hibernate.connection.*<br>几个数据库连接池的Provider<br>net.sf.hibernate.dialect.*<br>支持多种数据库特性，每个Dialect实现类代表一种数据库，描述了该数据库支持的数据类型和其它特点，例如是否有AutoIncrement，是否有Sequence，是否有分页sql等等<br>net.sf.hibernate. eg.*<br>Hibernate文档中用到的例子<br>net.sf.hibernate.engine.*<br>这个包的类作用比较散<br>net.sf.hibernate.expression.*<br>HQL支持的表达式<br>net.sf.hibernate.hq.*<br>HQL实现<br>net.sf.hibernate. id.*<br>ID生成器<br>net.sf.hibernate.impl.*<br>最核心的包，一些重要接口的实现类，如Session，SessionFactory，Query等<br>net.sf.hibernate.jca.*<br>JCA支持，把Session包装为支持JCA的接口实现类<br>net.sf.hibernate.jmx.*<br>JMX是用来编写App Server的管理程序的，大概是JMX部分接口的实现，使得App Server可以通过JMX接口管理Hibernate<br>net.sf.hibernate.loader.*<br>也是很核心的包，主要是生成sql语句。<br>net.sf.hibernate.lob.*<br>Blob和Clob支持<br>net.sf.hibernate.mapping.*<br>hbm文件的属性实现<br>net.sf.hibernate.metadata.*<br>PO的Meta实现<br>net.sf.hibernate.odmg.*<br>ODMG是一个ORM标准，这个包是ODMG标准的实现类<br>net.sf.hibernate.persister.*<br>核心包，实现持久对象和表之间的映射<br>net.sf.hibernate.proxy.*<br>Proxy和Lazy Loading支持<br>net.sf.hibernate. ps.*<br>该包是PreparedStatment Cache<br>net.sf.hibernate.sql.*<br>生成JDBC sql语句的包<br>net.sf.hibernate.test.*<br>测试类，你可以用junit来测试Hibernate<br>net.sf.hibernate.tool.hbm2ddl.*<br>用hbm配置文件生成DDL<br>net.sf.hibernate.transaction.*<br>Hibernate Transaction实现类<br>net.sf.hibernate.type.*<br>Hibernate中定义的持久对象的属性的数据类型<br>net.sf.hibernate.util.*<br>一些工具类，作用比较散<br>net.sf.hibernate.xml.*<br>XML数据绑定</p>
</li>
<li><p>创建实体类<br>使用hibarnate 时候，不需要自己手动创建表，hibarnate会创建表</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uid;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(<span class="keyword">int</span> uid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(<span class="keyword">String</span> username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(<span class="keyword">String</span> password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">String</span> <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"uid="</span> + uid +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置数据库表和实体类一一对应关系(映射)</p>
<ul>
<li>创建XML格式的配置文件<br>建议：在实体类所在包中创建，实体类名.hbm.xml;<br>在配置文件中引入xml约束 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibarnate-mpping PUBLC</span></span><br><span class="line"><span class="meta">   "-//Hibernate/Hibaernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">   "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="hibernate映射的配置文件XML"><a href="#hibernate映射的配置文件XML" class="headerlink" title="hibernate映射的配置文件XML"></a>hibernate映射的配置文件XML</h4><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1573040111707&di=3810b046e0a99ebe7445132675534d50&imgtype=0&src=http%3A%2F%2Faliyunzixunbucket.oss-cn-beijing.aliyuncs.com%2Fpng%2Fda0a0d956df111683450e7d4d1a805c7.png%3Fx-oss-process%3Dimage%2Fresize%2Cp_100%2Fauto-orient%2C1%2Fquality%2Cq_90%2Fformat%2Cjpg%2Fwatermark%2Cimage_eXVuY2VzaGk%3D%2Ct_100" alt="class,属性详解"></p>
<ul>
<li>hibernate.hbm.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibarnate-mpping PUBLC</span></span><br><span class="line"><span class="meta">       "-//Hibernate/Hibaernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">       "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibarnate-mpping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    配置类和表的对应</span></span><br><span class="line"><span class="comment">       name:实体类全路径</span></span><br><span class="line"><span class="comment">       table=;数据库表名称--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.zhao.Dao.User"</span> <span class="attr">table</span>=<span class="string">"t_user"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        配置实体类和表中id对应</span></span><br><span class="line"><span class="comment">           hiberna要求实体类有一个属性唯一值</span></span><br><span class="line"><span class="comment">           hibernate要求表的字段作为唯一值--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        id标签 name：实体类里面id属性名称</span></span><br><span class="line"><span class="comment">                   column：生成表字段名称--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt; !<span class="attr">--</span>            设置数据库<span class="attr">id</span>增长的策略<span class="attr">--</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- name；是实体类中属性 column：是与之对应的数据库表中字段  --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">column</span>=<span class="string">"adderss"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibarnate-mpping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>创建Hibernate的核心配置文件<br>注意：核心XML文件，其文件名和位置是固定的；<br>位置：必须src下<br>名称: 必须hibernate.cfg.xml</li>
</ul>
<ol>
<li>引入dtd约束<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>hibernate操作过程中，只会加载核心配置文件，其他配置文件不会加载</li>
</ol>
<ul>
<li>配置数据库信息</li>
<li>配置hibernate信息</li>
<li>映射文件放入核心文件</li>
</ul>
</li>
</ol>
</li>
</ul>
<ul>
<li>hibernate.cfg.xml配置文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">	"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">	"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库JDBC驱动 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.driver_class"</span>&gt;</span></span><br><span class="line">			com.mysql.cj.jdbc.Driver</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库连接URL --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.url"</span>&gt;</span></span><br><span class="line">			jdbc:mysql://localhost:3306/hibernate_user</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库用户名 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库密码 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.password"</span>&gt;</span>zhao1314520<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 输出运行时生成的SQL语句 --&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--显示SQL语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--是否格式化sql语句--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--	是否自动提交事务	--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.connection.autocommit"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 开启二级缓存 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;property name="hibernate.cache.use_second_level_cache"&gt;true&lt;/property&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&amp;lt;!&amp;ndash; 设置二级缓存插件EHCache的Provider类&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;property name="hibernate.cache.region.factory_class"&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--			org.hibernate.cache.ehcache.EhCacheRegionFactory--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--		&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据库方言 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.dialect"</span>&gt;</span></span><br><span class="line">			org.hibernate.dialect.MySQLDialect</span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 列出所有的映射文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"com/zhao/hibernate/domain/hibernate.hbm.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SessionFactory工厂"><a href="#SessionFactory工厂" class="headerlink" title="SessionFactory工厂"></a>SessionFactory工厂</h3><ul>
<li>sessionFactory 工厂用于管理所有的所有的session</li>
<li>获得SessionFactory方式：config.bulidSessionFactory();</li>
<li>sessionFactory线程安全：多个线程同时访问数据时，不会出现线程并发问题<h3 id="Session会话获取"><a href="#Session会话获取" class="headerlink" title="Session会话获取"></a>Session会话获取</h3></li>
<li>sessionFarctory提供两个方法获取两个方法获取session</li>
<li>factory.openSession() 获取一个全新的session</li>
<li>factory.getCurrentSession() 获取一个与当前线程绑定的session</li>
</ul>
<ul>
<li>注意：<ul>
<li>要使用getCurrentSession()必须在hibernate.cfg.hbm.xml中配置<br><property name="hibernate.current_session_context_class">thread</property><ul>
<li>hibernate支持，将创建的session绑定到本地线程池中，底层使用ThreadLocal，<br>在线程之间共享session</li>
<li>如果提交或者回滚事务，底层自动关闭事务  所以session不需要自动动关闭</li>
</ul>
</li>
</ul>
</li>
<li>测试类<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">//保存用户数据</span><br><span class="line">        //<span class="number">1.</span>获取核心配置文件，默认加载src的hiber.cfg.xml文件</span><br><span class="line">        <span class="keyword">Configuration</span> <span class="keyword">configuration</span> = <span class="built_in">new</span> <span class="keyword">Configuration</span>().configure();</span><br><span class="line">        //代码方式加载映射文件</span><br><span class="line">        //方式一</span><br><span class="line">        //<span class="keyword">configuration</span>.addResource("com/zhao/hibernate/domain/hibernate.hbm.xml");</span><br><span class="line">        //方式二</span><br><span class="line">        //<span class="keyword">configuration</span>.addClass(<span class="keyword">User</span>.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">        //<span class="number">2.</span>创建会话工厂</span><br><span class="line">        SessionFactory factory = <span class="keyword">configuration</span>.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        //<span class="number">3.</span>创建会话【会话相当于连接Coonnection】</span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = factory.openSession();</span><br><span class="line"></span><br><span class="line">        //<span class="number">4.</span> 开启事务</span><br><span class="line">        <span class="keyword">Transaction</span> <span class="keyword">transaction</span> = <span class="keyword">session</span>.getTransaction();</span><br><span class="line">        <span class="keyword">transaction</span>.<span class="keyword">begin</span>();</span><br><span class="line"></span><br><span class="line">        //<span class="number">5.</span>保存【直接把对象保存到数据库】</span><br><span class="line">        <span class="keyword">User</span> <span class="keyword">user</span> = <span class="built_in">new</span> <span class="keyword">User</span>();</span><br><span class="line">        <span class="keyword">user</span>.setUsername("阿尔提尔");</span><br><span class="line">        <span class="keyword">user</span>.setPassword("123");</span><br><span class="line">        <span class="keyword">session</span>.save(<span class="keyword">user</span>);</span><br><span class="line"></span><br><span class="line">        //<span class="number">6.</span>关闭会话</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">        //<span class="number">7.</span>关闭工厂，释放资源</span><br><span class="line">        factory.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加载映射文件"><a href="#加载映射文件" class="headerlink" title="加载映射文件"></a>加载映射文件</h3>  代码方式加载映射文件<ul>
<li>方式一<br>//configuration.addResource(“com/zhao/hibernate/domain/hibernate.hbm.xml”);</li>
<li>方式二<br>//configuration.addClass(User.class);</li>
<li>方式三：配置<br><mapping name="全限定名"></mapping></li>
</ul>
</li>
</ul>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ol>
<li><p>session.save()  保存   </p>
</li>
<li><p>session.get(user.class,4)|session.load(user.class,5);通过Id查找<br> 区别：</p>
<ul>
<li>无数据时get方法显示为空，而load报错</li>
<li>get方法直接加载数据</li>
<li>load方法设计是懒加载，用到的时候才会加载数据</li>
<li>load方法返回的数据是一个代理</li>
</ul>
</li>
<li><p>delete，删除数据两种方式</p>
<ul>
<li><p>第一种方式：先获取要删除的对象，然后在调用delete方法<br>   User user =(User)session.get(User.class,5);<br>   session.delete(user);</p>
</li>
<li><p>第二种方式：创建一个user对象，设置Id，然后在调用delete方法；<br>   User user = new User();<br>   user.setId(8);<br>   session.delete(user);</p>
</li>
</ul>
</li>
</ol>
<ul>
<li>事务：<br>  开启事务：session.getTransaction().begin();<br>  提交事务：session.getTransaction().commit();</li>
</ul>
<ol start="4">
<li>update 更新数据<ul>
<li>获取数据，调用set方法，事务提交<br>User user = (User)session.get(User.class,5);<br>user.setUsername(“哒哒”);<br>session.Update(user);<br>//session.saveOrUpdate(user);判断user有没有id，有则更新数据，无则插入数据<br>注意：插入数据事物自动提交</li>
</ul>
</li>
</ol>
<h3 id="Query对象（分页查询）"><a href="#Query对象（分页查询）" class="headerlink" title="Query对象（分页查询）"></a>Query对象（分页查询）</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Lesson1 &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">Test</span></span><br><span class="line">    public void <span class="keyword">save</span>()&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存用户数据</span></span><br><span class="line">        <span class="comment">//1.获取核心配置文件，默认加载src的hiber.cfg.xml文件</span></span><br><span class="line">        Configuration configuration = new Configuration().configure();</span><br><span class="line">        <span class="comment">//代码方式加载映射文件</span></span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        <span class="comment">//configuration.addResource("com/zhao/hibernate/domain/hibernate.hbm.xml");</span></span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line">        <span class="comment">//configuration.addClass(User.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建会话工厂</span></span><br><span class="line">        SessionFactory factory = configuration.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话【会话相当于连接Coonnection】</span></span><br><span class="line">        Session session = factory.openSession();</span><br><span class="line">        <span class="comment">//查询对象</span></span><br><span class="line">        <span class="keyword">Query</span>&lt;User&gt;  <span class="keyword">query</span> = session.createQuery(<span class="string">"from User"</span>);</span><br><span class="line">                ;</span><br><span class="line">        <span class="comment">//分页查询limit?,?</span></span><br><span class="line">        <span class="keyword">query</span>.setFirstResult(0); <span class="comment">//起始位置</span></span><br><span class="line">        <span class="keyword">query</span>.setMaxResults(3);  <span class="comment">//查询条数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//返回一行数据  query.uniqueResult();</span></span><br><span class="line">        <span class="comment">//返回多行数据</span></span><br><span class="line">        <span class="keyword">List</span> <span class="keyword">list</span> = <span class="keyword">query</span>.<span class="keyword">list</span>();</span><br><span class="line">        <span class="keyword">for</span> (Object  obj : <span class="keyword">list</span>)&#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭会话</span></span><br><span class="line">        session.<span class="keyword">close</span>();</span><br><span class="line">        <span class="comment">//7.关闭工厂，释放资源</span></span><br><span class="line">        factory.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Criteria对象"><a href="#Criteria对象" class="headerlink" title="Criteria对象"></a>Criteria对象</h3><ul>
<li>hibernate提供的纯面向对象语言，提供直接使用PO对象进行操作<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> Lesson3 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void save<span class="literal">()</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存用户数据</span></span><br><span class="line">        <span class="comment">//1.获取核心配置文件，默认加载src的hiber.cfg.xml文件</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> <span class="constructor">Configuration()</span>.configure<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">//代码方式加载映射文件</span></span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        <span class="comment">//configuration.addResource("com/zhao/hibernate/domain/hibernate.hbm.xml");</span></span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line">        <span class="comment">//configuration.addClass(User.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建会话工厂</span></span><br><span class="line">        SessionFactory factory = configuration.build<span class="constructor">SessionFactory()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话【会话相当于连接Coonnection】</span></span><br><span class="line">        Session session = factory.<span class="keyword">open</span><span class="constructor">Session()</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Criteria 查询对象</span></span><br><span class="line">        Criteria criteria = session.create<span class="constructor">Criteria(User.<span class="params">class</span>)</span>;</span><br><span class="line">        <span class="comment">//eq=</span></span><br><span class="line">        criteria.add(<span class="module-access"><span class="module"><span class="identifier">Restrictions</span>.</span></span>eq(<span class="string">"username"</span>,<span class="string">"阿尔提尔"</span>));</span><br><span class="line">        criteria.add(<span class="module-access"><span class="module"><span class="identifier">Restrictions</span>.</span></span>eq(<span class="string">"password"</span>,<span class="string">"123"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(criteria.<span class="built_in">list</span><span class="literal">()</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 【gt &gt;   ge &gt;= 】【lt &lt;   le &lt;= 】</span></span><br><span class="line">        criteria.add(<span class="module-access"><span class="module"><span class="identifier">Restrictions</span>.</span></span>gt(<span class="string">"uid"</span>,<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模糊查询</span></span><br><span class="line">        criteria.add(<span class="module-access"><span class="module"><span class="identifier">Restrictions</span>.</span></span>like(<span class="string">"username"</span>,<span class="string">"%提%"</span>));</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(criteria.<span class="built_in">list</span><span class="literal">()</span>);</span><br><span class="line">        <span class="comment">//6.关闭会话</span></span><br><span class="line">        session.close<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">//7.关闭工厂，释放资源</span></span><br><span class="line">        factory.close<span class="literal">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SQLQuery-原生sql语句"><a href="#SQLQuery-原生sql语句" class="headerlink" title="SQLQuery 原生sql语句"></a>SQLQuery 原生sql语句</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Lesson4 &#123;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> save()&#123;</span><br><span class="line"></span><br><span class="line">//保存用户数据</span><br><span class="line">        //<span class="number">1.</span>获取核心配置文件，默认加载src的hiber.cfg.xml文件</span><br><span class="line">        <span class="keyword">Configuration</span> <span class="keyword">configuration</span> = <span class="built_in">new</span> <span class="keyword">Configuration</span>().configure();</span><br><span class="line">    </span><br><span class="line">        //<span class="number">2.</span>创建会话工厂</span><br><span class="line">        SessionFactory factory = <span class="keyword">configuration</span>.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        //<span class="number">3.</span>创建会话【会话相当于连接Coonnection】</span><br><span class="line">        <span class="keyword">Session</span> <span class="keyword">session</span> = factory.openSession();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //创建Sqlquery对象</span><br><span class="line">        SQLQuery query = <span class="keyword">session</span>.createSQLQuery("select * from user ");</span><br><span class="line">        List&lt;<span class="keyword">Object</span>[]&gt; list = query.list();</span><br><span class="line">        // 此处返回结果为集合   多维数组</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">Object</span>[] obj : list)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">Object</span> o : obj)&#123;</span><br><span class="line">                <span class="keyword">System</span>.<span class="keyword">out</span>.println(o);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">System</span>.<span class="keyword">out</span>.println("-----------------");</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //<span class="number">6.</span>关闭会话</span><br><span class="line">        <span class="keyword">session</span>.<span class="keyword">close</span>();</span><br><span class="line">        //<span class="number">7.</span>关闭工厂，释放资源</span><br><span class="line">        factory.<span class="keyword">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="提取工具类"><a href="#提取工具类" class="headerlink" title="提取工具类"></a>提取工具类</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">util</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory factory;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//1.获取核心配置文件对象</span></span><br><span class="line">        Configuration configuration = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        <span class="comment">//2.创建会话工厂</span></span><br><span class="line">        factory = configuration.buildSessionFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听程序关闭</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread()&#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(<span class="string">"程序关闭。。。！"</span>);</span><br><span class="line">                <span class="comment">//关闭会话工厂</span></span><br><span class="line">                factory.<span class="built_in">close</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">openSession</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回会话工厂获取到的session对象</span></span><br><span class="line">        <span class="keyword">return</span> factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getCurrentSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory.getCurrentSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>测试类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lesson5</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存用户数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.创建会话【会话相当于连接Coonnection】</span></span><br><span class="line"></span><br><span class="line">        Session session = util.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Sqlquery对象</span></span><br><span class="line">        SQLQuery query = session.createSQLQuery(<span class="string">"select * from user "</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Object[]&gt; <span class="built_in">list</span> = query.<span class="built_in">list</span>();</span><br><span class="line">        <span class="comment">// 此处返回结果为集合   多维数组</span></span><br><span class="line">        <span class="keyword">for</span> (Object[] obj : <span class="built_in">list</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Object o : obj)&#123;</span><br><span class="line">                System.out.<span class="built_in">println</span>(o);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">"-----------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭会话</span></span><br><span class="line">        session.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Hibernate框架</tag>
      </tags>
  </entry>
  <entry>
    <title>spring框架事务管理(三)</title>
    <url>/2019/11/04/spring%E6%A1%86%E6%9E%B6%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86(%E4%B8%89)/</url>
    <content><![CDATA[<h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><ul>
<li>事务：一组业务操作，要不全部成功，要不全部失败</li>
<li>特性：ACID<br>  原子性：整体<br>  一致性：完成<br>  隔离性：并发<br>  持久性：结果</li>
<li>隔离问题：<br>  脏读：一个事务读到另一个事务没有提交的数据<br>  不可重复读：一个事务读到另一个事务已提交的数据（update）<br>  虚读（幻读）：一个事务读到另一个事务已提交的数据（insert）</li>
<li>隔离级别：<br>  read uncommitted:读未提交；存在3个问题<br>  read committed:  读已提交；解决，脏读：存在2个问题<br>  repeatable read:  可重复读；解决，脏读，不可重复读，存在一个问题<br>  serializable：    串行化；都解决，单事务。</li>
<li>MySQL事务操作</li>
</ul>
<ol>
<li>获取连接</li>
<li>开启事务 conn.setAutoCommit(false);</li>
<li>提交事务 conn.committed();</li>
<li>catch()中回滚事务 conn.roolback();</li>
</ol>
<ul>
<li>Savepoint 保存点，记录用户操作的当前位置，之后可以回滚到指定的位置</li>
</ul>
<h3 id="spring事务管理（transaction）"><a href="#spring事务管理（transaction）" class="headerlink" title="spring事务管理（transaction）"></a>spring事务管理（transaction）</h3><p>导包：spring-tx<br>三个顶级接口</p>
<ul>
<li>PlatformTransactionManager    平台事务管理器   spring要管理事务，必须使用事务管理器<br> 进行事务配置时，必须配置事务管理器</li>
<li>TransactionDefinition         事务详情（事务定义，事务属性），spring用于确定事物具体详情<br> 例如：隔离级别，是否只读（readonly），超时时间（timeout）<br> 进行事务配置时，必须配置事务详情，spring将配置项封装到给对象的实例。</li>
<li>TransactionStatus             事务状态，spring用于记录当前的事务运行状态，例如:是否有保存点，事务是否完成<br> spring底层根据状态进行相应操作</li>
</ul>
<h4 id="详解："><a href="#详解：" class="headerlink" title="详解："></a>详解：</h4><ul>
<li>PlatformTransactionManager 平台事务管理器<br>导包：spring-jdbc（jdbc开发） ，spring—orm（整合Hibernate）</li>
</ul>
<ol>
<li>常见事务管理器(及PlatformTransactionManager的实现类)<br>DatesourceTransactionManager    jdbc包下其开发时的事务管理器，采用JdbcTemplate<br>HibernateTransactionManager   Hibernate包下其开发时的事务管理器，整合hibernate<ul>
<li>api详解<br>TransactionStatus getTransaction(TransationDefinition definition),<br>事务管理器 通过’事务详情’，获得’事务状态’，从而管理事务<br>void commit(TransactionStatus status)    根据状态提交<br>void rollback(TransactionStatus status)  根据状态回滚</li>
</ul>
</li>
</ol>
<ul>
<li><p>TransactionDefinition  事务详情<br>  String getName()  配置事务详情名称，一般方法名称。例如：save add<br>  boolean isReadOnly() 是否只读(增删改 读写；查询：只读)<br>  int  getTime()  超时时间<br>  int  Isolationlevel() 隔离级别<br>  int  getPropagationBehavior()  传播行为</p>
</li>
<li><p>传播行为：在两个业务之间如何共享事务<br>7种常量<br>PROPAGATLON_REQUIRED , required 必须<br>  支持当前事务，A如果创建事务，B必须使用该事务<br>  如果A没有事务，B将创建一个新事务<br>PROPAGATLON_SUPPORTS ， supports 支持<br>  支持当前事务，A如果创建事务，B必须使用该事务<br>  如果A没有事务，B将已非事务<br>PROPAGATLON_MANDATORY ，mandatory 强制<br>  支持当前事务，A如果创建事务，B必须使用该事务<br>  如果A没有事务，B将抛出异常<br>PROPAGATLON_REQUIRES_NEW  requires_new 必须新的<br>  如果A有事务，将A事务挂提，B将创建一个新的事务<br>  如果A没有事务，B将创建一个新的事务<br>PROPAGATLON_NOT_SUPPORTED , not_supported  不支持<br>  如果A有事务，将A事务挂提，B将已非事务执行<br>  如果A没有事务，B将已非事务执行<br>PROPAGATLON_NEVER ， never  从不<br>  如果A有事务，B将抛出异常<br>  如果A没有事务，B将已非事务执行<br>PROPAGATLON_NESTED ，nested 嵌套<br>  A和B底层采用保存点机制，形成嵌套事务</p>
</li>
<li><p>TransactionStatus      事务状态</p>
<h3 id="事务案例"><a href="#事务案例" class="headerlink" title="事务案例"></a>事务案例</h3></li>
</ul>
<ol>
<li>转账1<br>导包：![图片alt](图片地址 ‘’图片title’’)<br><img src="E:/VScode-data/1.png" alt="jar"></li>
</ol>
<ul>
<li>Dao层<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> AccountDaoImpl extends JdbcDaoSupport implements AccountDao &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">out</span>(String ounter, <span class="type">Integer</span> <span class="type">money</span>) &#123;</span><br><span class="line">        getJdbcTemplate().<span class="keyword">update</span>("update account set money = money - ? where username = ?",<span class="type">money</span>,ounter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">in</span>(String <span class="keyword">inner</span>, <span class="type">Integer</span> <span class="type">money</span>) &#123;</span><br><span class="line">        getJdbcTemplate().<span class="keyword">update</span>("update account set money = money + ? where username = ?",<span class="type">money</span>,<span class="keyword">inner</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Service层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * service层调用Dao</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * spring注入提供set方法</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transation</span><span class="params">(String ounter, String inner, Integer money)</span> </span>&#123;</span><br><span class="line">        accountDao.out(ounter,money);</span><br><span class="line">        accountDao.in(inner,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>XML配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    datasource数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Dirver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Dao.Impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--service层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Service.Impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApp</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line">        AccountServiceImpl accountService = applicationContext.getBean(<span class="string">"accountService"</span>, AccountServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        accountService.transation(<span class="string">"jack"</span>,<span class="string">"ross"</span> ,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>手动管理事务（了解）</li>
</ol>
<ul>
<li>spring底层使用 TransactuinTemplate 事务模板进行操作</li>
<li>操作：<pre><code>1. service 需要获得 TransactionTemplate 事务模板
2. spring 配置模板，并注入给service
3. 模板需要注入事务管理器
4. 配置事务管理器 DateSourceTranctionManager 需要注入DataSource数据源</code></pre></li>
</ul>
<ul>
<li>修改Service<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * service层调用Dao</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * spring注入提供set方法</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 创建事务模板</span></span><br><span class="line"><span class="comment">    * spring注入</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * setter方法注入模板</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTransactionTemplate</span><span class="params">(TransactionTemplate transactionTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transactionTemplate = transactionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transation</span><span class="params">(<span class="keyword">final</span> String ounter, <span class="keyword">final</span> String inner, <span class="keyword">final</span> Integer money)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus transactionStatus)</span> </span>&#123;</span><br><span class="line">                accountDao.out(ounter,money);</span><br><span class="line">                accountDao.in(inner,money);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>修改XML配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    datasource数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Dirver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Dao.Impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--service层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Service.Impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 修改（添加）的是以下代码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionTemolate"</span> <span class="attr">ref</span>=<span class="string">"transactionTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    创建模板--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"txmanager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    配置事务管理器 管理需要事务，事务从Connection获得，连接从连接池DataSource获得--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txmanager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="工厂Bean-生成代理：半自动"><a href="#工厂Bean-生成代理：半自动" class="headerlink" title="工厂Bean 生成代理：半自动"></a>工厂Bean 生成代理：半自动</h3><ul>
<li>Spring提供 管理事务的代理工厂bean： TransactionProxyFactoryBean<ol>
<li>getBean() 获得代理对象</li>
<li>Spring 配置一个代理</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>修改XML配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    datasource数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Dirver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDao"</span> <span class="attr">class</span>=<span class="string">"com.zhao3.Dao.Impl.AccountDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--service层--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zhao3.Service.Impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"accountDao"</span> <span class="attr">ref</span>=<span class="string">"accountDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    service代理对象</span></span><br><span class="line"><span class="comment">        1.proxyInterfaces接口</span></span><br><span class="line"><span class="comment">        2.target目标类</span></span><br><span class="line"><span class="comment">        3.transactionManager 事务管理器</span></span><br><span class="line"><span class="comment">        4.transactionAttributes 事务属性（事务详情）</span></span><br><span class="line"><span class="comment">        5.prop key:确定哪些方法使用当前事务配置</span></span><br><span class="line"><span class="comment">        6.&lt;prop&gt;标签体中（prop text）：配置事务详情</span></span><br><span class="line"><span class="comment">            格式：PROPAGATION,传播行为</span></span><br><span class="line"><span class="comment">             ISOLATION,隔离级别</span></span><br><span class="line"><span class="comment">             readonly,是否只读</span></span><br><span class="line"><span class="comment">             -Exception,异常回滚</span></span><br><span class="line"><span class="comment">             +Exception，异常提交</span></span><br><span class="line"><span class="comment">         eg:数字1和-1</span></span><br><span class="line"><span class="comment">         &lt;prop key="transation"&gt;PROPAGATION_REQUIRED,ISOLATION_AEFAULT&lt;/prop&gt; 数字1和-1也可默认传播行为和隔离级别</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"proxyAccountService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.interceptor.TransactionProxyFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyInterfaces"</span> <span class="attr">value</span>=<span class="string">"com.zhao3.Service.AccountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"accountService"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"txManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionAttributes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"transation"</span>&gt;</span>PROPAGATION_REQUIRED,ISOLATION_DEFAULT<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"> ``` </span><br><span class="line">- 测试类</span><br></pre></td></tr></table></figure>
<p>public class TestApp {</p>
<p>  @Test<br>  public void save(){</p>
<pre><code>ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao3/applicationContext.xml&quot;);

AccountService accountService = applicationContext.getBean(&quot;proxyAccountService&quot;, AccountService.class);

accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);</code></pre><p>  }<br>}</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">* 注意：</span><br><span class="line">    有异常：org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named <span class="string">'proxyAccountService'</span> is expected <span class="keyword">to</span> be of<span class="built_in"> type </span><span class="string">'com.zhao3.Service.Impl.AccountServiceImpl'</span> but was actually of<span class="built_in"> type </span><span class="string">'com.sun.proxy.$Proxy9'</span></span><br><span class="line">    解决方法：</span><br><span class="line">    AccountService accountService = applicationContext.getBean(<span class="string">"proxyAccountService"</span>, AccountService.class);</span><br><span class="line">    此处要用接口，用实现类会报上面异常</span><br><span class="line"></span><br><span class="line"><span class="comment">### AOP配置基于XML</span></span><br><span class="line">* spring XML配置aop 自动生成代理，进行事务管理</span><br><span class="line">1. 配置事务管理器</span><br><span class="line">2. 配置事务详情</span><br><span class="line">3. 配置aop</span><br><span class="line">* XML配置文件</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p>&lt;beans xmlns=”<a href="http://www.springframework.org/schema/beans&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/beans&quot;</a></p>
<pre><code>xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</code></pre></li>
</ul>
<!--    datasource数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Dirver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    Dao-->
<pre><code>&lt;bean id=&quot;accountDao&quot; class=&quot;com.zhao3.Dao.Impl.AccountDaoImpl&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--service层-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;com.zhao3.Service.Impl.AccountServiceImpl&quot;&gt;
    &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    service代理对象
        1.proxyInterfaces接口
        2.target目标类
        3.transactionManager 事务管理器
        4.transactionAttributes 事务属性（事务详情）
        5.prop key:确定哪些方法使用当前事务配置
        6.<prop>标签体中（prop text）：配置事务详情
            格式：PROPAGATION,传播行为
             ISOLATION,隔离级别
             readonly,是否只读
             -Exception,异常回滚
             +Exception，异常提交
         eg:数字1和-1
         <prop key="transation">PROPAGATION_REQUIRED,ISOLATION_AEFAULT</prop> 数字1和-1也可默认传播行为和隔离级别
        -->
<pre><code>&lt;bean id=&quot;proxyAccountService&quot; class=&quot;org.springframework.transaction.interceptor.TransactionProxyFactoryBean&quot;&gt;
    &lt;property name=&quot;proxyInterfaces&quot; value=&quot;com.zhao3.Service.AccountService&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;target&quot; ref=&quot;accountService&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;transactionManager&quot; ref=&quot;txManager&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;transactionAttributes&quot;&gt;
        &lt;props&gt;
            &lt;prop key=&quot;transation&quot;&gt;PROPAGATION_REQUIRED,ISOLATION_DEFAULT&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    事务管理器-->
<pre><code>&lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre></beans>
 <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>测试类</span><br></pre></td></tr></table></figure>
public class TestApp {

<pre><code>@Test
public void save(){

    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao3/applicationContext.xml&quot;);

    AccountService accountService = applicationContext.getBean(&quot;proxyAccountService&quot;, AccountService.class);

    accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);
}</code></pre><p>}<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">### AOP配置基于注解</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>配置事务管理器，并将事务管理器交予spring</span><br><span class="line"><span class="bullet">* </span>在目标类或目标方法添加注解即可 @Transactional</span><br><span class="line"><span class="bullet">* </span>XML配置</span><br></pre></td></tr></table></figure><br><?xml version="1.0" encoding="UTF-8"?><br><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
"></p>
 <!--    datasource数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Dirver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/transation?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--    Dao-->
<pre><code>&lt;bean id=&quot;accountDao&quot; class=&quot;com.zhao4.Dao.Impl.AccountDaoImpl&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--service层-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;com.zhao4.Service.Impl.AccountServiceImpl&quot;&gt;
    &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    事务管理
        1. 事务管理器
        -->
<pre><code>&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--将事务管理器交予Spring
    transaction-manager="transactionManager" 配置事务管理器
    proxy-target-class="false" 值为true表示底层强制使用cglib代理
    -->
<pre><code>&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot;&gt;&lt;/tx:annotation-driven&gt;</code></pre></beans>
 <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>service层</span><br></pre></td></tr></table></figure>
 @Transactional
 public class AccountServiceImpl implements AccountService {
    /*
    * service层调用Dao
    * */
    private AccountDao accountDao;
    /*
    * spring注入提供set方法
    * */
    public void setAccountDao(AccountDao accountDao) {
        this.accountDao = accountDao;
    }

<pre><code>@Override
public void transation(String ounter, String inner, Integer money) {
    accountDao.out(ounter,money);
    accountDao.in(inner,money);
}</code></pre><p> }<br>  <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>注解事务详情配置</span><br></pre></td></tr></table></figure><br>    @Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT )<br> <figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">### 整合Junit</span><br><span class="line"><span class="number">1</span>. 导包：spring-test</span><br><span class="line"><span class="number">2</span>. 让Junit通知Spring加载配置文件 </span><br><span class="line">   加注解:</span><br><span class="line">   <span class="meta">@RunWith(SpringIunit4ClassRunner.class)</span></span><br><span class="line">   <span class="meta">@ContextConfiguration(locations=<span class="meta-string">"classpath:applicationContext.xml"</span>)</span></span><br><span class="line">   <span class="meta">@Autowried</span> <span class="comment">//与junit整合，不需要在spring Xml中配置扫描</span></span><br><span class="line"><span class="number">3</span>. 让 spring容器自动注入</span><br><span class="line">* 案例：</span><br></pre></td></tr></table></figure><br> @RunWith(SpringJUnit4ClassRunner.class)<br> @ContextConfiguration(locations = “classpath:applicationContext.xml”)<br> public class TestApp {</p>
<pre><code>@Autowired //与Junit整合，不需要Spring xml 配置扫描
private AccountService accountService;

@Test
public void save(){</code></pre><p> //        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(“com/zhao4/applicationContext.xml”);<br> //<br> //        AccountService accountService = applicationContext.getBean(“accountService”, AccountService.class);</p>
<pre><code>    accountService.transation(&quot;jack&quot;,&quot;ross&quot; ,1000);
}</code></pre><p> }<br> <figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"> <span class="comment">### 整合Web</span></span><br><span class="line"> 导入jar包：spring-web</span><br><span class="line"> <span class="number">1</span>. tomcat启动加载配置文件</span><br><span class="line">    servlet  init(ServletConfig)  <span class="tag">&lt;load-on-start&gt;</span><span class="number">2</span></span><br><span class="line">    filter    init(FilterConfig)  web.<span class="keyword">xml</span> <span class="title">注册过滤器自动调用初始化</span></span><br><span class="line"><span class="title">    listener</span>(监听器)  ServletContextListener  ServletContext对象的监听【Spring】</span><br><span class="line">    Spring 提供监听器 ContextLoaderListener   web.<span class="keyword">xml</span>  <span class="title">&lt;listener</span>&gt;<span class="tag">&lt;listener-class&gt;</span>....  </span><br><span class="line">        如果只配置监听器，默认加载xml位置，WEB<span class="literal">-INF</span>/applicationContext.xml</span><br><span class="line"> <span class="number">2</span>. 确定配置文件，通过系统初始化参数</span><br><span class="line">    servletContext 初始化参数 web.<span class="keyword">xml</span> <span class="title"></span></span><br><span class="line"><span class="title">    &lt;context-param</span>&gt;</span><br><span class="line">        <span class="tag">&lt;param-name&gt;</span>contextConfigLocation</span><br><span class="line">        <span class="tag">&lt;param-value&gt;</span>classpath:applicationContext.xml</span><br><span class="line">* web.xml</span><br></pre></td></tr></table></figure><br> <?xml version="1.0" encoding="UTF-8"?><br> <web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0"></p>
 <!--    确定配置文件的位置-->
<pre><code>&lt;context-param&gt;
    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;
&lt;/context-param&gt;</code></pre> <!--    配置Spring的监听器 用来加载Xml配置-->
<pre><code>&lt;listener&gt;
    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;</code></pre> </web-app>
  ```
* 从ServletContext作用域 获得spring容器（了解）
]]></content>
  </entry>
  <entry>
    <title>Sprig框架AOP(二)</title>
    <url>/2019/11/04/Sprig%E6%A1%86%E6%9E%B6AOP(%E4%BA%8C)/</url>
    <content><![CDATA[<h3 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h3><ol>
<li>traget :目标类，需要被代理的类 eg：UserService</li>
<li>Jionpoint(连接点) ：指那些可能被拦截的方法 eg：所有方法</li>
<li>pointCut：切入点，已经被增强的连接点 eg：addUser（）</li>
<li>advice：通知增强，增强的代码 eg：after（）</li>
<li>Weaving（织入）:是指把增强的advice应用到目标对象，target来创建新的对象proxy的过程</li>
<li>proxy：代理</li>
<li>Aspect（切面）： 是切入点和通知advice的结合</li>
</ol>
<h3 id="手动方式："><a href="#手动方式：" class="headerlink" title="手动方式："></a>手动方式：</h3><ul>
<li>JDK动态代理 对“装饰者”设计模式简化，使用前提，必须有接口</li>
</ul>
<ol>
<li>目标类：接口 + 实现类</li>
<li>切面类：用于存通知 myAspect</li>
<li>工厂类：编写工厂生成代理</li>
<li>测试</li>
</ol>
<ul>
<li>目标类<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>切面类<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Myaspect &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">before</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("前方法");</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">after</span>()&#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("后方法");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>工厂类<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">UserService <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类必须加final</span></span><br><span class="line">        <span class="comment">//目标类</span></span><br><span class="line">        <span class="keyword">final</span> UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">//切面类</span></span><br><span class="line">        <span class="keyword">final</span> Myaspect myaspect = <span class="keyword">new</span> Myaspect();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *生成代理类</span></span><br><span class="line"><span class="comment">        *将目标类（切入点）和切面类（通知）结合 --》切面</span></span><br><span class="line"><span class="comment">        *  Proxy.newProxyInstance()</span></span><br><span class="line"><span class="comment">        * 参数1：loader 类加载器 动态代理类，运行时加载，任何类都需要类加载器将其加载到内存</span></span><br><span class="line"><span class="comment">        *       一般情况：当前类.class.getClassLoader();</span></span><br><span class="line"><span class="comment">        *          目标类实例.getClass().getClassloader();</span></span><br><span class="line"><span class="comment">        *  参数2：Class&lt;?&gt;(Class类型的数组)interfaces 代理类需要实现的所有接口</span></span><br><span class="line"><span class="comment">        *       方式一：目标实例.getClass().getInterfaces(); 注意：只能获得自己接口，不能获得父元素的接口；</span></span><br><span class="line"><span class="comment">        *       方式二：new Class[]&#123;userService.class&#125;;</span></span><br><span class="line"><span class="comment">        *       例如：jdbc 驱动 DriverManager  获得接口Connection</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 参数3：InvocationHandler  处理类，接口，必须进行实现类，一般采用匿名内部类</span></span><br><span class="line"><span class="comment">        *       提供invoke方法，代理类的每一个方法执行时，都将调用一次invoke</span></span><br><span class="line"><span class="comment">        *           参数1：Object proxy 代理对象</span></span><br><span class="line"><span class="comment">        *           参数2：method method  代理对象当前执行方法的描述方法（反射）</span></span><br><span class="line"><span class="comment">        *                   执行方法名：method.getName();</span></span><br><span class="line"><span class="comment">        *                   执行方法：method.invoke(对象实际参数);</span></span><br><span class="line"><span class="comment">        *           参数3：Object【】 args：方法的实际参数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        UserService proxService = (UserService) Proxy.newProxyInstance(MyBeanFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), <span class="title">userService</span>.<span class="title">getClass</span>().<span class="title">getInterfaces</span>(), <span class="title">new</span> <span class="title">InvocationHandler</span>() </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//前方法</span></span><br><span class="line">                myaspect.<span class="keyword">before</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//执行目标类方法</span></span><br><span class="line">                Object obj = method.invoke(userService,args);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//后方法</span></span><br><span class="line"></span><br><span class="line">                myaspect.<span class="keyword">after</span>();</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> proxService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDK</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserService userService = MyBeanFactory.createService();</span><br><span class="line">        userService.addUser();</span><br><span class="line">        userService.deleteUser();</span><br><span class="line">        userService.updateUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="cglib字节码增强"><a href="#cglib字节码增强" class="headerlink" title="cglib字节码增强"></a>cglib字节码增强</h3><ul>
<li>没有接口，只有实现类</li>
<li>采用字节码增强框架 cglib 运行原理：在运行时创建目标类的子类，从而对目标类进行增强</li>
<li>导jar包<br>自己导jar包【了解】<br>核心：hibernate lib\bytecord\cglib….jar<br>依赖：struts2 lib\asm…jar<br>spring 的core.jar中已经整合了以上两个内容</li>
</ul>
</li>
</ul>
<ol>
<li><p>目标类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"添加"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"更新"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"删除"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>切面类</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Myaspect &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">before</span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("前方法");</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">public</span> <span class="type">void</span> <span class="keyword">after</span>()&#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("后方法");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>工厂类</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">UserServiceImpl <span class="title">createService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//目标类</span></span><br><span class="line">        <span class="keyword">final</span> UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        <span class="comment">//切面类</span></span><br><span class="line">        <span class="keyword">final</span> Myaspect myaspect = <span class="keyword">new</span> Myaspect();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *3.生成代理类 采用cglib,底层创建目标类的子类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//3.1 核心类</span></span><br><span class="line">        Enhancer enhancer =<span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//3.2确定父类</span></span><br><span class="line">        enhancer.setSuperclass(userService.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *3.3设置回调函数 MethodInterceptor等效jdk InvoCationHandler接口</span></span><br><span class="line"><span class="comment">        * intercept() 等效于JDK invoke()</span></span><br><span class="line"><span class="comment">        *       参数1：参数2：参数3：与invoke一样的</span></span><br><span class="line"><span class="comment">        *       参数4：methodProxy 方法的代理</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function">Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//前方法</span></span><br><span class="line">                myaspect.<span class="keyword">before</span>();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//执行目标类方法</span></span><br><span class="line">               Object o1 = method.invoke(userService,objects);</span><br><span class="line">               <span class="comment">//上下效果等同  执行代理类的父类，执行目标类(目标类和代理类 父子关系);</span></span><br><span class="line">               methodProxy.invokeSuper(o,objects);</span><br><span class="line"></span><br><span class="line">               <span class="comment">//后方法</span></span><br><span class="line">                myaspect.<span class="keyword">after</span>();</span><br><span class="line">                <span class="keyword">return</span> o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.4 创建代理</span></span><br><span class="line">        UserServiceImpl proxService = (UserServiceImpl) enhancer.create();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proxService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCglib</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserServiceImpl userService = MyBeanFactory.createService();</span><br><span class="line">        userService.addUser();</span><br><span class="line">        userService.deleteUser();</span><br><span class="line">        userService.updateUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="spring编写代理：半自动"><a href="#spring编写代理：半自动" class="headerlink" title="spring编写代理：半自动"></a>spring编写代理：半自动</h3></li>
</ol>
<h3 id="Spring基于XML配置（切点表达式）"><a href="#Spring基于XML配置（切点表达式）" class="headerlink" title="Spring基于XML配置（切点表达式）"></a>Spring基于XML配置（切点表达式）</h3><ul>
<li>导包AOP联盟<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol>
<li>业务类或目标类<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="title">implements</span> <span class="title">IAccountService</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 账户业务层实现类</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAccount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"保存"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"更新"</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteAcount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"删除"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>2.切面类或通知类 </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 用于记录日志的工具类。提供公共代码</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">logger</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于打印日志，计划在其切入点方法执行之前执行（切入点方法就是目标方法及业务层方法）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"Logger类中前置行方法执行记录日志"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>XML配置文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    配置Spring IOC--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Service.impl.AccountServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    Spring基于XML的AOP配置步骤</span></span><br><span class="line"><span class="comment">        1.把通知的Bean特交给该Spring管理</span></span><br><span class="line"><span class="comment">        2.使用aop:config标签表明开始配置AOP</span></span><br><span class="line"><span class="comment">        3.使用aop：aspect表明配置切面</span></span><br><span class="line"><span class="comment">                 属性 id：表示给切面提供唯一标识</span></span><br><span class="line"><span class="comment">                        ref：表示指定通知类bean的Id</span></span><br><span class="line"><span class="comment">        4. 在aop；aspect标签中使用对引的标签来配置通知的类型</span></span><br><span class="line"><span class="comment">            aop:before 表示前置通知</span></span><br><span class="line"><span class="comment">                    属性：method用于指定logger类中那个方法是前置通知</span></span><br><span class="line"><span class="comment">            aop：after 表示后置通知</span></span><br><span class="line"><span class="comment">            pointcut属性：用于指定切入点的表达式，该表达式的含义指的是对业务层中那些方法的增强</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           切入点表达式写法：</span></span><br><span class="line"><span class="comment">                关键字;execution(表达式)</span></span><br><span class="line"><span class="comment">                表达式：</span></span><br><span class="line"><span class="comment">                        访问修饰符 返回值 包名。包名。包名...类名.方法名(参数列表)</span></span><br><span class="line"><span class="comment">            表达式标准写法：</span></span><br><span class="line"><span class="comment">                public void com.zhao.service.AccountServiceImpl.saveAccount();</span></span><br><span class="line"><span class="comment">                访问修饰符可以省略</span></span><br><span class="line"><span class="comment">                void com.zhao.Service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                返回值可以使用通配符，表示任意通配符</span></span><br><span class="line"><span class="comment">                * com.zhao.Service.impl.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                包名可以使用通配符，，表示任意包，但几级包，就要写几个*.</span></span><br><span class="line"><span class="comment">                * *.*.*.*.AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                包名可以使用..表示当前包及其子包</span></span><br><span class="line"><span class="comment">                * *..AccountServiceImpl.saveAccount()</span></span><br><span class="line"><span class="comment">                类名和方法名可以用*实现通配</span></span><br><span class="line"><span class="comment">                * *..*.*()</span></span><br><span class="line"><span class="comment">                参数列表；</span></span><br><span class="line"><span class="comment">                    可以直接写参数类型：</span></span><br><span class="line"><span class="comment">                            基本类型：直接写名称  int</span></span><br><span class="line"><span class="comment">                            引用类型：写包名.类名的方式  eg：Java.lang.String</span></span><br><span class="line"><span class="comment">                            可以使用通配符表示任意参数，但必须有参数</span></span><br><span class="line"><span class="comment">                            可以表示..表示有无参数均可，有参数可以是任意类型</span></span><br><span class="line"><span class="comment">                全通配写法：</span></span><br><span class="line"><span class="comment">                * *..*.*(..)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                实际开发中切入点表达式的通常写法：</span></span><br><span class="line"><span class="comment">                       * com.zhao.Service.Impl.*.*(..)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logger"</span> <span class="attr">class</span>=<span class="string">"com.zhao.Service.utils.logger"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--        配置切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"logAdvice"</span> <span class="attr">ref</span>=<span class="string">"logger"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--            配置通知类型，并且建立通知方法和切入点方法的关联--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--            &lt;aop:before method="printLog" pointcut="execution( public void com.zhao.Service.impl.AccountServiceImpl.saveAccount())"&gt;&lt;/aop:before&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"printLog"</span> <span class="attr">pointcut</span>=<span class="string">"execution( * *..*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">  ``` </span><br><span class="line">4. 测试类</span><br></pre></td></tr></table></figure>
/**<ul>
<li>测试Aop配置</li>
<li>*/</li>
</ul>
</li>
</ol>
<p>public class test {<br>    //快捷键psvm<br>    public static void main(String[] args) {<br>        //获得容器<br>        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(“beans.xml”);<br>        //获取对象<br>        IAccountService iAccountService = (IAccountService)applicationContext.getBean(“accountService”);</p>
<pre><code>    //执行方法
    iAccountService.saveAccount();
    iAccountService.updateAccount(1);
    iAccountService.deleteAcount();
}</code></pre><p>}</p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"> ### 四种常用通知类型</span><br><span class="line"></span><br><span class="line">1. 目标类</span><br></pre></td></tr></table></figure>
<p>public class AccountServiceImpl implements IAccountService {</p>
<pre><code>/*
* 账户业务层实现类
* */
public void saveAccount() {
    System.out.println(&quot;保存&quot;);
}

public void updateAccount(int i) {
    System.out.println(&quot;更新&quot;+i);
}

public int deleteAcount() {
    System.out.println(&quot;删除&quot;);
    return 0;
}</code></pre><p>}</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> XML配置</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd"></p>
 <!--    配置Spring IOC-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;Service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;


&lt;bean id=&quot;logger&quot; class=&quot;Service.utils.logger&quot;&gt;&lt;/bean&gt;</code></pre> <!--    配置AOP-->
<pre><code>&lt;aop:config&gt;</code></pre> <!--        配置切面-->
 <!--        非局部的id="p1"唯一标识符 expression=""用于指定切入点表达式内容 位置必须在aop:aspect上面-->
<pre><code>&lt;aop:pointcut id=&quot;p1&quot; expression=&quot;execution( * *..*.*(..))&quot;/&gt;
&lt;aop:aspect id=&quot;logAdvice&quot; ref=&quot;logger&quot;&gt;</code></pre> <!--            配置通知类型，并且建立通知方法和切入点方法的关联-->
 <!--            <aop:before method="printLog" pointcut="execution( public void com.zhao.Service.impl.AccountServiceImpl.saveAccount())"></aop:before>-->
 <!--            前置通知-->
<pre><code>&lt;aop:before method=&quot;beforeLog&quot; pointcut-ref=&quot;p1&quot;&gt;&lt;/aop:before&gt;</code></pre> <!--           后置通知 -->
<pre><code>&lt;aop:after-returning method=&quot;agterLog&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:after-returning&gt;</code></pre> <!--        异常通知-->
<pre><code>&lt;aop:after-throwing method=&quot;executeAdvice&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:after-throwing&gt;</code></pre> <!--         最终通知-->
<pre><code>&lt;aop:after method=&quot;findalyAdvice&quot; pointcut=&quot;execution( * *..*.*(..))&quot;&gt;&lt;/aop:after&gt;</code></pre> <!--            局部的-->
 <!--            <aop:pointcut id="p1" expression="execution( * *..*.*(..))"/>-->

<pre><code>    &lt;/aop:aspect&gt;

&lt;/aop:config&gt;</code></pre></beans>
 <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Spring环绕通知</span><br><span class="line"><span class="number">1.</span> XML文件</span><br></pre></td></tr></table></figure>
 <?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

 <!--    配置Spring IOC-->
<pre><code>&lt;bean id=&quot;accountService&quot; class=&quot;Service.impl.AccountServiceImpl&quot;&gt;&lt;/bean&gt;


&lt;bean id=&quot;logger&quot; class=&quot;Service.utils.logger&quot;&gt;&lt;/bean&gt;</code></pre> <!--    配置AOP-->
<pre><code>&lt;aop:config&gt;</code></pre> <!--        配置切面-->
 <!--        非局部的 id="p1"唯一标识符 expression=""用于指定切入点表达式内容 位置必须在aop:aspect上面-->
<pre><code>&lt;aop:pointcut id=&quot;p1&quot; expression=&quot;execution( * *..*.*(..))&quot;/&gt;
&lt;aop:aspect id=&quot;logAdvice&quot; ref=&quot;logger&quot;&gt;</code></pre> <!--            配置环绕通知-->
<pre><code>        &lt;aop:around method=&quot;aroundLog&quot; pointcut-ref=&quot;p1&quot;&gt;&lt;/aop:around&gt;

    &lt;/aop:aspect&gt;

&lt;/aop:config&gt;</code></pre></beans>
  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 切面类或通知类</span><br></pre></td></tr></table></figure>
/*
* 用于记录日志的工具类。提供公共代码
* */

<p>import org.aspectj.lang.ProceedingJoinPoint;</p>
<p>public class logger {</p>
<pre><code>//用于打印日志，计划在其切入点方法执行之前执行（切入点方法就是目标方法及业务层方法）

/*
* 环绕通知：
*   当我们配置环绕通知之后，切入点方法没有执行，而通知方法执行了
* 分析：
*       通过对比动态代理中的的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用，而我们的代码中没得；
* 解决：
*       Spring框架为我们提供一个接口，ProceedingJoinPoint。此接口有一个方法proceed(),
*       此方法相当予明确调用切入点方法。
*       该接口可以作为环绕通知的方法参数，在程序执行时，spring框架为我们提供该接口的实现类供我们使用
*
* Spring中的环绕通知
*       他是Spring框架为我们提供的一种可以在代码中控制增强方法的何时执行的方式；
* */
public Object aroundLog(ProceedingJoinPoint pjp){
    Object rtVslue = null;
    try{

        Object[] args = pjp.getArgs();//获得执行方法的所需的参数

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志....前置&quot; );

        rtVslue = pjp.proceed(args);//明确调用业务层方法（切入点方法）

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。后置&quot;);

        return rtVslue;
    }catch (Throwable t){
        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。异常&quot;);
        throw new RuntimeException(t);
    }finally {

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志 。。。最终通知&quot;);
    }

}</code></pre><p>}</p>
 <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 注解AOP</span><br><span class="line"><span class="number">1.</span> Xml配置</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd"></p>
 <!--    配置Spring创建容器时要扫描的包-->
<pre><code>&lt;context:component-scan base-package=&quot;com.zhao.Aware.Service&quot;&gt;&lt;/context:component-scan&gt;</code></pre> <!--配置spring开启注解的功能-->
<pre><code>&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</code></pre></beans>
 <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 切面类</span><br></pre></td></tr></table></figure>
 @Component("logger")
@Aspect //表示当前类是一个切面类|通知类
public class logger {

<pre><code>@Pointcut(&quot;execution(* com.zhao.Aware.Service.*.*(..))&quot;)</code></pre><p>   private void p(){}</p>
<pre><code>//用于打印日志，计划在其切入点方法执行之前执行（切入点方法就是目标方法及业务层方法）
//前置执行方法
@Before(&quot;p()&quot;)
public void beforeLog(){
    System.out.println(&quot;Logger类中前置行方法执行记录日志&quot;);
}

//后置执行方法
@AfterReturning(&quot;p()&quot;)
public void agterLog(){
    System.out.println(&quot;Logger类中后置行方法执行记录日志&quot;);
}


//提成通知
@AfterThrowing(&quot;p()&quot;)
public void executeAdvice(){
    System.out.println(&quot;Logger类中异常方法执行记录日志&quot;);
}

//最终通知
@After(&quot;p()&quot;)
public void findalyAdvice(){
    System.out.println(&quot;Logger类中最终通知方法执行记录日志&quot;);
}
//环绕通知
//@Around(&quot;p()&quot;)
public Object aroundLog(ProceedingJoinPoint pjp) {
    Object rtVslue = null;
    try {

        Object[] args = pjp.getArgs();//获得执行方法的所需的参数

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志....前置&quot;);

        rtVslue = pjp.proceed(args);//明确调用业务层方法（切入点方法）

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。后置&quot;);

        return rtVslue;
    } catch (Throwable t) {
        System.out.println(&quot;Logger类中环绕通知方法执行记录日志。。。异常&quot;);
        throw new RuntimeException(t);
    } finally {

        System.out.println(&quot;Logger类中环绕通知方法执行记录日志 。。。最终通知&quot;);
    }
}</code></pre><p>}</p>
 <figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>. 目标类<span class="string">|业务类</span></span><br></pre></td></tr></table></figure>
<p>@Service(“accountService”)<br>public class AccountServiceImpl implements IAccountService {</p>
<pre><code>/*
* 账户业务层实现类
* */

public void saveAccount() {
    System.out.println(&quot;保存&quot;);
}

public void updateAccount(int i) {
    System.out.println(&quot;更新&quot;+i);
}

public int deleteAcount() {
    System.out.println(&quot;删除&quot;);
    return 0;
}</code></pre><p>}</p>
  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">  ### JdbcTemplate模板</span><br><span class="line"><span class="bullet">  * </span>spring提供一种操作JDBC的工具类，类似DBUtils；</span><br><span class="line"><span class="bullet">  * </span>依赖 连接池DataSouce（数据源）</span><br><span class="line"><span class="bullet">  * </span></span><br><span class="line"></span><br><span class="line"><span class="bullet">  1. </span>使用API（了解）</span><br><span class="line"><span class="bullet">  * </span>原生dbcp</span><br><span class="line"><span class="bullet">- </span>目标类</span><br></pre></td></tr></table></figure>

<p>public class user {</p>
<pre><code>private int id;
private String name;
private float money;

public int getId() {
    return id;
}

public void setId(int id) {
    this.id = id;
}

public String getName() {
    return name;
}

public void setName(String name) {
    this.name = name;
}

public float getMoney() {
    return money;
}

public void setMoney(float money) {
    this.money = money;
}</code></pre><p>}</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">测试类</span><br></pre></td></tr></table></figure>
<p>  public class TestApi {</p>
<pre><code>//jdbc模板
public static void main(String[] args) {

    //1.创建数据源dbcp
    BasicDataSource  dataSource = new BasicDataSource();

    //基本4项
    dataSource.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver&quot;);
    dataSource.setUrl(&quot;jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&quot;);
    dataSource.setUsername(&quot;root&quot;);
    dataSource.setPassword(&quot;zhao1314520&quot;);



    //2.创建模板
    JdbcTemplate jdbcTemplate = new JdbcTemplate();
    jdbcTemplate.setDataSource(dataSource);

    //3.通过api操作
    String sql = &quot;insert into account(name,money) values(?,?)&quot;;
    jdbcTemplate.update(&quot;sql&quot;,&quot;mmm&quot;,&quot;998&quot;);

}</code></pre><p>}<br>   <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>XML配置dbcp</span><br><span class="line"><span class="bullet">1. </span>模板注入</span><br></pre></td></tr></table></figure><br>  public class accountDao {</p>
<p>//jdbc的模板将由spring注入</p>
<pre><code>private JdbcTemplate jdbcTemplate;

public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
    this.jdbcTemplate = jdbcTemplate;
}


public void updata(user account){

    String sql= &quot;update account set name=?,money=? where id=?&quot;;
    Object[] objects = {account.getName(),account.getMoney(),account.getId()};
    jdbcTemplate.update(sql,objects);
}</code></pre><p>}</p>
   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">beans</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
  <!--    配置DAO-->
<pre><code>&lt;bean id=&quot;account&quot; class=&quot;com.zhao.dbcp.accountDao&quot;&gt;
    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre> <!--    创建模板,诸如数据源-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--    创建数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost.3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre>   <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span> 测试</span><br></pre></td></tr></table></figure>
<p>   public class TestDbcp {</p>
<pre><code>@Test
public void save(){
    user account = new user();
    account.setId(1);
    account.setName(&quot;沐沐&quot;);
    account.setMoney(100000);
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);
    accountDao ac = (accountDao) applicationContext.getBean(&quot;account&quot;);

    ac.updata(account);
}</code></pre> <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>C3P0数据源</span><br><span class="line">XML配置文件</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"></p>
 <!--    配置DAO-->
<pre><code>&lt;bean id=&quot;account&quot; class=&quot;com.zhao.C3P0.accountDao&quot;&gt;
    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre> <!--    创建模板,诸如数据源-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <!--    创建数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;
    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;user&quot; value=&quot;root&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre></beans>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">测试类</span><br></pre></td></tr></table></figure>
 public class TestC3p0 {

<pre><code>@Test
public void save(){
    user account = new user();
    account.setId(1);
    account.setName(&quot;沐沐&quot;);
    account.setMoney(100000);
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao/C3P0/beans.xml&quot;);
    IaccountDao ac = (IaccountDao) applicationContext.getBean(&quot;account&quot;);

    ac.updata(account);

}</code></pre><p>}<br>  <figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">* <span class="keyword">properties</span>.<span class="keyword">properties</span>文件</span><br></pre></td></tr></table></figure><br>jdbc.DriverClassName=com.mysql.cj.jdbc.Driver<br>jdbc.Url=jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai<br>jdbc.Username=root<br>jdbc.Password=zhao1314520<br> <figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">XML配置</span><br><span class="line">注意：</span><br><span class="line"><span class="number">1</span>. 命名空间xmlns:<span class="keyword">context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line"><span class="number">2</span>. 加载配文件classpath:</span><br><span class="line"> &lt;<span class="keyword">context</span>:<span class="keyword">property</span>-placeholder location=<span class="string">"classpath:com/zhao/properties/properties.properties"</span>&gt;&lt;/<span class="keyword">context</span>:<span class="keyword">property</span>-placeholder&gt;</span><br></pre></td></tr></table></figure><br><?xml version="1.0" encoding="UTF-8"?><br><beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"></p>
 <!--    加载properties配置文件-->
<pre><code>&lt;context:property-placeholder location=&quot;classpath:com/zhao/properties/properties.properties&quot;&gt;&lt;/context:property-placeholder&gt;</code></pre> <!--    配置DAO-->
<pre><code>&lt;bean id=&quot;account&quot; class=&quot;com.zhao.dbcp.accountDao&quot;&gt;
    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre> <!--    创建模板,诸如数据源-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre><!--    创建数据源-->
<pre><code>&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp2.BasicDataSource&quot;&gt;

    &lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driverClassName}&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;&gt;&lt;/property&gt;

    &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;&gt;&lt;/property&gt;

&lt;/bean&gt;</code></pre></beans>
 <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">### JdbcTemplate模板详解(Spring数据源)</span><br><span class="line">* maven配置</span><br></pre></td></tr></table></figure>
 <packaging>jar</packaging>

<pre><code>&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework&lt;/groupId&gt;
        &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
        &lt;version&gt;5.0.2.RELEASE&lt;/version&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
        &lt;version&gt;8.0.18&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre> <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### <span class="number">1.</span> 原生spring内部数据源</span><br></pre></td></tr></table></figure>
<p>public class JdbcTemplatedomo1 {</p>
<pre><code>public static void main(String[] args) {
    //3.准备数据源，spring内部数据源
    DriverManagerDataSource ds = new DriverManagerDataSource();
    ds.setDriverClassName(&quot;com.mysql.cj.jdbc.Driver &quot;);
    ds.setUrl(&quot;jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&quot;);
    ds.setUsername(&quot;root&quot;);
    ds.setPassword(&quot;zhao1314520&quot;);

    //1.创建对象jdbcTemplate
    JdbcTemplate jdbcTemplate = new JdbcTemplate();
    //4.给jdbcTemplate设置数据源
    jdbcTemplate.setDataSource(ds);
    //2.执行操作
    jdbcTemplate.execute(&quot;insert into account(name,money)values(&apos;mmm&apos;,10000)&quot;);

}</code></pre><p>}</p>
 <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"> * 注意：MySQL8<span class="number">.0</span><span class="number">.18</span>版本中连接数据库</span><br><span class="line">    ds.setDriverClassName(<span class="string">"com.mysql.cj.jdbc.Driver "</span>);</span><br><span class="line">    ds.setUrl(<span class="string">"jdbc:mysql://localhost:3306/eesy?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">####<span class="number">2.</span> 基于XML配置JdbcTemplate</span><br><span class="line">* xml配置文件</span><br></pre></td></tr></table></figure>
 <!--    配置JdbcTemplate模板-->
<pre><code>&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;
    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;
&lt;!--配置Spring数据源--&gt;
&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;
    &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;username&quot; value=&quot;root&quot;&gt;&lt;/property&gt;
    &lt;property name=&quot;password&quot; value=&quot;zhao1314520&quot;&gt;&lt;/property&gt;
&lt;/bean&gt;</code></pre> <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>测试类</span><br></pre></td></tr></table></figure>

<p>public class JdbcTemplatedomo2 {</p>
<pre><code>public static void main(String[] args) {
 //1.获取容器
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);
    //2.获取对象
     JdbcTemplate jdbcTemplate = (JdbcTemplate) applicationContext.getBean(&quot;jdbcTemplate&quot;);
     //3.执行操作
    jdbcTemplate.execute(&quot;insert into account (name,money)values(&apos;zhao&apos;,10000)&quot;);

}</code></pre><p>}<br>  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">#### <span class="number">3.</span> JdbcTemplate的CRUD操作</span><br><span class="line">* 注意：Spring提供的封装工具,new BeanPropertyRowMapper&lt;Account&gt;(Account.<span class="keyword">class</span>)</span><br><span class="line">自定义<span class="symbol">AccountRowmapper</span>封装工具，实现接口 <span class="symbol">RowMapper</span>&lt;<span class="symbol">Account</span>&gt;</span><br></pre></td></tr></table></figure><br>//JdbcTemplate的CRUD操作<br>public class JdbcTemplatedomo3 {</p>
<pre><code>public static void main(String[] args) {
 //1.获取容器
    ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);
     JdbcTemplate jdbcTemplate = (JdbcTemplate) applicationContext.getBean(&quot;jdbcTemplate&quot;);
     //执行操作
    //保存
    //jdbcTemplate.update(&quot;insert into account (name,money)values(?,?)&quot;,&quot;艾尔提尔&quot;,10000f);
    //更新
    //jdbcTemplate.update(&quot;update account set name=?,money=? where id=?&quot;,&quot;阿尔提尔&quot;,8888f,5);
    //删除
   jdbcTemplate.update(&quot;delete from account where id=?&quot;,8);
    //查询所有
    //自定义
   // List&lt;Account&gt; accounts = jdbcTemplate.query(&quot;select * from account where money=?&quot;,new AccountRowmapper(),10000f);
    //spring提供,new BeanPropertyRowMapper&lt;Account&gt;(Account.class)
 List&lt;Account&gt; accounts = jdbcTemplate.query(&quot;select * from account where money=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),10000f);
    for(Account account : accounts){
        System.out.println(account);

    }
    //查询一个
    List&lt;Account&gt; accounts1 = jdbcTemplate.query(&quot;select * from account where id=?&quot;,new AccountRowmapper(),1);
    System.out.println(accounts1.isEmpty()?&quot;没有内容&quot;:accounts1.get(0));
    //查询一行一列（使用聚合函数，但不加ground子句）
    Long count1 = jdbcTemplate.queryForObject(&quot;select count(*) from account where money&gt;?&quot;,Long.class,1000f);
    System.out.println(count1);

}</code></pre><p>}<br> /*</p>
<ul>
<li><p>自定义Account的封装工具类</p>
</li>
<li><p>*/<br>class AccountRowmapper implements RowMapper<Account>{</p>
<p>public Account mapRow(ResultSet resultSet, int i) throws SQLException {</p>
<pre><code>/*
* 把结果集中的数据封装到Account中，然后由Spring把每个Account加到集合中
* */
Account  account =new Account();
account.setId(resultSet.getInt(&quot;id&quot;));
account.setName(resultSet.getString(&quot;name&quot;));
account.setMoney(resultSet.getFloat(&quot;money&quot;));
return account;</code></pre><p>}<br>}</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### <span class="number">4.</span> Dao层操作</span><br><span class="line">* XML配置</span><br></pre></td></tr></table></figure>
<?xml version="1.0" encoding="UTF-8"?>
<p><beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"></p>
<!--    配置Dao-->
<bean id="accountDaoId" class="com.zhao.dao.impl.AccountImpl">
   <property name="jdbcTemplate" ref="jdbcTemplate"></property> 
</bean>
<!--    配置JdbcTemplate-->
<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="dataSource"></property>
</bean>
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
    <property name="url" value="jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai"></property>
    <property name="username" value="root"></property>
    <property name="password" value="zhao1314520"></property>
</bean>
</beans>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>实现类</span><br></pre></td></tr></table></figure>
/*
* 账户持久层实现类
* */
public class AccountImpl implements IAccountDao {

<p>private JdbcTemplate jdbcTemplate;</p>
<p>public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {</p>
<pre><code>this.jdbcTemplate = jdbcTemplate;</code></pre><p>}</p>
</li>
</ul>
<pre><code>public Account findAccountById(Integer accountId) {
    List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where id=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountId);
    return accounts.isEmpty()?null:accounts.get(0);

}



public Account findAccountName(String accountName) {
    List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where name=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountName);
    if(accounts.isEmpty()){
        return null;
    }
    if(accounts.size()&gt;1){
        throw new RuntimeException(&quot;结果集不唯一&quot;);
    }
    return accounts.get(0);
}




public void updateAccount(Account account) {
    String sql =&quot;update account set name=?,money=? where id=?&quot;;
    Object[] obj ={account.getName(),account.getMoney(),account.getId()};
    getJdbcTemplate().update(sql,obj);
}</code></pre><p>}<br> <figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="bullet">* </span>测试类</span><br></pre></td></tr></table></figure><br>public class JdbcTemplatedomo4 {</p>
<pre><code>public static void main(String[] args) {

    ApplicationContext applicationContext =new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);
    IAccountDao iAccountDao = applicationContext.getBean(&quot;accountDaoId&quot;, IAccountDao.class);
    Account account = iAccountDao.findAccountById(1);
    System.out.println(account);

    account.setMoney(40000f);
    iAccountDao.updateAccount(account);

}</code></pre><p>}<br> <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#### <span class="number">5.</span> 多个Dao 方式一：提取自定义代码方式</span><br><span class="line"><span class="number">1.</span> 公共类</span><br></pre></td></tr></table></figure><br>/*</p>
<ul>
<li>用于抽取Dao中的重复代码</li>
<li>注意get|set方法</li>
<li>*/</li>
</ul>
<p>public class jdbcDaoSupport {<br>    private JdbcTemplate jdbcTemplate;</p>
<pre><code>public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
    this.jdbcTemplate = jdbcTemplate;
}

public JdbcTemplate getJdbcTemplate() {
    return jdbcTemplate;
}

//private DataSource dataSource;

public void setDateSource(DataSource dataSource) {
   // this.dataSource = dataSource;
    if(jdbcTemplate == null){
        jdbcTemplate = createJdbcTemplate(dataSource);
    }
}
private JdbcTemplate createJdbcTemplate(DataSource dataSource){
    return new JdbcTemplate(dataSource);
}</code></pre><p>}<br> <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 实现类</span><br></pre></td></tr></table></figure><br>/*</p>
<ul>
<li><p>账户持久层实现类</p>
</li>
<li><p>继承 jdbcDaoSupport</p>
</li>
<li><p>*/<br>public class AccountImpl extends jdbcDaoSupport implements IAccountDao {</p>
<p>  public Account findAccountById(Integer accountId) {</p>
<pre><code>List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where id=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountId);
return accounts.isEmpty()?null:accounts.get(0);</code></pre><p>  }</p>
</li>
</ul>
<pre><code>public Account findAccountName(String accountName) {
    List&lt;Account&gt; accounts = getJdbcTemplate().query(&quot;select * from account where name=?&quot;,new BeanPropertyRowMapper&lt;Account&gt;(Account.class),accountName);
    if(accounts.isEmpty()){
        return null;
    }
    if(accounts.size()&gt;1){
        throw new RuntimeException(&quot;结果集不唯一&quot;);
    }
    return accounts.get(0);
}


public void updateAccount(Account account) {
    String sql =&quot;update account set name=?,money=? where id=?&quot;;
    Object[] obj ={account.getName(),account.getMoney(),account.getId()};
    getJdbcTemplate().update(sql,obj);
}</code></pre><p>}<br> <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">3. </span>XML配置</span><br><span class="line"><span class="bullet">* </span>公共类中含有数据源</span><br><span class="line"><span class="bullet">* </span>可取消下面代码</span><br></pre></td></tr></table></figure><br> <!--    配置JdbcTemplate--><br>    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"><br>        <property name="dataSource" ref="dataSource"></property><br>    </bean>–&gt;<br> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--    配置Dao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountDaoId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.dao.impl.AccountImpl"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--        &lt;property name="jdbcTemplate" ref="jdbcTemplate"&gt;&lt;/property&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--    配置JdbcTemplate</span></span><br><span class="line"><span class="comment">    &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/eesy?serverTimezone=Asia/Shanghai"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"zhao1314520"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="6-多个Dao-方式二：继承Spring-JdbcDaoSupport类"><a href="#6-多个Dao-方式二：继承Spring-JdbcDaoSupport类" class="headerlink" title="6.  多个Dao 方式二：继承Spring  JdbcDaoSupport类"></a>6.  多个Dao 方式二：继承Spring  JdbcDaoSupport类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.support.JdbcDaoSupport;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 账户持久层实现类</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">IAccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountById</span><span class="params">(Integer accountId)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = getJdbcTemplate().query(<span class="string">"select * from account where id=?"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">accountId</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> accounts.isEmpty()?<span class="keyword">null</span>:accounts.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">findAccountName</span><span class="params">(String accountName)</span> </span>&#123;</span><br><span class="line">        List&lt;Account&gt; accounts = getJdbcTemplate().query(<span class="string">"select * from account where name=?"</span>,<span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account<span class="class">.<span class="keyword">class</span>),<span class="title">accountName</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span>(accounts.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(accounts.size()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"结果集不唯一"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> accounts.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateAccount</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        String sql =<span class="string">"update account set name=?,money=? where id=?"</span>;</span><br><span class="line">        Object[] obj =&#123;account.getName(),account.getMoney(),account.getId()&#125;;</span><br><span class="line">        getJdbcTemplate().update(sql,obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>spring框架-一</title>
    <url>/2019/11/03/spring%E6%A1%86%E6%9E%B6-%E4%B8%80/</url>
    <content><![CDATA[<h3 id="知识点一："><a href="#知识点一：" class="headerlink" title="知识点一："></a>知识点一：</h3><ol>
<li>4+1   4个核心（beans core context expression）+1个依类（commons-logins..jar）</li>
</ol>
<p>！<a href="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572031281077&di=19f3b40cfe98239b9a176702be5a0cd8&imgtype=0&src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-07d0fdbd0f685bc90d59abe2a976eb41_b.jpg" target="_blank" rel="noopener" title="Spring的jar包">Spring</a></p>
<ol start="2">
<li>IO  控制反转 由Spring配置文件beans.xml完成创建对象的过程</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"userService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.service.UserSercice"</span>&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;<span class="regexp">/bean&gt;</span></span><br></pre></td></tr></table></figure>
<p>DI Dependency Injection 依赖注入 在service写一个属性 有get、set方法 在bean.xml中配置属性<br>    其内部执行相当于 new创建对象 调用set方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 依赖注入调用属性的Set方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接口指向实现类（实现类也可以）实例化<br>依赖：一个类需要另一个类<br>注入：set方法设置值</p>
<h3 id="知识点二："><a href="#知识点二：" class="headerlink" title="知识点二："></a>知识点二：</h3><p>Spring加载beans.xml 的三种方式：</p>
<ol>
<li><p>方式1.？加载beans.xml配置文件（ApplicationContext 容器）<br>ClassPath：指的是classes路径</p>
<pre><code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</code></pre></li>
<li><p>方式2.文件系统路径获取配置文件</p>
<pre><code>ApplicationContext context1 = new FileSystemXmlApplicationContext(&quot;G:\\IDEA\\Spring_Domo\\spring01\\src\\beans.xml&quot;);</code></pre></li>
</ol>
<p>3.// 方式3.     使用BeanFactory（了解）<br>        String path =”G:\IDEA\Spring_Domo\spring01\src\beans.xml”;<br>        BeanFactory factory = new XmlBeanFactory(new FileSystemResource(path));</p>
<p>  //2.从spring容器中获取对象<br>        IuserSercice userSercice = (IuserSercice) context.getBean(“userService”);<br>        userSercice.add();</p>
<h3 id="知识点三："><a href="#知识点三：" class="headerlink" title="知识点三："></a>知识点三：</h3><ol>
<li>ApplicationContext和BeanFactory比较</li>
<li>BeanFactory 采用延时加载，第一次getBean时才会初始化Bean</li>
<li>ApplicationContext 及时加载</li>
</ol>
<h3 id="知识点四："><a href="#知识点四：" class="headerlink" title="知识点四："></a>知识点四：</h3><h5 id="装配Bean的三种方式"><a href="#装配Bean的三种方式" class="headerlink" title="装配Bean的三种方式"></a>装配Bean的三种方式</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--装配Bean的三种方式，--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第一种   new实现类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService1"</span> <span class="attr">class</span>=<span class="string">"com.zhao.service.UserSercice"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    第二种方式 通过静态工厂方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService2"</span> <span class="attr">class</span>=<span class="string">"com.zhao.service.UserServiceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createUserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    第三种方式 通过实例工厂方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory2"</span> <span class="attr">class</span>=<span class="string">"com.zhao.service.UserServiceFactory1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService3"</span> <span class="attr">factory-bean</span>=<span class="string">"factory2"</span> <span class="attr">factory-method</span>=<span class="string">"createUserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Lensson1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//new对象</span></span><br><span class="line">    @Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//      classPath 类路径加载</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans1.xml"</span>);</span><br><span class="line">        IuserSercice userService1 = (IuserSercice) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        userService1.<span class="keyword">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        静态工厂</span></span><br><span class="line">        IuserSercice userSercice2 =UserServiceFactory.createUserService();</span><br><span class="line">        userSercice2.<span class="keyword">add</span>();</span><br><span class="line"></span><br><span class="line">        ApplicationContext context1 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans1.xml"</span>);</span><br><span class="line">        IuserSercice userService3 = (IuserSercice) context1.getBean(<span class="string">"userService2"</span>);</span><br><span class="line">        userService3.<span class="keyword">add</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        实例工厂</span></span><br><span class="line"><span class="comment">//        1.创建工厂</span></span><br><span class="line"><span class="comment">//        UserServiceFactory1 factory2 = new UserServiceFactory1();</span></span><br><span class="line"><span class="comment">//        IuserSercice userService4 = factory2.createUserService();</span></span><br><span class="line"><span class="comment">//        userService4.add();</span></span><br><span class="line"></span><br><span class="line">        ApplicationContext context3 = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans1.xml"</span>);</span><br><span class="line"></span><br><span class="line">        IuserSercice userSercice4 = (IuserSercice) context3.getBean(<span class="string">"userService3"</span>);</span><br><span class="line">        userSercice4.<span class="keyword">add</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="第二种静态工厂"><a href="#第二种静态工厂" class="headerlink" title="第二种静态工厂"></a>第二种静态工厂</h3><pre><code>public class UserServiceFactory {

    public static IuserSercice createUserService(){

        return new UserSercice();
    }
}</code></pre><h4 id="第三种工厂类"><a href="#第三种工厂类" class="headerlink" title="第三种工厂类"></a>第三种工厂类</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceFactory1</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IuserSercice <span class="title">createUserService</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserSercice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="装配Bean基于XML"><a href="#装配Bean基于XML" class="headerlink" title="装配Bean基于XML"></a>装配Bean基于XML</h4><h4 id="1-默认构造"><a href="#1-默认构造" class="headerlink" title="1. 默认构造"></a>1. 默认构造</h4><pre><code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;&lt;\bean&gt;</code></pre><h4 id="2-静态工厂（Spring整合）"><a href="#2-静态工厂（Spring整合）" class="headerlink" title="2. 静态工厂（Spring整合）"></a>2. 静态工厂（Spring整合）</h4><p>常用语Spring整合其他框架<br>静态工厂：用于生产实例，方法必须static</p>
<pre><code>&lt;bean id=&quot;&quot; class=&quot;工厂全限定名&quot; factory-method=&quot;方法名&quot;&gt;&lt;\bean&gt;</code></pre><p>Spring之前创建静态工厂的方法</p>
<ol>
<li><p>工厂类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建工厂</span></span><br><span class="line">    <span class="comment">//    spring 之创建用工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserSercice <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserSercice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    spring 之前调用工厂方法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">domo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserSercice userSercice = MyBeanFactory.createService();</span><br><span class="line">        userSercice.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Spring创建静态工厂方法</p>
</li>
<li><p>beans.xml文件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  将静态工厂创建的实例交于Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.zhao.bean_static_factory.MyBeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">domo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Spring工厂</span></span><br><span class="line">       <span class="comment">//String xmlPath="com/zhao/bean_static_factory/beans.xml";</span></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zhao/bean_static_factory/beans.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      getBean 参数二类型，不需要强转</span></span><br><span class="line"><span class="comment">//      UserSercice userSercice1 =(UserService) applicationContext.getBean("userService");</span></span><br><span class="line">        UserSercice userSercice1 = applicationContext.getBean(<span class="string">"userService"</span>,UserSercice<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        userSercice1.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h4><p>Spring之前创建工厂的方法</p>
</li>
<li><p>工厂类</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanFactory</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建工厂（实例工厂）</span></span><br><span class="line">    <span class="comment">//    spring 之创建用工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserSercice <span class="title">createService</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserSercice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    spring 之前调用工厂方法</span></span><br><span class="line"><span class="comment">//    自定义工厂</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">domo01</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        1.创建工厂</span></span><br><span class="line">        MyBeanFactory myBeanFactory = <span class="keyword">new</span> MyBeanFactory();</span><br><span class="line">        <span class="comment">//2.通过工厂实例，获取对象</span></span><br><span class="line">        UserSercice userSercice = myBeanFactory.createService();</span><br><span class="line">        userSercice.add();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Spring创建工厂方法</p>
</li>
<li><p>beans.xml文件配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    将工厂创建的实例交于Spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBeanFactory"</span> <span class="attr">class</span>=<span class="string">"com.zhao.bean_factory.MyBeanFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    获得UserService--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceId"</span>  <span class="attr">factory-bean</span>=<span class="string">"myBeanFactory"</span> <span class="attr">factory-method</span>=<span class="string">"createService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">domo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//Spring工厂</span></span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zhao/bean_factory/beans.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      getBean 参数二类型，不需要强转</span></span><br><span class="line"><span class="comment">//      UserSercice userSercice1 =(UserService) applicationContext.getBean("userService");</span></span><br><span class="line">        UserSercice userSercice1 = applicationContext.getBean(<span class="string">"userServiceId"</span>, UserSercice<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        userSercice1.add();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="bean的种类"><a href="#bean的种类" class="headerlink" title="bean的种类"></a>bean的种类</h3></li>
<li><p>普通bean： <bean id="" class="A"> spring 直接创建A实例，并返回</p>
</li>
<li><p>FactoryBean：是一个特殊的bean，具有工厂生产对象的能力，只能生产特定的对象<br>bean必须实现FactoryBean接口，此接口提供方法getObject()用于<br>获得特定的对象(bean)<br><bean id="" class="FB">先创建FB实例，使用调用getObject()方法，并返回方法的返回值<br>底层调用方法：<br> FB fb = new FB();<br> return fb,getObject();</p>
</li>
<li><p>BeanFactory 和 FactoryBean 比较</p>
<ul>
<li>BeanFactory: 工厂，用于生产任意bean</li>
<li>FactoryBean：特殊bean，用于生产特殊的bean<br>例如：ProxyFactoryBean 此工厂bean用于生产代理<br><bean id="" class="...ProxyFactoryBean"> 获取代理对象的实例，AOP使用<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3></li>
</ul>
</li>
</ol>
<ul>
<li><p>singleton： 单例 默认值；</p>
</li>
<li><p>prototype:  多例,每执行一次getBean将获得一个实例，select单例，struts2的Action为多例</p>
</li>
<li><p>配置信息</p>
</li>
</ul>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">    &lt;bean id=<span class="string">""</span> <span class="keyword">class</span>=<span class="string">""</span>&gt;</span><br><span class="line"><span class="comment">//scope="prototype" 多例</span></span><br><span class="line">    &lt;bean id=<span class="string">"userService"</span> <span class="keyword">class</span>=<span class="string">"com.zhao.scop.UserSercice"</span> scope=<span class="string">"prototype"</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
<h3 id="生命周期（11步）"><a href="#生命周期（11步）" class="headerlink" title="生命周期（11步）"></a>生命周期（11步）</h3><ul>
<li><p>初始化和销毁</p>
<ul>
<li>目标方法执行前和执行后，将执行初始化或销毁</li>
<li>beans.xml<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">""</span> <span class="attribute">class</span>=<span class="string">""</span> <span class="attribute">init-method</span>=<span class="string">"初始化方法"</span>      <span class="attribute">destory-method</span>=<span class="string">"销毁方法名称"</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">"userService"</span> <span class="attribute">class</span>=<span class="string">"com.zhao.lifecycle.UserSercice"</span> <span class="attribute">init-method</span>=<span class="string">"myInit"</span> <span class="attribute">destroy-method</span>=<span class="string">"myDestory"</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>调用方法</p>
<pre><code>public class Testlifecycle {</code></pre></li>
</ul>
<pre><code>    @Test
    public void domo02() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {

        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;com/zhao/lifecycle/beans.xml&quot;);
        UserSercice userSercice = applicationContext.getBean(&quot;userService&quot;,UserSercice.class);

        userSercice.add();

        //要求：1.容器必须close，执行销毁方法
        applicationContext.getClass().getMethod(&quot;close&quot;).invoke(applicationContext);
        //applicationContext.close();
    }
}</code></pre><ul>
<li>BeanPostProcessor 后处理bean<ul>
<li>Spring 提供一种机制，只要实现此接口BeanPostprocessor，并将实现类提供该Spring容器，Spring容器将自动执行，在初始化方法前执行before(),在初始化方法后执行after()</li>
<li>Spring 提供工厂钩子，用于修改实例对象，可以生成代理对象，是AOP的底层</li>
</ul>
</li>
</ul>
<p>后处理类：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> myPostProcessor implements BeanPostProcessor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">Object</span> postProcessBeforeInitialization(<span class="keyword">Object</span> bean, String beanName) throws BeansException &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("前处理"+beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="built_in">public</span> <span class="keyword">Object</span> postProcessAfterInitialization(<span class="keyword">Object</span> bean, String beanName) throws BeansException &#123;</span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println("后处理"+beanName);</span><br><span class="line">        //bean目标对象 bean.getClass().getInterfaces()</span><br><span class="line">//        生成JDK代理 Proxy JDK工具类  myPostProcessor.<span class="keyword">class</span>.getClassLoader()当前类的类加载器</span><br><span class="line">//        <span class="built_in">new</span> InvocationHandler() 处理程序</span><br><span class="line">        //<span class="keyword">return</span> bean;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(myPostProcessor.<span class="keyword">class</span>.getClassLoader(),</span><br><span class="line">                bean.getClass().getInterfaces(),</span><br><span class="line">                <span class="built_in">new</span> InvocationHandler() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    <span class="built_in">public</span> <span class="keyword">Object</span> invoke(<span class="keyword">Object</span> proxy, <span class="keyword">Method</span> <span class="keyword">method</span>, <span class="keyword">Object</span>[] args) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">System</span>.<span class="keyword">out</span>.println("开启事务处理方法");</span><br><span class="line">                        //执行目标方法</span><br><span class="line">                        <span class="keyword">Object</span> <span class="keyword">object</span> = <span class="keyword">method</span>.invoke(bean);</span><br><span class="line">                        <span class="keyword">System</span>.<span class="keyword">out</span>.println("提交事务处理方法");</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">object</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> benas.xml<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">     &lt;bean id=<span class="string">"userServiceId"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.lifecycle.UserSercice"</span> init-method=<span class="string">"myInit"</span> destroy-method=<span class="string">"myDestory"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line">&lt;!--    将后处理的的实现类注册给Spring--&gt;</span><br><span class="line">    &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.lifecycle.myPostProcessor"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testlifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">domo02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zhao/lifecycle/beans.xml"</span>);</span><br><span class="line"></span><br><span class="line">        IuserSercice  userSercice = (IuserSercice) applicationContext.getBean(<span class="string">"userServiceId"</span>);</span><br><span class="line"></span><br><span class="line">        userSercice.add();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要求：1.容器必须close，执行销毁方法</span></span><br><span class="line">        applicationContext.getClass().getMethod(<span class="string">"close"</span>).invoke(applicationContext);</span><br><span class="line">        <span class="comment">//applicationContext.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>   错误信息： org.springframework.beans.factory.BeanNotOfRequiredTypeException</p>
<p>   注入spring的bean 出现的，具体是由于spring采用代理的机制导致的<br>   解决方法：(注意此处接口指向)</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">I<span class="keyword">user</span>Sercice  <span class="keyword">user</span>Sercice = (I<span class="keyword">user</span>Sercice) applicationContext.getBean(<span class="string">"userServiceId"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="属性依赖注入"><a href="#属性依赖注入" class="headerlink" title="属性依赖注入"></a>属性依赖注入</h3><ul>
<li><p>Setter方法注入</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>普通数据：&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"pname"</span> value=<span class="string">"阿尔提尔"</span>&gt;&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line"><span class="number">2.</span>字标签&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"pname"</span> &gt;</span><br><span class="line">    &lt;value&gt;v阿尔提尔&lt;/value&gt;</span><br><span class="line">&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">注意：<span class="number">1</span>和<span class="number">2</span>是等效的</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"pesonId"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.setter.peson"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"pname"</span> value=<span class="string">"阿尔提尔"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">    &lt;property name=<span class="string">"age"</span> value=<span class="string">"24"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;property name=<span class="string">"coperAddrs"</span> ref=<span class="string">"coperAddrId"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">    &lt;property name=<span class="string">"homeAddr"</span>&gt;</span><br><span class="line">        &lt;ref bean=<span class="string">"homeAddrId"</span>/&gt;</span><br><span class="line">    &lt;<span class="regexp">/property&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>bean&gt;</span><br><span class="line">&lt;!-- 引用数据--&gt;</span><br><span class="line">&lt;bean id=<span class="string">"homeAddrId"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhao.setter.Address"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"home"</span> value=<span class="string">"重庆"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">    &lt;property name=<span class="string">"tel"</span> value=<span class="string">"13993216246"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/bean&gt;</span></span><br><span class="line"><span class="regexp">&lt;bean id="coperAddrId" class="com.zhao.setter.Address"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;property name="home" value="城管"&gt;&lt;/</span>property&gt;</span><br><span class="line">    &lt;property name=<span class="string">"tel"</span> value=<span class="string">"18522536924"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/bean&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="P命名空间【了解】"><a href="#P命名空间【了解】" class="headerlink" title="P命名空间【了解】"></a>P命名空间【了解】</h4><ul>
<li>对setter方法注入进行简化，替换<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">"属性名"</span>&gt;</span><br></pre></td></tr></table></figure>
而是在&lt;bean p:属性名=”普通值” p:属性名 -ref=”引用值”&gt;</li>
<li>P命名空间使用前提必须添加命名空间<br>xmlns:p=”<a href="http://www.springframework.org/schema/p&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/p&quot;</a></li>
</ul>
<p>beans.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--    p命名空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"pesonId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.p.peson"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:pname</span>=<span class="string">"阿尔提尔"</span> <span class="attr">p:age</span>=<span class="string">"22"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:coperAddrs-ref</span>=<span class="string">"coperAddrId"</span> <span class="attr">p:homeAddr-ref</span>=<span class="string">"homeAddrId"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"homeAddrId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.p.Address"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:home</span>=<span class="string">"重庆"</span> <span class="attr">p:tel</span>=<span class="string">"13993216246"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"coperAddrId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.p.Address"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:home</span>=<span class="string">"城管"</span> <span class="attr">p:tel</span>=<span class="string">"18522536924"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="SpEL【了解】"><a href="#SpEL【了解】" class="headerlink" title="SpEL【了解】"></a>SpEL【了解】</h3><ul>
<li>对<property>进行统一编程所有的内容都是用value<property name="" value="#{表达式}">
eg：#{123} #{"jack"}
  #{beanId}          :另一个bean的引用
  #{bean.propName}   :操作属性
  #{bean.toString()} :执行方法
  #{T(类)字段|方法}   ：静态方法或字段

</li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--    </span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">peoperty</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;userId.name.toUpperCase()&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        通过另一个bean，获得属性，调用方法</span></span><br><span class="line"><span class="xml">     <span class="tag">&lt;<span class="name">peoperty</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;userId.name?.toUpperCase()&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ?.表示对象不为空，调用方法   </span></span><br><span class="line"><span class="xml">    --&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.SpEl.User"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;'阿尔提尔'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pi"</span> <span class="attr">value</span>=<span class="string">"#</span></span></span><span class="template-variable">&#123;T(java.lang.<span class="keyword">Math</span>).PI&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h3> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    集合的注入都是给&lt;peoperty&gt;添加字标签</span></span><br><span class="line"><span class="comment">    数组：&lt;array&gt;</span></span><br><span class="line"><span class="comment">    List：&lt;list&gt;</span></span><br><span class="line"><span class="comment">    Set：&lt;set&gt;</span></span><br><span class="line"><span class="comment">    Map：&lt;map&gt;  键值对&lt;entry&gt;</span></span><br><span class="line"><span class="comment">    Properties：&lt;props&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    普通数据：&lt;value&gt;</span></span><br><span class="line"><span class="comment">    引用数据：&lt;ref&gt;</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collId"</span> <span class="attr">class</span>=<span class="string">"com.zhao.coll.CollDate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arryData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DZD<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>屌丝<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>吊中吊<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"listData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DZD<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>屌丝<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>吊中吊<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"setData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>DS<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>屌丝<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>吊中吊<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"jack"</span> <span class="attr">value</span>=<span class="string">"杰克"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>kaer<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>卡尔<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"propsData"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"高富帅nao"</span>&gt;</span>嫐<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"白富美niao"</span>&gt;</span>嬲<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"男屌丝nong"</span>&gt;</span>挊<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  ``` </span><br><span class="line"></span><br><span class="line">### 装配Bean基于注解</span><br><span class="line">* 注解：就是一个类，使用@注解名称</span><br><span class="line">* 开发中:使用注解 取代XML配置文件</span><br><span class="line">1. @Component 取代 ```<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure>
<pre><code>@Component(&quot;id&quot;) 取代 ```&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;```</code></pre><ol start="2">
<li>web开发，提供3个@Component注解的衍生注解(功能一样) 取代<code>&lt;bean class=&quot;&quot;&gt;</code><br> @Repository  dao层<br> @service     service层<br> @Controller  web层</li>
<li>依赖注入  给私有字段设置 也可以给setter方法设置<br> 普通值：@value(“”)<br> 引用值：<pre><code>方式一：按照【类型】注入
        @Autowired  【自动】
方式二：按照【名称】注入1
        @Autowired 
        @Qualifier(&quot;名称&quot;)
方式三：按照【名称】注入2
        @Resource(&quot;名称&quot;)</code></pre></li>
<li>生命周期<br> 初始化：@PostConstruct<br> 销毁： @PreDestroy</li>
<li>作用域<br> @Scope(“prototype”)多例</li>
</ol>
<h5 id="注解使用前提，添加命名空间，让Spring扫描含有注解的类"><a href="#注解使用前提，添加命名空间，让Spring扫描含有注解的类" class="headerlink" title="注解使用前提，添加命名空间，让Spring扫描含有注解的类"></a>注解使用前提，添加命名空间，让Spring扫描含有注解的类</h5><p>schema命名空间</p>
<ol>
<li>默认命名空间<br> 默认 xmlns=””; &lt;标签名&gt; <bean><br> 显示：xmlns：别名=”” &lt;别名：标签名&gt; <a href="context:...." target="_blank" rel="noopener">context:....</a></li>
<li>确定schema.xsd 文件位置<br> xsl:schemaLocaltion=”名称 位置 名称2 位置2 …..”;<br> 内容都是成对的【名称 位置】</li>
</ol>
<ul>
<li>添加的分别是：</li>
</ul>
<ol>
<li>xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/context&quot;</a></li>
<li><a href="http://www.springframework.org/schema/context" target="_blank" rel="noopener">http://www.springframework.org/schema/context</a></li>
<li><a href="http://www.springframework.org/schema/context/spring-context.xsd" target="_blank" rel="noopener">http://www.springframework.org/schema/context/spring-context.xsd</a></li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;beans <span class="attribute">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">       xmlns:<span class="attribute">xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">       xmlns:<span class="attribute">context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span><br><span class="line">       xsi:<span class="attribute">schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>beans.xml配置组建扫描，扫描含有注解的类<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    组建扫描，扫描含有注解的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zhao.annotation_IOC"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>测试类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testweb</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"com/zhao/Web/beans.xml"</span>);</span><br><span class="line">        StudentAction studentAction =  applicationContext.getBean(<span class="string">"studentActionId"</span>,StudentAction<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        studentAction.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>web层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Controller</span>(<span class="string">"studentActionId"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentAction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        studentService.addStudent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>service 层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"studentDaoId"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentDao</span><span class="params">(StudentDao studentDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        studentDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>dao层<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Repository</span>(<span class="string">"studentDaoId"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dao"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
